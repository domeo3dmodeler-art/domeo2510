const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function createTestData() {
  try {
    console.log('üîß –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
    const category = await prisma.catalogCategory.create({
      data: {
        name: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏',
        path: '/doors',
        level: 0,
        sort_order: 1,
        is_active: true,
        products_count: 0
      }
    });
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${category.name} (ID: ${category.id})`);
    
    // –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const template = await prisma.importTemplate.create({
      data: {
        catalog_category_id: category.id,
        name: '–®–∞–±–ª–æ–Ω –¥–ª—è –¥–≤–µ—Ä–µ–π',
        description: '–¢–µ—Å—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ Excel',
        required_fields: JSON.stringify(['–ú–æ–¥–µ–ª—å', '–¶–≤–µ—Ç', '–®–∏—Ä–∏–Ω–∞', '–í—ã—Å–æ—Ç–∞']),
        calculator_fields: JSON.stringify(['–¶–µ–Ω–∞ –æ–ø—Ç', '–¶–µ–Ω–∞ –†–†–¶']),
        export_fields: JSON.stringify([
          '–¶–µ–Ω–∞ –æ–ø—Ç',
          '–¶–µ–Ω–∞ –†–†–¶', 
          '–ü–æ—Å—Ç–∞–≤—â–∏–∫',
          '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–≤–µ—Ä–∏ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
          '–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è',
          '–®–∏—Ä–∏–Ω–∞/–º–º',
          '–í—ã—Å–æ—Ç–∞/–º–º', 
          '–¢–æ–ª—â–∏–Ω–∞/–º–º',
          '–§–∞–±—Ä–∏–∫–∞_–¶–≤–µ—Ç/–û—Ç–¥–µ–ª–∫–∞',
          'SKU –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ',
          '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'
        ]),
        is_active: true
      }
    });
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω: ${template.name} (ID: ${template.id})`);
    
    console.log('üéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createTestData();
