const fs = require('fs');
const path = require('path');

async function optimizeDatabase() {
  console.log('üóÑÔ∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  // 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Prisma —Å—Ö–µ–º—É
  console.log('\nüìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Prisma —Å—Ö–µ–º—É...');
  
  try {
    const schemaContent = fs.readFileSync('prisma/schema.prisma', 'utf8');
    const models = [];
    const relations = [];
    const indexes = [];
    
    // –ü–∞—Ä—Å–∏–º –º–æ–¥–µ–ª–∏
    const modelMatches = schemaContent.match(/^model\s+(\w+)\s*\{[\s\S]*?\n\}/gm);
    if (modelMatches) {
      modelMatches.forEach(match => {
        const modelName = match.match(/^model\s+(\w+)/)[1];
        const fields = match.match(/^\s+(\w+)\s+[\w\[\]!?]+/gm) || [];
        models.push({
          name: modelName,
          fieldCount: fields.length
        });
      });
    }
    
    // –ü–∞—Ä—Å–∏–º —Å–≤—è–∑–∏
    const relationMatches = schemaContent.match(/@relation\([^)]+\)/g);
    if (relationMatches) {
      relationMatches.forEach(match => {
        relations.push(match);
      });
    }
    
    // –ü–∞—Ä—Å–∏–º –∏–Ω–¥–µ–∫—Å—ã
    const indexMatches = schemaContent.match(/@@index\([^)]+\)/g);
    if (indexMatches) {
      indexMatches.forEach(match => {
        indexes.push(match);
      });
    }
    
    console.log(`   üìã –ú–æ–¥–µ–ª–µ–π: ${models.length}`);
    console.log(`   üîó –°–≤—è–∑–µ–π: ${relations.length}`);
    console.log(`   üìá –ò–Ω–¥–µ–∫—Å–æ–≤: ${indexes.length}`);
    
    // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ–ª—å—à–∏–µ –º–æ–¥–µ–ª–∏
    console.log('\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ–ª—å—à–∏–µ –º–æ–¥–µ–ª–∏...');
    
    const largeModels = models.filter(model => model.fieldCount > 15);
    if (largeModels.length > 0) {
      console.log(`   ‚ö†Ô∏è –ë–æ–ª—å—à–∏–µ –º–æ–¥–µ–ª–∏ (${largeModels.length}):`);
      largeModels.forEach(model => {
        console.log(`     - ${model.name}: ${model.fieldCount} –ø–æ–ª–µ–π`);
      });
    }
    
    // 3. –°–æ–∑–¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
    console.log('\nüìá –°–æ–∑–¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º...');
    
    const indexRecommendations = [];
    
    // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ–ª–µ–π
    const commonIndexFields = [
      'email', 'phone', 'status', 'created_at', 'updated_at', 
      'client_id', 'user_id', 'product_id', 'category_id'
    ];
    
    models.forEach(model => {
      const modelContent = schemaContent.match(new RegExp(`model\\s+${model.name}\\s*\\{[\\s\\S]*?\\n\\}`, 'm'));
      if (modelContent) {
        const fields = modelContent[0].match(/^\s+(\w+)\s+[\w\[\]!?]+/gm) || [];
        const fieldNames = fields.map(field => field.trim().split(/\s+/)[0]);
        
        commonIndexFields.forEach(indexField => {
          if (fieldNames.includes(indexField)) {
            indexRecommendations.push({
              model: model.name,
              field: indexField,
              reason: '–ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –ø–æ–ª–µ –¥–ª—è –ø–æ–∏—Å–∫–∞'
            });
          }
        });
      }
    });
    
    if (indexRecommendations.length > 0) {
      console.log(`   üìá –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã (${indexRecommendations.length}):`);
      indexRecommendations.slice(0, 10).forEach(rec => {
        console.log(`     - ${rec.model}.${rec.field}: ${rec.reason}`);
      });
    }
    
    // 4. –°–æ–∑–¥–∞–µ–º SQL —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    console.log('\nüîß –°–æ–∑–¥–∞–µ–º SQL —Å–∫—Ä–∏–ø—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...');
    
    const optimizationSQL = `
-- –°–∫—Ä–∏–ø—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
-- –°–æ–∑–¥–∞–Ω: ${new Date().toISOString()}

-- 1. –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ–ª–µ–π
${indexRecommendations.map(rec => 
  `CREATE INDEX IF NOT EXISTS idx_${rec.model.toLowerCase()}_${rec.field} ON ${rec.model.toLowerCase()} (${rec.field});`
).join('\n')}

-- 2. –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∞–±–ª–∏—Ü
${models.map(model => 
  `ANALYZE ${model.name.toLowerCase()};`
).join('\n')}

-- 3. –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
-- DELETE FROM notifications WHERE created_at < datetime('now', '-30 days');
-- DELETE FROM document_history WHERE created_at < datetime('now', '-90 days');

-- 4. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
VACUUM;
`;
    
    try {
      fs.writeFileSync('database-optimization.sql', optimizationSQL);
      console.log('   üìÑ SQL —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω: database-optimization.sql');
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SQL —Å–∫—Ä–∏–ø—Ç–∞: ${error.message}`);
    }
    
    // 5. –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ë–î
    console.log('\nüìä –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ë–î...');
    
    const dbMonitoringScript = `
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function monitorDatabase() {
  console.log('üóÑÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü
    const tableStats = await prisma.$queryRaw\`
      SELECT 
        name,
        (SELECT COUNT(*) FROM sqlite_master WHERE type='table' AND name=m.name) as row_count
      FROM sqlite_master m 
      WHERE type='table' AND name NOT LIKE 'sqlite_%'
    \`;
    
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü:');
    tableStats.forEach(table => {
      console.log(\`   - \${table.name}: \${table.row_count} –∑–∞–ø–∏—Å–µ–π\`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
    const indexes = await prisma.$queryRaw\`
      SELECT name, tbl_name, sql 
      FROM sqlite_master 
      WHERE type='index' AND name NOT LIKE 'sqlite_%'
    \`;
    
    console.log(\`üìá –ò–Ω–¥–µ–∫—Å–æ–≤: \${indexes.length}\`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –ë–î
    const dbSize = await prisma.$queryRaw\`
      SELECT page_count * page_size as size_bytes
      FROM pragma_page_count(), pragma_page_size()
    \`;
    
    const sizeMB = (dbSize[0].size_bytes / 1024 / 1024).toFixed(2);
    console.log(\`üíæ –†–∞–∑–º–µ—Ä –ë–î: \${sizeMB} MB\`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ë–î:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
if (require.main === module) {
  monitorDatabase();
}

module.exports = { monitorDatabase };
`;
    
    try {
      fs.writeFileSync('database-monitor.js', dbMonitoringScript);
      console.log('   üìÑ –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ë–î —Å–æ–∑–¥–∞–Ω: database-monitor.js');
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${error.message}`);
    }
    
    // 6. –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ë–î
    const dbOptimizationReport = {
      timestamp: new Date().toISOString(),
      analysis: {
        models: models.length,
        relations: relations.length,
        indexes: indexes.length,
        largeModels: largeModels.length
      },
      recommendations: {
        indexes: indexRecommendations.slice(0, 20),
        maintenance: [
          '–†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å VACUUM –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏',
          '–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∞–±–ª–∏—Ü',
          '–£–¥–∞–ª—è—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
          '–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ë–î'
        ]
      },
      scripts: [
        'database-optimization.sql - SQL —Å–∫—Ä–∏–ø—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏',
        'database-monitor.js - –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ë–î'
      ]
    };
    
    try {
      fs.writeFileSync('database-optimization-report.json', JSON.stringify(dbOptimizationReport, null, 2));
      console.log('   üìÑ –û—Ç—á–µ—Ç –ø–æ –ë–î —Å–æ—Ö—Ä–∞–Ω–µ–Ω: database-optimization-report.json');
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: ${error.message}`);
    }
    
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Prisma —Å—Ö–µ–º—ã: ${error.message}`);
  }
  
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ë–î:');
  console.log('   üìã –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –º–æ–¥–µ–ª–∏ –∏ —Å–≤—è–∑–∏');
  console.log('   üìá –°–æ–∑–¥–∞–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º');
  console.log('   üîß –°–æ–∑–¥–∞–Ω SQL —Å–∫—Ä–∏–ø—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏');
  console.log('   üìä –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ë–î');
  
  console.log('\nüí° –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
  console.log('   1. –ó–∞–ø—É—Å—Ç–∏—Ç—å database-optimization.sql');
  console.log('   2. –†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å database-monitor.js');
  console.log('   3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
  console.log('   4. –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤');
  
  console.log('\n‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

optimizeDatabase();
