const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function findPETBeigeCombinations() {
  console.log('üîç –ü–û–ò–°–ö –ö–û–ú–ë–ò–ù–ê–¶–ò–ô –ü–≠–¢ + –ë–ï–ñ–ï–í–´–ô');
  console.log('='.repeat(50));
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–≤–µ—Ä–∏
  const allProducts = await prisma.product.findMany({
    where: {
      catalog_category: {
        name: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏'
      }
    },
    select: {
      id: true,
      sku: true,
      name: true,
      properties_data: true
    }
  });
  
  console.log(`üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${allProducts.length}`);
  
  // –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã —Å –∫–æ–º–±–∏–Ω–∞—Ü–∏–µ–π –ü–≠–¢ + –ë–µ–∂–µ–≤—ã–π
  const petBeigeProducts = allProducts.filter(product => {
    const properties = product.properties_data ?
      (typeof product.properties_data === 'string' ? JSON.parse(product.properties_data) : product.properties_data) : {};
    
    const finish = properties['–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è'];
    const color = properties['Domeo_–¶–≤–µ—Ç'];
    
    return finish === '–ü–≠–¢' && color === '–ë–µ–∂–µ–≤—ã–π';
  });
  
  console.log(`\nüéØ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ü–≠–¢ + –ë–µ–∂–µ–≤—ã–π: ${petBeigeProducts.length}`);
  
  if (petBeigeProducts.length === 0) {
    console.log('‚ùå –¢–æ–≤–∞—Ä—ã —Å –∫–æ–º–±–∏–Ω–∞—Ü–∏–µ–π –ü–≠–¢ + –ë–µ–∂–µ–≤—ã–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
    await prisma.$disconnect();
    return;
  }
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–æ–¥–µ–ª—è–º
  const modelGroups = {};
  
  petBeigeProducts.forEach(product => {
    const properties = product.properties_data ?
      (typeof product.properties_data === 'string' ? JSON.parse(product.properties_data) : product.properties_data) : {};
    
    const model = properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'];
    const style = properties['Domeo_–°—Ç–∏–ª—å Web'];
    const width = properties['–®–∏—Ä–∏–Ω–∞/–º–º'];
    const height = properties['–í—ã—Å–æ—Ç–∞/–º–º'];
    const price = properties['–¶–µ–Ω–∞ –†–†–¶'];
    
    const key = `${style}|${model}`;
    
    if (!modelGroups[key]) {
      modelGroups[key] = {
        style,
        model,
        sizes: new Set(),
        products: []
      };
    }
    
    modelGroups[key].sizes.add(`${width}√ó${height}`);
    modelGroups[key].products.push({
      sku: product.sku,
      width,
      height,
      price
    });
  });
  
  console.log('\nüìã –ú–û–î–ï–õ–ò –° –ö–û–ú–ë–ò–ù–ê–¶–ò–ï–ô –ü–≠–¢ + –ë–ï–ñ–ï–í–´–ô:');
  console.log('-'.repeat(60));
  
  Object.values(modelGroups).forEach((group, index) => {
    console.log(`${index + 1}. ${group.style} | ${group.model}`);
    console.log(`   –†–∞–∑–º–µ—Ä—ã: ${Array.from(group.sizes).sort().join(', ')}`);
    console.log(`   –¢–æ–≤–∞—Ä–æ–≤: ${group.products.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–∞–∑–º–µ—Ä 700√ó2100
    const has700x2100 = group.sizes.has('700√ó2100');
    console.log(`   –ï—Å—Ç—å 700√ó2100: ${has700x2100 ? '‚úÖ' : '‚ùå'}`);
    
    if (has700x2100) {
      const product700x2100 = group.products.find(p => p.width === '700' && p.height === '2100');
      console.log(`   –¶–µ–Ω–∞ 700√ó2100: ${product700x2100?.price || 'N/A'}`);
    }
    
    console.log('');
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –º–æ–¥–µ–ª—å —Å –ü–≠–¢ + –ë–µ–∂–µ–≤—ã–π + 700√ó2100
  const hasTargetCombination = Object.values(modelGroups).some(group => 
    group.sizes.has('700√ó2100')
  );
  
  console.log('üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–û–ò–°–ö–ê:');
  console.log('-'.repeat(30));
  console.log(`–ö–æ–º–±–∏–Ω–∞—Ü–∏—è –ü–≠–¢ + –ë–µ–∂–µ–≤—ã–π + 700√ó2100: ${hasTargetCombination ? '‚úÖ –ù–ê–ô–î–ï–ù–ê' : '‚ùå –ù–ï –ù–ê–ô–î–ï–ù–ê'}`);
  
  if (!hasTargetCombination) {
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('1. –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä —Å –∫–æ–º–±–∏–Ω–∞—Ü–∏–µ–π –ü–≠–¢ + –ë–µ–∂–µ–≤—ã–π + 700√ó2100 –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
    console.log('2. –ò–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π');
    console.log('3. –ò–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã');
  }
  
  await prisma.$disconnect();
}

findPETBeigeCombinations().catch(console.error);
