const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function testFindExistingDocument() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...');
    
    const clientId = 'cmh1gvnq500046z6i6ivwa3os';
    const totalAmount = 50000;
    const items = [{id: 'test', type: 'door', model: 'DomeoDoors_Base_1', qty: 1, unitPrice: 50000}];
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ö–ü
    console.log('üìã –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ö–ü...');
    const existingQuote = await prisma.quote.findFirst({
      where: {
        parent_document_id: null,
        cart_session_id: null,
        client_id: clientId,
        total_amount: totalAmount
      },
      orderBy: {
        created_at: 'desc'
      }
    });
    
    if (existingQuote) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ö–ü:', existingQuote.number);
    } else {
      console.log('‚ùå –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ö–ü –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å—á–µ—Ç–∞
    console.log('üí∞ –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—á–µ—Ç–∞...');
    const existingInvoice = await prisma.invoice.findFirst({
      where: {
        parent_document_id: null,
        cart_session_id: null,
        client_id: clientId,
        total_amount: totalAmount
      },
      orderBy: {
        created_at: 'desc'
      }
    });
    
    if (existingInvoice) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—á–µ—Ç:', existingInvoice.number);
    } else {
      console.log('‚ùå –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testFindExistingDocument();
