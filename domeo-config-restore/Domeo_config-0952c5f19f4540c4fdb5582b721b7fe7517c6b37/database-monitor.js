
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function monitorDatabase() {
  console.log('üóÑÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü
    const tableStats = await prisma.$queryRaw`
      SELECT 
        name,
        (SELECT COUNT(*) FROM sqlite_master WHERE type='table' AND name=m.name) as row_count
      FROM sqlite_master m 
      WHERE type='table' AND name NOT LIKE 'sqlite_%'
    `;
    
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü:');
    tableStats.forEach(table => {
      console.log(`   - ${table.name}: ${table.row_count} –∑–∞–ø–∏—Å–µ–π`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
    const indexes = await prisma.$queryRaw`
      SELECT name, tbl_name, sql 
      FROM sqlite_master 
      WHERE type='index' AND name NOT LIKE 'sqlite_%'
    `;
    
    console.log(`üìá –ò–Ω–¥–µ–∫—Å–æ–≤: ${indexes.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –ë–î
    const dbSize = await prisma.$queryRaw`
      SELECT page_count * page_size as size_bytes
      FROM pragma_page_count(), pragma_page_size()
    `;
    
    const sizeMB = (dbSize[0].size_bytes / 1024 / 1024).toFixed(2);
    console.log(`üíæ –†–∞–∑–º–µ—Ä –ë–î: ${sizeMB} MB`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ë–î:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
if (require.main === module) {
  monitorDatabase();
}

module.exports = { monitorDatabase };
