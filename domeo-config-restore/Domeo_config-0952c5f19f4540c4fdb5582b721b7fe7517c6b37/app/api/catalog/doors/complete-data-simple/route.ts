import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const style = searchParams.get('style');

    console.log('üîç API complete-data-simple - –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∏–ª—è:', style || '–≤—Å–µ');

    // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î
    const products = await prisma.product.findMany({
      where: {
        catalog_category: {
          name: "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
        },
        is_active: true
      },
      select: {
        id: true,
        sku: true,
        properties_data: true
      },
      take: 100 // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    });

    console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î`);

    // –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    const models: any[] = [];
    const styles = new Set<string>();

    products.forEach(product => {
      try {
        const properties = product.properties_data ?
          (typeof product.properties_data === 'string' ? JSON.parse(product.properties_data) : product.properties_data) : {};

        const model = properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'];
        const productStyle = properties['Domeo_–°—Ç–∏–ª—å Web'];
        const productPhotos = properties.photos || [];

        if (model && productStyle) {
          // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç–∏–ª—é –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
          if (style && productStyle !== style) {
            return;
          }

          styles.add(productStyle);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –º–æ–¥–µ–ª—å
          const existingModel = models.find(m => m.model === model);
          if (!existingModel) {
            models.push({
              model,
              style: productStyle,
              photo: productPhotos.length > 0 ? productPhotos[0] : null,
              options: {
                finishes: [],
                colors: [],
                types: [],
                widths: [],
                heights: []
              }
            });
          }
        }
      } catch (error) {
        console.warn(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ ${product.sku}:`, error);
      }
    });

    const result = {
      models: models.sort((a, b) => a.model.localeCompare(b.model)),
      totalModels: models.length,
      styles: Array.from(styles),
      timestamp: Date.now()
    };

    console.log(`‚úÖ API complete-data-simple - –Ω–∞–π–¥–µ–Ω–æ ${models.length} –º–æ–¥–µ–ª–µ–π`);

    return NextResponse.json({
      ok: true,
      ...result
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API complete-data-simple:', error);
    return NextResponse.json(
      { error: 'Failed to fetch complete data', details: (error as Error).message },
      { status: 500 }
    );
  }
}
