import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—ç—à –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
const photosCache = new Map<string, { photos: string[], timestamp: number }>();
const CACHE_TTL = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç

// –ö—ç—à –¥–ª—è –º–æ–¥–µ–ª–µ–π —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
const modelsCache = new Map<string, { model: string, photos: string[], timestamp: number }>();
const MODELS_CACHE_TTL = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç

export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const model = searchParams.get('model');
    const style = searchParams.get('style');

    if (!model) {
      return NextResponse.json(
        { error: "–ù–µ —É–∫–∞–∑–∞–Ω–∞ –º–æ–¥–µ–ª—å" },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    const cacheKey = `${model}_${style || 'all'}`;
    const cached = photosCache.get(cacheKey);
    if (cached && Date.now() - cached.timestamp < CACHE_TTL) {
      return NextResponse.json({
        ok: true,
        model,
        style,
        photos: cached.photos,
        count: cached.photos.length,
        cached: true
      });
    }

    console.log('üîç API photos-optimized - –ø–æ–∏—Å–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –º–æ–¥–µ–ª–∏:', model);

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –º–æ–¥–µ–ª–µ–π
    let photos: string[] = [];
    
    // –ò—â–µ–º –≤ –∫—ç—à–µ –º–æ–¥–µ–ª–µ–π
    for (const [cachedModel, cachedData] of modelsCache.entries()) {
      if (Date.now() - cachedData.timestamp < MODELS_CACHE_TTL) {
        if (cachedModel === model || cachedModel.includes(model)) {
          photos = cachedData.photos;
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ –º–æ–¥–µ–ª–µ–π: ${cachedModel} —Å ${photos.length} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏`);
          break;
        }
      }
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ, –∏—â–µ–º –≤ –ë–î
    if (photos.length === 0) {
      console.log('üì¶ API photos-optimized - –ø–æ–∏—Å–∫ –≤ –ë–î');
      
      // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: –∏—â–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
      const products = await prisma.product.findMany({
        where: {
          catalog_category: {
            name: "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
          },
          properties_data: {
            not: null,
            contains: '"photos":'
          }
        },
        select: {
          id: true,
          sku: true,
          name: true,
          properties_data: true
        },
        take: 100, // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        orderBy: {
          created_at: 'desc'
        }
      });

      console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏`);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
      const seenArticles = new Set<string>();
      
      for (const product of products) {
        try {
          const properties = typeof product.properties_data === 'string' 
            ? JSON.parse(product.properties_data) 
            : product.properties_data;

          const productModel = properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'];
          const productArticle = properties['–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'];
          const productPhotos = properties.photos || [];

          // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
          if (productModel === model && productPhotos.length > 0) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –º–æ–¥–µ–ª—å ${model} —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º ${productArticle} –∏ ${productPhotos.length} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏`);

            if (productArticle && !seenArticles.has(productArticle)) {
              seenArticles.add(productArticle);
              photos.push(productPhotos[0]);
            }
            break;
          }
        } catch (error) {
          console.warn(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ ${product.sku}:`, error);
        }
      }

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ
      if (photos.length === 0) {
        for (const product of products) {
          try {
            const properties = typeof product.properties_data === 'string' 
              ? JSON.parse(product.properties_data) 
              : product.properties_data;

            const productModel = properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'];
            const productArticle = properties['–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'];
            const productPhotos = properties.photos || [];

            // –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if (productModel && productModel.includes(model) && productPhotos.length > 0) {
              console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –º–æ–¥–µ–ª—å ${model} (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ) —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º ${productArticle}`);

              if (productArticle && !seenArticles.has(productArticle)) {
                seenArticles.add(productArticle);
                photos.push(productPhotos[0]);
              }
              break;
            }
          } catch (error) {
            console.warn(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ ${product.sku}:`, error);
          }
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –º–æ–¥–µ–ª–µ–π
      if (photos.length > 0) {
        modelsCache.set(model, {
          model,
          photos,
          timestamp: Date.now()
        });
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    photosCache.set(cacheKey, {
      photos,
      timestamp: Date.now()
    });

    return NextResponse.json({
      ok: true,
      model,
      style,
      photos,
      count: photos.length,
      cached: false
    });

  } catch (error) {
    console.error('‚ùå API photos-optimized - –û–®–ò–ë–ö–ê:', error);
    return NextResponse.json(
      { error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π", details: (error as Error).message },
      { status: 500 }
    );
  }
}
