import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

const VALID_STATUSES = ['PENDING', 'ORDERED', 'IN_PRODUCTION', 'READY', 'COMPLETED', 'CANCELLED'];

export async function PUT(req: NextRequest, { params }: { params: Promise<{ id: string }> }) {
  try {
    const { id } = await params;
    const body = await req.json();
    const { status, notes } = body;
    
    console.log('üîÑ API: Updating supplier order status:', { id, status, body });

    if (!status || !VALID_STATUSES.includes(status)) {
      return NextResponse.json({ 
        error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å', 
        details: { 
          validStatuses: VALID_STATUSES, 
          providedStatus: status 
        } 
      }, { status: 400 });
    }

    const existingSupplierOrder = await prisma.supplierOrder.findUnique({
      where: { id },
      select: { id: true, status: true }
    });
    
    console.log('üîç API: Found supplier order:', existingSupplierOrder);

    if (!existingSupplierOrder) {
      console.log('‚ùå API: Supplier order not found:', id);
      return NextResponse.json({ error: '–ó–∞–∫–∞–∑ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }

    const updateData: any = { status };
    if (notes !== undefined) {
      updateData.notes = notes;
    }
    
    console.log('üíæ API: Updating supplier order with data:', updateData);

    const updatedSupplierOrder = await prisma.supplierOrder.update({
      where: { id },
      data: updateData
    });
    
    console.log('‚úÖ API: Supplier order updated successfully:', updatedSupplierOrder);

    // –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    let parentUser = null;
    if (updatedSupplierOrder.parent_document_id) {
      // –ò—â–µ–º –∑–∞–∫–∞–∑ –Ω–∞–ø—Ä—è–º—É—é –ø–æ parent_document_id
      const order = await prisma.order.findUnique({
        where: { id: updatedSupplierOrder.parent_document_id },
        include: { client: true }
      });
      
      if (order) {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ created_by
        parentUser = await prisma.user.findUnique({
          where: { id: order.created_by }
        });
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, "system"), –∏—â–µ–º –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ç–æ—Ä–∞
        if (!parentUser) {
          parentUser = await prisma.user.findFirst({
            where: { role: 'COMPLECTATOR' }
          });
        }
      } else {
        // –ï—Å–ª–∏ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç, –∏—â–µ–º —Å—á–µ—Ç
        const invoice = await prisma.invoice.findFirst({
          where: { parent_document_id: updatedSupplierOrder.parent_document_id }
        });
        
        if (invoice) {
          // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ created_by
          parentUser = await prisma.user.findUnique({
            where: { id: invoice.created_by }
          });
        }
      }
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ –≤—Å–µ–º–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
    if (parentUser) {
      try {
        await synchronizeDocumentStatuses(updatedSupplierOrder.parent_document_id, status);
        console.log('‚úÖ API: All document statuses synchronized');

        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ç–æ—Ä–∞
        const statusLabels: Record<string, string> = {
          'ORDERED': '–ó–∞–∫–∞–∑ —Ä–∞–∑–º–µ—â–µ–Ω',
          'READY': '–ü–æ–ª—É—á–µ–Ω –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
          'COMPLETED': '–ò—Å–ø–æ–ª–Ω–µ–Ω'
        };

        const statusLabel = statusLabels[status] || status;
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const order = await prisma.order.findUnique({
          where: { id: updatedSupplierOrder.parent_document_id },
          include: { client: true }
        });
        
        if (order && order.client) {
          // –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å—á–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
          let invoiceInfo = '';
          if (order.parent_document_id) {
            const invoice = await prisma.invoice.findUnique({
              where: { id: order.parent_document_id },
              select: { number: true, status: true }
            });
            
            if (invoice) {
              // –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ —Å—á–µ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
              const invoiceStatusLabels: Record<string, string> = {
                'DRAFT': '–ß–µ—Ä–Ω–æ–≤–∏–∫',
                'SENT': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
                'PAID': '–û–ø–ª–∞—á–µ–Ω',
                'ORDERED': '–ó–∞–∫–∞–∑ —Ä–∞–∑–º–µ—â–µ–Ω',
                'READY': '–ü–æ–ª—É—á–µ–Ω –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
                'COMPLETED': '–ò—Å–ø–æ–ª–Ω–µ–Ω',
                'CANCELLED': '–û—Ç–º–µ–Ω–µ–Ω'
              };
              
              const invoiceStatusLabel = invoiceStatusLabels[invoice.status] || invoice.status;
              invoiceInfo = `–°—á–µ—Ç ${invoice.number} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å "${invoiceStatusLabel}"`;
            }
          }
          
          await prisma.notification.create({
            data: {
              user_id: parentUser.id,
              client_id: order.client.id,
              document_id: order.parent_document_id, // –ü–µ—Ä–µ–¥–∞–µ–º ID —Å—á–µ—Ç–∞, –∞ –Ω–µ –∑–∞–∫–∞–∑–∞
              type: 'STATUS_CHANGE',
              title: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞',
              message: invoiceInfo,
              is_read: false
            }
          });
          
          console.log('‚úÖ API: Notification sent to complettator');
        } else {
          console.log('‚ö†Ô∏è API: Could not find order or client for notification');
        }
      } catch (notificationError) {
        console.error('‚ö†Ô∏è API: Error sending notification:', notificationError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
      }
    }

    return NextResponse.json({
      success: true,
      message: `–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${status}"`,
      supplierOrder: {
        id: updatedSupplierOrder.id,
        status: updatedSupplierOrder.status
      }
    });
  } catch (error: any) {
    console.error('‚ùå API: Error updating supplier order status:', error);
    console.error('‚ùå API: Error details:', { 
      message: error.message, 
      stack: error.stack, 
      name: error.name 
    });
    return NextResponse.json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞' 
    }, { status: 500 });
  }
}

export async function GET(req: NextRequest, { params }: { params: Promise<{ id: string }> }) {
  try {
    const { id } = await params;
    
    const supplierOrder = await prisma.supplierOrder.findUnique({
      where: { id },
      select: { 
        id: true, 
        status: true, 
        supplier_name: true, 
        updated_at: true 
      }
    });
    
    if (!supplierOrder) {
      return NextResponse.json({ error: '–ó–∞–∫–∞–∑ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }
    
    return NextResponse.json({
      id: supplierOrder.id,
      supplier_name: supplierOrder.supplier_name,
      status: supplierOrder.status,
      updated_at: supplierOrder.updated_at
    });
  } catch (error: any) {
    console.error('‚ùå API: Error fetching supplier order status:', error);
    return NextResponse.json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞' 
    }, { status: 500 });
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
async function synchronizeDocumentStatuses(orderId: string, supplierOrderStatus: string) {
  try {
    console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId} —Å —Å—Ç–∞—Ç—É—Å–æ–º ${supplierOrderStatus}`);

    // –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É –Ω–∞ —Å—Ç–∞—Ç—É—Å—ã –¥—Ä—É–≥–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    const statusMapping: Record<string, { order: string; invoice: string; quote: string }> = {
      'ORDERED': {
        order: 'CONFIRMED',
        invoice: 'ORDERED', 
        quote: 'ACCEPTED'
      },
      'IN_PRODUCTION': {
        order: 'IN_PRODUCTION',
        invoice: 'IN_PRODUCTION',
        quote: 'ACCEPTED'
      },
      'READY': {
        order: 'READY',
        invoice: 'READY',
        quote: 'ACCEPTED'
      },
      'COMPLETED': {
        order: 'COMPLETED',
        invoice: 'COMPLETED',
        quote: 'ACCEPTED'
      },
      'CANCELLED': {
        order: 'CANCELLED',
        invoice: 'CANCELLED',
        quote: 'REJECTED'
      }
    };

    const mappedStatuses = statusMapping[supplierOrderStatus];
    if (!mappedStatuses) {
      console.log(`‚ö†Ô∏è –ù–µ—Ç –º–∞–ø–ø–∏–Ω–≥–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ ${supplierOrderStatus}`);
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏ –µ–≥–æ —Å–≤—è–∑–∏
    const order = await prisma.order.findUnique({
      where: { id: orderId },
      select: {
        id: true,
        parent_document_id: true,
        cart_session_id: true,
        client_id: true
      }
    });

    if (!order) {
      console.log(`‚ùå –ó–∞–∫–∞–∑ ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∞–º–æ–≥–æ –∑–∞–∫–∞–∑–∞
    await prisma.order.update({
      where: { id: orderId },
      data: { 
        status: mappedStatuses.order,
        updated_at: new Date()
      }
    });
    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${orderId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${mappedStatuses.order}`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å—á–µ—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (order.parent_document_id) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ parent_document_id —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å—á–µ—Ç
      const invoice = await prisma.invoice.findUnique({
        where: { id: order.parent_document_id },
        select: { id: true, number: true, status: true }
      });
      
      if (invoice) {
        await prisma.invoice.update({
          where: { id: invoice.id },
          data: { 
            status: mappedStatuses.invoice,
            updated_at: new Date()
          }
        });
        console.log(`‚úÖ –°—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞ ${invoice.number} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${mappedStatuses.invoice}`);
      } else {
        console.log(`‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç ${order.parent_document_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—á–µ—Ç–æ–º`);
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ö–ü (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (order.parent_document_id) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ parent_document_id —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ö–ü
      const quote = await prisma.quote.findUnique({
        where: { id: order.parent_document_id },
        select: { id: true, number: true, status: true }
      });
      
      if (quote) {
        await prisma.quote.update({
          where: { id: quote.id },
          data: { 
            status: mappedStatuses.quote,
            updated_at: new Date()
          }
        });
        console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –ö–ü ${quote.number} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${mappedStatuses.quote}`);
      } else {
        console.log(`‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç ${order.parent_document_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ö–ü`);
      }
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—â–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ cart_session_id
    if (order.cart_session_id) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å—á–µ—Ç–∞ —Å —Ç–æ–π –∂–µ —Å–µ—Å—Å–∏–µ–π –∫–æ—Ä–∑–∏–Ω—ã
      const invoiceUpdateResult = await prisma.invoice.updateMany({
        where: { 
          cart_session_id: order.cart_session_id,
          id: { not: order.parent_document_id || '' } // –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç
        },
        data: { 
          status: mappedStatuses.invoice,
          updated_at: new Date()
        }
      });
      
      if (invoiceUpdateResult.count > 0) {
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${invoiceUpdateResult.count} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—á–µ—Ç–æ–≤ –ø–æ cart_session_id`);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –ö–ü —Å —Ç–æ–π –∂–µ —Å–µ—Å—Å–∏–µ–π –∫–æ—Ä–∑–∏–Ω—ã
      const quoteUpdateResult = await prisma.quote.updateMany({
        where: { 
          cart_session_id: order.cart_session_id,
          id: { not: order.parent_document_id || '' } // –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ö–ü
        },
        data: { 
          status: mappedStatuses.quote,
          updated_at: new Date()
        }
      });
      
      if (quoteUpdateResult.count > 0) {
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${quoteUpdateResult.count} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ö–ü –ø–æ cart_session_id`);
      }
    }

    console.log(`üéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤:', error);
    throw error;
  }
}
