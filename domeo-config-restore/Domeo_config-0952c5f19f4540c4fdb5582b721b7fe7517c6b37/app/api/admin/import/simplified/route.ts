import { NextRequest, NextResponse } from "next/server";
import * as XLSX from 'xlsx';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç –±–µ–∑ –º–∞–ø–ø–∏–Ω–≥–∞
export async function POST(req: NextRequest) {
    console.log('üöÄ –£–ü–†–û–©–ï–ù–ù–´–ô –ò–ú–ü–û–†–¢ –ë–ï–ó –ú–ê–ü–ü–ò–ù–ì–ê');
    console.log('==================================');
    
    try {
        const formData = await req.formData();
        const file = formData.get('file') as File;
        const categoryId = formData.get('category') as string;
        
        if (!file || !categoryId) {
            return NextResponse.json(
                { error: '–§–∞–π–ª –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
                { status: 400 }
            );
        }

        console.log(`üìÅ –§–∞–π–ª: ${file.name}`);
        console.log(`üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryId}`);

        // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        const buffer = await file.arrayBuffer();
        const workbook = XLSX.read(buffer, { type: 'array' });
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];
        const data = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

        if (data.length === 0) {
            return NextResponse.json(
                { error: '–§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö' },
                { status: 400 }
            );
        }

        // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–æ–Ω–∏ –∂–µ –ø–æ–ª—è —à–∞–±–ª–æ–Ω–∞)
        const headers = data[0] as string[];
        const rows = data.slice(1) as any[][];

        console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ (${headers.length}):`);
        headers.forEach((header, index) => {
            console.log(`   ${index + 1}. "${header}"`);
        });

        console.log(`üìä –°—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: ${rows.length}`);

        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        const category = await prisma.catalogCategory.findUnique({
            where: { id: categoryId }
        });

        if (!category) {
            return NextResponse.json(
                { error: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' },
                { status: 404 }
            );
        }

        console.log(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞–π–¥–µ–Ω–∞: ${category.name}`);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        const products = [];
        const errors = [];

        for (let i = 0; i < rows.length; i++) {
            const row = rows[i];
            
            if (row.length === 0 || row.every(cell => !cell)) {
                console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É ${i + 2}`);
                continue;
            }

            console.log(`\nüì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É ${i + 2}:`);
            console.log(`   –î–∞–Ω–Ω—ã–µ: ${row.slice(0, 5).join(', ')}...`);

            try {
                // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
                const product = {
                    sku: '',
                    name: '',
                    catalog_category_id: categoryId,
                    properties_data: {},
                    base_price: 0,
                    currency: 'RUB',
                    stock_quantity: 0,
                    is_active: true
                };

                // –ó–∞–≥–æ–ª–æ–≤–∫–∏ Excel = –ü–æ–ª—è —à–∞–±–ª–æ–Ω–∞ (–ø—Ä—è–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ)
                headers.forEach((header, headerIndex) => {
                    if (row[headerIndex] !== undefined && row[headerIndex] !== null && row[headerIndex] !== '') {
                        product.properties_data[header] = row[headerIndex];
                        console.log(`   ${header}: ${row[headerIndex]}`);
                    }
                });

                // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
                // SKU - –æ–±—ã—á–Ω–æ –≤ –∫–æ–ª–æ–Ω–∫–µ C (–∏–Ω–¥–µ–∫—Å 2)
                if (row[2]) {
                    product.sku = row[2].toString().trim();
                } else {
                    product.sku = `AUTO-${i + 1}`;
                }

                // –ù–∞–∑–≤–∞–Ω–∏–µ - –æ–±—ã—á–Ω–æ –≤ –∫–æ–ª–æ–Ω–∫–µ D (–∏–Ω–¥–µ–∫—Å 3)
                if (row[3]) {
                    product.name = row[3].toString().trim();
                } else {
                    product.name = '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
                }

                // –ò—â–µ–º —Ü–µ–Ω—É –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
                const priceHeaders = headers.filter(h => 
                    h && h.toLowerCase().includes('—Ü–µ–Ω–∞')
                );
                
                if (priceHeaders.length > 0) {
                    const priceHeader = priceHeaders[0];
                    const priceIndex = headers.indexOf(priceHeader);
                    const priceValue = row[priceIndex];
                    
                    if (priceValue) {
                        const price = parseFloat(priceValue.toString().replace(/[^\d.,]/g, '').replace(',', '.'));
                        if (!isNaN(price)) {
                            product.base_price = price;
                            console.log(`   üí∞ –¶–µ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞: ${price} —Ä—É–±.`);
                        }
                    }
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                if (!product.name || product.name === '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è') {
                    errors.push(`–°—Ç—Ä–æ–∫–∞ ${i + 2}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞`);
                    continue;
                }

                if (Object.keys(product.properties_data).length === 0) {
                    errors.push(`–°—Ç—Ä–æ–∫–∞ ${i + 2}: –¢–æ–≤–∞—Ä –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–≤–æ–π—Å—Ç–≤`);
                    continue;
                }

                products.push(product);
                console.log(`   ‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω: ${product.name} (${product.sku})`);

            } catch (error) {
                console.error(`   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ ${i + 2}:`, error);
                errors.push(`–°—Ç—Ä–æ–∫–∞ ${i + 2}: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ - ${error.message}`);
            }
        }

        console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–†–ê–ë–û–¢–ö–ò:`);
        console.log(`   –¢–æ–≤–∞—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${products.length}`);
        console.log(`   –û—à–∏–±–æ–∫: ${errors.length}`);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        let savedCount = 0;
        const savedProducts = [];

        for (const product of products) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º SKU
                const existingProduct = await prisma.product.findUnique({
                    where: { sku: product.sku }
                });

                if (existingProduct) {
                    console.log(`‚ö†Ô∏è –¢–æ–≤–∞—Ä —Å SKU ${product.sku} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º`);
                    
                    const updatedProduct = await prisma.product.update({
                        where: { sku: product.sku },
                        data: {
                            name: product.name,
                            properties_data: JSON.stringify(product.properties_data),
                            base_price: product.base_price,
                            updated_at: new Date()
                        }
                    });
                    
                    savedProducts.push(updatedProduct);
                } else {
                    console.log(`‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä: ${product.name}`);
                    
                    const newProduct = await prisma.product.create({
                        data: {
                            sku: product.sku,
                            name: product.name,
                            catalog_category_id: product.catalog_category_id,
                            properties_data: JSON.stringify(product.properties_data),
                            base_price: product.base_price,
                            currency: product.currency,
                            stock_quantity: product.stock_quantity,
                            is_active: product.is_active
                        }
                    });
                    
                    savedProducts.push(newProduct);
                }
                
                savedCount++;
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ${product.name}:`, error);
                errors.push(`–¢–æ–≤–∞—Ä "${product.name}": –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - ${error.message}`);
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categoryProductsCount = await prisma.product.count({
            where: { 
                catalog_category_id: categoryId,
                is_active: true 
            }
        });

        await prisma.catalogCategory.update({
            where: { id: categoryId },
            data: { 
                products_count: categoryProductsCount,
                updated_at: new Date()
            }
        });

        console.log(`\nüéâ –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù:`);
        console.log(`   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${savedCount}`);
        console.log(`   –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryProductsCount}`);
        console.log(`   –û—à–∏–±–æ–∫: ${errors.length}`);

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∏–º–ø–æ—Ä—Ç–∞
        await prisma.importHistory.create({
            data: {
                catalog_category_id: categoryId,
                filename: file.name,
                file_size: file.size,
                imported_count: savedCount,
                error_count: errors.length,
                status: errors.length > 0 ? 'partial' : 'completed',
                errors: JSON.stringify(errors),
                import_data: JSON.stringify({
                    headers: headers,
                    total_rows: rows.length,
                    processed_rows: products.length,
                    saved_rows: savedCount
                })
            }
        });

        return NextResponse.json({
            success: true,
            message: '–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ',
            data: {
                filename: file.name,
                category: category.name,
                headers: headers,
                total_rows: rows.length,
                processed_rows: products.length,
                saved_rows: savedCount,
                errors: errors,
                products_preview: savedProducts.slice(0, 5).map(p => ({
                    id: p.id,
                    sku: p.sku,
                    name: p.name,
                    base_price: p.base_price
                }))
            }
        });

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
        return NextResponse.json(
            { 
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞',
                details: error.message 
            },
            { status: 500 }
        );
    } finally {
        await prisma.$disconnect();
    }
}

// GET - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º –∏–º–ø–æ—Ä—Ç–µ
export async function GET(req: NextRequest) {
    return NextResponse.json({
        ok: true,
        message: "–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π API –∏–º–ø–æ—Ä—Ç–∞ –±–µ–∑ –º–∞–ø–ø–∏–Ω–≥–∞",
        description: "–ó–∞–≥–æ–ª–æ–≤–∫–∏ Excel = –ü–æ–ª—è —à–∞–±–ª–æ–Ω–∞ (–ø—Ä—è–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ)",
        usage: "POST –∑–∞–ø—Ä–æ—Å —Å FormData: file, category",
        features: [
            "–ü—Ä—è–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ Excel –∏ –ø–æ–ª–µ–π —à–∞–±–ª–æ–Ω–∞",
            "–ù–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞",
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã",
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è SKU",
            "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤",
            "–ü–æ–¥—Å—á–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        ],
        example: {
            method: "POST",
            body: "FormData —Å –ø–æ–ª—è–º–∏: file (Excel —Ñ–∞–π–ª), category (ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)"
        }
    });
}
