import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

// GET /api/documents/[id]/children - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
export async function GET(req: NextRequest, { params }: { params: Promise<{ id: string }> }) {
  try {
    const { id } = await params;

    console.log(`üîç –ü–æ–ª—É—á–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è ${id}`);

    const children = [];

    // –ò—â–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤–æ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    const [quotes, invoices, orders, supplierOrders] = await Promise.all([
      prisma.quote.findMany({
        where: { parent_document_id: id },
        include: { client: { select: { firstName: true, lastName: true } } },
        orderBy: { created_at: 'desc' }
      }),
      prisma.invoice.findMany({
        where: { parent_document_id: id },
        include: { client: { select: { firstName: true, lastName: true } } },
        orderBy: { created_at: 'desc' }
      }),
      prisma.order.findMany({
        where: { parent_document_id: id },
        include: { client: { select: { firstName: true, lastName: true } } },
        orderBy: { created_at: 'desc' }
      }),
      prisma.supplierOrder.findMany({
        where: { parent_document_id: id },
        orderBy: { created_at: 'desc' }
      })
    ]);

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    children.push(
      ...quotes.map(doc => ({ ...doc, documentType: 'quote' })),
      ...invoices.map(doc => ({ ...doc, documentType: 'invoice' })),
      ...orders.map(doc => ({ ...doc, documentType: 'order' })),
      ...supplierOrders.map(doc => ({ ...doc, documentType: 'supplier_order' }))
    );

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${children.length} –¥–æ—á–µ—Ä–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`);

    return NextResponse.json({
      success: true,
      documents: children,
      counts: {
        quotes: quotes.length,
        invoices: invoices.length,
        orders: orders.length,
        supplier_orders: supplierOrders.length
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—á–µ—Ä–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—á–µ—Ä–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤' },
      { status: 500 }
    );
  }
}
