import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

/**
 * üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
 */
export async function POST(req: NextRequest) {
  try {
    const config = await req.json();
    
    if (!config.name) {
      return NextResponse.json(
        { error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' },
        { status: 400 }
      );
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    const calculatorConfig = await prisma.calculatorConfig.create({
      data: {
        name: config.name,
        description: config.description || '',
        config: JSON.stringify(config),
        is_active: true,
        created_at: new Date(),
        updated_at: new Date()
      }
    });

    return NextResponse.json({
      success: true,
      id: calculatorConfig.id,
      message: '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ'
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞' },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}

/**
 * üìã –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤
 */
export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const id = searchParams.get('id');

    if (id) {
      // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
      const calculator = await prisma.calculatorConfig.findUnique({
        where: { id }
      });

      if (!calculator) {
        return NextResponse.json(
          { error: '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' },
          { status: 404 }
        );
      }

      return NextResponse.json({
        success: true,
        calculator: {
          id: calculator.id,
          name: calculator.name,
          description: calculator.description,
          config: JSON.parse(calculator.config),
          isActive: calculator.is_active,
          createdAt: calculator.created_at,
          updatedAt: calculator.updated_at
        }
      });
    } else {
      // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã
      const calculators = await prisma.calculatorConfig.findMany({
        where: { is_active: true },
        orderBy: { created_at: 'desc' },
        select: {
          id: true,
          name: true,
          description: true,
          created_at: true,
          updated_at: true
        }
      });

      return NextResponse.json({
        success: true,
        calculators
      });
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤' },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}

/**
 * ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
 */
export async function PUT(req: NextRequest) {
  try {
    const { id, ...config } = await req.json();
    
    if (!id) {
      return NextResponse.json(
        { error: 'ID –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        { status: 400 }
      );
    }

    const updatedCalculator = await prisma.calculatorConfig.update({
      where: { id },
      data: {
        name: config.name,
        description: config.description || '',
        config: JSON.stringify(config),
        updated_at: new Date()
      }
    });

    return NextResponse.json({
      success: true,
      message: '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ'
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞' },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}

/**
 * üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
 */
export async function DELETE(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const id = searchParams.get('id');
    
    if (!id) {
      return NextResponse.json(
        { error: 'ID –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        { status: 400 }
      );
    }

    // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
    await prisma.calculatorConfig.update({
      where: { id },
      data: { is_active: false }
    });

    return NextResponse.json({
      success: true,
      message: '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ'
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞' },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}
