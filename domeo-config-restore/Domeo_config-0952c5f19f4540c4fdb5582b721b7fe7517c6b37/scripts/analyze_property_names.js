const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function analyzePropertyNames() {
  try {
    console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤ –≤ –±–∞–∑–µ —Ç–æ–≤–∞—Ä–æ–≤...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
    const products = await prisma.product.findMany({
      where: {
        catalog_category: {
          name: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏'
        }
      },
      select: {
        id: true,
        sku: true,
        properties_data: true
      },
      take: 10 // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    });
    
    console.log(`üì¶ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤
    const allPropertyNames = new Set();
    const propertyExamples = new Map();
    
    for (const product of products) {
      try {
        // –ü–∞—Ä—Å–∏–º properties_data
        let properties = {};
        if (product.properties_data) {
          try {
            properties = typeof product.properties_data === 'string' 
              ? JSON.parse(product.properties_data) 
              : product.properties_data;
          } catch (e) {
            console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ properties_data –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.id}`);
            continue;
          }
        }
        
        // –°–æ–±–∏—Ä–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤
        Object.keys(properties).forEach(propName => {
          allPropertyNames.add(propName);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π
          if (!propertyExamples.has(propName)) {
            propertyExamples.set(propName, new Set());
          }
          propertyExamples.get(propName).add(properties[propName]);
        });
        
      } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ ${product.id}: ${error.message}`);
      }
    }
    
    console.log('\nüìä –ù–∞–∑–≤–∞–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤ –≤ –±–∞–∑–µ —Ç–æ–≤–∞—Ä–æ–≤:');
    console.log(`–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤: ${allPropertyNames.size}`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categories = {
      '–û—Å–Ω–æ–≤–Ω—ã–µ': [],
      'Domeo_': [],
      '–û–±—â–µ–µ_': [],
      '–§—É—Ä–Ω–∏—Ç—É—Ä–∞_': [],
      '–ü—Ä–æ—á–∏–µ': []
    };
    
    Array.from(allPropertyNames).sort().forEach(propName => {
      if (propName.startsWith('Domeo_')) {
        categories['Domeo_'].push(propName);
      } else if (propName.startsWith('–û–±—â–µ–µ_')) {
        categories['–û–±—â–µ–µ_'].push(propName);
      } else if (propName.startsWith('–§—É—Ä–Ω–∏—Ç—É—Ä–∞_')) {
        categories['–§—É—Ä–Ω–∏—Ç—É—Ä–∞_'].push(propName);
      } else if (['SKU', 'Name', 'Price', 'StockQuantity', '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞', '–®–∏—Ä–∏–Ω–∞/–º–º', '–í—ã—Å–æ—Ç–∞/–º–º', '–¢–æ–ª—â–∏–Ω–∞/–º–º'].includes(propName)) {
        categories['–û—Å–Ω–æ–≤–Ω—ã–µ'].push(propName);
      } else {
        categories['–ü—Ä–æ—á–∏–µ'].push(propName);
      }
    });
    
    // –í—ã–≤–æ–¥–∏–º —Å–≤–æ–π—Å—Ç–≤–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    Object.entries(categories).forEach(([category, props]) => {
      if (props.length > 0) {
        console.log(`\nüè∑Ô∏è ${category} (${props.length}):`);
        props.forEach(prop => {
          const examples = Array.from(propertyExamples.get(prop)).slice(0, 3);
          console.log(`  - ${prop}: ${examples.join(', ')}`);
        });
      }
    });
    
    // –¢–µ–ø–µ—Ä—å –ø–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ —à–∞–±–ª–æ–Ω
    console.log('\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω –∏–º–ø–æ—Ä—Ç–∞...');
    
    const template = await prisma.importTemplate.findUnique({
      where: { catalog_category_id: 'cmg50xcgs001cv7mn0tdyk1wo' }
    });
    
    if (template) {
      console.log('‚úÖ –®–∞–±–ª–æ–Ω –Ω–∞–π–¥–µ–Ω');
      
      const templateConfig = template.template_config ? JSON.parse(template.template_config) : {};
      const templateHeaders = templateConfig.headers || [];
      
      console.log(`\nüìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —à–∞–±–ª–æ–Ω–µ (${templateHeaders.length}):`);
      templateHeaders.forEach((header, index) => {
        console.log(`  ${index + 1}. ${header}`);
      });
      
      // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —à–∞–±–ª–æ–Ω–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Å–≤–æ–π—Å—Ç–≤ –≤ –ë–î
      console.log('\nüîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —à–∞–±–ª–æ–Ω–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Å–≤–æ–π—Å—Ç–≤ –≤ –ë–î:');
      
      const templateSet = new Set(templateHeaders);
      const dbSet = allPropertyNames;
      
      const inTemplateNotInDB = Array.from(templateSet).filter(header => !dbSet.has(header));
      const inDBNotInTemplate = Array.from(dbSet).filter(prop => !templateSet.has(prop));
      const common = Array.from(templateSet).filter(header => dbSet.has(header));
      
      console.log(`\n‚úÖ –û–±—â–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ (${common.length}):`);
      common.forEach(prop => {
        console.log(`  - ${prop}`);
      });
      
      if (inTemplateNotInDB.length > 0) {
        console.log(`\n‚ö†Ô∏è –í —à–∞–±–ª–æ–Ω–µ, –Ω–æ –ù–ï–¢ –≤ –ë–î (${inTemplateNotInDB.length}):`);
        inTemplateNotInDB.forEach(prop => {
          console.log(`  - ${prop}`);
        });
      }
      
      if (inDBNotInTemplate.length > 0) {
        console.log(`\n‚ö†Ô∏è –í –ë–î, –Ω–æ –ù–ï–¢ –≤ —à–∞–±–ª–æ–Ω–µ (${inDBNotInTemplate.length}):`);
        inDBNotInTemplate.forEach(prop => {
          console.log(`  - ${prop}`);
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
      const matchPercentage = Math.round((common.length / templateHeaders.length) * 100);
      console.log(`\nüìä –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: ${matchPercentage}% (${common.length}/${templateHeaders.length})`);
      
      if (matchPercentage === 100) {
        console.log('‚úÖ –û–¢–õ–ò–ß–ù–û! –í—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –Ω–∞–∑–≤–∞–Ω–∏—è–º —Å–≤–æ–π—Å—Ç–≤ –≤ –ë–î');
      } else if (matchPercentage >= 80) {
        console.log('‚ö†Ô∏è –•–û–†–û–®–û! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç, –Ω–æ –µ—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è');
      } else {
        console.log('‚ùå –ü–õ–û–•–û! –ú–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –º–µ–∂–¥—É —à–∞–±–ª–æ–Ω–æ–º –∏ –ë–î');
      }
      
    } else {
      console.log('‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ Excel —Ñ–∞–π–ª–µ —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –Ω–∞–∑–≤–∞–Ω–∏—è–º —Å–≤–æ–π—Å—Ç–≤ –≤ –ë–î');
    console.log('2. –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è, –Ω—É–∂–Ω–æ –ª–∏–±–æ:');
    console.log('   - –û–±–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω, —á—Ç–æ–±—ã –æ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª –ë–î');
    console.log('   - –ò–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤ –≤ –ë–î');
    console.log('3. –î–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ SKU –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ "–ù–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞" –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

analyzePropertyNames();
