const { PrismaClient } = require('@prisma/client');

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏
function fixFieldsEncoding(fields) {
  const CORRUPTED_FIELD_MAPPINGS = {
    '??????/??': ['–®–∏—Ä–∏–Ω–∞/–º–º', '–í—ã—Å–æ—Ç–∞/–º–º'],
    '??????': ['–ö—Ä–æ–º–∫–∞', '–°—Ç–µ–∫–ª–æ'],
    '??????? ??????????': '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
    'DOMEO_??????? 1C (????????????? ????????????)': 'Domeo –ê—Ä—Ç–∏–∫—É–ª 1–° (–ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∞—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)',
    'DOMEO_??????? WEB': 'Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web',
    '????? _??? ????????': '–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è',
    'DOMEO_???? WEB': 'Domeo_–°—Ç–∏–ª—å Web',
    '??? ?????????': '–¢–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
    '??? ???????????': '–¢–∏–ø –æ—Ç–∫—Ä—ã–≤–∞–Ω–∏—è',
    '???????????': '–ü–æ—Å—Ç–∞–≤—â–∏–∫'
  };

  const fixedFields = [];
  const usedMappings = new Set();

  fields.forEach(field => {
    if (CORRUPTED_FIELD_MAPPINGS[field]) {
      if (Array.isArray(CORRUPTED_FIELD_MAPPINGS[field])) {
        // –î–ª—è –ø–æ–ª–µ–π —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑–º–µ—Ä—ã)
        CORRUPTED_FIELD_MAPPINGS[field].forEach((mapping, index) => {
          const mappingKey = `${field}_${index}`;
          if (!usedMappings.has(mappingKey)) {
            fixedFields.push(mapping);
            usedMappings.add(mappingKey);
          }
        });
      } else {
        fixedFields.push(CORRUPTED_FIELD_MAPPINGS[field]);
      }
    } else {
      fixedFields.push(field);
    }
  });

  return [...new Set(fixedFields)]; // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
}

const prisma = new PrismaClient();

async function analyzeDoorProperties() {
  try {
    console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
    const category = await prisma.catalogCategory.findFirst({
      where: { name: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏' }
    });

    if (!category) {
      console.log('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    console.log(`üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category.name} (ID: ${category.id})\n`);

    // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const template = await prisma.importTemplate.findUnique({
      where: { catalog_category_id: category.id }
    });

    if (!template) {
      console.log('‚ùå –®–∞–±–ª–æ–Ω –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—è –∏–∑ —à–∞–±–ª–æ–Ω–∞
    let requiredFields = JSON.parse(template.required_fields || '[]');
    requiredFields = fixFieldsEncoding(requiredFields);
    
    console.log('üìã –ü–æ–ª—è —à–∞–±–ª–æ–Ω–∞:');
    requiredFields.forEach((field, index) => {
      console.log(`  ${index + 1}. ${field}`);
    });
    console.log('');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const products = await prisma.product.findMany({
      where: { catalog_category_id: category.id },
      select: {
        id: true,
        sku: true,
        name: true,
        properties_data: true
      },
      take: 100 // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 100 —Ç–æ–≤–∞—Ä–æ–≤
    });

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ${products.length}\n`);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ —à–∞–±–ª–æ–Ω–∞
    const fieldAnalysis = {};

    requiredFields.forEach(field => {
      fieldAnalysis[field] = {
        totalProducts: 0,
        hasValue: 0,
        emptyValue: 0,
        uniqueValues: new Set(),
        sampleValues: [],
        inconsistencies: []
      };
    });

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–æ–≤–∞—Ä—É
    products.forEach((product, productIndex) => {
      if (!product.properties_data) return;

      let properties;
      try {
        properties = typeof product.properties_data === 'string' 
          ? JSON.parse(product.properties_data) 
          : product.properties_data;
      } catch (e) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ properties_data –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.id}`);
        return;
      }

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ —à–∞–±–ª–æ–Ω–∞
      requiredFields.forEach(field => {
        fieldAnalysis[field].totalProducts++;
        
        let value = properties[field];
        
        if (value === undefined || value === null || value === '') {
          fieldAnalysis[field].emptyValue++;
        } else {
          fieldAnalysis[field].hasValue++;
          fieldAnalysis[field].uniqueValues.add(String(value));
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π (–ø–µ—Ä–≤—ã–µ 5)
          if (fieldAnalysis[field].sampleValues.length < 5) {
            fieldAnalysis[field].sampleValues.push(String(value));
          }
        }
      });
    });

    // –í—ã–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—é
    console.log('üìä –ê–ù–ê–õ–ò–ó –ü–û–õ–ï–ô:');
    console.log('='.repeat(80));

    requiredFields.forEach((field, index) => {
      const analysis = fieldAnalysis[field];
      const fillRate = ((analysis.hasValue / analysis.totalProducts) * 100).toFixed(1);
      
      console.log(`\n${index + 1}. ${field}`);
      console.log(`   üìà –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å: ${analysis.hasValue}/${analysis.totalProducts} (${fillRate}%)`);
      console.log(`   üî¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: ${analysis.uniqueValues.size}`);
      
      if (analysis.sampleValues.length > 0) {
        console.log(`   üìù –ü—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π:`);
        analysis.sampleValues.forEach(value => {
          console.log(`      - "${value}"`);
        });
      }

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
      if (analysis.uniqueValues.size > 0) {
        console.log(`   üîç –ê–Ω–∞–ª–∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π:`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        const emptyStrings = Array.from(analysis.uniqueValues).filter(v => v.trim() === '');
        if (emptyStrings.length > 0) {
          console.log(`      ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏: ${emptyStrings.length}`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        const numericValues = Array.from(analysis.uniqueValues).filter(v => !isNaN(Number(v)) && v.trim() !== '');
        if (numericValues.length > 0) {
          console.log(`      üî¢ –ß–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: ${numericValues.length}`);
          const numbers = numericValues.map(v => Number(v));
          console.log(`         –ú–∏–Ω–∏–º—É–º: ${Math.min(...numbers)}`);
          console.log(`         –ú–∞–∫—Å–∏–º—É–º: ${Math.max(...numbers)}`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã (–µ—Å–ª–∏ –º–Ω–æ–≥–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π)
        const valueCounts = {};
        Array.from(analysis.uniqueValues).forEach(value => {
          valueCounts[value] = (valueCounts[value] || 0) + 1;
        });
        
        const duplicates = Object.entries(valueCounts).filter(([value, count]) => count > 1);
        if (duplicates.length > 0) {
          console.log(`      üîÑ –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏—è:`);
          duplicates.slice(0, 5).forEach(([value, count]) => {
            console.log(`         "${value}": ${count} —Ä–∞–∑`);
          });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        const weirdValues = Array.from(analysis.uniqueValues).filter(v => 
          v.includes('?') || v.includes('ÔøΩ') || v.length > 100
        );
        if (weirdValues.length > 0) {
          console.log(`      ‚ö†Ô∏è  –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: ${weirdValues.length}`);
          weirdValues.slice(0, 3).forEach(value => {
            console.log(`         "${value}"`);
          });
        }
      }
    });

    // –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑
    console.log('\n\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log('='.repeat(80));
    
    const totalFields = requiredFields.length;
    const wellFilledFields = requiredFields.filter(field => {
      const analysis = fieldAnalysis[field];
      return (analysis.hasValue / analysis.totalProducts) > 0.8;
    });
    
    const poorlyFilledFields = requiredFields.filter(field => {
      const analysis = fieldAnalysis[field];
      return (analysis.hasValue / analysis.totalProducts) < 0.3;
    });

    console.log(`üìä –í—Å–µ–≥–æ –ø–æ–ª–µ–π: ${totalFields}`);
    console.log(`‚úÖ –•–æ—Ä–æ—à–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö (>80%): ${wellFilledFields.length}`);
    console.log(`‚ùå –ü–ª–æ—Ö–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö (<30%): ${poorlyFilledFields.length}`);

    if (poorlyFilledFields.length > 0) {
      console.log('\n‚ùå –ü–õ–û–•–û –ó–ê–ü–û–õ–ù–ï–ù–ù–´–ï –ü–û–õ–Ø:');
      poorlyFilledFields.forEach(field => {
        const analysis = fieldAnalysis[field];
        const fillRate = ((analysis.hasValue / analysis.totalProducts) * 100).toFixed(1);
        console.log(`   - ${field}: ${fillRate}%`);
      });
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\n\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('='.repeat(80));
    
    if (poorlyFilledFields.length > 0) {
      console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–ª–æ—Ö–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π');
      console.log('2. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –≤ —Ñ–∞–π–ª–µ –∏–º–ø–æ—Ä—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —à–∞–±–ª–æ–Ω—É');
    }
    
    console.log('3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ');
    console.log('4. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error);
  } finally {
    await prisma.$disconnect();
  }
}

analyzeDoorProperties();
