const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function analyzeCurrentDatabase() {
    console.log('üîç –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ï–ô –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–• DOMEO');
    console.log('================================================');
    console.log('');

    try {
        // 1. –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–∞—Ç–∞–ª–æ–≥–∞
        console.log('üìÅ –ö–ê–¢–ï–ì–û–†–ò–ò –ö–ê–¢–ê–õ–û–ì–ê:');
        console.log('----------------------');
        
        const categories = await prisma.catalogCategory.findMany({
            include: {
                _count: {
                    select: {
                        products: true,
                        subcategories: true
                    }
                }
            },
            orderBy: {
                level: 'asc'
            }
        });

        console.log(`–í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.length}`);
        console.log('');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories.forEach(category => {
            const indent = '  '.repeat(category.level);
            console.log(`${indent}üìÇ ${category.name} (ID: ${category.id})`);
            console.log(`${indent}   –¢–æ–≤–∞—Ä–æ–≤: ${category._count.products}, –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${category._count.subcategories}`);
            console.log(`${indent}   –ü—É—Ç—å: ${category.path}`);
            console.log('');
        });

        // 2. –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤
        console.log('üõçÔ∏è –¢–û–í–ê–†–´:');
        console.log('-----------');
        
        const productsCount = await prisma.product.count();
        const activeProductsCount = await prisma.product.count({
            where: { is_active: true }
        });
        
        console.log(`–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${productsCount}`);
        console.log(`–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: ${activeProductsCount}`);
        console.log('');

        // –ê–Ω–∞–ª–∏–∑ —Å–≤–æ–π—Å—Ç–≤ —Ç–æ–≤–∞—Ä–æ–≤
        const productsWithProperties = await prisma.product.findMany({
            where: {
                properties_data: {
                    not: '{}'
                }
            },
            select: {
                id: true,
                name: true,
                properties_data: true,
                catalog_category_id: true
            },
            take: 10
        });

        console.log(`–¢–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏: ${productsWithProperties.length}`);
        console.log('');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–≤–æ–π—Å—Ç–≤
        if (productsWithProperties.length > 0) {
            console.log('üìã –ü–†–ò–ú–ï–†–´ –°–í–û–ô–°–¢–í –¢–û–í–ê–†–û–í:');
            console.log('----------------------------');
            
            productsWithProperties.forEach((product, index) => {
                console.log(`${index + 1}. ${product.name} (ID: ${product.id})`);
                try {
                    const properties = JSON.parse(product.properties_data);
                    Object.entries(properties).forEach(([key, value]) => {
                        console.log(`   ${key}: ${value}`);
                    });
                } catch (e) {
                    console.log(`   –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ${product.properties_data}`);
                }
                console.log('');
            });
        }

        // 3. –ê–Ω–∞–ª–∏–∑ —Å–≤–æ–π—Å—Ç–≤ —Ç–æ–≤–∞—Ä–æ–≤ (ProductProperty)
        console.log('üè∑Ô∏è –°–í–û–ô–°–¢–í–ê –¢–û–í–ê–†–û–í (ProductProperty):');
        console.log('--------------------------------------');
        
        const productProperties = await prisma.productProperty.findMany({
            include: {
                _count: {
                    select: {
                        category_assignments: true
                    }
                }
            }
        });

        console.log(`–í—Å–µ–≥–æ —Å–≤–æ–π—Å—Ç–≤: ${productProperties.length}`);
        console.log('');

        productProperties.forEach(property => {
            console.log(`üè∑Ô∏è ${property.name} (${property.type})`);
            console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${property.description || '–ù–µ—Ç'}`);
            console.log(`   –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ: ${property.is_required ? '–î–∞' : '–ù–µ—Ç'}`);
            console.log(`   –ê–∫—Ç–∏–≤–Ω–æ–µ: ${property.is_active ? '–î–∞' : '–ù–µ—Ç'}`);
            console.log(`   –ù–∞–∑–Ω–∞—á–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: ${property._count.category_assignments}`);
            if (property.options) {
                try {
                    const options = JSON.parse(property.options);
                    console.log(`   –í–∞—Ä–∏–∞–Ω—Ç—ã: ${options.join(', ')}`);
                } catch (e) {
                    console.log(`   –í–∞—Ä–∏–∞–Ω—Ç—ã: ${property.options}`);
                }
            }
            console.log('');
        });

        // 4. –ê–Ω–∞–ª–∏–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π —Å–≤–æ–π—Å—Ç–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        console.log('üîó –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø –°–í–û–ô–°–¢–í –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:');
        console.log('----------------------------------');
        
        const assignments = await prisma.categoryPropertyAssignment.findMany({
            include: {
                product_property: true,
                catalog_category: true
            }
        });

        console.log(`–í—Å–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π: ${assignments.length}`);
        console.log('');

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        const assignmentsByCategory = {};
        assignments.forEach(assignment => {
            const categoryName = assignment.catalog_category.name;
            if (!assignmentsByCategory[categoryName]) {
                assignmentsByCategory[categoryName] = [];
            }
            assignmentsByCategory[categoryName].push(assignment);
        });

        Object.entries(assignmentsByCategory).forEach(([categoryName, categoryAssignments]) => {
            console.log(`üìÇ ${categoryName}:`);
            categoryAssignments.forEach(assignment => {
                console.log(`   üè∑Ô∏è ${assignment.product_property.name} (${assignment.product_property.type})`);
                console.log(`      –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ: ${assignment.is_required ? '–î–∞' : '–ù–µ—Ç'}`);
                console.log(`      –î–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: ${assignment.is_for_calculator ? '–î–∞' : '–ù–µ—Ç'}`);
                console.log(`      –î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞: ${assignment.is_for_export ? '–î–∞' : '–ù–µ—Ç'}`);
            });
            console.log('');
        });

        // 5. –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        console.log('üìÑ –î–û–ö–£–ú–ï–ù–¢–´:');
        console.log('-------------');
        
        const quotesCount = await prisma.quote.count();
        const ordersCount = await prisma.order.count();
        const invoicesCount = await prisma.invoice.count();
        
        console.log(`–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${quotesCount}`);
        console.log(`–ó–∞–∫–∞–∑–æ–≤: ${ordersCount}`);
        console.log(`–°—á–µ—Ç–æ–≤: ${invoicesCount}`);
        console.log('');

        // 6. –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤
        console.log('üñºÔ∏è –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –¢–û–í–ê–†–û–í:');
        console.log('----------------------');
        
        const imagesCount = await prisma.productImage.count();
        const productsWithImages = await prisma.product.count({
            where: {
                images: {
                    some: {}
                }
            }
        });
        
        console.log(`–í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${imagesCount}`);
        console.log(`–¢–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${productsWithImages}`);
        console.log('');

        // 7. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        console.log('üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
        console.log('-------------------');
        
        const totalRecords = await prisma.$queryRaw`
            SELECT 
                (SELECT COUNT(*) FROM catalog_categories) as categories,
                (SELECT COUNT(*) FROM products) as products,
                (SELECT COUNT(*) FROM product_properties) as properties,
                (SELECT COUNT(*) FROM category_property_assignments) as assignments,
                (SELECT COUNT(*) FROM product_images) as images,
                (SELECT COUNT(*) FROM quotes) as quotes,
                (SELECT COUNT(*) FROM orders) as orders,
                (SELECT COUNT(*) FROM invoices) as invoices
        `;

        console.log('–ó–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö:');
        console.log(`  üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${totalRecords[0].categories}`);
        console.log(`  üõçÔ∏è –¢–æ–≤–∞—Ä—ã: ${totalRecords[0].products}`);
        console.log(`  üè∑Ô∏è –°–≤–æ–π—Å—Ç–≤–∞: ${totalRecords[0].properties}`);
        console.log(`  üîó –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è: ${totalRecords[0].assignments}`);
        console.log(`  üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${totalRecords[0].images}`);
        console.log(`  üìÑ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: ${totalRecords[0].quotes}`);
        console.log(`  üì¶ –ó–∞–∫–∞–∑—ã: ${totalRecords[0].orders}`);
        console.log(`  üí∞ –°—á–µ—Ç–∞: ${totalRecords[0].invoices}`);
        console.log('');

        // 8. –ü—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        console.log('‚ö†Ô∏è –í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
        console.log('----------------------');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ —Å–≤–æ–π—Å—Ç–≤
        const productsWithoutProperties = await prisma.product.count({
            where: {
                OR: [
                    { properties_data: '{}' },
                    { properties_data: null }
                ]
            }
        });
        
        if (productsWithoutProperties > 0) {
            console.log(`‚ùå –¢–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Å–≤–æ–π—Å—Ç–≤: ${productsWithoutProperties}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ —Ç–æ–≤–∞—Ä–æ–≤
        const categoriesWithoutProducts = await prisma.catalogCategory.count({
            where: {
                products: {
                    none: {}
                }
            }
        });
        
        if (categoriesWithoutProducts > 0) {
            console.log(`‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–π –±–µ–∑ —Ç–æ–≤–∞—Ä–æ–≤: ${categoriesWithoutProducts}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
        const propertiesWithoutAssignments = await prisma.productProperty.count({
            where: {
                category_assignments: {
                    none: {}
                }
            }
        });
        
        if (propertiesWithoutAssignments > 0) {
            console.log(`‚ùå –°–≤–æ–π—Å—Ç–≤ –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π: ${propertiesWithoutAssignments}`);
        }

        console.log('');
        console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    } finally {
        await prisma.$disconnect();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
analyzeCurrentDatabase();
