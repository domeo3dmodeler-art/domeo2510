const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

// –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —à–∞–±–ª–æ–Ω–∞ "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
const correctFields = [
  "Domeo –ê—Ä—Ç–∏–∫—É–ª 1C (–ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∞—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)",
  "–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", 
  "Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web",
  "–®–∏—Ä–∏–Ω–∞/–º–º",
  "–í—ã—Å–æ—Ç–∞/–º–º", 
  "–¢–æ–ª—â–∏–Ω–∞/–º–º",
  "–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è",
  "Domeo_–¶–≤–µ—Ç",
  "Domeo_–°—Ç–∏–ª—å Web",
  "–¢–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
  "–¢–∏–ø –æ—Ç–∫—Ä—ã–≤–∞–Ω–∏—è",
  "–ü–æ—Å—Ç–∞–≤—â–∏–∫",
  "–ï–¥.–∏–∑–º.",
  "–°–∫–ª–∞–¥/–∑–∞–∫–∞–∑",
  "–¶–µ–Ω–∞ —Ä—Ä—Ü (–≤–∫–ª—é—á–∞—è —Ü–µ–Ω—É –ø–æ–ª–æ—Ç–Ω–∞, –∫–æ—Ä–æ–±–∞, –Ω–∞–ª–∏—á–Ω–∏–∫–æ–≤, –¥–æ–±–æ—Ä–æ–≤)",
  "–¶–µ–Ω–∞ –æ–ø—Ç",
  "–ö—Ä–æ–º–∫–∞",
  "–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–¥–±–∞–≤–∫–∏ –∑–∞ –∫—Ä–æ–º–∫—É",
  "–ú–æ–ª–¥–∏–Ω–≥",
  "–°—Ç–µ–∫–ª–æ",
  "–§–∞–±—Ä–∏–∫–∞_–ö–æ–ª–ª–µ–∫—Ü–∏—è",
  "–§–∞–±—Ä–∏–∫–∞_–¶–≤–µ—Ç/–û—Ç–¥–µ–ª–∫–∞"
];

async function fixAllDataEncoding() {
  try {
    console.log('=== –ö–ê–†–î–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –í–°–ï–• –î–ê–ù–ù–´–• –í –ë–ê–ó–ï ===');
    
    // 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ importTemplate
    console.log('\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï IMPORT TEMPLATE:');
    const templates = await prisma.importTemplate.findMany();
    
    for (const template of templates) {
      console.log(`  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω: ${template.id}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º required_fields
      let requiredFields = [];
      try {
        const parsed = JSON.parse(template.required_fields || '[]');
        requiredFields = Array.isArray(parsed) ? parsed : [];
      } catch (e) {
        console.log(`    –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ required_fields: ${e.message}`);
        requiredFields = [];
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ —à–∞–±–ª–æ–Ω –¥–ª—è "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏", –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è
      if (template.catalog_category_id === 'cmg50xcgs001cv7mn0tdyk1wo') {
        console.log('    –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"');
        requiredFields = correctFields;
      } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
        requiredFields = requiredFields.map(field => {
          if (typeof field === 'string' && field.includes('?')) {
            // –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
            const fieldMappings = {
              '??????? ??????????': '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
              'Domeo_???????? ?????? ??? Web': 'Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web',
              '??????/??': '–®–∏—Ä–∏–Ω–∞/–º–º',
              '??????/??': '–í—ã—Å–æ—Ç–∞/–º–º',
              '???????/??': '–¢–æ–ª—â–∏–Ω–∞/–º–º',
              '?????_??? ????????': '–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è',
              'Domeo_????': 'Domeo_–¶–≤–µ—Ç',
              'Domeo_????? Web': 'Domeo_–°—Ç–∏–ª—å Web',
              '??? ???????????': '–¢–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
              '??? ??????????': '–¢–∏–ø –æ—Ç–∫—Ä—ã–≤–∞–Ω–∏—è',
              '?????????': '–ü–æ—Å—Ç–∞–≤—â–∏–∫',
              '??.???.': '–ï–¥.–∏–∑–º.',
              '?????/?????': '–°–∫–ª–∞–¥/–∑–∞–∫–∞–∑',
              '???? ??? (??????? ???? ???????, ??????, ??????????, ???????)': '–¶–µ–Ω–∞ —Ä—Ä—Ü (–≤–∫–ª—é—á–∞—è —Ü–µ–Ω—É –ø–æ–ª–æ—Ç–Ω–∞, –∫–æ—Ä–æ–±–∞, –Ω–∞–ª–∏—á–Ω–∏–∫–æ–≤, –¥–æ–±–æ—Ä–æ–≤)',
              '???? ???': '–¶–µ–Ω–∞ –æ–ø—Ç',
              '??????': '–ö—Ä–æ–º–∫–∞',
              '????????? ???????? ?? ??????': '–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–¥–±–∞–≤–∫–∏ –∑–∞ –∫—Ä–æ–º–∫—É',
              '???????': '–ú–æ–ª–¥–∏–Ω–≥',
              '??????': '–°—Ç–µ–∫–ª–æ',
              '???????_?????????': '–§–∞–±—Ä–∏–∫–∞_–ö–æ–ª–ª–µ–∫—Ü–∏—è',
              '???????_????/???????': '–§–∞–±—Ä–∏–∫–∞_–¶–≤–µ—Ç/–û—Ç–¥–µ–ª–∫–∞',
              'Domeo ??????? 1C (????????????? ????????????)': 'Domeo –ê—Ä—Ç–∏–∫—É–ª 1C (–ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∞—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)'
            };
            return fieldMappings[field] || field;
          }
          return field;
        });
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω
      await prisma.importTemplate.update({
        where: { id: template.id },
        data: {
          required_fields: JSON.stringify(requiredFields),
          calculator_fields: JSON.stringify([]),
          export_fields: JSON.stringify([]),
          template_config: JSON.stringify({
            headers: requiredFields,
            requiredFields: requiredFields,
            fieldMappings: {}
          }),
          field_mappings: JSON.stringify({}),
          updated_at: new Date()
        }
      });
      
      console.log(`    ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —à–∞–±–ª–æ–Ω ${template.id}`);
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º catalogCategory
    console.log('\nüîß –ü–†–û–í–ï–†–ö–ê CATALOG CATEGORY:');
    const categories = await prisma.catalogCategory.findMany({
      where: {
        name: {
          contains: '–¥–≤–µ—Ä'
        }
      }
    });
    
    for (const category of categories) {
      console.log(`  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: "${category.name}" - –∫–æ–¥–∏—Ä–æ–≤–∫–∞ OK`);
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º product (–µ—Å–ª–∏ –µ—Å—Ç—å)
    console.log('\nüîß –ü–†–û–í–ï–†–ö–ê PRODUCT:');
    const products = await prisma.product.findMany({
      take: 5,
      where: {
        OR: [
          { name: { contains: '–¥–≤–µ—Ä' } },
          { sku: { contains: '–¥–≤–µ—Ä' } }
        ]
      }
    });
    
    console.log(`  –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${products.length}`);
    products.forEach((product, i) => {
      console.log(`    ${i + 1}. "${product.name}" - –∫–æ–¥–∏—Ä–æ–≤–∫–∞ OK`);
    });
    
    console.log('\n‚úÖ –í–°–ï –î–ê–ù–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–´!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixAllDataEncoding();
