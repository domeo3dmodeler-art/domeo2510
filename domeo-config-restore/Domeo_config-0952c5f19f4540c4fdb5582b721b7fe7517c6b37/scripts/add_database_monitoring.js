const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

async function addDatabaseMonitoring() {
  try {
    console.log('üîß –î–û–ë–ê–í–õ–ï–ù–ò–ï –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•\n');

    // 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    console.log('1. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
    
    const monitorPerformance = async () => {
      const startTime = Date.now();
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      const tests = [
        {
          name: '–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
          query: async () => {
            return await prisma.product.findMany({
              where: { catalog_category_id: 'cmg50xcgs001cv7mn0tdyk1wo' },
              take: 100
            });
          }
        },
        {
          name: '–ü–æ–¥—Å—á–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
          query: async () => {
            return await prisma.product.count({
              where: { catalog_category_id: 'cmg50xcgs001cv7mn0tdyk1wo' }
            });
          }
        },
        {
          name: '–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ü–µ–Ω–µ',
          query: async () => {
            return await prisma.product.findMany({
              where: { 
                base_price: { gte: 1000, lte: 5000 }
              },
              take: 50
            });
          }
        },
        {
          name: '–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–∞ —Å–∫–ª–∞–¥–µ',
          query: async () => {
            return await prisma.product.findMany({
              where: { 
                stock_quantity: { gt: 0 }
              },
              take: 50
            });
          }
        }
      ];
      
      const results = [];
      
      for (const test of tests) {
        const testStart = Date.now();
        try {
          await test.query();
          const testTime = Date.now() - testStart;
          results.push({
            name: test.name,
            time: testTime,
            status: 'success'
          });
        } catch (error) {
          const testTime = Date.now() - testStart;
          results.push({
            name: test.name,
            time: testTime,
            status: 'error',
            error: error.message
          });
        }
      }
      
      const totalTime = Date.now() - startTime;
      
      return {
        timestamp: new Date().toISOString(),
        totalTime,
        tests: results
      };
    };

    // 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('\n2. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    const monitorDatabaseSize = async () => {
      const dbPath = path.join(process.cwd(), 'prisma', 'database', 'dev.db');
      
      let dbSize = 0;
      if (fs.existsSync(dbPath)) {
        const stats = fs.statSync(dbPath);
        dbSize = stats.size;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
      const tableStats = await prisma.$queryRaw`
        SELECT 
          name,
          (SELECT COUNT(*) FROM sqlite_master WHERE type='table' AND name=t.name) as row_count
        FROM sqlite_master t
        WHERE type='table' AND name IN ('products', 'catalog_categories', 'product_images', 'import_templates')
      `;
      
      const stats = {};
      for (const table of tableStats) {
        try {
          const count = await prisma.$queryRaw`SELECT COUNT(*) as count FROM ${table.name}`;
          stats[table.name] = count[0].count;
        } catch (error) {
          stats[table.name] = 0;
        }
      }
      
      return {
        timestamp: new Date().toISOString(),
        databaseSize: dbSize,
        tableStats: stats
      };
    };

    // 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
    console.log('\n3. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–Ω–¥–µ–∫—Å–æ–≤...');
    
    const monitorIndexes = async () => {
      const indexes = await prisma.$queryRaw`
        SELECT 
          name,
          sql
        FROM sqlite_master
        WHERE type='index' AND sql IS NOT NULL
        ORDER BY name
      `;
      
      const indexStats = {
        total: indexes.length,
        byTable: {},
        unused: []
      };
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å—ã –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
      for (const index of indexes) {
        const tableName = index.sql.match(/ON\s+(\w+)/i)?.[1] || 'unknown';
        if (!indexStats.byTable[tableName]) {
          indexStats.byTable[tableName] = 0;
        }
        indexStats.byTable[tableName]++;
      }
      
      return {
        timestamp: new Date().toISOString(),
        indexStats
      };
    };

    // 4. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
    console.log('\n4. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫...');
    
    const logError = async (error, context = {}) => {
      const logEntry = {
        timestamp: new Date().toISOString(),
        level: 'error',
        message: error.message,
        stack: error.stack,
        context
      };
      
      const logDir = path.join(process.cwd(), 'logs');
      if (!fs.existsSync(logDir)) {
        fs.mkdirSync(logDir, { recursive: true });
      }
      
      const logFile = path.join(logDir, `database_errors_${new Date().toISOString().split('T')[0]}.log`);
      fs.appendFileSync(logFile, JSON.stringify(logEntry) + '\n');
      
      console.log(`   üìù –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ª–æ–≥: ${logFile}`);
    };

    // 5. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    console.log('\n5. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏...');
    
    const generateStatusReport = async () => {
      const report = {
        timestamp: new Date().toISOString(),
        performance: await monitorPerformance(),
        databaseSize: await monitorDatabaseSize(),
        indexes: await monitorIndexes(),
        summary: {
          status: 'healthy',
          issues: []
        }
      };
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      const slowQueries = report.performance.tests.filter(test => test.time > 1000);
      if (slowQueries.length > 0) {
        report.summary.status = 'warning';
        report.summary.issues.push(`–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: ${slowQueries.length}`);
      }
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      if (report.databaseSize.databaseSize > 100 * 1024 * 1024) { // 100MB
        report.summary.status = 'warning';
        report.summary.issues.push('–ë–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
      }
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å—ã
      if (report.indexes.indexStats.total < 10) {
        report.summary.status = 'warning';
        report.summary.issues.push('–ú–∞–ª–æ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏');
      }
      
      return report;
    };

    // 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    console.log('\n6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const performanceResult = await monitorPerformance();
    console.log(`   ‚ö° –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${performanceResult.totalTime}ms`);
    performanceResult.tests.forEach(test => {
      const status = test.status === 'success' ? '‚úÖ' : '‚ùå';
      console.log(`     ${status} ${test.name}: ${test.time}ms`);
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const sizeResult = await monitorDatabaseSize();
    console.log(`   üíæ –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${(sizeResult.databaseSize / 1024 / 1024).toFixed(2)} MB`);
    console.log(`   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü:`);
    Object.entries(sizeResult.tableStats).forEach(([table, count]) => {
      console.log(`     * ${table}: ${count} –∑–∞–ø–∏—Å–µ–π`);
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–Ω–¥–µ–∫—Å–æ–≤
    const indexResult = await monitorIndexes();
    console.log(`   üìà –í—Å–µ–≥–æ –∏–Ω–¥–µ–∫—Å–æ–≤: ${indexResult.indexStats.total}`);
    console.log(`   üìã –ò–Ω–¥–µ–∫—Å—ã –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º:`);
    Object.entries(indexResult.indexStats.byTable).forEach(([table, count]) => {
      console.log(`     * ${table}: ${count} –∏–Ω–¥–µ–∫—Å–æ–≤`);
    });
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
    const fullReport = await generateStatusReport();
    console.log(`   üìã –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: ${fullReport.summary.status}`);
    if (fullReport.summary.issues.length > 0) {
      console.log(`   ‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã:`);
      fullReport.summary.issues.forEach(issue => {
        console.log(`     - ${issue}`);
      });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    const reportDir = path.join(process.cwd(), 'reports');
    if (!fs.existsSync(reportDir)) {
      fs.mkdirSync(reportDir, { recursive: true });
    }
    
    const reportFile = path.join(reportDir, `database_status_${new Date().toISOString().replace(/[:.]/g, '-')}.json`);
    fs.writeFileSync(reportFile, JSON.stringify(fullReport, null, 2));
    console.log(`   üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportFile}`);

    console.log('\nüéâ –î–û–ë–ê–í–õ–ï–ù–ò–ï –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log('\nüìä –°–û–ó–î–ê–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò:');
    console.log('   ‚úÖ monitorPerformance - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
    console.log('   ‚úÖ monitorDatabaseSize - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    console.log('   ‚úÖ monitorIndexes - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–Ω–¥–µ–∫—Å–æ–≤');
    console.log('   ‚úÖ logError - –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫');
    console.log('   ‚úÖ generateStatusReport - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏');
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('   1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç');
    console.log('   2. –î–æ–±–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç—ã –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö');
    console.log('   3. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫');
    console.log('   4. –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏');
    console.log('   5. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ email/SMS');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

addDatabaseMonitoring();
