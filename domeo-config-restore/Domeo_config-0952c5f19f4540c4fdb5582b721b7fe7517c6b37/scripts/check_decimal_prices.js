const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkDecimalPrices() {
  try {
    console.log('üîç –ü–†–û–í–ï–†–Ø–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–ï–°–Ø–¢–ò–ß–ù–´–• –¶–ï–ù\n');

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
    const category = await prisma.catalogCategory.findFirst({
      where: { name: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏' }
    });

    if (!category) {
      console.log('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const products = await prisma.product.findMany({
      where: { catalog_category_id: category.id },
      select: {
        id: true,
        sku: true,
        properties_data: true
      },
      take: 10
    });

    console.log(`üì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤:\n`);

    let decimalPricesFound = 0;
    let totalPrices = 0;

    products.forEach((product, index) => {
      if (!product.properties_data) return;

      let properties;
      try {
        properties = typeof product.properties_data === 'string' 
          ? JSON.parse(product.properties_data) 
          : product.properties_data;
      } catch (e) {
        return;
      }

      if (properties['–¶–µ–Ω–∞ –æ–ø—Ç']) {
        totalPrices++;
        const price = properties['–¶–µ–Ω–∞ –æ–ø—Ç'];
        const numericValue = parseFloat(price);
        
        if (!isNaN(numericValue)) {
          if (numericValue % 1 !== 0) {
            decimalPricesFound++;
            console.log(`‚ùå ${product.sku}: ${price} (–¥–µ—Å—è—Ç–∏—á–Ω–æ–µ)`);
          } else {
            console.log(`‚úÖ ${product.sku}: ${price} (—Ü–µ–ª–æ–µ)`);
          }
        }
      }
    });

    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:`);
    console.log(`   - –í—Å–µ–≥–æ —Ü–µ–Ω –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${totalPrices}`);
    console.log(`   - –î–µ—Å—è—Ç–∏—á–Ω—ã—Ö —Ü–µ–Ω –Ω–∞–π–¥–µ–Ω–æ: ${decimalPricesFound}`);
    console.log(`   - –¶–µ–ª—ã—Ö —Ü–µ–Ω: ${totalPrices - decimalPricesFound}`);

    if (decimalPricesFound === 0) {
      console.log(`\nüéâ –í–°–ï –î–ï–°–Ø–¢–ò–ß–ù–´–ï –¶–ï–ù–´ –ò–°–ü–†–ê–í–õ–ï–ù–´!`);
    } else {
      console.log(`\n‚ö†Ô∏è  –û—Å—Ç–∞–ª–∏—Å—å –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ —Ü–µ–Ω—ã: ${decimalPricesFound}`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkDecimalPrices();
