const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkNonStandardSizes() {
  try {
    console.log('üîç –ü–†–û–í–ï–†–ö–ê –ù–ï–°–¢–ê–ù–î–ê–†–¢–ù–´–• –†–ê–ó–ú–ï–†–û–í\n');

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
    const category = await prisma.catalogCategory.findFirst({
      where: { name: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏' }
    });

    if (!category) {
      console.log('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const products = await prisma.product.findMany({
      where: { catalog_category_id: category.id },
      select: {
        id: true,
        sku: true,
        name: true,
        properties_data: true
      }
    });

    console.log(`üì¶ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${products.length} —Ç–æ–≤–∞—Ä–æ–≤\n`);

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–∞–∑–º–µ—Ä—ã
    const widths = new Set();
    const heights = new Set();
    const thicknesses = new Set();
    const nonStandardProducts = [];

    products.forEach((product, index) => {
      if (!product.properties_data) return;

      let properties;
      try {
        properties = typeof product.properties_data === 'string' 
          ? JSON.parse(product.properties_data) 
          : product.properties_data;
      } catch (e) {
        return;
      }

      const width = properties['–®–∏—Ä–∏–Ω–∞/–º–º'];
      const height = properties['–í—ã—Å–æ—Ç–∞/–º–º'];
      const thickness = properties['–¢–æ–ª—â–∏–Ω–∞/–º–º'];

      if (width) {
        const widthNum = parseInt(width);
        if (!isNaN(widthNum)) {
          widths.add(widthNum);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
          if (widthNum < 600 || widthNum > 900 || widthNum % 50 !== 0) {
            nonStandardProducts.push({
              sku: product.sku,
              field: '–®–∏—Ä–∏–Ω–∞/–º–º',
              value: width,
              issue: widthNum < 600 ? '–°–ª–∏—à–∫–æ–º —É–∑–∫–∞—è' : 
                     widthNum > 900 ? '–°–ª–∏—à–∫–æ–º —à–∏—Ä–æ–∫–∞—è' : 
                     '–ù–µ –∫—Ä–∞—Ç–Ω–æ 50–º–º'
            });
          }
        }
      }

      if (height) {
        const heightNum = parseInt(height);
        if (!isNaN(heightNum)) {
          heights.add(heightNum);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
          if (heightNum < 2000 || heightNum > 2300 || heightNum % 100 !== 0) {
            nonStandardProducts.push({
              sku: product.sku,
              field: '–í—ã—Å–æ—Ç–∞/–º–º',
              value: height,
              issue: heightNum < 2000 ? '–°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è' : 
                     heightNum > 2300 ? '–°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è' : 
                     '–ù–µ –∫—Ä–∞—Ç–Ω–æ 100–º–º'
            });
          }
        }
      }

      if (thickness) {
        const thicknessNum = parseInt(thickness);
        if (!isNaN(thicknessNum)) {
          thicknesses.add(thicknessNum);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
          if (thicknessNum < 36 || thicknessNum > 58 || ![36, 38, 39, 40, 42, 58].includes(thicknessNum)) {
            nonStandardProducts.push({
              sku: product.sku,
              field: '–¢–æ–ª—â–∏–Ω–∞/–º–º',
              value: thickness,
              issue: '–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç–æ–ª—â–∏–Ω–∞'
            });
          }
        }
      }
    });

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('üìä –ê–ù–ê–õ–ò–ó –†–ê–ó–ú–ï–†–û–í:');
    console.log('='.repeat(60));

    console.log(`\nüîç –®–ò–†–ò–ù–ê/–ú–ú:`);
    const sortedWidths = Array.from(widths).sort((a, b) => a - b);
    console.log(`   –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: ${sortedWidths.length}`);
    console.log(`   –ó–Ω–∞—á–µ–Ω–∏—è: ${sortedWidths.join(', ')}`);
    
    const standardWidths = [600, 700, 800, 900];
    const nonStandardWidths = sortedWidths.filter(w => !standardWidths.includes(w));
    if (nonStandardWidths.length > 0) {
      console.log(`   ‚ö†Ô∏è  –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: ${nonStandardWidths.join(', ')}`);
    } else {
      console.log(`   ‚úÖ –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ`);
    }

    console.log(`\nüîç –í–´–°–û–¢–ê/–ú–ú:`);
    const sortedHeights = Array.from(heights).sort((a, b) => a - b);
    console.log(`   –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: ${sortedHeights.length}`);
    console.log(`   –ó–Ω–∞—á–µ–Ω–∏—è: ${sortedHeights.join(', ')}`);
    
    const standardHeights = [2000, 2100, 2200, 2300];
    const nonStandardHeights = sortedHeights.filter(h => !standardHeights.includes(h));
    if (nonStandardHeights.length > 0) {
      console.log(`   ‚ö†Ô∏è  –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: ${nonStandardHeights.join(', ')}`);
    } else {
      console.log(`   ‚úÖ –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ`);
    }

    console.log(`\nüîç –¢–û–õ–©–ò–ù–ê/–ú–ú:`);
    const sortedThicknesses = Array.from(thicknesses).sort((a, b) => a - b);
    console.log(`   –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: ${sortedThicknesses.length}`);
    console.log(`   –ó–Ω–∞—á–µ–Ω–∏—è: ${sortedThicknesses.join(', ')}`);
    
    const standardThicknesses = [36, 38, 39, 40, 42, 58];
    const nonStandardThicknesses = sortedThicknesses.filter(t => !standardThicknesses.includes(t));
    if (nonStandardThicknesses.length > 0) {
      console.log(`   ‚ö†Ô∏è  –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: ${nonStandardThicknesses.join(', ')}`);
    } else {
      console.log(`   ‚úÖ –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ`);
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    if (nonStandardProducts.length > 0) {
      console.log(`\n\nüö® –¢–û–í–ê–†–´ –° –ù–ï–°–¢–ê–ù–î–ê–†–¢–ù–´–ú–ò –†–ê–ó–ú–ï–†–ê–ú–ò:`);
      console.log('='.repeat(60));
      
      nonStandardProducts.slice(0, 20).forEach((product, index) => {
        console.log(`${index + 1}. ${product.sku}`);
        console.log(`   ${product.field}: ${product.value} (${product.issue})`);
      });

      if (nonStandardProducts.length > 20) {
        console.log(`   ... –∏ –µ—â–µ ${nonStandardProducts.length - 20} —Ç–æ–≤–∞—Ä–æ–≤`);
      }

      console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º:`);
      console.log(`   - –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏: ${nonStandardProducts.length}`);
      
      const widthProblems = nonStandardProducts.filter(p => p.field === '–®–∏—Ä–∏–Ω–∞/–º–º').length;
      const heightProblems = nonStandardProducts.filter(p => p.field === '–í—ã—Å–æ—Ç–∞/–º–º').length;
      const thicknessProblems = nonStandardProducts.filter(p => p.field === '–¢–æ–ª—â–∏–Ω–∞/–º–º').length;
      
      console.log(`   - –ü—Ä–æ–±–ª–µ–º—ã —Å —à–∏—Ä–∏–Ω–æ–π: ${widthProblems}`);
      console.log(`   - –ü—Ä–æ–±–ª–µ–º—ã —Å –≤—ã—Å–æ—Ç–æ–π: ${heightProblems}`);
      console.log(`   - –ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ–ª—â–∏–Ω–æ–π: ${thicknessProblems}`);

    } else {
      console.log(`\n\nüéâ –í–°–ï –†–ê–ó–ú–ï–†–´ –°–¢–ê–ù–î–ê–†–¢–ù–´–ï!`);
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log(`\n\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:`);
    console.log('='.repeat(60));
    
    if (nonStandardWidths.length > 0) {
      console.log(`1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à–∏—Ä–∏–Ω—ã: ${nonStandardWidths.join(', ')}`);
    }
    if (nonStandardHeights.length > 0) {
      console.log(`2. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤—ã—Å–æ—Ç—ã: ${nonStandardHeights.join(', ')}`);
    }
    if (nonStandardThicknesses.length > 0) {
      console.log(`3. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–æ–ª—â–∏–Ω—ã: ${nonStandardThicknesses.join(', ')}`);
    }
    
    if (nonStandardProducts.length === 0) {
      console.log(`‚úÖ –í—Å–µ —Ä–∞–∑–º–µ—Ä—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–∑–º–µ—Ä–æ–≤:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkNonStandardSizes();
