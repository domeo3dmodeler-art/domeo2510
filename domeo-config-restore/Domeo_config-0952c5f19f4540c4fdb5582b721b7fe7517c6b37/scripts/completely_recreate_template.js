const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

// –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —à–∞–±–ª–æ–Ω–∞ "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
const correctFields = [
  "Domeo –ê—Ä—Ç–∏–∫—É–ª 1C (–ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∞—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)",
  "–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", 
  "Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web",
  "–®–∏—Ä–∏–Ω–∞/–º–º",
  "–í—ã—Å–æ—Ç–∞/–º–º", 
  "–¢–æ–ª—â–∏–Ω–∞/–º–º",
  "–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è",
  "Domeo_–¶–≤–µ—Ç",
  "Domeo_–°—Ç–∏–ª—å Web",
  "–¢–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
  "–¢–∏–ø –æ—Ç–∫—Ä—ã–≤–∞–Ω–∏—è",
  "–ü–æ—Å—Ç–∞–≤—â–∏–∫",
  "–ï–¥.–∏–∑–º.",
  "–°–∫–ª–∞–¥/–∑–∞–∫–∞–∑",
  "–¶–µ–Ω–∞ —Ä—Ä—Ü (–≤–∫–ª—é—á–∞—è —Ü–µ–Ω—É –ø–æ–ª–æ—Ç–Ω–∞, –∫–æ—Ä–æ–±–∞, –Ω–∞–ª–∏—á–Ω–∏–∫–æ–≤, –¥–æ–±–æ—Ä–æ–≤)",
  "–¶–µ–Ω–∞ –æ–ø—Ç",
  "–ö—Ä–æ–º–∫–∞",
  "–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–¥–±–∞–≤–∫–∏ –∑–∞ –∫—Ä–æ–º–∫—É",
  "–ú–æ–ª–¥–∏–Ω–≥",
  "–°—Ç–µ–∫–ª–æ",
  "–§–∞–±—Ä–∏–∫–∞_–ö–æ–ª–ª–µ–∫—Ü–∏—è",
  "–§–∞–±—Ä–∏–∫–∞_–¶–≤–µ—Ç/–û—Ç–¥–µ–ª–∫–∞"
];

async function completelyRecreateTemplate() {
  try {
    console.log('=== –ö–ê–†–î–ò–ù–ê–õ–¨–ù–û–ï –ü–ï–†–ï–°–û–ó–î–ê–ù–ò–ï –®–ê–ë–õ–û–ù–ê ===');
    
    // 1. –£–¥–∞–ª—è–µ–º –í–°–ï —Å—Ç–∞—Ä—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —à–∞–±–ª–æ–Ω—ã...');
    const deleted = await prisma.importTemplate.deleteMany({
      where: { catalog_category_id: 'cmg50xcgs001cv7mn0tdyk1wo' }
    });
    console.log(`–£–¥–∞–ª–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: ${deleted.count}`);
    
    // 2. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    console.log('üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω...');
    const newTemplate = await prisma.importTemplate.create({
      data: {
        catalog_category_id: 'cmg50xcgs001cv7mn0tdyk1wo',
        name: '–®–∞–±–ª–æ–Ω –¥–ª—è –ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏',
        description: '–ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π —à–∞–±–ª–æ–Ω –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã—Ö –¥–≤–µ—Ä–µ–π',
        required_fields: JSON.stringify(correctFields),
        calculator_fields: JSON.stringify([]),
        export_fields: JSON.stringify([]),
        template_config: JSON.stringify({
          headers: correctFields,
          requiredFields: correctFields,
          fieldMappings: {}
        }),
        field_mappings: JSON.stringify({})
      }
    });
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω: ${newTemplate.id}`);
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê:');
    const verificationTemplate = await prisma.importTemplate.findUnique({
      where: { id: newTemplate.id }
    });
    
    const parsedFields = JSON.parse(verificationTemplate.required_fields);
    console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π: ${parsedFields.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ –Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∫—É
    let corruptedCount = 0;
    parsedFields.forEach((field, i) => {
      const hasCorrupted = field.includes('?');
      if (hasCorrupted) {
        corruptedCount++;
        console.log(`‚ùå –ü–æ–ª–µ ${i + 1}: "${field}" - –ü–û–í–†–ï–ñ–î–ï–ù–û`);
      } else {
        console.log(`‚úÖ –ü–æ–ª–µ ${i + 1}: "${field}" - OK`);
      }
    });
    
    if (corruptedCount === 0) {
      console.log('\nüéâ –í–°–ï –ü–û–õ–Ø –ò–ú–ï–Æ–¢ –ü–†–ê–í–ò–õ–¨–ù–£–Æ –ö–û–î–ò–†–û–í–ö–£!');
    } else {
      console.log(`\n‚ùå –ù–ê–ô–î–ï–ù–û ${corruptedCount} –ü–û–í–†–ï–ñ–î–ï–ù–ù–´–• –ü–û–õ–ï–ô`);
    }
    
    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    console.log('\nüåê –¢–ï–°–¢–ò–†–£–ï–ú API...');
    try {
      const response = await fetch('http://localhost:3000/api/admin/templates?catalogCategoryId=cmg50xcgs001cv7mn0tdyk1wo');
      if (response.ok) {
        const data = await response.json();
        if (data.success && data.template) {
          console.log('‚úÖ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ');
          console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π –≤ API: ${data.template.requiredFields.length}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –≤ API
          const apiCorruptedFields = data.template.requiredFields.filter(field => field.includes('?'));
          if (apiCorruptedFields.length === 0) {
            console.log('‚úÖ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π');
          } else {
            console.log(`‚ùå API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ${apiCorruptedFields.length} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π`);
            apiCorruptedFields.forEach(field => {
              console.log(`  - "${field}"`);
            });
          }
        }
      }
    } catch (apiError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API:', apiError.message);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

completelyRecreateTemplate();
