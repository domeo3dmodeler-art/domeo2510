const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function fixDecimalPrices() {
  try {
    console.log('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–ï–°–Ø–¢–ò–ß–ù–´–• –ó–ù–ê–ß–ï–ù–ò–ô –í "–¶–µ–Ω–∞ –æ–ø—Ç"\n');
    console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥—É—Ç –∏–∑–º–µ–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ!\n');

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
    const category = await prisma.catalogCategory.findFirst({
      where: { name: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏' }
    });

    if (!category) {
      console.log('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const products = await prisma.product.findMany({
      where: { catalog_category_id: category.id },
      select: {
        id: true,
        sku: true,
        name: true,
        properties_data: true
      }
    });

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${products.length}\n`);

    let totalFixed = 0;
    let productsWithChanges = 0;
    let decimalPricesFound = 0;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
    for (let i = 0; i < products.length; i++) {
      const product = products[i];
      
      if (!product.properties_data) continue;

      let properties;
      try {
        properties = typeof product.properties_data === 'string' 
          ? JSON.parse(product.properties_data) 
          : product.properties_data;
      } catch (e) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.id}`);
        continue;
      }

      let hasChanges = false;
      const fixedProperties = { ...properties };

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ "–¶–µ–Ω–∞ –æ–ø—Ç"
      if (fixedProperties['–¶–µ–Ω–∞ –æ–ø—Ç']) {
        const originalPrice = fixedProperties['–¶–µ–Ω–∞ –æ–ø—Ç'];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–º —Å –¥–µ—Å—è—Ç–∏—á–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏
        if (typeof originalPrice === 'string') {
          const numericValue = parseFloat(originalPrice);
          
          if (!isNaN(numericValue) && numericValue % 1 !== 0) {
            // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
            const roundedPrice = Math.round(numericValue);
            fixedProperties['–¶–µ–Ω–∞ –æ–ø—Ç'] = roundedPrice.toString();
            
            decimalPricesFound++;
            hasChanges = true;
            
            if (decimalPricesFound <= 10) {
              console.log(`   ${product.sku}: ${originalPrice} ‚Üí ${roundedPrice}`);
            }
          }
        }
      }

      // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
      if (hasChanges) {
        try {
          await prisma.product.update({
            where: { id: product.id },
            data: {
              properties_data: JSON.stringify(fixedProperties)
            }
          });
          
          productsWithChanges++;
          totalFixed++;
          
          if (totalFixed % 100 === 0) {
            console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalFixed}/${products.length}`);
          }
        } catch (error) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ${product.id}:`, error.message);
        }
      }
    }

    console.log(`\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!`);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   - –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);
    console.log(`   - –ù–∞–π–¥–µ–Ω–æ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö —Ü–µ–Ω: ${decimalPricesFound}`);
    console.log(`   - –¢–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏: ${productsWithChanges}`);
    console.log(`   - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${totalFixed}`);

    if (decimalPricesFound > 10) {
      console.log(`   - –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10 –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ ${decimalPricesFound}`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö —Ü–µ–Ω:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixDecimalPrices();
