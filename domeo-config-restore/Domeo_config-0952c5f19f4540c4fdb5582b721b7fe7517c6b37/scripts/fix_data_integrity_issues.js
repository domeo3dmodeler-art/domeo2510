const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function fixDataIntegrityIssues() {
  try {
    console.log('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•\n');

    // 1. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ JSON –ø–æ–ª–µ–π properties_data –∏ specifications
    console.log('1. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ JSON –ø–æ–ª–µ–π...');
    
    const productsWithBothFields = await prisma.product.findMany({
      where: {
        AND: [
          { properties_data: { not: '{}' } },
          { specifications: { not: '{}' } }
        ]
      },
      select: {
        id: true,
        properties_data: true,
        specifications: true
      }
    });

    console.log(`   - –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –æ–±–æ–∏—Ö –ø–æ–ª—è—Ö: ${productsWithBothFields.length}`);

    let mergedCount = 0;
    for (const product of productsWithBothFields) {
      try {
        const properties = typeof product.properties_data === 'string' 
          ? JSON.parse(product.properties_data) 
          : product.properties_data;
        
        const specifications = typeof product.specifications === 'string' 
          ? JSON.parse(product.specifications) 
          : product.specifications;

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É properties_data
        const mergedData = { ...specifications, ...properties };

        await prisma.product.update({
          where: { id: product.id },
          data: {
            properties_data: JSON.stringify(mergedData),
            specifications: '{}' // –û—á–∏—â–∞–µ–º specifications
          }
        });

        mergedCount++;
        
        if (mergedCount % 100 === 0) {
          console.log(`   - –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ: ${mergedCount} —Ç–æ–≤–∞—Ä–æ–≤`);
        }
      } catch (error) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ ${product.id}:`, error);
      }
    }

    console.log(`   ‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ JSON –ø–æ–ª–µ–π: ${mergedCount} —Ç–æ–≤–∞—Ä–æ–≤`);

    // 2. –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log('\n2. –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤...');
    
    try {
      // –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      await prisma.$executeRaw`
        CREATE INDEX IF NOT EXISTS idx_products_category_active_sku 
        ON products(catalog_category_id, is_active, sku)
      `;
      console.log('   ‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å: idx_products_category_active_sku');

      // –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ü–µ–Ω–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      await prisma.$executeRaw`
        CREATE INDEX IF NOT EXISTS idx_products_category_price 
        ON products(catalog_category_id, base_price)
      `;
      console.log('   ‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å: idx_products_category_price');

      // –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–∞ —Å–∫–ª–∞–¥–µ
      await prisma.$executeRaw`
        CREATE INDEX IF NOT EXISTS idx_products_stock 
        ON products(stock_quantity, is_active)
      `;
      console.log('   ‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å: idx_products_stock');

    } catch (error) {
      console.log('   ‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–Ω–¥–µ–∫—Å—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
    }

    // 3. –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('\n3. –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã —Å –Ω—É–ª–µ–≤—ã–º–∏ —Ü–µ–Ω–∞–º–∏
    const zeroPrices = await prisma.product.count({
      where: { base_price: 0 }
    });
    
    if (zeroPrices > 0) {
      console.log(`   - –¢–æ–≤–∞—Ä—ã —Å –Ω—É–ª–µ–≤—ã–º–∏ —Ü–µ–Ω–∞–º–∏: ${zeroPrices}`);
    } else {
      console.log(`   - –¢–æ–≤–∞—Ä—ã —Å –Ω—É–ª–µ–≤—ã–º–∏ —Ü–µ–Ω–∞–º–∏: 0`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
    const totalProducts = await prisma.product.count();
    console.log(`   - –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalProducts}`);

    // 4. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('\n4. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    await prisma.$executeRaw`VACUUM`;
    console.log('   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    
    await prisma.$executeRaw`ANALYZE`;
    console.log('   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤');

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
    
    const finalProductCount = await prisma.product.count();
    const finalCategoryCount = await prisma.catalogCategory.count();
    
    console.log(`   - –¢–æ–≤–∞—Ä–æ–≤: ${finalProductCount}`);
    console.log(`   - –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${finalCategoryCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
    const indexes = await prisma.$queryRaw`
      SELECT name FROM sqlite_master 
      WHERE type='index' AND name LIKE 'idx_products_%'
      ORDER BY name
    `;
    
    console.log(`   - –ò–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤: ${indexes.length}`);
    indexes.forEach(idx => {
      console.log(`     * ${idx.name}`);
    });

    console.log('\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`   - –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ JSON –ø–æ–ª–µ–π: ${mergedCount}`);
    console.log(`   - –°–æ–∑–¥–∞–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: 3`);
    console.log(`   - –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalProducts}`);
    console.log(`   - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –±–∞–∑–∞: –¥–∞`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixDataIntegrityIssues();
