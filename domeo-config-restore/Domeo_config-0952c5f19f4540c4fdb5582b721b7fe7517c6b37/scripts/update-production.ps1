# üöÄ PowerShell —Å–∫—Ä–∏–ø—Ç –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è production —Å—Ä–µ–¥—ã
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .\scripts\update-production.ps1

param(
    [switch]$SkipBackup,
    [switch]$Force
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤
$ErrorActionPreference = "Stop"

function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host "[$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')] $Message" -ForegroundColor $Color
}

function Write-Success {
    param([string]$Message)
    Write-ColorOutput "‚úÖ $Message" "Green"
}

function Write-Error {
    param([string]$Message)
    Write-ColorOutput "‚ùå $Message" "Red"
    throw $Message
}

function Write-Warning {
    param([string]$Message)
    Write-ColorOutput "‚ö†Ô∏è $Message" "Yellow"
}

function Write-Info {
    param([string]$Message)
    Write-ColorOutput "‚ÑπÔ∏è $Message" "Cyan"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
function Test-RequiredFiles {
    Write-Info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤..."
    
    $requiredFiles = @(
        "docker-compose.production.yml",
        "Dockerfile.production",
        "package.json"
    )
    
    foreach ($file in $requiredFiles) {
        if (-not (Test-Path $file)) {
            Write-Error "–§–∞–π–ª $file –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        }
    }
    
    Write-Success "–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function Backup-Database {
    if ($SkipBackup) {
        Write-Warning "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞"
        return
    }
    
    Write-Info "–°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    $backupDir = "backups"
    $backupFile = "$backupDir\backup_$(Get-Date -Format 'yyyyMMdd_HHmmss').sql"
    
    if (-not (Test-Path $backupDir)) {
        New-Item -ItemType Directory -Path $backupDir | Out-Null
    }
    
    try {
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        $dbStatus = docker-compose -f docker-compose.production.yml ps db 2>$null
        if ($dbStatus -match "Up") {
            docker-compose -f docker-compose.production.yml exec -T db pg_dump -U postgres domeo | Out-File -FilePath $backupFile -Encoding UTF8
            Write-Success "–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: $backupFile"
        } else {
            Write-Warning "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±—ç–∫–∞–ø"
        }
    } catch {
        Write-Warning "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø: $($_.Exception.Message)"
    }
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
function Stop-Services {
    Write-Info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º production —Å–µ—Ä–≤–∏—Å—ã..."
    docker-compose -f docker-compose.production.yml down
    Write-Success "–°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞
function Update-Code {
    Write-Info "–û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    $gitStatus = git status --porcelain
    if ($gitStatus) {
        Write-Warning "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è!"
        Write-Host $gitStatus
        if (-not $Force) {
            $response = Read-Host "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N)"
            if ($response -ne "y" -and $response -ne "Y") {
                Write-Error "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
            }
        }
    }
    
    git pull origin main
    Write-Success "–ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω"
}

# –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫
function Rebuild-AndStart {
    Write-Info "–ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã..."
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤
    docker system prune -f
    
    # –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫
    docker-compose -f docker-compose.production.yml up -d --build
    
    Write-Success "–°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω—ã –∏ –∑–∞–ø—É—â–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
function Test-Health {
    Write-Info "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    Start-Sleep -Seconds 10
    
    $maxAttempts = 30
    $attempt = 1
    
    while ($attempt -le $maxAttempts) {
        try {
            $response = Invoke-WebRequest -Uri "http://localhost:3000/api/health" -Method GET -TimeoutSec 5
            if ($response.StatusCode -eq 204) {
                Write-Success "Health check –ø—Ä–æ–π–¥–µ–Ω"
                break
            }
        } catch {
            Write-Info "–ü–æ–ø—ã—Ç–∫–∞ $attempt/$maxAttempts : —Å–µ—Ä–≤–∏—Å –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤..."
            Start-Sleep -Seconds 5
            $attempt++
        }
    }
    
    if ($attempt -gt $maxAttempts) {
        Write-Error "–°–µ—Ä–≤–∏—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ $maxAttempts –ø–æ–ø—ã—Ç–æ–∫"
    }
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    try {
        Invoke-WebRequest -Uri "http://localhost:3000/api/catalog/categories" -Method GET -TimeoutSec 5 | Out-Null
        Invoke-WebRequest -Uri "http://localhost:3000/api/catalog/products" -Method GET -TimeoutSec 5 | Out-Null
        Write-Success "–í—Å–µ API –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã"
    } catch {
        Write-Error "API –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã: $($_.Exception.Message)"
    }
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
function Show-Status {
    Write-Info "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
    docker-compose -f docker-compose.production.yml ps
    
    Write-Info "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function Main {
    Write-ColorOutput "üöÄ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è production —Å—Ä–µ–¥—ã" "Magenta"
    
    Test-RequiredFiles
    Backup-Database
    Stop-Services
    Update-Code
    Rebuild-AndStart
    Test-Health
    Show-Status
    
    Write-Success "üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ production —Å—Ä–µ–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
    Write-Success "üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:3000"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
try {
    Main
} catch {
    Write-Error "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: $($_.Exception.Message)"
    exit 1
}
