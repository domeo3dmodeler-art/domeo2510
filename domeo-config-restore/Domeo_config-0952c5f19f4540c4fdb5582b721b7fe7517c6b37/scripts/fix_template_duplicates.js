const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

// –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —à–∞–±–ª–æ–Ω–∞ "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏" –ë–ï–ó –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø
const correctFields = [
  "Domeo –ê—Ä—Ç–∏–∫—É–ª 1C (–ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∞—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)",
  "–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", 
  "Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web",
  "–®–∏—Ä–∏–Ω–∞/–º–º",
  "–í—ã—Å–æ—Ç–∞/–º–º", 
  "–¢–æ–ª—â–∏–Ω–∞/–º–º",
  "–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è",
  "Domeo_–¶–≤–µ—Ç",
  "Domeo_–°—Ç–∏–ª—å Web",
  "–¢–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
  "–¢–∏–ø –æ—Ç–∫—Ä—ã–≤–∞–Ω–∏—è",
  "–ü–æ—Å—Ç–∞–≤—â–∏–∫",
  "–ï–¥.–∏–∑–º.",
  "–°–∫–ª–∞–¥/–∑–∞–∫–∞–∑",
  "–¶–µ–Ω–∞ —Ä—Ä—Ü (–≤–∫–ª—é—á–∞—è —Ü–µ–Ω—É –ø–æ–ª–æ—Ç–Ω–∞, –∫–æ—Ä–æ–±–∞, –Ω–∞–ª–∏—á–Ω–∏–∫–æ–≤, –¥–æ–±–æ—Ä–æ–≤)",
  "–¶–µ–Ω–∞ –æ–ø—Ç",
  "–ö—Ä–æ–º–∫–∞",
  "–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–¥–±–∞–≤–∫–∏ –∑–∞ –∫—Ä–æ–º–∫—É",
  "–ú–æ–ª–¥–∏–Ω–≥",
  "–°—Ç–µ–∫–ª–æ",
  "–§–∞–±—Ä–∏–∫–∞_–ö–æ–ª–ª–µ–∫—Ü–∏—è",
  "–§–∞–±—Ä–∏–∫–∞_–¶–≤–µ—Ç/–û—Ç–¥–µ–ª–∫–∞"
];

async function fixTemplateFields() {
  try {
    console.log('=== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –ü–û–õ–ï–ô –í –®–ê–ë–õ–û–ù–ï ===');
    
    // –ù–∞—Ö–æ–¥–∏–º —à–∞–±–ª–æ–Ω –¥–ª—è "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
    const template = await prisma.importTemplate.findFirst({
      where: { catalog_category_id: 'cmg50xcgs001cv7mn0tdyk1wo' }
    });
    
    if (!template) {
      console.log('‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω: ${template.id}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–ª—è
    const currentFields = JSON.parse(template.required_fields || '[]');
    console.log(`üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π: ${currentFields.length}`);
    
    // –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const duplicates = currentFields.filter((field, index) => currentFields.indexOf(field) !== index);
    if (duplicates.length > 0) {
      console.log('üîÑ –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã:');
      duplicates.forEach(dup => console.log(`  - "${dup}"`));
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —à–∞–±–ª–æ–Ω–∞
    const templateConfig = {
      headers: correctFields,
      requiredFields: correctFields,
      fieldMappings: {}
    };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    const updatedTemplate = await prisma.importTemplate.update({
      where: { id: template.id },
      data: {
        required_fields: JSON.stringify(correctFields),
        calculator_fields: JSON.stringify([]),
        export_fields: JSON.stringify([]),
        template_config: JSON.stringify(templateConfig),
        field_mappings: JSON.stringify({}),
        updated_at: new Date()
      }
    });
    
    console.log('‚úÖ –®–∞–±–ª–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω');
    console.log(`üìä –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π: ${correctFields.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const verificationTemplate = await prisma.importTemplate.findUnique({
      where: { id: template.id }
    });
    
    const parsedFields = JSON.parse(verificationTemplate.required_fields);
    console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê:');
    console.log('–í—Å–µ –ø–æ–ª—è:');
    parsedFields.forEach((field, i) => {
      console.log(`  ${i + 1}: "${field}"`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    const uniqueFields = [...new Set(parsedFields)];
    if (uniqueFields.length === parsedFields.length) {
      console.log('‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ—Ç');
    } else {
      console.log(`‚ùå –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã: ${parsedFields.length - uniqueFields.length}`);
    }
    
    console.log('\n‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixTemplateFields();
