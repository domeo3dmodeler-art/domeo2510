const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkActualEncoding() {
  try {
    console.log('üîç –ü–†–û–í–ï–†–Ø–ï–ú –†–ï–ê–õ–¨–ù–£–Æ –ö–û–î–ò–†–û–í–ö–£ –í –ë–ê–ó–ï –î–ê–ù–ù–´–•\n');

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
    const category = await prisma.catalogCategory.findFirst({
      where: { name: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏' }
    });

    if (!category) {
      console.log('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const products = await prisma.product.findMany({
      where: { catalog_category_id: category.id },
      select: {
        id: true,
        sku: true,
        name: true,
        properties_data: true
      },
      take: 3
    });

    console.log(`üì¶ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤:\n`);

    products.forEach((product, index) => {
      console.log(`\n${index + 1}. –¢–û–í–ê–†: ${product.sku}`);
      
      if (!product.properties_data) {
        console.log('   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–≤–æ–π—Å—Ç–≤–∞—Ö');
        return;
      }

      let properties;
      try {
        properties = typeof product.properties_data === 'string' 
          ? JSON.parse(product.properties_data) 
          : product.properties_data;
      } catch (e) {
        console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ properties_data');
        return;
      }

      console.log('   üìã –°–≤–æ–π—Å—Ç–≤–∞:');
      Object.keys(properties).forEach(field => {
        const value = properties[field];
        console.log(`     "${field}": "${value}"`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        if (field.includes('?') || value.includes('?')) {
          console.log(`       ‚ö†Ô∏è  –°–û–î–ï–†–ñ–ò–¢ –í–û–ü–†–û–°–ò–¢–ï–õ–¨–ù–´–ï –ó–ù–ê–ö–ò!`);
        }
        if (field.includes('') || value.includes('')) {
          console.log(`       ‚ö†Ô∏è  –°–û–î–ï–†–ñ–ò–¢ –ü–£–°–¢–´–ï –°–ò–ú–í–û–õ–´!`);
        }
      });
    });

    // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º —à–∞–±–ª–æ–Ω
    console.log('\nüîß –ü–†–û–í–ï–†–Ø–ï–ú –®–ê–ë–õ–û–ù –ò–ú–ü–û–†–¢–ê:');
    
    const template = await prisma.importTemplate.findUnique({
      where: { catalog_category_id: category.id }
    });

    if (template) {
      console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: "${template.name}"`);
      console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: "${template.description}"`);
      
      let requiredFields = JSON.parse(template.required_fields || '[]');
      console.log(`   –ü–æ–ª—è —à–∞–±–ª–æ–Ω–∞:`);
      requiredFields.forEach((field, index) => {
        console.log(`     ${index + 1}. "${field}"`);
        if (field.includes('?') || field.includes('')) {
          console.log(`       ‚ö†Ô∏è  –°–û–î–ï–†–ñ–ò–¢ –ü–†–û–ë–õ–ï–ú–ù–´–ï –°–ò–ú–í–û–õ–´!`);
        }
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkActualEncoding();
