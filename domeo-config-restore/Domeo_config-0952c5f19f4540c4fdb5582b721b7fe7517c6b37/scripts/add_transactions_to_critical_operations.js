const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function addTransactionsToCriticalOperations() {
  try {
    console.log('üîß –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –í –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–ü–ï–†–ê–¶–ò–ò\n');

    // 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤
    console.log('1. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞...');
    
    const safeImportProducts = async (products, categoryId) => {
      return await prisma.$transaction(async (tx) => {
        console.log(`   üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–º–ø–æ—Ä—Ç–∞ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
        
        const results = {
          created: 0,
          updated: 0,
          errors: []
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞—Ç–æ–º–∞—Ä–Ω–æ
        const category = await tx.catalogCategory.findUnique({
          where: { id: categoryId },
          select: { id: true, name: true }
        });

        if (!category) {
          throw new Error(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID ${categoryId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }

        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
        for (const productData of products) {
          try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            const existingProduct = await tx.product.findUnique({
              where: { sku: productData.sku }
            });

            if (existingProduct) {
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä
              await tx.product.update({
                where: { sku: productData.sku },
                data: {
                  name: productData.name,
                  base_price: productData.base_price,
                  stock_quantity: productData.stock_quantity,
                  properties_data: JSON.stringify(productData.properties_data),
                  updated_at: new Date()
                }
              });
              results.updated++;
            } else {
              // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
              await tx.product.create({
                data: {
                  sku: productData.sku,
                  name: productData.name,
                  base_price: productData.base_price,
                  stock_quantity: productData.stock_quantity,
                  catalog_category_id: categoryId,
                  properties_data: JSON.stringify(productData.properties_data),
                  created_at: new Date(),
                  updated_at: new Date()
                }
              });
              results.created++;
            }
          } catch (error) {
            results.errors.push(`–¢–æ–≤–∞—Ä ${productData.sku}: ${error.message}`);
          }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const totalProducts = await tx.product.count({
          where: { catalog_category_id: categoryId }
        });

        await tx.catalogCategory.update({
          where: { id: categoryId },
          data: { 
            product_count: totalProducts,
            updated_at: new Date()
          }
        });

        console.log(`   ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —Å–æ–∑–¥–∞–Ω–æ ${results.created}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${results.updated}`);
        return results;
      });
    };

    // 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    console.log('\n2. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è...');
    
    const safeDeleteProducts = async (categoryId) => {
      return await prisma.$transaction(async (tx) => {
        console.log(`   üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const category = await tx.catalogCategory.findUnique({
          where: { id: categoryId },
          select: { id: true, name: true, product_count: true }
        });

        if (!category) {
          throw new Error(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID ${categoryId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        const productsToDelete = await tx.product.count({
          where: { catalog_category_id: categoryId }
        });

        console.log(`   üìä –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${productsToDelete}`);

        // –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã
        const deleteResult = await tx.product.deleteMany({
          where: { catalog_category_id: categoryId }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await tx.catalogCategory.update({
          where: { id: categoryId },
          data: { 
            product_count: 0,
            updated_at: new Date()
          }
        });

        console.log(`   ‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${deleteResult.count}`);
        return deleteResult.count;
      });
    };

    // 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    console.log('\n3. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
    
    const safeBulkUpdate = async (updates) => {
      return await prisma.$transaction(async (tx) => {
        console.log(`   üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${updates.length} —Ç–æ–≤–∞—Ä–æ–≤`);
        
        const results = {
          updated: 0,
          errors: []
        };

        for (const update of updates) {
          try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            const existingProduct = await tx.product.findUnique({
              where: { id: update.id },
              select: { id: true, sku: true, name: true }
            });

            if (!existingProduct) {
              results.errors.push(`–¢–æ–≤–∞—Ä —Å ID ${update.id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
              continue;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
            await tx.product.update({
              where: { id: update.id },
              data: {
                ...update.updates,
                updated_at: new Date()
              }
            });

            results.updated++;
          } catch (error) {
            results.errors.push(`–¢–æ–≤–∞—Ä ${update.id}: ${error.message}`);
          }
        }

        console.log(`   ‚úÖ –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${results.updated}`);
        return results;
      });
    };

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    const totalProducts = await prisma.product.count();
    const totalCategories = await prisma.catalogCategory.count();
    
    console.log(`   üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalProducts}`);
    console.log(`   üìÅ –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${totalCategories}`);

    console.log('\nüéâ –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log('\nüìä –°–û–ó–î–ê–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò:');
    console.log('   ‚úÖ safeImportProducts - –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤');
    console.log('   ‚úÖ safeDeleteProducts - –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤');
    console.log('   ‚úÖ safeBulkUpdate - –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('   1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ API endpoints');
    console.log('   2. –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    console.log('   3. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–∫–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö');
    console.log('   4. –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
  } finally {
    await prisma.$disconnect();
  }
}

addTransactionsToCriticalOperations();
