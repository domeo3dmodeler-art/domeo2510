const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function fixTemplateNameAndDescription() {
  try {
    console.log('=== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê–ó–í–ê–ù–ò–Ø –ò –û–ü–ò–°–ê–ù–ò–Ø –®–ê–ë–õ–û–ù–ê ===');
    
    // –ù–∞—Ö–æ–¥–∏–º —à–∞–±–ª–æ–Ω –¥–ª—è "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
    const template = await prisma.importTemplate.findFirst({
      where: { catalog_category_id: 'cmg50xcgs001cv7mn0tdyk1wo' }
    });
    
    if (!template) {
      console.log('‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω: ${template.id}`);
    console.log(`–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: "${template.name}"`);
    console.log(`–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: "${template.description}"`);
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
    const updatedTemplate = await prisma.importTemplate.update({
      where: { id: template.id },
      data: {
        name: '–®–∞–±–ª–æ–Ω –¥–ª—è –ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏',
        description: '–ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π —à–∞–±–ª–æ–Ω –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã—Ö –¥–≤–µ—Ä–µ–π',
        updated_at: new Date()
      }
    });
    
    console.log('‚úÖ –®–∞–±–ª–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω');
    console.log(`–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: "${updatedTemplate.name}"`);
    console.log(`–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: "${updatedTemplate.description}"`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const verificationTemplate = await prisma.importTemplate.findUnique({
      where: { id: template.id }
    });
    
    console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê:');
    console.log(`–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: ${verificationTemplate.name.includes('?')}`);
    console.log(`–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: ${verificationTemplate.description.includes('?')}`);
    
    if (!verificationTemplate.name.includes('?') && !verificationTemplate.description.includes('?')) {
      console.log('üéâ –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
    } else {
      console.log('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –≤—Å–µ –µ—â–µ –µ—Å—Ç—å');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixTemplateNameAndDescription();
