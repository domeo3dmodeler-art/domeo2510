const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function analyzeImportMapping() {
    console.log('üîç –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–´ –ú–ê–ü–ü–ò–ù–ì–ê –°–í–û–ô–°–¢–í –¢–û–í–ê–†–û–í –ü–†–ò –ò–ú–ü–û–†–¢–ï');
    console.log('========================================================');
    console.log('');

    try {
        // 1. –ê–Ω–∞–ª–∏–∑ —à–∞–±–ª–æ–Ω–æ–≤ –∏–º–ø–æ—Ä—Ç–∞
        console.log('üìã –®–ê–ë–õ–û–ù–´ –ò–ú–ü–û–†–¢–ê:');
        console.log('-------------------');
        
        const importTemplates = await prisma.importTemplate.findMany({
            include: {
                catalog_category: true,
                _count: {
                    select: {
                        import_history: true
                    }
                }
            }
        });

        console.log(`–í—Å–µ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤ –∏–º–ø–æ—Ä—Ç–∞: ${importTemplates.length}`);
        console.log('');

        for (const template of importTemplates) {
            console.log(`üìÑ –®–∞–±–ª–æ–Ω: "${template.name}" (ID: ${template.id})`);
            console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${template.catalog_category.name}`);
            console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${template.description || '–ù–µ—Ç'}`);
            console.log(`   –ê–∫—Ç–∏–≤–Ω—ã–π: ${template.is_active ? '–î–∞' : '–ù–µ—Ç'}`);
            console.log(`   –ò–º–ø–æ—Ä—Ç–æ–≤: ${template._count.import_history}`);
            console.log('');

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è —à–∞–±–ª–æ–Ω–∞
            try {
                const requiredFields = template.required_fields ? JSON.parse(template.required_fields) : [];
                const calculatorFields = template.calculator_fields ? JSON.parse(template.calculator_fields) : [];
                const exportFields = template.export_fields ? JSON.parse(template.export_fields) : [];
                const fieldMappings = template.field_mappings ? JSON.parse(template.field_mappings) : null;
                const templateConfig = template.template_config ? JSON.parse(template.template_config) : null;

                console.log(`   üìù –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (${requiredFields.length}):`);
                requiredFields.forEach((field, index) => {
                    console.log(`      ${index + 1}. ${field.displayName || field.fieldName || field} (${field.dataType || 'text'})`);
                });

                console.log(`   üßÆ –ü–æ–ª—è –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ (${calculatorFields.length}):`);
                calculatorFields.forEach((field, index) => {
                    console.log(`      ${index + 1}. ${field.displayName || field.fieldName || field} (${field.dataType || 'text'})`);
                });

                console.log(`   üì§ –ü–æ–ª—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (${exportFields.length}):`);
                exportFields.forEach((field, index) => {
                    console.log(`      ${index + 1}. ${field.displayName || field.fieldName || field} (${field.dataType || 'text'})`);
                });

                if (fieldMappings) {
                    console.log(`   üîó –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π:`);
                    Object.entries(fieldMappings).forEach(([key, value]) => {
                        console.log(`      ${key} ‚Üí ${value}`);
                    });
                }

                if (templateConfig) {
                    console.log(`   ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞:`);
                    console.log(`      ${JSON.stringify(templateConfig, null, 6)}`);
                }

            } catch (error) {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –ø–æ–ª–µ–π: ${error.message}`);
            }

            console.log('');
        }

        // 2. –ê–Ω–∞–ª–∏–∑ —Å–≤–æ–π—Å—Ç–≤ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
        console.log('üè∑Ô∏è –°–í–û–ô–°–¢–í–ê –¢–û–í–ê–†–û–í –ò –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø:');
        console.log('-----------------------------------');
        
        const propertyAssignments = await prisma.categoryPropertyAssignment.findMany({
            include: {
                product_property: true,
                catalog_category: true
            }
        });

        console.log(`–í—Å–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π —Å–≤–æ–π—Å—Ç–≤: ${propertyAssignments.length}`);
        console.log('');

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        const assignmentsByCategory = {};
        propertyAssignments.forEach(assignment => {
            const categoryName = assignment.catalog_category.name;
            if (!assignmentsByCategory[categoryName]) {
                assignmentsByCategory[categoryName] = [];
            }
            assignmentsByCategory[categoryName].push(assignment);
        });

        Object.entries(assignmentsByCategory).forEach(([categoryName, assignments]) => {
            console.log(`üìÇ ${categoryName}:`);
            assignments.forEach(assignment => {
                console.log(`   üè∑Ô∏è ${assignment.product_property.name} (${assignment.product_property.type})`);
                console.log(`      –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ: ${assignment.is_required ? '–î–∞' : '–ù–µ—Ç'}`);
                console.log(`      –î–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: ${assignment.is_for_calculator ? '–î–∞' : '–ù–µ—Ç'}`);
                console.log(`      –î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞: ${assignment.is_for_export ? '–î–∞' : '–ù–µ—Ç'}`);
            });
            console.log('');
        });

        // 3. –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
        console.log('üõçÔ∏è –¢–û–í–ê–†–´ –°–û –°–í–û–ô–°–¢–í–ê–ú–ò:');
        console.log('-------------------------');
        
        const productsWithProperties = await prisma.product.findMany({
            where: {
                properties_data: {
                    not: '{}'
                }
            },
            select: {
                id: true,
                name: true,
                sku: true,
                properties_data: true,
                catalog_category: {
                    select: {
                        name: true
                    }
                }
            },
            take: 5
        });

        console.log(`–¢–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏: ${productsWithProperties.length} (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5)`);
        console.log('');

        productsWithProperties.forEach((product, index) => {
            console.log(`${index + 1}. ${product.name} (SKU: ${product.sku})`);
            console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.catalog_category.name}`);
            console.log(`   –°–≤–æ–π—Å—Ç–≤–∞:`);
            
            try {
                const properties = JSON.parse(product.properties_data);
                Object.entries(properties).forEach(([key, value]) => {
                    console.log(`      ${key}: ${value}`);
                });
            } catch (error) {
                console.log(`      ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${error.message}`);
            }
            console.log('');
        });

        // 4. –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∏–º–ø–æ—Ä—Ç–∞
        console.log('üìä –ò–°–¢–û–†–ò–Ø –ò–ú–ü–û–†–¢–ê:');
        console.log('------------------');
        
        const importHistory = await prisma.importHistory.findMany({
            include: {
                template: {
                    include: {
                        catalog_category: true
                    }
                }
            },
            orderBy: {
                created_at: 'desc'
            },
            take: 10
        });

        console.log(`–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–º–ø–æ—Ä—Ç—ã (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º 10):`);
        console.log('');

        importHistory.forEach((history, index) => {
            console.log(`${index + 1}. ${history.filename}`);
            console.log(`   –î–∞—Ç–∞: ${history.created_at.toLocaleString()}`);
            console.log(`   –°—Ç–∞—Ç—É—Å: ${history.status}`);
            console.log(`   –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${history.imported_count}`);
            console.log(`   –û—à–∏–±–æ–∫: ${history.error_count}`);
            if (history.template) {
                console.log(`   –®–∞–±–ª–æ–Ω: ${history.template.name} (${history.template.catalog_category.name})`);
            }
            console.log('');
        });

        // 5. –ê–Ω–∞–ª–∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª–µ–π
        console.log('üîó –ê–ù–ê–õ–ò–ó –ú–ê–ü–ü–ò–ù–ì–ê –ü–û–õ–ï–ô:');
        console.log('-------------------------');
        
        console.log('–¢–µ–∫—É—â–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–∞–ø–ø–∏–Ω–≥–∞:');
        console.log('1. –ó–∞–≥–æ–ª–æ–≤–∫–∏ Excel —Ñ–∞–π–ª–∞ ‚Üí –ü–æ–ª—è —à–∞–±–ª–æ–Ω–∞');
        console.log('2. –ü–æ–ª—è —à–∞–±–ª–æ–Ω–∞ ‚Üí –°–≤–æ–π—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ (JSON)');
        console.log('3. –°–≤–æ–π—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ ‚Üí –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö');
        console.log('');

        console.log('–ü—Ä–æ–±–ª–µ–º—ã —Ç–µ–∫—É—â–µ–π —Å–∏—Å—Ç–µ–º—ã:');
        console.log('‚ùå –°–≤–æ–π—Å—Ç–≤–∞ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ JSON –ø–æ–ª–µ (–Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ)');
        console.log('‚ùå –ù–µ—Ç –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–≤–æ–π—Å—Ç–≤–∞–º');
        console.log('‚ùå –°–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞');
        console.log('‚ùå –ù–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–≤–æ–π—Å—Ç–≤');
        console.log('');

        console.log('–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:');
        console.log('‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö');
        console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞');
        console.log('‚úÖ –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞');
        console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤');
        console.log('');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º–∞–ø–ø–∏–Ω–≥–∞:', error);
    } finally {
        await prisma.$disconnect();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
analyzeImportMapping();
