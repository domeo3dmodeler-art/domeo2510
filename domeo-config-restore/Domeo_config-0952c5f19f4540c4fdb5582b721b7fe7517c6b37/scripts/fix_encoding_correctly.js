const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function fixEncodingCorrectly() {
  try {
    console.log('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–î–ò–†–û–í–ö–ò –í –ë–ê–ó–ï –î–ê–ù–ù–´–•\n');
    console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥—É—Ç –∏–∑–º–µ–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ!\n');

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
    const category = await prisma.catalogCategory.findFirst({
      where: { name: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏' }
    });

    if (!category) {
      console.log('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const products = await prisma.product.findMany({
      where: { catalog_category_id: category.id },
      select: {
        id: true,
        sku: true,
        name: true,
        properties_data: true
      }
    });

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${products.length}\n`);

    let totalFixed = 0;
    let productsWithChanges = 0;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
    for (let i = 0; i < products.length; i++) {
      const product = products[i];
      
      if (!product.properties_data) continue;

      let properties;
      try {
        properties = typeof product.properties_data === 'string' 
          ? JSON.parse(product.properties_data) 
          : product.properties_data;
      } catch (e) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.id}`);
        continue;
      }

      let hasChanges = false;
      const fixedProperties = {};

      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
      Object.keys(properties).forEach(originalField => {
        const originalValue = properties[originalField];
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è - —É–±–∏—Ä–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        let fixedField = originalField;
        
        // –£–±–∏—Ä–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
        fixedField = fixedField.replace(/[\u200B-\u200D\uFEFF]/g, ''); // –£–±–∏—Ä–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        fixedField = fixedField.replace(/\u00A0/g, ' '); // –ó–∞–º–µ–Ω—è–µ–º –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ - —É–±–∏—Ä–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        let fixedValue = originalValue;
        if (typeof fixedValue === 'string') {
          fixedValue = fixedValue.replace(/[\u200B-\u200D\uFEFF]/g, ''); // –£–±–∏—Ä–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
          fixedValue = fixedValue.replace(/\u00A0/g, ' '); // –ó–∞–º–µ–Ω—è–µ–º –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        }
        
        fixedProperties[fixedField] = fixedValue;
        
        if (originalField !== fixedField || originalValue !== fixedValue) {
          hasChanges = true;
        }
      });

      // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
      if (hasChanges) {
        try {
          await prisma.product.update({
            where: { id: product.id },
            data: {
              properties_data: JSON.stringify(fixedProperties)
            }
          });
          
          productsWithChanges++;
          totalFixed++;
          
          if (totalFixed % 100 === 0) {
            console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalFixed}/${products.length}`);
          }
        } catch (error) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ${product.id}:`, error.message);
        }
      }
    }

    console.log(`\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!`);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   - –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);
    console.log(`   - –¢–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏: ${productsWithChanges}`);
    console.log(`   - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${totalFixed}`);

    // –¢–∞–∫–∂–µ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω –∏–º–ø–æ—Ä—Ç–∞
    console.log(`\nüîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω –∏–º–ø–æ—Ä—Ç–∞...`);
    
    const template = await prisma.importTemplate.findUnique({
      where: { catalog_category_id: category.id }
    });

    if (template) {
      let requiredFields = JSON.parse(template.required_fields || '[]');
      const originalFields = [...requiredFields];
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ —à–∞–±–ª–æ–Ω–µ - —É–±–∏—Ä–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
      requiredFields = requiredFields.map(field => {
        let fixedField = field;
        fixedField = fixedField.replace(/[\u200B-\u200D\uFEFF]/g, ''); // –£–±–∏—Ä–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        fixedField = fixedField.replace(/\u00A0/g, ' '); // –ó–∞–º–µ–Ω—è–µ–º –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        return fixedField;
      });
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
      let fixedName = template.name;
      if (typeof fixedName === 'string') {
        fixedName = fixedName.replace(/[\u200B-\u200D\uFEFF]/g, '');
        fixedName = fixedName.replace(/\u00A0/g, ' ');
      }
      
      let fixedDescription = template.description || '';
      if (typeof fixedDescription === 'string') {
        fixedDescription = fixedDescription.replace(/[\u200B-\u200D\uFEFF]/g, '');
        fixedDescription = fixedDescription.replace(/\u00A0/g, ' ');
      }
      
      if (JSON.stringify(originalFields) !== JSON.stringify(requiredFields) || 
          template.name !== fixedName || 
          template.description !== fixedDescription) {
        await prisma.importTemplate.update({
          where: { id: template.id },
          data: {
            required_fields: JSON.stringify(requiredFields),
            name: fixedName,
            description: fixedDescription
          }
        });
        console.log(`‚úÖ –®–∞–±–ª–æ–Ω –∏–º–ø–æ—Ä—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω`);
      } else {
        console.log(`‚ÑπÔ∏è  –®–∞–±–ª–æ–Ω –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π`);
      }
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixEncodingCorrectly();
