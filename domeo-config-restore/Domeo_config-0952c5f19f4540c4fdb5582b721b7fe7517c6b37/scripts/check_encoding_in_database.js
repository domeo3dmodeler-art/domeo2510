const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function checkEncodingInDatabase() {
  const categoryId = 'cmg50xcgs001cv7mn0tdyk1wo';

  try {
    const template = await prisma.importTemplate.findUnique({
      where: { catalog_category_id: categoryId },
    });

    if (!template) {
      console.log('‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
    console.log('üìã –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:', template.name);
    console.log('üìã Required fields (raw):', template.required_fields);
    
    const requiredFields = JSON.parse(template.required_fields || '[]');
    console.log('üìã Required fields (parsed):', requiredFields);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –ø–æ–ª–µ–π:');
    requiredFields.forEach((field, index) => {
      console.log(`${index + 1}. "${field}" (–¥–ª–∏–Ω–∞: ${field.length})`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
      const hasEncodingIssues = field.includes('?') || field.includes('ÔøΩ');
      if (hasEncodingIssues) {
        console.log(`   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã`);
      } else {
        console.log(`   ‚úÖ –ö–æ–¥–∏—Ä–æ–≤–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ`);
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkEncodingInDatabase();
