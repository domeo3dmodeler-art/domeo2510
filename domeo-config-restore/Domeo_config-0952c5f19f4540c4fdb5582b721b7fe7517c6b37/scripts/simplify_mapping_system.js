const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function simplifyMappingSystem() {
    console.log('üîß –£–ü–†–û–©–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ú–ê–ü–ü–ò–ù–ì–ê');
    console.log('==============================');
    console.log('');

    try {
        // 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ —à–∞–±–ª–æ–Ω—ã –∏–º–ø–æ—Ä—Ç–∞
        console.log('üìã –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ò–• –®–ê–ë–õ–û–ù–û–í:');
        console.log('----------------------------');
        
        const importTemplates = await prisma.importTemplate.findMany({
            include: {
                catalog_category: true
            }
        });

        console.log(`–ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: ${importTemplates.length}`);
        console.log('');

        for (const template of importTemplates) {
            console.log(`üìÑ –®–∞–±–ª–æ–Ω: "${template.name}"`);
            console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${template.catalog_category.name}`);
            console.log(`   ID: ${template.id}`);
            console.log('');

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è —à–∞–±–ª–æ–Ω–∞
            try {
                const requiredFields = template.required_fields ? JSON.parse(template.required_fields) : [];
                const calculatorFields = template.calculator_fields ? JSON.parse(template.calculator_fields) : [];
                const exportFields = template.export_fields ? JSON.parse(template.export_fields) : [];
                const fieldMappings = template.field_mappings ? JSON.parse(template.field_mappings) : null;

                console.log(`   üìù –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (${requiredFields.length}):`);
                if (Array.isArray(requiredFields)) {
                    requiredFields.slice(0, 10).forEach((field, index) => {
                        const fieldName = field.displayName || field.fieldName || field;
                        console.log(`      ${index + 1}. ${fieldName}`);
                    });
                    if (requiredFields.length > 10) {
                        console.log(`      ... –∏ –µ—â–µ ${requiredFields.length - 10} –ø–æ–ª–µ–π`);
                    }
                } else {
                    console.log(`      ‚ùå –û—à–∏–±–∫–∞: requiredFields –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º`);
                }

                console.log(`   üßÆ –ü–æ–ª—è –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ (${calculatorFields.length}):`);
                if (Array.isArray(calculatorFields)) {
                    calculatorFields.slice(0, 5).forEach((field, index) => {
                        const fieldName = field.displayName || field.fieldName || field;
                        console.log(`      ${index + 1}. ${fieldName}`);
                    });
                    if (calculatorFields.length > 5) {
                        console.log(`      ... –∏ –µ—â–µ ${calculatorFields.length - 5} –ø–æ–ª–µ–π`);
                    }
                } else {
                    console.log(`      ‚ùå –û—à–∏–±–∫–∞: calculatorFields –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º`);
                }

                console.log(`   üì§ –ü–æ–ª—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (${exportFields.length}):`);
                if (Array.isArray(exportFields)) {
                    exportFields.slice(0, 5).forEach((field, index) => {
                        const fieldName = field.displayName || field.fieldName || field;
                        console.log(`      ${index + 1}. ${fieldName}`);
                    });
                    if (exportFields.length > 5) {
                        console.log(`      ... –∏ –µ—â–µ ${exportFields.length - 5} –ø–æ–ª–µ–π`);
                    }
                } else {
                    console.log(`      ‚ùå –û—à–∏–±–∫–∞: exportFields –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º`);
                }

                if (fieldMappings) {
                    console.log(`   üîó –¢–µ–∫—É—â–∏–π –º–∞–ø–ø–∏–Ω–≥ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10):`);
                    const mappingEntries = Object.entries(fieldMappings);
                    mappingEntries.slice(0, 10).forEach(([key, value], index) => {
                        console.log(`      ${index + 1}. ${key} ‚Üí ${value}`);
                    });
                    if (mappingEntries.length > 10) {
                        console.log(`      ... –∏ –µ—â–µ ${mappingEntries.length - 10} –º–∞–ø–ø–∏–Ω–≥–æ–≤`);
                    }
                }

            } catch (error) {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ${error.message}`);
            }

            console.log('');
        }

        // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        console.log('üõçÔ∏è –ê–ù–ê–õ–ò–ó –°–í–û–ô–°–¢–í –¢–û–í–ê–†–û–í:');
        console.log('---------------------------');
        
        const productsWithProperties = await prisma.product.findMany({
            where: {
                properties_data: {
                    not: '{}'
                }
            },
            select: {
                id: true,
                name: true,
                properties_data: true,
                catalog_category: {
                    select: {
                        name: true
                    }
                }
            },
            take: 3
        });

        console.log(`–¢–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏: ${productsWithProperties.length} (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3)`);
        console.log('');

        if (productsWithProperties.length > 0) {
            const firstProduct = productsWithProperties[0];
            console.log(`üì¶ –ü—Ä–∏–º–µ—Ä —Ç–æ–≤–∞—Ä–∞: ${firstProduct.name}`);
            console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${firstProduct.catalog_category.name}`);
            console.log(`   –°–≤–æ–π—Å—Ç–≤–∞:`);
            
            try {
                const properties = JSON.parse(firstProduct.properties_data);
                const propertyKeys = Object.keys(properties);
                console.log(`   –í—Å–µ–≥–æ —Å–≤–æ–π—Å—Ç–≤: ${propertyKeys.length}`);
                console.log(`   –ö–ª—é—á–∏ —Å–≤–æ–π—Å—Ç–≤:`);
                propertyKeys.forEach((key, index) => {
                    console.log(`      ${index + 1}. "${key}"`);
                });
            } catch (error) {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–≤–æ–π—Å—Ç–≤: ${error.message}`);
            }
        }

        console.log('');

        // 3. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–ª–∞–Ω —É–ø—Ä–æ—â–µ–Ω–∏—è
        console.log('üéØ –ü–õ–ê–ù –£–ü–†–û–©–ï–ù–ò–Ø –°–ò–°–¢–ï–ú–´:');
        console.log('---------------------------');
        console.log('');
        console.log('1. –£–±—Ä–∞—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Å–ª–æ–π –º–∞–ø–ø–∏–Ω–≥–∞');
        console.log('2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ Excel –Ω–∞–ø—Ä—è–º—É—é –∫–∞–∫ –ø–æ–ª—è —à–∞–±–ª–æ–Ω–∞');
        console.log('3. –£–ø—Ä–æ—Å—Ç–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —à–∞–±–ª–æ–Ω–æ–≤');
        console.log('4. –û–±–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –∏–º–ø–æ—Ä—Ç–∞');
        console.log('');

        // 4. –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        console.log('üîß –°–û–ó–î–ê–ù–ò–ï –£–ü–†–û–©–ï–ù–ù–û–ô –°–¢–†–£–ö–¢–£–†–´:');
        console.log('----------------------------------');

        // –ù–∞—Ö–æ–¥–∏–º —à–∞–±–ª–æ–Ω –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
        const doorsTemplate = importTemplates.find(t => 
            t.catalog_category.name === '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏'
        );

        if (doorsTemplate) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω –¥–ª—è –¥–≤–µ—Ä–µ–π: ${doorsTemplate.name}`);
            
            // –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª–µ–π
            const simplifiedFields = [
                {
                    fieldName: '‚Ññ',
                    displayName: '‚Ññ',
                    dataType: 'text',
                    isRequired: false,
                    isForCalculator: false,
                    isForExport: true
                },
                {
                    fieldName: 'Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web',
                    displayName: 'Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web',
                    dataType: 'text',
                    isRequired: false,
                    isForCalculator: false,
                    isForExport: true
                },
                {
                    fieldName: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
                    displayName: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
                    dataType: 'text',
                    isRequired: false,
                    isForCalculator: false,
                    isForExport: true
                },
                {
                    fieldName: '–¢–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
                    displayName: '–¢–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
                    dataType: 'text',
                    isRequired: false,
                    isForCalculator: true,
                    isForExport: true
                },
                {
                    fieldName: 'Domeo_–°—Ç–∏–ª—å Web',
                    displayName: 'Domeo_–°—Ç–∏–ª—å Web',
                    dataType: 'text',
                    isRequired: false,
                    isForCalculator: true,
                    isForExport: true
                },
                {
                    fieldName: '–§–∞–±—Ä–∏–∫–∞_–ö–æ–ª–ª–µ–∫—Ü–∏—è',
                    displayName: '–§–∞–±—Ä–∏–∫–∞_–ö–æ–ª–ª–µ–∫—Ü–∏—è',
                    dataType: 'text',
                    isRequired: false,
                    isForCalculator: false,
                    isForExport: true
                },
                {
                    fieldName: '–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è',
                    displayName: '–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è',
                    dataType: 'text',
                    isRequired: false,
                    isForCalculator: true,
                    isForExport: true
                },
                {
                    fieldName: 'Domeo_–¶–≤–µ—Ç',
                    displayName: 'Domeo_–¶–≤–µ—Ç',
                    dataType: 'text',
                    isRequired: false,
                    isForCalculator: true,
                    isForExport: true
                },
                {
                    fieldName: '–§–∞–±—Ä–∏–∫–∞_–¶–≤–µ—Ç/–û—Ç–¥–µ–ª–∫–∞',
                    displayName: '–§–∞–±—Ä–∏–∫–∞_–¶–≤–µ—Ç/–û—Ç–¥–µ–ª–∫–∞',
                    dataType: 'text',
                    isRequired: false,
                    isForCalculator: false,
                    isForExport: true
                },
                {
                    fieldName: '–®–∏—Ä–∏–Ω–∞/–º–º',
                    displayName: '–®–∏—Ä–∏–Ω–∞/–º–º',
                    dataType: 'number',
                    isRequired: false,
                    isForCalculator: true,
                    isForExport: true
                },
                {
                    fieldName: '–í—ã—Å–æ—Ç–∞/–º–º',
                    displayName: '–í—ã—Å–æ—Ç–∞/–º–º',
                    dataType: 'number',
                    isRequired: false,
                    isForCalculator: true,
                    isForExport: true
                },
                {
                    fieldName: '–ï–¥.–∏–∑–º.',
                    displayName: '–ï–¥.–∏–∑–º.',
                    dataType: 'text',
                    isRequired: false,
                    isForCalculator: false,
                    isForExport: true
                },
                {
                    fieldName: '–°–∫–ª–∞–¥/–∑–∞–∫–∞–∑',
                    displayName: '–°–∫–ª–∞–¥/–∑–∞–∫–∞–∑',
                    dataType: 'text',
                    isRequired: false,
                    isForCalculator: false,
                    isForExport: true
                },
                {
                    fieldName: '–¶–µ–Ω–∞ —Ä—Ä—Ü (–≤–∫–ª—é—á–∞—è —Ü–µ–Ω—É –ø–æ–ª–æ—Ç–Ω–∞, –∫–æ—Ä–æ–±–∞, –Ω–∞–ª–∏—á–Ω–∏–∫–æ–≤, –¥–æ–±–æ—Ä–æ–≤)',
                    displayName: '–¶–µ–Ω–∞ —Ä—Ä—Ü (–≤–∫–ª—é—á–∞—è —Ü–µ–Ω—É –ø–æ–ª–æ—Ç–Ω–∞, –∫–æ—Ä–æ–±–∞, –Ω–∞–ª–∏—á–Ω–∏–∫–æ–≤, –¥–æ–±–æ—Ä–æ–≤)',
                    dataType: 'number',
                    isRequired: true,
                    isForCalculator: true,
                    isForExport: true
                },
                {
                    fieldName: '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
                    displayName: '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
                    dataType: 'text',
                    isRequired: false,
                    isForCalculator: false,
                    isForExport: true
                },
                {
                    fieldName: '–ü–æ—Å—Ç–∞–≤—â–∏–∫',
                    displayName: '–ü–æ—Å—Ç–∞–≤—â–∏–∫',
                    dataType: 'text',
                    isRequired: false,
                    isForCalculator: false,
                    isForExport: true
                },
                {
                    fieldName: '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
                    displayName: '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
                    dataType: 'text',
                    isRequired: false,
                    isForCalculator: false,
                    isForExport: true
                },
                {
                    fieldName: '–¢–∏–ø –æ—Ç–∫—Ä—ã–≤–∞–Ω–∏—è',
                    displayName: '–¢–∏–ø –æ—Ç–∫—Ä—ã–≤–∞–Ω–∏—è',
                    dataType: 'text',
                    isRequired: false,
                    isForCalculator: true,
                    isForExport: true
                },
                {
                    fieldName: '–ö—Ä–æ–º–∫–∞',
                    displayName: '–ö—Ä–æ–º–∫–∞',
                    dataType: 'text',
                    isRequired: false,
                    isForCalculator: false,
                    isForExport: true
                },
                {
                    fieldName: '–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–¥–±–∞–≤–∫–∏ –∑–∞ –∫—Ä–æ–º–∫—É',
                    displayName: '–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–¥–±–∞–≤–∫–∏ –∑–∞ –∫—Ä–æ–º–∫—É',
                    dataType: 'number',
                    isRequired: false,
                    isForCalculator: false,
                    isForExport: true
                },
                {
                    fieldName: '–ú–æ–ª–¥–∏–Ω–≥',
                    displayName: '–ú–æ–ª–¥–∏–Ω–≥',
                    dataType: 'text',
                    isRequired: false,
                    isForCalculator: false,
                    isForExport: true
                },
                {
                    fieldName: '–°—Ç–µ–∫–ª–æ',
                    displayName: '–°—Ç–µ–∫–ª–æ',
                    dataType: 'text',
                    isRequired: false,
                    isForCalculator: false,
                    isForExport: true
                },
                {
                    fieldName: '–¢–æ–ª—â–∏–Ω–∞/–º–º',
                    displayName: '–¢–æ–ª—â–∏–Ω–∞/–º–º',
                    dataType: 'number',
                    isRequired: false,
                    isForCalculator: false,
                    isForExport: true
                },
                {
                    fieldName: '–¶–µ–Ω–∞ –æ–ø—Ç',
                    displayName: '–¶–µ–Ω–∞ –æ–ø—Ç',
                    dataType: 'number',
                    isRequired: false,
                    isForCalculator: false,
                    isForExport: true
                }
            ];

            // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ–ª—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            const requiredFields = simplifiedFields.filter(f => f.isRequired);
            const calculatorFields = simplifiedFields.filter(f => f.isForCalculator);
            const exportFields = simplifiedFields.filter(f => f.isForExport);

            console.log(`   üìù –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${requiredFields.length}`);
            console.log(`   üßÆ –ü–æ–ª—è –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: ${calculatorFields.length}`);
            console.log(`   üì§ –ü–æ–ª—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞: ${exportFields.length}`);
            console.log('');

            // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω
            console.log('üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –®–ê–ë–õ–û–ù–ê:');
            console.log('----------------------');

            const updatedTemplate = await prisma.importTemplate.update({
                where: { id: doorsTemplate.id },
                data: {
                    name: '–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏',
                    description: '–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞. –ó–∞–≥–æ–ª–æ–≤–∫–∏ Excel = –ü–æ–ª—è —à–∞–±–ª–æ–Ω–∞.',
                    required_fields: JSON.stringify(requiredFields),
                    calculator_fields: JSON.stringify(calculatorFields),
                    export_fields: JSON.stringify(exportFields),
                    field_mappings: null, // –£–±–∏—Ä–∞–µ–º –º–∞–ø–ø–∏–Ω–≥
                    template_config: JSON.stringify({
                        simplified: true,
                        direct_mapping: true,
                        excel_headers_as_fields: true
                    }),
                    updated_at: new Date()
                }
            });

            console.log(`‚úÖ –®–∞–±–ª–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω: ${updatedTemplate.name}`);
            console.log(`   ID: ${updatedTemplate.id}`);
            console.log(`   –ú–∞–ø–ø–∏–Ω–≥ —É–±—Ä–∞–Ω: ${updatedTemplate.field_mappings === null ? '–î–∞' : '–ù–µ—Ç'}`);
            console.log('');

        } else {
            console.log('‚ùå –®–∞–±–ª–æ–Ω –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏" –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // 5. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∏–º–ø–æ—Ä—Ç–∞
        console.log('üìù –°–û–ó–î–ê–ù–ò–ï –£–ü–†–û–©–ï–ù–ù–û–ì–û –°–ï–†–í–ò–°–ê –ò–ú–ü–û–†–¢–ê:');
        console.log('----------------------------------------');

        const simplifiedImportService = `
// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∏–º–ø–æ—Ä—Ç–∞ –±–µ–∑ –º–∞–ø–ø–∏–Ω–≥–∞
export class SimplifiedProductImportService {
  async importFromExcel(file: Buffer, filename: string, catalogCategoryId: string) {
    // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
    const workbook = XLSX.read(file, { type: 'buffer' });
    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    const data = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
    
    // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–æ–Ω–∏ –∂–µ –ø–æ–ª—è —à–∞–±–ª–æ–Ω–∞)
    const headers = data[0] as string[];
    const rows = data.slice(1);
    
    const products = [];
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
    rows.forEach((row, index) => {
      if (row.length === 0) return;
      
      const product = {
        sku: row[2] || \`AUTO-\${index + 1}\`, // –ö–æ–ª–æ–Ω–∫–∞ C - –∞—Ä—Ç–∏–∫—É–ª
        name: row[3] || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è', // –ö–æ–ª–æ–Ω–∫–∞ D - –Ω–∞–∑–≤–∞–Ω–∏–µ
        catalog_category_id: catalogCategoryId,
        properties_data: {},
        base_price: 0,
        currency: 'RUB',
        stock_quantity: 0,
        is_active: true
      };
      
      // –ó–∞–≥–æ–ª–æ–≤–∫–∏ Excel = –ü–æ–ª—è —à–∞–±–ª–æ–Ω–∞ (–ø—Ä—è–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ)
      headers.forEach((header, headerIndex) => {
        if (row[headerIndex] !== undefined && row[headerIndex] !== null && row[headerIndex] !== '') {
          product.properties_data[header] = row[headerIndex];
        }
      });
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
      const priceField = headers.find(h => h.toLowerCase().includes('—Ü–µ–Ω–∞'));
      if (priceField) {
        const priceIndex = headers.indexOf(priceField);
        const price = parseFloat(row[priceIndex]);
        if (!isNaN(price)) {
          product.base_price = price;
        }
      }
      
      products.push(product);
    });
    
    return {
      success: true,
      message: '–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      imported: products.length,
      products: products
    };
  }
}`;

        console.log('‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∏–º–ø–æ—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω');
        console.log('   –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:');
        console.log('   - –ó–∞–≥–æ–ª–æ–≤–∫–∏ Excel = –ü–æ–ª—è —à–∞–±–ª–æ–Ω–∞');
        console.log('   - –ù–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞');
        console.log('   - –ü—Ä—è–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–æ–Ω–æ–∫');
        console.log('');

        // 6. –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        console.log('üéØ –ò–¢–û–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        console.log('---------------------------');
        console.log('');
        console.log('‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ:');
        console.log('1. –£–ø—Ä–æ—â–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –¥–≤–µ—Ä–µ–π');
        console.log('2. –£–±—Ä–∞–Ω –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥');
        console.log('3. –ó–∞–≥–æ–ª–æ–≤–∫–∏ Excel —Ç–µ–ø–µ—Ä—å = –ü–æ–ª—è —à–∞–±–ª–æ–Ω–∞');
        console.log('4. –°–æ–∑–¥–∞–Ω —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∏–º–ø–æ—Ä—Ç–∞');
        console.log('');
        console.log('üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
        console.log('1. –û–±–Ω–æ–≤–∏—Ç—å API –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏');
        console.log('2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º–ø–æ—Ä—Ç —Å –Ω–æ–≤—ã–º —à–∞–±–ª–æ–Ω–æ–º');
        console.log('3. –ü—Ä–∏–º–µ–Ω–∏—Ç—å —É–ø—Ä–æ—â–µ–Ω–∏–µ –∫ –¥—Ä—É–≥–∏–º —à–∞–±–ª–æ–Ω–∞–º');
        console.log('4. –û–±–Ω–æ–≤–∏—Ç—å UI –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã');
        console.log('');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–æ—â–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã:', error);
    } finally {
        await prisma.$disconnect();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–∏–µ
simplifyMappingSystem();
