const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function analyzeDatabaseIntegrity() {
  try {
    console.log('üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•\n');

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è JSON –ø–æ–ª–µ–π:');
    
    const productsWithBothFields = await prisma.$queryRaw`
      SELECT COUNT(*) as count 
      FROM products 
      WHERE properties_data != '{}' AND specifications != '{}'
    `;
    
    console.log(`   - –¢–æ–≤–∞—Ä—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –æ–±–æ–∏—Ö –ø–æ–ª—è—Ö: ${productsWithBothFields[0].count}`);

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π:');
    
    const orphanProducts = await prisma.$queryRaw`
      SELECT COUNT(*) as count
      FROM products p
      LEFT JOIN catalog_categories c ON p.catalog_category_id = c.id
      WHERE c.id IS NULL
    `;
    
    console.log(`   - –¢–æ–≤–∞—Ä—ã —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏: ${orphanProducts[0].count}`);

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–Ω
    console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:');
    
    const negativePrices = await prisma.$queryRaw`
      SELECT COUNT(*) as count
      FROM products
      WHERE base_price < 0
    `;
    
    console.log(`   - –¢–æ–≤–∞—Ä—ã —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏: ${negativePrices[0].count}`);

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è SKU
    console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ SKU:');
    
    const duplicateSkus = await prisma.$queryRaw`
      SELECT sku, COUNT(*) as count
      FROM products
      GROUP BY sku
      HAVING COUNT(*) > 1
      LIMIT 5
    `;
    
    console.log(`   - –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ SKU: ${duplicateSkus.length}`);
    duplicateSkus.forEach(dup => {
      console.log(`     * ${dup.sku}: ${dup.count} —Ä–∞–∑`);
    });

    // 5. –ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–µ–∫—Å–æ–≤
    console.log('\n5. –ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–µ–∫—Å–æ–≤:');
    
    const indexes = await prisma.$queryRaw`
      SELECT name, sql FROM sqlite_master 
      WHERE type='index' AND sql IS NOT NULL
      ORDER BY name
    `;
    
    console.log(`   - –í—Å–µ–≥–æ –∏–Ω–¥–µ–∫—Å–æ–≤: ${indexes.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–∞–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
    const compositeIndexes = indexes.filter(idx => 
      idx.sql && idx.sql.includes('catalog_category_id') && idx.sql.includes('sku')
    );
    console.log(`   - –°–æ—Å—Ç–∞–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã: ${compositeIndexes.length}`);

    // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('\n6. –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:');
    
    console.log('   - –†–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü:');
    
    const productCount = await prisma.product.count();
    console.log(`     * products: ${productCount} –∑–∞–ø–∏—Å–µ–π`);
    
    const categoryCount = await prisma.catalogCategory.count();
    console.log(`     * catalog_categories: ${categoryCount} –∑–∞–ø–∏—Å–µ–π`);
    
    const imageCount = await prisma.productImage.count();
    console.log(`     * product_images: ${imageCount} –∑–∞–ø–∏—Å–µ–π`);

    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:');
    console.log('   1. –î–æ–±–∞–≤–∏—Ç—å –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–∞–Ω–Ω—ã—Ö');
    console.log('   2. –û–±—ä–µ–¥–∏–Ω–∏—Ç—å JSON –ø–æ–ª—è –≤ –æ–¥–Ω–æ');
    console.log('   3. –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –Ω–∞ —É—Ä–æ–≤–Ω–µ Prisma');
    console.log('   4. –°–æ–∑–¥–∞—Ç—å —Å–æ—Å—Ç–∞–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã');
    console.log('   5. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

analyzeDatabaseIntegrity();
