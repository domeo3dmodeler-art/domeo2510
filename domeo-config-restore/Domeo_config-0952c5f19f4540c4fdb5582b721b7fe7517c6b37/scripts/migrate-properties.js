// –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π —Å–≤–æ–π—Å—Ç–≤ —Ç–æ–≤–∞—Ä–æ–≤
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// –ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤ (–∏–∑ door-properties.ts)
const CANONICAL_PROPERTIES = {
  // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
  '‚Ññ': '‚Ññ',
  '–ê–†–¢–ò–ö–£–õ_DOMEO': '–ê–†–¢–ò–ö–£–õ_DOMEO',
  
  // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  '–ú–û–î–ï–õ–¨': '–ú–û–î–ï–õ–¨',
  '–°–¢–ò–õ–¨': '–°–¢–ò–õ–¨',
  '–¶–í–ï–¢_DOMEO': '–¶–í–ï–¢_DOMEO',
  '–¢–ò–ü –ü–û–ö–†–´–¢–ò–Ø': '–¢–ò–ü –ü–û–ö–†–´–¢–ò–Ø',
  
  // –†–∞–∑–º–µ—Ä—ã
  '–®–∏—Ä–∏–Ω–∞/–º–º': '–®–∏—Ä–∏–Ω–∞/–º–º',
  '–í—ã—Å–æ—Ç–∞/–º–º': '–í—ã—Å–æ—Ç–∞/–º–º',
  '–¢–æ–ª—â–∏–Ω–∞/–º–º': '–¢–æ–ª—â–∏–Ω–∞/–º–º',
  
  // –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
  '–¢–ò–ü –ö–û–ù–°–¢–†–£–ö–¶–ò–ò': '–¢–ò–ü –ö–û–ù–°–¢–†–£–ö–¶–ò–ò',
  '–¢–∏–ø –æ—Ç–∫—Ä—ã–≤–∞–Ω–∏—è': '–¢–∏–ø –æ—Ç–∫—Ä—ã–≤–∞–Ω–∏—è',
  '–§–ê–ë–†–ò–ö–ê_–ö–û–õ–õ–ï–ö–¶–ò–Ø': '–§–ê–ë–†–ò–ö–ê_–ö–û–õ–õ–ï–ö–¶–ò–Ø',
  '–§–∞–±—Ä–∏–∫–∞_–¶–≤–µ—Ç/–û—Ç–¥–µ–ª–∫–∞': '–§–∞–±—Ä–∏–∫–∞_–¶–≤–µ—Ç/–û—Ç–¥–µ–ª–∫–∞',
  
  // –¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
  '–¶–µ–Ω–∞ —Ä—Ä—Ü (–≤–∫–ª—é—á–∞—è —Ü–µ–Ω—É –ø–æ–ª–æ—Ç–Ω–∞, –∫–æ—Ä–æ–±–∞, –Ω–∞–ª–∏—á–Ω–∏–∫–æ–≤, –¥–æ–±–æ—Ä–æ–≤)': '–¶–µ–Ω–∞ —Ä—Ä—Ü (–≤–∫–ª—é—á–∞—è —Ü–µ–Ω—É –ø–æ–ª–æ—Ç–Ω–∞, –∫–æ—Ä–æ–±–∞, –Ω–∞–ª–∏—á–Ω–∏–∫–æ–≤, –¥–æ–±–æ—Ä–æ–≤)',
  '–¶–µ–Ω–∞ –æ–ø—Ç': '–¶–µ–Ω–∞ –æ–ø—Ç',
  '–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–¥–±–∞–≤–∫–∏ –∑–∞ –∫—Ä–æ–º–∫—É': '–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–¥–±–∞–≤–∫–∏ –∑–∞ –∫—Ä–æ–º–∫—É',
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  '–ö—Ä–æ–º–∫–∞': '–ö—Ä–æ–º–∫–∞',
  '–ú–æ–ª–¥–∏–Ω–≥': '–ú–æ–ª–¥–∏–Ω–≥',
  '–°—Ç–µ–∫–ª–æ': '–°—Ç–µ–∫–ª–æ',
  
  // –ü–æ—Å—Ç–∞–≤—â–∏–∫ –∏ —Å–∫–ª–∞–¥
  '–ü–æ—Å—Ç–∞–≤—â–∏–∫': '–ü–æ—Å—Ç–∞–≤—â–∏–∫',
  '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞': '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
  '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞': '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
  '–°–∫–ª–∞–¥/–∑–∞–∫–∞–∑': '–°–∫–ª–∞–¥/–∑–∞–∫–∞–∑',
  
  // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ
  'photos': 'photos',
  '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
  '–ï–¥.–∏–∑–º.': '–ï–¥.–∏–∑–º.'
};

// –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∞ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ
const MIGRATION_MAP = {
  // –°—Ç–∞—Ä—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ API
  'Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web': '–ú–û–î–ï–õ–¨',
  'Domeo_–°—Ç–∏–ª—å Web': '–°–¢–ò–õ–¨',
  '–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è': '–¢–ò–ü –ü–û–ö–†–´–¢–ò–Ø',
  'Domeo_–¶–≤–µ—Ç': '–¶–í–ï–¢_DOMEO',
  '–¢–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏': '–¢–ò–ü –ö–û–ù–°–¢–†–£–ö–¶–ò–ò',
  '–§–∞–±—Ä–∏–∫–∞_–ö–æ–ª–ª–µ–∫—Ü–∏—è': '–§–ê–ë–†–ò–ö–ê_–ö–û–õ–õ–ï–ö–¶–ò–Ø',
  '–§–∞–±—Ä–∏–∫–∞_–¶–≤–µ—Ç/–û—Ç–¥–µ–ª–∫–∞': '–§–∞–±—Ä–∏–∫–∞_–¶–≤–µ—Ç/–û—Ç–¥–µ–ª–∫–∞',
  
  // –î—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
  '–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏': '–ú–û–î–ï–õ–¨',
  '–°—Ç–∏–ª—å': '–°–¢–ò–õ–¨',
  '–¶–≤–µ—Ç': '–¶–í–ï–¢_DOMEO',
  '–ü–æ–∫—Ä—ã—Ç–∏–µ': '–¢–ò–ü –ü–û–ö–†–´–¢–ò–Ø',
  '–¢–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏': '–¢–ò–ü –ö–û–ù–°–¢–†–£–ö–¶–ò–ò',
  '–§–∞–±—Ä–∏–∫–∞': '–§–ê–ë–†–ò–ö–ê_–ö–û–õ–õ–ï–ö–¶–ò–Ø',
  '–ö–æ–ª–ª–µ–∫—Ü–∏—è': '–§–ê–ë–†–ò–ö–ê_–ö–û–õ–õ–ï–ö–¶–ò–Ø',
  '–®–∏—Ä–∏–Ω–∞': '–®–∏—Ä–∏–Ω–∞/–º–º',
  '–í—ã—Å–æ—Ç–∞': '–í—ã—Å–æ—Ç–∞/–º–º',
  '–¢–æ–ª—â–∏–Ω–∞': '–¢–æ–ª—â–∏–Ω–∞/–º–º',
  '–¶–µ–Ω–∞': '–¶–µ–Ω–∞ —Ä—Ä—Ü (–≤–∫–ª—é—á–∞—è —Ü–µ–Ω—É –ø–æ–ª–æ—Ç–Ω–∞, –∫–æ—Ä–æ–±–∞, –Ω–∞–ª–∏—á–Ω–∏–∫–æ–≤, –¥–æ–±–æ—Ä–æ–≤)',
  '–†–†–¶': '–¶–µ–Ω–∞ —Ä—Ä—Ü (–≤–∫–ª—é—á–∞—è —Ü–µ–Ω—É –ø–æ–ª–æ—Ç–Ω–∞, –∫–æ—Ä–æ–±–∞, –Ω–∞–ª–∏—á–Ω–∏–∫–æ–≤, –¥–æ–±–æ—Ä–æ–≤)',
  '–û–ø—Ç': '–¶–µ–Ω–∞ –æ–ø—Ç',
  '–ê—Ä—Ç–∏–∫—É–ª': '–ê–†–¢–ò–ö–£–õ_DOMEO',
  '–ù–æ–º–µ—Ä': '‚Ññ'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
function getCanonicalName(key) {
  // –ï—Å–ª–∏ —É–∂–µ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
  if (CANONICAL_PROPERTIES[key]) {
    return key;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–ø–ø–∏–Ω–≥
  if (MIGRATION_MAP[key]) {
    return MIGRATION_MAP[key];
  }
  
  // Fuzzy match –¥–ª—è –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
  for (const canonicalKey of Object.keys(CANONICAL_PROPERTIES)) {
    if (key.toLowerCase().includes(canonicalKey.toLowerCase()) || 
        canonicalKey.toLowerCase().includes(key.toLowerCase())) {
      return canonicalKey;
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
  return key;
}

async function migrateProperties() {
  console.log('üîÑ –ú–ò–ì–†–ê–¶–ò–Ø –ù–ê–ó–í–ê–ù–ò–ô –°–í–û–ô–°–¢–í –¢–û–í–ê–†–û–í');
  console.log('=====================================\n');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–≤–µ—Ä–µ–π
    const products = await prisma.product.findMany({
      where: {
        catalog_category: {
          name: "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
        }
      },
      select: {
        id: true,
        sku: true,
        name: true,
        properties_data: true
      }
    });

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);

    if (products.length === 0) {
      console.log('‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ.');
      return;
    }

    let migratedCount = 0;
    let totalChanges = 0;

    for (const product of products) {
      if (!product.properties_data) continue;

      const props = typeof product.properties_data === 'string' 
        ? JSON.parse(product.properties_data) 
        : product.properties_data;

      const newProps = {};
      let hasChanges = false;

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
      for (const [key, value] of Object.entries(props)) {
        const canonicalKey = getCanonicalName(key);
        
        if (canonicalKey !== key) {
          hasChanges = true;
          console.log(`   ${product.sku}: "${key}" ‚Üí "${canonicalKey}"`);
        }
        
        newProps[canonicalKey] = value;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
      if (hasChanges) {
        await prisma.product.update({
          where: { id: product.id },
          data: {
            properties_data: JSON.stringify(newProps)
          }
        });
        
        migratedCount++;
        totalChanges += Object.keys(props).length;
        
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: ${product.sku}`);
      }
    }

    console.log(`\nüéâ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!`);
    console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${migratedCount}`);
    console.log(`   –í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${totalChanges}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log(`\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê:`);
    const sampleProduct = await prisma.product.findFirst({
      where: {
        catalog_category: {
          name: "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
        }
      },
      select: {
        sku: true,
        properties_data: true
      }
    });

    if (sampleProduct) {
      const props = JSON.parse(sampleProduct.properties_data);
      console.log(`   –ü—Ä–∏–º–µ—Ä —Ç–æ–≤–∞—Ä–∞: ${sampleProduct.sku}`);
      console.log(`   –ö–ª—é—á–∏ —Å–≤–æ–π—Å—Ç–≤:`);
      Object.keys(props).forEach(key => {
        const isCanonical = CANONICAL_PROPERTIES[key] ? '‚úÖ' : '‚ùå';
        console.log(`     ${isCanonical} ${key}`);
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrateProperties();
