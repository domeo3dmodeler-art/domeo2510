const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function findDataInconsistencies() {
  try {
    console.log('üîç –ü–æ–∏—Å–∫ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤...\n');

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
    const category = await prisma.catalogCategory.findFirst({
      where: { name: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏' }
    });

    if (!category) {
      console.log('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const products = await prisma.product.findMany({
      where: { catalog_category_id: category.id },
      select: {
        id: true,
        sku: true,
        name: true,
        properties_data: true
      },
      take: 500 // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º 500 —Ç–æ–≤–∞—Ä–æ–≤
    });

    console.log(`üì¶ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${products.length} —Ç–æ–≤–∞—Ä–æ–≤\n`);

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
    const fieldValues = {};
    const productSamples = [];

    products.forEach((product, index) => {
      if (!product.properties_data) return;

      let properties;
      try {
        properties = typeof product.properties_data === 'string' 
          ? JSON.parse(product.properties_data) 
          : product.properties_data;
      } catch (e) {
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤
      if (index < 5) {
        productSamples.push({
          id: product.id,
          sku: product.sku,
          name: product.name,
          properties: properties
        });
      }

      // –°–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π
      Object.keys(properties).forEach(field => {
        if (!fieldValues[field]) {
          fieldValues[field] = new Set();
        }
        fieldValues[field].add(String(properties[field]));
      });
    });

    console.log('üìã –ü–†–ò–ú–ï–†–´ –¢–û–í–ê–†–û–í:');
    console.log('='.repeat(80));
    
    productSamples.forEach((product, index) => {
      console.log(`\n${index + 1}. –¢–æ–≤–∞—Ä ID: ${product.id}`);
      console.log(`   SKU: ${product.sku || '–ù–ï–¢'}`);
      console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${product.name || '–ù–ï–¢'}`);
      console.log(`   –°–≤–æ–π—Å—Ç–≤–∞:`);
      Object.keys(product.properties).forEach(field => {
        console.log(`     ${field}: "${product.properties[field]}"`);
      });
    });

    console.log('\n\nüîç –ê–ù–ê–õ–ò–ó –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ô:');
    console.log('='.repeat(80));

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ
    Object.keys(fieldValues).forEach(field => {
      const values = Array.from(fieldValues[field]);
      console.log(`\nüìä ${field}:`);
      console.log(`   –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: ${values.length}`);
      
      if (values.length <= 10) {
        console.log(`   –ó–Ω–∞—á–µ–Ω–∏—è:`);
        values.forEach(value => {
          console.log(`     - "${value}"`);
        });
      } else {
        console.log(`   –ü–µ—Ä–≤—ã–µ 10 –∑–Ω–∞—á–µ–Ω–∏–π:`);
        values.slice(0, 10).forEach(value => {
          console.log(`     - "${value}"`);
        });
        console.log(`   ... –∏ –µ—â–µ ${values.length - 10} –∑–Ω–∞—á–µ–Ω–∏–π`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      const suspiciousValues = values.filter(value => {
        return value.includes('?') || 
               value.includes('ÔøΩ') || 
               value.length > 200 ||
               value.trim() === '' ||
               value === 'null' ||
               value === 'undefined';
      });

      if (suspiciousValues.length > 0) {
        console.log(`   ‚ö†Ô∏è  –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (${suspiciousValues.length}):`);
        suspiciousValues.forEach(value => {
          console.log(`     - "${value}"`);
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      const numericValues = values.filter(value => !isNaN(Number(value)) && value.trim() !== '');
      if (numericValues.length > 0) {
        const numbers = numericValues.map(v => Number(v));
        console.log(`   üî¢ –ß–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: ${numericValues.length}`);
        console.log(`     –î–∏–∞–ø–∞–∑–æ–Ω: ${Math.min(...numbers)} - ${Math.max(...numbers)}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–Ω—ã–µ —á–∏—Å–ª–∞
        const strangeNumbers = numbers.filter(n => n < 0 || n > 1000000);
        if (strangeNumbers.length > 0) {
          console.log(`     ‚ö†Ô∏è  –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞: ${strangeNumbers.join(', ')}`);
        }
      }
    });

    // –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º –ø–æ–ª–µ–π
    console.log('\n\nüîÑ –ê–ù–ê–õ–ò–ó –î–£–ë–õ–ò–ö–ê–¢–û–í:');
    console.log('='.repeat(80));

    const duplicates = {};
    products.forEach(product => {
      if (!product.properties_data) return;

      let properties;
      try {
        properties = typeof product.properties_data === 'string' 
          ? JSON.parse(product.properties_data) 
          : product.properties_data;
      } catch (e) {
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
      const key = [
        properties['–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'],
        properties['–®–∏—Ä–∏–Ω–∞/–º–º'],
        properties['–í—ã—Å–æ—Ç–∞/–º–º'],
        properties['Domeo_–¶–≤–µ—Ç']
      ].join('|');

      if (!duplicates[key]) {
        duplicates[key] = [];
      }
      duplicates[key].push({
        id: product.id,
        sku: product.sku,
        name: product.name
      });
    });

    const duplicateGroups = Object.entries(duplicates).filter(([key, products]) => products.length > 1);
    
    if (duplicateGroups.length > 0) {
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${duplicateGroups.length} –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:`);
      duplicateGroups.slice(0, 5).forEach(([key, products]) => {
        console.log(`\n–ì—Ä—É–ø–ø–∞: ${key}`);
        products.forEach(product => {
          console.log(`  - ID: ${product.id}, SKU: ${product.sku}, –ù–∞–∑–≤–∞–Ω–∏–µ: ${product.name}`);
        });
      });
    } else {
      console.log('‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    // –ê–Ω–∞–ª–∏–∑ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π
    console.log('\n\n‚ùå –ê–ù–ê–õ–ò–ó –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–• –ü–û–õ–ï–ô:');
    console.log('='.repeat(80));

    const allFields = new Set();
    products.forEach(product => {
      if (!product.properties_data) return;
      
      let properties;
      try {
        properties = typeof product.properties_data === 'string' 
          ? JSON.parse(product.properties_data) 
          : product.properties_data;
      } catch (e) {
        return;
      }

      Object.keys(properties).forEach(field => {
        allFields.add(field);
      });
    });

    const expectedFields = [
      '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
      'Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web',
      '–®–∏—Ä–∏–Ω–∞/–º–º',
      '–í—ã—Å–æ—Ç–∞/–º–º',
      '–¢–æ–ª—â–∏–Ω–∞/–º–º',
      '–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è',
      'Domeo_–¶–≤–µ—Ç',
      'Domeo_–°—Ç–∏–ª—å Web',
      '–¢–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
      '–¢–∏–ø –æ—Ç–∫—Ä—ã–≤–∞–Ω–∏—è',
      '–ü–æ—Å—Ç–∞–≤—â–∏–∫'
    ];

    console.log('–û–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è:');
    expectedFields.forEach(field => {
      const exists = allFields.has(field);
      console.log(`  ${exists ? '‚úÖ' : '‚ùå'} ${field}`);
    });

    console.log('\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –¥–∞–Ω–Ω—ã—Ö:');
    Array.from(allFields).filter(field => !expectedFields.includes(field)).forEach(field => {
      console.log(`  ‚ûï ${field}`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error);
  } finally {
    await prisma.$disconnect();
  }
}

findDataInconsistencies();
