'use client';

import React, { useState, useRef, useCallback } from 'react';
import { Button, Input, Select } from '../ui';
import { MainCategorySelector } from './CategorySelector';
import { 
  Plus, Trash2, Save, Eye, Move, Copy, ZoomIn, Layers, MousePointer, Square,
  ChevronLeft, ChevronRight, Grip, Maximize2, Minimize2
} from 'lucide-react';

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
interface BlockSettings {
  id: string;
  name: string;
  type: string;
  x: number;
  y: number;
  width: number;
  height: number;
  zIndex: number;
  mainCategorySettings?: any;
  productDisplaySettings?: any;
  styleSettings?: any;
}

interface DragState {
  isDragging: boolean;
  dragType: 'new' | 'move' | 'resize';
  startPos: { x: number; y: number };
  currentPos: { x: number; y: number };
  draggedBlock?: BlockSettings;
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä—É—á–µ–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
const ResizeHandles = ({ block, onStartResize }: { block: BlockSettings; onStartResize: (e: React.MouseEvent, handle: string) => void }) => {
  const handles = [
    { position: 'n', cursor: 'n-resize', icon: '‚Üï' },
    { position: 's', cursor: 's-resize', icon: '‚Üï' },
    { position: 'e', cursor: 'e-resize', icon: '‚Üî' },
    { position: 'w', cursor: 'w-resize', icon: '‚Üî' },
    { position: 'ne', cursor: 'ne-resize', icon: '‚Üó' },
    { position: 'nw', cursor: 'nw-resize', icon: '‚Üñ' },
    { position: 'se', cursor: 'se-resize', icon: '‚Üò' },
    { position: 'sw', cursor: 'sw-resize', icon: '‚Üô' }
  ];

  return (
    <>
      {handles.map((handle) => (
        <div
          key={handle.position}
          className={`absolute w-2 h-2 bg-blue-500 border border-white cursor-${handle.cursor} opacity-0 group-hover:opacity-100 transition-opacity`}
          style={{
            [handle.position.includes('n') ? 'top' : 'bottom']: '-4px',
            [handle.position.includes('e') ? 'right' : 'left']: '-4px',
          }}
          onMouseDown={(e) => {
            e.stopPropagation();
            onStartResize(e, handle.position);
          }}
        >
          <span className="text-xs">{handle.icon}</span>
        </div>
      ))}
    </>
  );
};

export default function ProfessionalConstructor({ hideHeader = false }: { hideHeader?: boolean }) {
  const [blocks, setBlocks] = useState<BlockSettings[]>([]);
  const [selectedBlockId, setSelectedBlockId] = useState<string | null>(null);
  const [snapToGridEnabled, setSnapToGridEnabled] = useState(true);
  const [showGrid, setShowGrid] = useState(true);
  const [dragState, setDragState] = useState<DragState>({
    isDragging: false,
    dragType: 'new',
    startPos: { x: 0, y: 0 },
    currentPos: { x: 0, y: 0 }
  });
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
  const [rightPanelCollapsed, setRightPanelCollapsed] = useState(false);
  const [toolbarMode, setToolbarMode] = useState<'select' | 'move' | 'resize'>('select');

  const canvasRef = useRef<HTMLDivElement>(null);
  const selectedBlock = blocks.find(block => block.id === selectedBlockId);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å–µ—Ç–∫–µ
  const snapToGrid = useCallback((x: number, y: number) => {
    const gridSize = 16;
    return {
      x: Math.round(x / gridSize) * gridSize,
      y: Math.round(y / gridSize) * gridSize
    };
  }, []);

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
  const createBlock = useCallback((type: string, x: number, y: number) => {
    const id = `${type}-${Date.now()}`;
    const newBlock: BlockSettings = {
      id,
      name: `–ë–ª–æ–∫ ${blocks.length + 1}`,
      type,
      x,
      y,
      width: 200,
      height: 100,
      zIndex: blocks.length + 1
    };

    setBlocks(prev => [...prev, newBlock]);
    setSelectedBlockId(id);
  }, [blocks.length]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞
  const updateBlock = useCallback((blockId: string, updates: Partial<BlockSettings>) => {
    setBlocks(prev => prev.map(block => 
      block.id === blockId ? { ...block, ...updates } : block
    ));
  }, []);

  // –£–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞
  const deleteBlock = useCallback((blockId: string) => {
    setBlocks(prev => prev.filter(block => block.id !== blockId));
    if (selectedBlockId === blockId) {
      setSelectedBlockId(null);
    }
  }, [selectedBlockId]);

  // –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞
  const duplicateBlock = useCallback((blockId: string) => {
    const block = blocks.find(b => b.id === blockId);
    if (block) {
      const newBlock: BlockSettings = {
        ...block,
        id: `${block.type}-${Date.now()}`,
        name: `${block.name} (–∫–æ–ø–∏—è)`,
        x: block.x + 20,
        y: block.y + 20,
        zIndex: blocks.length + 1
      };
      setBlocks(prev => [...prev, newBlock]);
      setSelectedBlockId(newBlock.id);
    }
  }, [blocks]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  const handleMouseDown = useCallback((e: React.MouseEvent, type: string) => {
    e.preventDefault();
    setDragState({
      isDragging: true,
      dragType: 'new',
      startPos: { x: e.clientX, y: e.clientY },
      currentPos: { x: e.clientX, y: e.clientY },
      draggedBlock: { 
        id: '', 
        name: '', 
        type, 
        x: 0, 
        y: 0, 
        width: 200, 
        height: 100, 
        zIndex: 0 
      }
    });
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –º—ã—à–∏
  const handleMouseMove = useCallback((e: MouseEvent) => {
    if (!dragState.isDragging) return;

    setDragState(prev => ({
      ...prev,
      currentPos: { x: e.clientX, y: e.clientY }
    }));
  }, [dragState.isDragging]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –º—ã—à–∏
  const handleMouseUp = useCallback((e: MouseEvent) => {
    if (!dragState.isDragging || !canvasRef.current) return;

    const rect = canvasRef.current.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;

    if (dragState.dragType === 'new' && dragState.draggedBlock) {
      const snapped = snapToGridEnabled ? snapToGrid(x, y) : { x, y };
      createBlock(dragState.draggedBlock.type, snapped.x, snapped.y);
    }

    setDragState({
      isDragging: false,
      dragType: 'new',
      startPos: { x: 0, y: 0 },
      currentPos: { x: 0, y: 0 }
    });
  }, [dragState, snapToGridEnabled, snapToGrid, createBlock]);

  // –≠—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º—ã—à–∏
  React.useEffect(() => {
    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', handleMouseUp);
    return () => {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
    };
  }, [handleMouseMove, handleMouseUp]);

  // –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–ª–æ–∫–∏
  const availableBlocks = [
    {
      id: 'category-name',
      name: '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
      icon: 'üìÅ',
      description: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Ö–ª–µ–±–Ω—ã–º–∏ –∫—Ä–æ—à–∫–∞–º–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º.',
      type: 'category-name'
    },
    {
      id: 'main-category',
      name: '–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤',
      icon: 'üè¢',
      description: '–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–≤—è–∑—å—é —Å –¥–µ—Ä–µ–≤–æ–º –∫–∞—Ç–∞–ª–æ–≥–∞, –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.',
      type: 'main-category'
    },
    {
      id: 'subcategories',
      name: '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤',
      icon: 'üìÇ',
      description: '–í–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –º–∞–∫–µ—Ç–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.',
      type: 'subcategories'
    },
    {
      id: 'additional-categories',
      name: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
      icon: '‚ûï',
      description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–π —Ü–µ–Ω—ã, —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.',
      type: 'additional-categories'
    },
    {
      id: 'product-constructor',
      name: '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ–¥–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞',
      icon: '‚öôÔ∏è',
      description: '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Å–≤–æ–π—Å—Ç–≤ –∏ —Ç–∏–ø–æ–≤ –≤–≤–æ–¥–∞.',
      type: 'product-constructor'
    },
    {
      id: 'constructor',
      name: '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä',
      icon: 'üîß',
      description: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤.',
      type: 'constructor'
    }
  ];

  return (
    <div className="flex flex-col h-screen bg-gray-50">
      {/* –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ */}
      {!hideHeader && (
        <div className="bg-white border-b border-gray-200 px-4 py-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <h1 className="text-lg font-semibold text-gray-900">
                üé® –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü
              </h1>
              
              {/* –†–µ–∂–∏–º—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ */}
              <div className="flex items-center space-x-1 bg-gray-100 rounded-lg p-1">
                <button
                  className={`px-3 py-1.5 rounded-md text-sm font-medium transition-colors ${
                    toolbarMode === 'select' 
                      ? 'bg-white text-gray-900 shadow-sm' 
                      : 'text-gray-600 hover:text-gray-900'
                  }`}
                  onClick={() => setToolbarMode('select')}
                >
                  <MousePointer className="h-4 w-4" />
                </button>
                <button
                  className={`px-3 py-1.5 rounded-md text-sm font-medium transition-colors ${
                    toolbarMode === 'move' 
                      ? 'bg-white text-gray-900 shadow-sm' 
                      : 'text-gray-600 hover:text-gray-900'
                  }`}
                  onClick={() => setToolbarMode('move')}
                >
                  <Move className="h-4 w-4" />
                </button>
                <button
                  className={`px-3 py-1.5 rounded-md text-sm font-medium transition-colors ${
                    toolbarMode === 'resize' 
                      ? 'bg-white text-gray-900 shadow-sm' 
                      : 'text-gray-600 hover:text-gray-900'
                  }`}
                  onClick={() => setToolbarMode('resize')}
                >
                  <Square className="h-4 w-4" />
                </button>
              </div>
            </div>

            <div className="flex items-center space-x-4">
              {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∫–∏ */}
              <div className="flex items-center space-x-3">
                <label className="flex items-center space-x-2 text-sm text-gray-700">
                  <input
                    type="checkbox"
                    checked={showGrid}
                    onChange={(e) => setShowGrid(e.target.checked)}
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                  <span>–°–µ—Ç–∫–∞</span>
                </label>
                <label className="flex items-center space-x-2 text-sm text-gray-700">
                  <input
                    type="checkbox"
                    checked={snapToGridEnabled}
                    onChange={(e) => setSnapToGridEnabled(e.target.checked)}
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                  <span>–ü—Ä–∏–≤—è–∑–∫–∞</span>
                </label>
              </div>

              {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
              <div className="flex items-center space-x-2">
                <Button variant="outline" size="sm">
                  <Eye className="h-4 w-4 mr-1" />
                  –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
                </Button>
                <Button size="sm">
                  <Save className="h-4 w-4 mr-1" />
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}

      <div className="flex flex-1 overflow-hidden">
        {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å –±–ª–æ–∫–æ–≤ */}
        <div className={`bg-white border-r border-gray-200 transition-all duration-300 ${
          sidebarCollapsed ? 'w-12' : 'w-64'
        }`}>
          {sidebarCollapsed ? (
            <div className="p-2">
              <button
                onClick={() => setSidebarCollapsed(false)}
                className="w-full p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-md"
              >
                <ChevronRight className="h-4 w-4" />
              </button>
            </div>
          ) : (
            <div className="p-4">
              <div className="flex items-center justify-between mb-4">
                <h3 className="font-semibold text-gray-900">–ë–ª–æ–∫–∏</h3>
                <button
                  onClick={() => setSidebarCollapsed(true)}
                  className="p-1 text-gray-400 hover:text-gray-600"
                >
                  <ChevronLeft className="h-4 w-4" />
                </button>
              </div>
              
              <div className="space-y-2">
                {availableBlocks.map((block) => (
                  <div
                    key={block.id}
                    className="p-3 border border-gray-200 rounded-lg cursor-move hover:border-blue-300 hover:bg-blue-50 transition-colors"
                    onMouseDown={(e) => handleMouseDown(e, block.type)}
                  >
                    <div className="flex items-start space-x-3">
                      <span className="text-lg">{block.icon}</span>
                      <div className="flex-1 min-w-0">
                        <h4 className="text-sm font-medium text-gray-900 truncate">
                          {block.name}
                        </h4>
                        <p className="text-xs text-gray-500 mt-1 line-clamp-2">
                          {block.description}
                        </p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>

        {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—á–∞—è –æ–±–ª–∞—Å—Ç—å */}
        <div className="flex-1 flex flex-col">
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å */}
          <div className="bg-white border-b border-gray-200 px-4 py-2">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <span className="text-sm text-gray-600">
                  –†–∞–∑–º–µ—Ä: 1440√ó900px
                </span>
                <span className="text-sm text-gray-600">
                  –ë–ª–æ–∫–æ–≤: {blocks.length}
                </span>
                {selectedBlock && (
                  <span className="text-sm text-blue-600">
                    –í—ã–±—Ä–∞–Ω: {selectedBlock.name}
                  </span>
                )}
              </div>
              
              <div className="flex items-center space-x-2">
                <Button variant="outline" size="sm">
                  <ZoomIn className="h-4 w-4" />
                </Button>
                <Button variant="outline" size="sm">
                  <Layers className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </div>

          {/* –•–æ–ª—Å—Ç */}
          <div className="flex-1 relative overflow-auto bg-gray-100 p-8">
            <div
              ref={canvasRef}
              className="relative bg-white shadow-lg border border-gray-300 min-h-[900px] w-full max-w-[1440px] mx-auto"
              style={{ minWidth: '1440px', minHeight: '900px' }}
            >
              {/* –°–µ—Ç–∫–∞ */}
              {showGrid && (
                <div 
                  className="absolute inset-0 opacity-20 pointer-events-none"
                  style={{
                    backgroundImage: `
                      linear-gradient(to right, #d1d5db 1px, transparent 1px),
                      linear-gradient(to bottom, #d1d5db 1px, transparent 1px)
                    `,
                    backgroundSize: '16px 16px'
                  }}
                />
              )}

              {/* –ë–ª–æ–∫–∏ */}
              {blocks.map((block) => (
                <div
                  key={block.id}
                  className={`absolute border-2 cursor-pointer transition-all ${
                    selectedBlockId === block.id
                      ? 'border-blue-500 bg-blue-50'
                      : 'border-gray-300 bg-white hover:border-gray-400'
                  } group`}
                  style={{
                    left: block.x,
                    top: block.y,
                    width: block.width,
                    height: block.height,
                    zIndex: block.zIndex
                  }}
                  onClick={() => setSelectedBlockId(block.id)}
                >
                  <div className="p-2 h-full flex items-center justify-center text-sm text-gray-600">
                    {block.name}
                  </div>
                  
                  {selectedBlockId === block.id && (
                    <ResizeHandles 
                      block={block} 
                      onStartResize={(e, handle) => {
                        e.stopPropagation();
                        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
                      }}
                    />
                  )}
                </div>
              ))}

              {/* –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Ö–æ–ª—Å—Ç–∞ */}
              {blocks.length === 0 && (
                <div className="absolute inset-0 flex flex-col items-center justify-center text-gray-400">
                  <div className="text-6xl mb-4">üé®</div>
                  <h3 className="text-lg font-medium mb-2">–ü—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</h3>
                  <p className="text-sm">–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –±–ª–æ–∫–∏ –∏–∑ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏</p>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
        <div className={`bg-white border-l border-gray-200 transition-all duration-300 ${
          rightPanelCollapsed ? 'w-12' : 'w-80'
        }`}>
          {rightPanelCollapsed ? (
            <div className="p-2">
              <button
                onClick={() => setRightPanelCollapsed(false)}
                className="w-full p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-md"
              >
                <ChevronLeft className="h-4 w-4" />
              </button>
            </div>
          ) : (
            <div className="p-4">
              <div className="flex items-center justify-between mb-4">
                <h3 className="font-semibold text-gray-900">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
                <button
                  onClick={() => setRightPanelCollapsed(true)}
                  className="p-1 text-gray-400 hover:text-gray-600"
                >
                  <ChevronRight className="h-4 w-4" />
                </button>
              </div>

              {selectedBlock ? (
                <div className="space-y-6">
                  {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–ª–æ–∫–∞ */}
                  <div>
                    <h4 className="text-sm font-medium text-gray-900 mb-3">–û—Å–Ω–æ–≤–Ω—ã–µ</h4>
                    <div className="space-y-3">
                      <div>
                        <label className="block text-xs font-medium text-gray-700 mb-1">
                          –ù–∞–∑–≤–∞–Ω–∏–µ
                        </label>
                        <Input
                          value={selectedBlock.name}
                          onChange={(e) => updateBlock(selectedBlock.id, { name: e.target.value })}
                          className="text-sm"
                        />
                      </div>
                      
                      <div className="grid grid-cols-2 gap-3">
                        <div>
                          <label className="block text-xs font-medium text-gray-700 mb-1">
                            X
                          </label>
                          <Input
                            type="number"
                            value={selectedBlock.x}
                            onChange={(e) => updateBlock(selectedBlock.id, { x: parseInt(e.target.value) || 0 })}
                            className="text-sm"
                          />
                        </div>
                        <div>
                          <label className="block text-xs font-medium text-gray-700 mb-1">
                            Y
                          </label>
                          <Input
                            type="number"
                            value={selectedBlock.y}
                            onChange={(e) => updateBlock(selectedBlock.id, { y: parseInt(e.target.value) || 0 })}
                            className="text-sm"
                          />
                        </div>
                      </div>

                      <div className="grid grid-cols-2 gap-3">
                        <div>
                          <label className="block text-xs font-medium text-gray-700 mb-1">
                            –®–∏—Ä–∏–Ω–∞
                          </label>
                          <Input
                            type="number"
                            value={selectedBlock.width}
                            onChange={(e) => updateBlock(selectedBlock.id, { width: parseInt(e.target.value) || 0 })}
                            className="text-sm"
                          />
                        </div>
                        <div>
                          <label className="block text-xs font-medium text-gray-700 mb-1">
                            –í—ã—Å–æ—Ç–∞
                          </label>
                          <Input
                            type="number"
                            value={selectedBlock.height}
                            onChange={(e) => updateBlock(selectedBlock.id, { height: parseInt(e.target.value) || 0 })}
                            className="text-sm"
                          />
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –±–ª–æ–∫–æ–≤ */}
                  {selectedBlock.type === 'main-category' && (
                    <div>
                      <h4 className="text-sm font-medium text-gray-900 mb-3">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</h4>
                      <div className="space-y-3">
                        <div>
                          <label className="block text-xs font-medium text-gray-700 mb-1">
                            –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
                          </label>
                          <MainCategorySelector
                            value={selectedBlock.mainCategorySettings?.categoryId || ''}
                            onValueChange={(value) => updateBlock(selectedBlock.id, { 
                              mainCategorySettings: { 
                                ...selectedBlock.mainCategorySettings,
                                categoryId: value 
                              } 
                            })}
                          />
                        </div>
                        
                        <div>
                          <label className="block text-xs font-medium text-gray-700 mb-1">
                            –ú–∞–∫–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤
                          </label>
                          <Select
                            value={selectedBlock.productDisplaySettings?.layout || 'grid'}
                            onValueChange={(value) => updateBlock(selectedBlock.id, { 
                              productDisplaySettings: { 
                                ...selectedBlock.productDisplaySettings,
                                layout: value 
                              } 
                            })}
                          >
                            <option value="grid">–°–µ—Ç–∫–∞</option>
                            <option value="list">–°–ø–∏—Å–æ–∫</option>
                            <option value="masonry">–ö–∞–º–µ–Ω–Ω–∞—è –∫–ª–∞–¥–∫–∞</option>
                          </Select>
                        </div>

                        <div className="grid grid-cols-2 gap-3">
                          <div>
                            <label className="block text-xs font-medium text-gray-700 mb-1">
                              –ö–æ–ª–æ–Ω–∫–∏
                            </label>
                            <Input
                              type="number"
                              value={selectedBlock.productDisplaySettings?.columns || 3}
                              onChange={(e) => updateBlock(selectedBlock.id, { 
                                productDisplaySettings: { 
                                  ...selectedBlock.productDisplaySettings,
                                  columns: parseInt(e.target.value) || 3 
                                } 
                              })}
                              className="text-sm"
                            />
                          </div>
                          <div>
                            <label className="block text-xs font-medium text-gray-700 mb-1">
                              –¢–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                            </label>
                            <Input
                              type="number"
                              value={selectedBlock.productDisplaySettings?.itemsPerPage || 6}
                              onChange={(e) => updateBlock(selectedBlock.id, { 
                                productDisplaySettings: { 
                                  ...selectedBlock.productDisplaySettings,
                                  itemsPerPage: parseInt(e.target.value) || 6 
                                } 
                              })}
                              className="text-sm"
                            />
                          </div>
                        </div>
                      </div>
                    </div>
                  )}

                  {/* –î–µ–π—Å—Ç–≤–∏—è —Å –±–ª–æ–∫–æ–º */}
                  <div className="border-t border-gray-200 pt-4">
                    <div className="flex space-x-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => duplicateBlock(selectedBlock.id)}
                        className="flex-1"
                      >
                        <Copy className="h-4 w-4 mr-1" />
                        –î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => deleteBlock(selectedBlock.id)}
                        className="flex-1 text-red-600 hover:text-red-700"
                      >
                        <Trash2 className="h-4 w-4 mr-1" />
                        –£–¥–∞–ª–∏—Ç—å
                      </Button>
                    </div>
                  </div>
                </div>
              ) : (
                <div className="text-center text-gray-500 py-12">
                  <div className="text-4xl mb-4">‚öôÔ∏è</div>
                  <h3 className="text-lg font-medium mb-2">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–ª–æ–∫–∞</h3>
                  <p className="text-sm">–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</p>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}