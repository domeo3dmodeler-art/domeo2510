'use client';

import React, { useState, useCallback, useEffect } from 'react';
import { DragDropContext, Droppable, Draggable } from '@hello-pangea/dnd';
import { 
  Plus, 
  Settings, 
  Play, 
  Save, 
  Eye, 
  Code, 
  Calculator,
  Type,
  Hash,
  ToggleLeft,
  Calendar,
  List,
  MousePointer,
  Zap
} from 'lucide-react';

// üßÆ –¢–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
export type CalculatorElementType = 
  | 'input'           // –ü–æ–ª–µ –≤–≤–æ–¥–∞
  | 'output'          // –ü–æ–ª–µ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  | 'formula'         // –§–æ—Ä–º—É–ª–∞
  | 'condition'       // –£—Å–ª–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
  | 'button'          // –ö–Ω–æ–ø–∫–∞
  | 'text'            // –¢–µ–∫—Å—Ç/–∑–∞–≥–æ–ª–æ–≤–æ–∫
  | 'slider'          // –°–ª–∞–π–¥–µ—Ä
  | 'select'          // –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
  | 'checkbox'        // –ß–µ–∫–±–æ–∫—Å
  | 'radio'           // –†–∞–¥–∏–æ –∫–Ω–æ–ø–∫–∏
  | 'date'            // –í—ã–±–æ—Ä –¥–∞—Ç—ã
  | 'table'           // –¢–∞–±–ª–∏—Ü–∞
  | 'chart'           // –ì—Ä–∞—Ñ–∏–∫
  | 'group'           // –ì—Ä—É–ø–ø–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  | 'tabs'            // –í–∫–ª–∞–¥–∫–∏
  | 'accordion'       // –ê–∫–∫–æ—Ä–¥–µ–æ–Ω
  | 'progress'        // –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
  | 'catalog_source'  // –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
  | 'api_source'      // –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API
  | 'file_source';    // –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞

export interface CalculatorElement {
  id: string;
  type: CalculatorElementType;
  name: string;
  label: string;
  
  // üìç –ü–æ–∑–∏—Ü–∏—è –∏ —Ä–∞–∑–º–µ—Ä
  position: { x: number; y: number };
  size: { width: number; height: number };
  
  // üé® –°—Ç–∏–ª–∏
  styles: {
    backgroundColor?: string;
    textColor?: string;
    borderColor?: string;
    borderRadius?: number;
    fontSize?: number;
    fontWeight?: string;
    padding?: number;
    margin?: number;
  };
  
  // ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
  config: {
    // –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    required?: boolean;
    disabled?: boolean;
    visible?: boolean;
    placeholder?: string;
    helpText?: string;
    
    // –î–ª—è input
    inputType?: 'text' | 'number' | 'email' | 'tel' | 'password';
    min?: number;
    max?: number;
    step?: number;
    
    // –î–ª—è select/radio
    options?: Array<{ value: any; label: string }>;
    
    // –î–ª—è —Ñ–æ—Ä–º—É–ª
    formula?: string;
    variables?: string[];
    
    // –î–ª—è —É—Å–ª–æ–≤–∏–π
    condition?: string;
    trueAction?: string;
    falseAction?: string;
    
    // –î–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    dataSource?: {
      type: 'catalog' | 'api' | 'file';
      config: any;
    };
    
    // –î–ª—è —Ç–∞–±–ª–∏—Ü –∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    columns?: Array<{ key: string; label: string; type: string }>;
    chartType?: 'line' | 'bar' | 'pie' | 'area';
    
    // –°–æ–±—ã—Ç–∏—è
    onChange?: string; // JavaScript –∫–æ–¥
    onClick?: string;
    onFocus?: string;
    onBlur?: string;
  };
  
  // üîó –°–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
  dependencies?: string[];
  affects?: string[];
}

export interface CalculatorConfig {
  id: string;
  name: string;
  description: string;
  elements: CalculatorElement[];
  variables: Array<{
    id: string;
    name: string;
    type: string;
    defaultValue: any;
  }>;
  formulas: Array<{
    id: string;
    name: string;
    expression: string;
  }>;
  styles: {
    theme: 'light' | 'dark' | 'custom';
    primaryColor: string;
    secondaryColor: string;
    backgroundColor: string;
    fontFamily: string;
  };
  layout: {
    type: 'grid' | 'flex' | 'absolute';
    columns?: number;
    gap?: number;
    responsive?: boolean;
  };
}

// üé® –ü–∞–ª–∏—Ç—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
const ELEMENT_PALETTE: Array<{
  type: CalculatorElementType;
  name: string;
  icon: React.ReactNode;
  category: string;
  description: string;
}> = [
  // üìù –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
  { type: 'input', name: '–ü–æ–ª–µ –≤–≤–æ–¥–∞', icon: <Type />, category: 'input', description: '–¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö' },
  { type: 'slider', name: '–°–ª–∞–π–¥–µ—Ä', icon: <ToggleLeft />, category: 'input', description: '–°–ª–∞–π–¥–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è' },
  { type: 'select', name: '–í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫', icon: <List />, category: 'input', description: '–°–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞' },
  { type: 'checkbox', name: '–ß–µ–∫–±–æ–∫—Å', icon: <MousePointer />, category: 'input', description: '–§–ª–∞–∂–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞/–Ω–µ—Ç' },
  { type: 'date', name: '–í—ã–±–æ—Ä –¥–∞—Ç—ã', icon: <Calendar />, category: 'input', description: '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã' },
  
  // üßÆ –í—ã—á–∏—Å–ª–µ–Ω–∏—è
  { type: 'formula', name: '–§–æ—Ä–º—É–ª–∞', icon: <Calculator />, category: 'logic', description: '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞' },
  { type: 'condition', name: '–£—Å–ª–æ–≤–∏–µ', icon: <Zap />, category: 'logic', description: '–£—Å–ª–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ if-then-else' },
  { type: 'output', name: '–†–µ–∑—É–ª—å—Ç–∞—Ç', icon: <Hash />, category: 'logic', description: '–ü–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞' },
  
  // üé® –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  { type: 'text', name: '–¢–µ–∫—Å—Ç', icon: <Type />, category: 'ui', description: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ' },
  { type: 'button', name: '–ö–Ω–æ–ø–∫–∞', icon: <MousePointer />, category: 'ui', description: '–ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π' },
  { type: 'group', name: '–ì—Ä—É–ø–ø–∞', icon: <List />, category: 'ui', description: '–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤' },
  { type: 'tabs', name: '–í–∫–ª–∞–¥–∫–∏', icon: <List />, category: 'ui', description: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –≤ –≤–∫–ª–∞–¥–∫–∏' },
  
  // üìä –î–∞–Ω–Ω—ã–µ
  { type: 'table', name: '–¢–∞–±–ª–∏—Ü–∞', icon: <List />, category: 'data', description: '–¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏' },
  { type: 'chart', name: '–ì—Ä–∞—Ñ–∏–∫', icon: <List />, category: 'data', description: '–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö' },
  { type: 'catalog_source', name: '–ö–∞—Ç–∞–ª–æ–≥', icon: <List />, category: 'data', description: '–î–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤' },
  { type: 'api_source', name: 'API', icon: <Zap />, category: 'data', description: '–í–Ω–µ—à–Ω–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö' },
];

const CATEGORIES = {
  input: { name: '–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö', color: 'bg-blue-100 text-blue-800' },
  logic: { name: '–í—ã—á–∏—Å–ª–µ–Ω–∏—è', color: 'bg-green-100 text-green-800' },
  ui: { name: '–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å', color: 'bg-purple-100 text-purple-800' },
  data: { name: '–î–∞–Ω–Ω—ã–µ', color: 'bg-orange-100 text-orange-800' },
};

export default function UniversalCalculatorBuilder() {
  const [config, setConfig] = useState<CalculatorConfig>({
    id: 'calc_' + Date.now(),
    name: '–ù–æ–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä',
    description: '',
    elements: [],
    variables: [],
    formulas: [],
    styles: {
      theme: 'light',
      primaryColor: '#3b82f6',
      secondaryColor: '#64748b',
      backgroundColor: '#ffffff',
      fontFamily: 'Inter, sans-serif'
    },
    layout: {
      type: 'grid',
      columns: 12,
      gap: 16,
      responsive: true
    }
  });

  const [selectedElement, setSelectedElement] = useState<string | null>(null);
  const [mode, setMode] = useState<'design' | 'preview' | 'code'>('design');
  const [draggedElementType, setDraggedElementType] = useState<CalculatorElementType | null>(null);

  // üé® –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Ö–æ–ª—Å—Ç
  const addElement = useCallback((type: CalculatorElementType, position?: { x: number; y: number }) => {
    const newElement: CalculatorElement = {
      id: `element_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      type,
      name: ELEMENT_PALETTE.find(p => p.type === type)?.name || type,
      label: ELEMENT_PALETTE.find(p => p.type === type)?.name || type,
      position: position || { x: 100, y: 100 },
      size: { width: 200, height: 40 },
      styles: {
        backgroundColor: '#ffffff',
        textColor: '#000000',
        borderColor: '#d1d5db',
        borderRadius: 4,
        fontSize: 14,
        padding: 8
      },
      config: {
        visible: true,
        required: false,
        disabled: false
      },
      dependencies: [],
      affects: []
    };

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    switch (type) {
      case 'input':
        newElement.config.inputType = 'text';
        newElement.config.placeholder = '–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ';
        break;
      case 'slider':
        newElement.config.min = 0;
        newElement.config.max = 100;
        newElement.config.step = 1;
        newElement.size.height = 60;
        break;
      case 'select':
        newElement.config.options = [
          { value: 'option1', label: '–í–∞—Ä–∏–∞–Ω—Ç 1' },
          { value: 'option2', label: '–í–∞—Ä–∏–∞–Ω—Ç 2' }
        ];
        break;
      case 'formula':
        newElement.config.formula = '0';
        newElement.config.variables = [];
        break;
      case 'output':
        newElement.size.height = 60;
        newElement.styles.backgroundColor = '#f3f4f6';
        break;
      case 'button':
        newElement.size.width = 120;
        newElement.styles.backgroundColor = config.styles.primaryColor;
        newElement.styles.textColor = '#ffffff';
        break;
      case 'text':
        newElement.config.placeholder = '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç';
        newElement.size.height = 30;
        break;
    }

    setConfig(prev => ({
      ...prev,
      elements: [...prev.elements, newElement]
    }));

    setSelectedElement(newElement.id);
  }, [config.styles.primaryColor]);

  // üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç
  const removeElement = useCallback((elementId: string) => {
    setConfig(prev => ({
      ...prev,
      elements: prev.elements.filter(el => el.id !== elementId)
    }));
    
    if (selectedElement === elementId) {
      setSelectedElement(null);
    }
  }, [selectedElement]);

  // ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç
  const updateElement = useCallback((elementId: string, updates: Partial<CalculatorElement>) => {
    setConfig(prev => ({
      ...prev,
      elements: prev.elements.map(el => 
        el.id === elementId ? { ...el, ...updates } : el
      )
    }));
  }, []);

  // üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  const saveConfig = useCallback(async () => {
    try {
      const response = await fetch('/api/calculator/configs', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(config)
      });

      if (response.ok) {
        alert('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
      } else {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
    }
  }, [config]);

  // üéÆ –û–±—Ä–∞–±–æ—Ç–∫–∞ drag & drop
  const handleDragEnd = useCallback((result: any) => {
    if (!result.destination) return;

    const { source, destination } = result;

    // –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã –Ω–∞ —Ö–æ–ª—Å—Ç
    if (source.droppableId === 'palette' && destination.droppableId === 'canvas') {
      const elementType = ELEMENT_PALETTE[source.index].type;
      addElement(elementType, { x: destination.x || 100, y: destination.y || 100 });
    }
  }, [addElement]);

  return (
    <div className="h-screen bg-gray-50 flex flex-col">
      {/* üîù –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ */}
      <header className="bg-white border-b border-gray-200 px-6 py-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <Calculator className="w-8 h-8 text-blue-600" />
            <div>
              <h1 className="text-xl font-semibold text-gray-900">
                –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤
              </h1>
              <p className="text-sm text-gray-500">
                –°–æ–∑–¥–∞–π—Ç–µ –ª—é–±–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –±–µ–∑ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
              </p>
            </div>
          </div>

          <div className="flex items-center space-x-3">
            {/* –†–µ–∂–∏–º—ã */}
            <div className="flex bg-gray-100 rounded-lg p-1">
              <button
                onClick={() => setMode('design')}
                className={`px-3 py-1 rounded text-sm font-medium transition-colors ${
                  mode === 'design' 
                    ? 'bg-white text-gray-900 shadow-sm' 
                    : 'text-gray-600 hover:text-gray-900'
                }`}
              >
                <Settings className="w-4 h-4 inline mr-1" />
                –î–∏–∑–∞–π–Ω
              </button>
              <button
                onClick={() => setMode('preview')}
                className={`px-3 py-1 rounded text-sm font-medium transition-colors ${
                  mode === 'preview' 
                    ? 'bg-white text-gray-900 shadow-sm' 
                    : 'text-gray-600 hover:text-gray-900'
                }`}
              >
                <Eye className="w-4 h-4 inline mr-1" />
                –ü—Ä–µ–≤—å—é
              </button>
              <button
                onClick={() => setMode('code')}
                className={`px-3 py-1 rounded text-sm font-medium transition-colors ${
                  mode === 'code' 
                    ? 'bg-white text-gray-900 shadow-sm' 
                    : 'text-gray-600 hover:text-gray-900'
                }`}
              >
                <Code className="w-4 h-4 inline mr-1" />
                –ö–æ–¥
              </button>
            </div>

            {/* –î–µ–π—Å—Ç–≤–∏—è */}
            <button
              onClick={saveConfig}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              <Save className="w-4 h-4 inline mr-2" />
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </button>
          </div>
        </div>
      </header>

      {/* üì± –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å */}
      <div className="flex-1 flex overflow-hidden">
        {mode === 'design' && (
          <>
            {/* üé® –ü–∞–ª–∏—Ç—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */}
            <div className="w-80 bg-white border-r border-gray-200 overflow-y-auto">
              <div className="p-4">
                <h3 className="text-sm font-semibold text-gray-900 mb-4">
                  –≠–ª–µ–º–µ–Ω—Ç—ã –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
                </h3>
                
                {Object.entries(CATEGORIES).map(([categoryKey, category]) => (
                  <div key={categoryKey} className="mb-6">
                    <h4 className={`text-xs font-medium px-2 py-1 rounded-full inline-block mb-3 ${category.color}`}>
                      {category.name}
                    </h4>
                    
                    <div className="grid grid-cols-2 gap-2">
                      {ELEMENT_PALETTE
                        .filter(element => element.category === categoryKey)
                        .map((element, index) => (
                          <button
                            key={element.type}
                            onClick={() => addElement(element.type)}
                            className="p-3 border border-gray-200 rounded-lg hover:border-blue-300 hover:bg-blue-50 transition-colors text-left group"
                            title={element.description}
                          >
                            <div className="flex items-center space-x-2">
                              <div className="text-gray-600 group-hover:text-blue-600">
                                {element.icon}
                              </div>
                              <span className="text-xs font-medium text-gray-700 group-hover:text-blue-700">
                                {element.name}
                              </span>
                            </div>
                          </button>
                        ))}
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* üñºÔ∏è –•–æ–ª—Å—Ç –¥–ª—è –¥–∏–∑–∞–π–Ω–∞ */}
            <div className="flex-1 bg-gray-100 overflow-auto">
              <div className="p-8">
                <div 
                  className="bg-white rounded-lg shadow-sm border border-gray-200 min-h-96 relative"
                  style={{ minWidth: '800px' }}
                >
                  {config.elements.map((element) => (
                    <div
                      key={element.id}
                      className={`absolute border-2 transition-all cursor-pointer ${
                        selectedElement === element.id 
                          ? 'border-blue-500 shadow-lg' 
                          : 'border-transparent hover:border-gray-300'
                      }`}
                      style={{
                        left: element.position.x,
                        top: element.position.y,
                        width: element.size.width,
                        height: element.size.height,
                        backgroundColor: element.styles.backgroundColor,
                        color: element.styles.textColor,
                        borderRadius: element.styles.borderRadius,
                        fontSize: element.styles.fontSize,
                        padding: element.styles.padding
                      }}
                      onClick={() => setSelectedElement(element.id)}
                    >
                      {/* –†–µ–Ω–¥–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ */}
                      <ElementRenderer element={element} />
                      
                      {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è */}
                      {selectedElement === element.id && (
                        <button
                          onClick={(e) => {
                            e.stopPropagation();
                            removeElement(element.id);
                          }}
                          className="absolute -top-2 -right-2 w-6 h-6 bg-red-500 text-white rounded-full text-xs hover:bg-red-600"
                        >
                          √ó
                        </button>
                      )}
                    </div>
                  ))}
                  
                  {config.elements.length === 0 && (
                    <div className="flex items-center justify-center h-96 text-gray-500">
                      <div className="text-center">
                        <Calculator className="w-16 h-16 mx-auto mb-4 text-gray-300" />
                        <p className="text-lg font-medium">–ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞</p>
                        <p className="text-sm">–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã —Å–ª–µ–≤–∞</p>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* ‚öôÔ∏è –ü–∞–Ω–µ–ª—å —Å–≤–æ–π—Å—Ç–≤ */}
            <div className="w-80 bg-white border-l border-gray-200 overflow-y-auto">
              <ElementPropertiesPanel
                element={selectedElement ? config.elements.find(el => el.id === selectedElement) : null}
                onUpdate={(updates) => selectedElement && updateElement(selectedElement, updates)}
              />
            </div>
          </>
        )}

        {mode === 'preview' && (
          <div className="flex-1 bg-gray-100 p-8">
            <CalculatorPreview config={config} />
          </div>
        )}

        {mode === 'code' && (
          <div className="flex-1 bg-gray-900 text-gray-100 p-8">
            <CodeViewer config={config} />
          </div>
        )}
      </div>
    </div>
  );
}

// üé® –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function ElementRenderer({ element }: { element: CalculatorElement }) {
  switch (element.type) {
    case 'input':
      return (
        <input
          type={element.config.inputType || 'text'}
          placeholder={element.config.placeholder}
          className="w-full h-full border-0 outline-none bg-transparent"
          disabled
        />
      );
      
    case 'output':
      return (
        <div className="w-full h-full flex items-center px-2 bg-gray-50 border rounded">
          <span className="text-gray-500">–†–µ–∑—É–ª—å—Ç–∞—Ç</span>
        </div>
      );
      
    case 'button':
      return (
        <button className="w-full h-full rounded transition-colors">
          {element.label}
        </button>
      );
      
    case 'text':
      return (
        <div className="w-full h-full flex items-center">
          {element.label}
        </div>
      );
      
    case 'formula':
      return (
        <div className="w-full h-full flex items-center px-2 bg-green-50 border border-green-200 rounded">
          <Calculator className="w-4 h-4 mr-2 text-green-600" />
          <span className="text-green-700 text-sm">
            {element.config.formula || '–§–æ—Ä–º—É–ª–∞'}
          </span>
        </div>
      );
      
    default:
      return (
        <div className="w-full h-full flex items-center justify-center text-gray-500 text-sm">
          {element.name}
        </div>
      );
  }
}

// ‚öôÔ∏è –ü–∞–Ω–µ–ª—å —Å–≤–æ–π—Å—Ç–≤ —ç–ª–µ–º–µ–Ω—Ç–∞
function ElementPropertiesPanel({ 
  element, 
  onUpdate 
}: { 
  element: CalculatorElement | null;
  onUpdate: (updates: Partial<CalculatorElement>) => void;
}) {
  if (!element) {
    return (
      <div className="p-4">
        <p className="text-gray-500 text-center">
          –í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        </p>
      </div>
    );
  }

  return (
    <div className="p-4">
      <h3 className="text-lg font-semibold text-gray-900 mb-4">
        –°–≤–æ–π—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
      </h3>
      
      {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            –ù–∞–∑–≤–∞–Ω–∏–µ
          </label>
          <input
            type="text"
            value={element.label}
            onChange={(e) => onUpdate({ label: e.target.value })}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>

        {/* –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ */}
        {element.type === 'input' && (
          <>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –¢–∏–ø –ø–æ–ª—è
              </label>
              <select
                value={element.config.inputType || 'text'}
                onChange={(e) => onUpdate({ 
                  config: { ...element.config, inputType: e.target.value as any }
                })}
                className="w-full px-3 py-2 border border-gray-300 rounded-md"
              >
                <option value="text">–¢–µ–∫—Å—Ç</option>
                <option value="number">–ß–∏—Å–ª–æ</option>
                <option value="email">Email</option>
                <option value="tel">–¢–µ–ª–µ—Ñ–æ–Ω</option>
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ü–æ–¥—Å–∫–∞–∑–∫–∞
              </label>
              <input
                type="text"
                value={element.config.placeholder || ''}
                onChange={(e) => onUpdate({ 
                  config: { ...element.config, placeholder: e.target.value }
                })}
                className="w-full px-3 py-2 border border-gray-300 rounded-md"
              />
            </div>
          </>
        )}

        {element.type === 'formula' && (
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –§–æ—Ä–º—É–ª–∞
            </label>
            <textarea
              value={element.config.formula || ''}
              onChange={(e) => onUpdate({ 
                config: { ...element.config, formula: e.target.value }
              })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md h-24"
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: price * quantity * (1 + tax/100)"
            />
          </div>
        )}

        {/* –°—Ç–∏–ª–∏ */}
        <div className="pt-4 border-t border-gray-200">
          <h4 className="text-sm font-semibold text-gray-900 mb-3">–°—Ç–∏–ª–∏</h4>
          
          <div className="grid grid-cols-2 gap-3">
            <div>
              <label className="block text-xs text-gray-600 mb-1">–®–∏—Ä–∏–Ω–∞</label>
              <input
                type="number"
                value={element.size.width}
                onChange={(e) => onUpdate({ 
                  size: { ...element.size, width: parseInt(e.target.value) }
                })}
                className="w-full px-2 py-1 text-sm border border-gray-300 rounded"
              />
            </div>
            
            <div>
              <label className="block text-xs text-gray-600 mb-1">–í—ã—Å–æ—Ç–∞</label>
              <input
                type="number"
                value={element.size.height}
                onChange={(e) => onUpdate({ 
                  size: { ...element.size, height: parseInt(e.target.value) }
                })}
                className="w-full px-2 py-1 text-sm border border-gray-300 rounded"
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

// üëÅÔ∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
function CalculatorPreview({ config }: { config: CalculatorConfig }) {
  return (
    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-8">
      <h2 className="text-2xl font-bold text-gray-900 mb-6">
        {config.name}
      </h2>
      
      <div className="relative" style={{ minHeight: '400px' }}>
        {config.elements.map((element) => (
          <div
            key={element.id}
            className="absolute"
            style={{
              left: element.position.x,
              top: element.position.y,
              width: element.size.width,
              height: element.size.height
            }}
          >
            <ElementRenderer element={element} />
          </div>
        ))}
      </div>
    </div>
  );
}

// üíª –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–¥–∞
function CodeViewer({ config }: { config: CalculatorConfig }) {
  const generatedCode = JSON.stringify(config, null, 2);
  
  return (
    <div>
      <h3 className="text-lg font-semibold text-white mb-4">
        –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
      </h3>
      
      <pre className="bg-gray-800 p-4 rounded-lg overflow-auto text-sm">
        <code>{generatedCode}</code>
      </pre>
    </div>
  );
}
