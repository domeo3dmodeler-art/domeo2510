'use client';

import React, { useState, useEffect } from 'react';
import { PropertiesPanelProps, BaseElement, Page, Spacing, Style } from '../types';
import { CategoryTreeSelector } from './CategoryTreeSelector';
import { ProductPropertiesSelector } from './ProductPropertiesSelector';
import { PropertyDisplaySettings } from './PropertyDisplaySettings';
import { CatalogSelector } from '../elements/CatalogSelector';
import { SimplifiedPropertyFilterPanel } from './SimplifiedPropertyFilterPanel';
import { extractUniquePropertyValues } from '@/lib/string-utils';

export function PropertiesPanel({ element, page, onUpdateElement, onUpdatePage }: PropertiesPanelProps) {
  console.log('üö® PropertiesPanel: –†–µ–Ω–¥–µ—Ä!', {
    elementType: element?.type,
    elementId: element?.id,
    elementProps: element?.props
  });
  
  const [activeTab, setActiveTab] = useState<'content' | 'style' | 'layout' | 'page'>('content');
  const [categories, setCategories] = useState<any[]>([]);
  const [loadingCategories, setLoadingCategories] = useState(false);
  const [availableProperties, setAvailableProperties] = useState<any[]>([]);
  const [loadingProducts, setLoadingProducts] = useState(false);
  const [loadingProgress, setLoadingProgress] = useState({ current: 0, total: 0 });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–∞—Ç–∞–ª–æ–≥–∞
  useEffect(() => {
    const loadCategories = async () => {
      setLoadingCategories(true);
      try {
        const response = await fetch('/api/catalog/categories/tree');
        if (response.ok) {
          const data = await response.json();
          setCategories(data.categories || []);
        }
      } catch (error) {
        console.error('Error loading categories:', error);
      } finally {
        setLoadingCategories(false);
      }
    };

    loadCategories();
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–æ–π—Å—Ç–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  useEffect(() => {
    const loadProperties = async () => {
      console.log('PropertiesPanel: –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–æ–π—Å—Ç–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', element?.props?.categoryIds);
      
      if (!element?.props?.categoryIds?.length) {
        console.log('PropertiesPanel: –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –æ—á–∏—â–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞');
        setAvailableProperties([]);
        return;
      }

      try {
        console.log('PropertiesPanel: –ó–∞–ø—Ä–æ—Å –∫ API /api/catalog/properties');
        const response = await fetch('/api/catalog/properties', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ categoryIds: element.props.categoryIds })
        });
        
        if (response.ok) {
          const propertiesData = await response.json();
          const properties = propertiesData.properties || [];
          console.log('PropertiesPanel: –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–≤–æ–π—Å—Ç–≤–∞:', properties.map(p => ({ id: p.id, name: p.name })));
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
          setLoadingProducts(true);
          setLoadingProgress({ current: 0, total: 100 });
          
          try {
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Å–≤–æ–π—Å—Ç–≤ —Å—Ä–∞–∑—É
            // PropertyFilter –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞
            console.log('PropertiesPanel: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Å–≤–æ–π—Å—Ç–≤ - PropertyFilter –∑–∞–≥—Ä—É–∑–∏—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞');
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º (–±–µ–∑ –¥–∞–Ω–Ω—ã—Ö)
            const propertiesWithOptions = properties.map((property: any) => {
              console.log(`Property "${property.name}": –±–µ–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (PropertyFilter –∑–∞–≥—Ä—É–∑–∏—Ç)`);
              
              return {
                ...property,
                options: [] // –ü—É—Å—Ç—ã–µ –æ–ø—Ü–∏–∏, PropertyFilter –∑–∞–≥—Ä—É–∑–∏—Ç –¥–∞–Ω–Ω—ã–µ
              };
            });
            
            setAvailableProperties(propertiesWithOptions);
            console.log('PropertiesPanel: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞:', propertiesWithOptions.map(p => ({ id: p.id, name: p.name })));
            setLoadingProgress({ current: 100, total: 100 });
          } catch (error: any) {
            console.error('PropertiesPanel: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π:', error);
            setAvailableProperties(properties);
            console.log('PropertiesPanel: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å–≤–æ–π—Å—Ç–≤–∞ –±–µ–∑ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π:', properties.map(p => ({ id: p.id, name: p.name })));
          } finally {
            setLoadingProducts(false);
          }
        }
      } catch (error) {
        console.error('Error loading properties:', error);
        setAvailableProperties([]);
      }
    };

    loadProperties();
  }, [element?.props?.categoryIds]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞
  const handleElementPropChange = (key: string, value: any) => {
    if (!element) return;

    console.log('üö® PropertiesPanel: handleElementPropChange –≤—ã–∑–≤–∞–Ω!', {
      elementId: element.id,
      key,
      value,
      currentProps: element.props
    });

    const newProps = {
      ...element.props,
      [key]: value
    };

    // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º selectedPropertyIds, —Ç–∞–∫–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º propertyName
    if (key === 'selectedPropertyIds' && value?.length > 0 && availableProperties.length > 0) {
      const selectedProperty = availableProperties.find(p => p.id === value[0]);
      if (selectedProperty) {
        newProps.propertyName = selectedProperty.name;
        console.log('üö® PropertiesPanel: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º propertyName:', selectedProperty.name);
      }
    }

    console.log('üö® PropertiesPanel: –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!', {
      elementId: element.id,
      key,
      value,
      newProps,
      newPropsPropertyName: newProps.propertyName
    });

    onUpdateElement(element.id, {
      props: newProps
    });

    console.log('üö® PropertiesPanel: onUpdateElement –≤—ã–∑–≤–∞–Ω!', {
      elementId: element.id,
      updates: { props: newProps }
    });
  };

  const handleElementStyleChange = (key: keyof Style, value: any) => {
    if (!element) return;
    
    onUpdateElement(element.id, {
      style: {
        ...element.style,
        [key]: value
      }
    });
  };

  const handleElementPositionChange = (key: 'x' | 'y', value: number) => {
    if (!element) return;
    
    onUpdateElement(element.id, {
      position: {
        ...element.position,
        [key]: value
      }
    });
  };

  const handleElementSizeChange = (key: 'width' | 'height', value: number) => {
    if (!element) return;
    
    onUpdateElement(element.id, {
      size: {
        ...element.size,
        [key]: value
      }
    });
  };

  const handleSpacingChange = (spacingType: 'padding' | 'margin', key: keyof Spacing, value: number) => {
    if (!element) return;
    
    onUpdateElement(element.id, {
      style: {
        ...element.style,
        [spacingType]: {
          ...element.style[spacingType],
          [key]: value
        }
      }
    });
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const handlePageSettingChange = (key: string, value: any) => {
    if (!page) return;
    
    onUpdatePage({
      settings: {
        ...page.settings,
        [key]: value
      }
    });
  };

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∫–ª–∞–¥–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
  const renderContentTab = () => {
    if (!element) return null;

    switch (element.type) {
      case 'propertyFilter':
        console.log('üö® PropertiesPanel: –†–µ–Ω–¥–µ—Ä–∏–º propertyFilter —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª—å—é!', {
          elementType: element.type,
          elementId: element.id,
          elementProps: element.props,
          categoryIds: element.props.categoryIds,
          selectedPropertyIds: element.props.selectedPropertyIds
        });
        
        return (
          <SimplifiedPropertyFilterPanel
            element={element}
            onUpdateElement={onUpdateElement}
          />
        );

      case 'text':
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
              </label>
              <textarea
                value={element.props.content || ''}
                onChange={(e) => handleElementPropChange('content', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                rows={3}
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
              </label>
              <input
                type="number"
                value={element.props.fontSize || 16}
                onChange={(e) => handleElementPropChange('fontSize', parseInt(e.target.value))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
              </label>
              <input
                type="color"
                value={element.props.color || '#1f2937'}
                onChange={(e) => handleElementPropChange('color', e.target.value)}
                className="w-full h-10 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          </div>
        );

      case 'heading':
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
              </label>
              <input
                type="text"
                value={element.props.content || ''}
                onChange={(e) => handleElementPropChange('content', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –£—Ä–æ–≤–µ–Ω—å –∑–∞–≥–æ–ª–æ–≤–∫–∞
              </label>
              <select
                value={element.props.level || 1}
                onChange={(e) => handleElementPropChange('level', parseInt(e.target.value))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value={1}>H1</option>
                <option value={2}>H2</option>
                <option value={3}>H3</option>
                <option value={4}>H4</option>
                <option value={5}>H5</option>
                <option value={6}>H6</option>
              </select>
            </div>
          </div>
        );

      case 'image':
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
              </label>
              <input
                type="url"
                value={element.props.src || ''}
                onChange={(e) => handleElementPropChange('src', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="https://example.com/image.jpg"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Alt —Ç–µ–∫—Å—Ç
              </label>
              <input
                type="text"
                value={element.props.alt || ''}
                onChange={(e) => handleElementPropChange('alt', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          </div>
        );

      case 'button':
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
              </label>
              <input
                type="text"
                value={element.props.text || ''}
                onChange={(e) => handleElementPropChange('text', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –í–∞—Ä–∏–∞–Ω—Ç
              </label>
              <select
                value={element.props.variant || 'primary'}
                onChange={(e) => handleElementPropChange('variant', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="primary">–û—Å–Ω–æ–≤–Ω–∞—è</option>
                <option value="secondary">–í—Ç–æ—Ä–∏—á–Ω–∞—è</option>
                <option value="outline">–ö–æ–Ω—Ç—É—Ä–Ω–∞—è</option>
              </select>
            </div>
          </div>
        );

      default:
        return (
          <div className="text-center text-gray-500 py-8">
            <div className="text-4xl mb-4">‚öôÔ∏è</div>
            <p>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</p>
          </div>
        );
    }
  };

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∫–ª–∞–¥–∫–∏ —Å—Ç–∏–ª–µ–π
  const renderStyleTab = () => {
    if (!element) return null;

    return (
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            –§–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç
          </label>
          <input
            type="color"
            value={element.style.backgroundColor || '#ffffff'}
            onChange={(e) => handleElementStyleChange('backgroundColor', e.target.value)}
            className="w-full h-10 border border-gray-300 rounded-lg"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
          </label>
          <input
            type="color"
            value={element.style.color || '#000000'}
            onChange={(e) => handleElementStyleChange('color', e.target.value)}
            className="w-full h-10 border border-gray-300 rounded-lg"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
          </label>
          <input
            type="number"
            value={element.style.fontSize || 16}
            onChange={(e) => handleElementStyleChange('fontSize', parseInt(e.target.value))}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>
      </div>
    );
  };

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∫–ª–∞–¥–∫–∏ –º–∞–∫–µ—Ç–∞
  const renderLayoutTab = () => {
    if (!element) return null;

    return (
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            –ü–æ–∑–∏—Ü–∏—è X
          </label>
          <input
            type="number"
            value={element.position.x || 0}
            onChange={(e) => handleElementPositionChange('x', parseInt(e.target.value))}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            –ü–æ–∑–∏—Ü–∏—è Y
          </label>
          <input
            type="number"
            value={element.position.y || 0}
            onChange={(e) => handleElementPositionChange('y', parseInt(e.target.value))}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            –®–∏—Ä–∏–Ω–∞
          </label>
          <input
            type="number"
            value={element.size.width || 200}
            onChange={(e) => handleElementSizeChange('width', parseInt(e.target.value))}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            –í—ã—Å–æ—Ç–∞
          </label>
          <input
            type="number"
            value={element.size.height || 100}
            onChange={(e) => handleElementSizeChange('height', parseInt(e.target.value))}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>
      </div>
    );
  };

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∫–ª–∞–¥–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const renderPageTab = () => {
    if (!page) return null;

    return (
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
          </label>
          <input
            type="text"
            value={page.title || ''}
            onChange={(e) => handlePageSettingChange('title', e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
          </label>
          <textarea
            value={page.description || ''}
            onChange={(e) => handlePageSettingChange('description', e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            rows={3}
          />
        </div>
      </div>
    );
  };

  if (!element && !page) {
    return (
      <div className="text-center text-gray-500 py-8">
        <div className="text-4xl mb-4">üìù</div>
        <p>–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</p>
      </div>
    );
  }

  return (
    <div className="h-full flex flex-col">
      {/* –í–∫–ª–∞–¥–∫–∏ */}
      <div className="flex border-b border-gray-200">
        <button
          onClick={() => setActiveTab('content')}
          className={`px-4 py-2 text-sm font-medium ${
            activeTab === 'content'
              ? 'text-blue-600 border-b-2 border-blue-600'
              : 'text-gray-500 hover:text-gray-700'
          }`}
        >
          –ö–æ–Ω—Ç–µ–Ω—Ç
        </button>
        <button
          onClick={() => setActiveTab('style')}
          className={`px-4 py-2 text-sm font-medium ${
            activeTab === 'style'
              ? 'text-blue-600 border-b-2 border-blue-600'
              : 'text-gray-500 hover:text-gray-700'
          }`}
        >
          –°—Ç–∏–ª–∏
        </button>
        <button
          onClick={() => setActiveTab('layout')}
          className={`px-4 py-2 text-sm font-medium ${
            activeTab === 'layout'
              ? 'text-blue-600 border-b-2 border-blue-600'
              : 'text-gray-500 hover:text-gray-700'
          }`}
        >
          –ú–∞–∫–µ—Ç
        </button>
        <button
          onClick={() => setActiveTab('page')}
          className={`px-4 py-2 text-sm font-medium ${
            activeTab === 'page'
              ? 'text-blue-600 border-b-2 border-blue-600'
              : 'text-gray-500 hover:text-gray-700'
          }`}
        >
          –°—Ç—Ä–∞–Ω–∏—Ü–∞
        </button>
      </div>

      {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–æ–∫ */}
      <div className="flex-1 overflow-y-auto p-4">
        {activeTab === 'content' && renderContentTab()}
        {activeTab === 'style' && renderStyleTab()}
        {activeTab === 'layout' && renderLayoutTab()}
        {activeTab === 'page' && renderPageTab()}
      </div>
    </div>
  );
}