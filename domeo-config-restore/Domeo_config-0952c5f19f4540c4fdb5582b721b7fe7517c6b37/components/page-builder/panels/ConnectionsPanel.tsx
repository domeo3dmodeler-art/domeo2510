'use client';

import React, { useState } from 'react';
import { BlockConnection, ConnectionType, BaseElement } from '../types';

interface ConnectionsPanelProps {
  elements: BaseElement[];
  connections: BlockConnection[];
  onAddConnection: (connection: Omit<BlockConnection, 'id'>) => void;
  onUpdateConnection: (connectionId: string, updates: Partial<BlockConnection>) => void;
  onDeleteConnection: (connectionId: string) => void;
}

const connectionTypes: { value: ConnectionType; label: string; description: string; icon: string }[] = [
  { value: 'data', label: '–ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö', description: '–ü–µ—Ä–µ–¥–∞—á–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ —Å–≤–æ–π—Å—Ç–≤', icon: 'üìä' },
  { value: 'filter', label: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤', description: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏', icon: 'üîç' },
  { value: 'cart', label: '–ö–æ—Ä–∑–∏–Ω–∞', description: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω—É', icon: 'üõí' },
  { value: 'navigate', label: '–ù–∞–≤–∏–≥–∞—Ü–∏—è', description: '–ü–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ –∏–ª–∏ —Å–µ–∫—Ü–∏—è–º–∏', icon: 'üß≠' }
];

export function ConnectionsPanel({ 
  elements, 
  connections, 
  onAddConnection, 
  onUpdateConnection, 
  onDeleteConnection 
}: ConnectionsPanelProps) {
  const [showAddForm, setShowAddForm] = useState(false);
  const [newConnection, setNewConnection] = useState({
    sourceElementId: '',
    targetElementId: '',
    connectionType: 'data' as ConnectionType,
    sourceProperty: '',
    targetProperty: '',
    description: '',
    isActive: true
  });

  const handleAddConnection = () => {
    if (newConnection.sourceElementId && newConnection.targetElementId) {
      onAddConnection(newConnection);
      setNewConnection({
        sourceElementId: '',
        targetElementId: '',
        connectionType: 'data',
        sourceProperty: '',
        targetProperty: '',
        description: '',
        isActive: true
      });
      setShowAddForm(false);
    }
  };

  const getElementName = (elementId: string) => {
    const element = elements.find(el => el.id === elementId);
    return element ? `${element.type} (${element.id.slice(0, 8)})` : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç';
  };

  const getConnectionIcon = (type: ConnectionType) => {
    return connectionTypes.find(ct => ct.value === type)?.icon || 'üîó';
  };

  return (
    <div className="w-80 bg-white border-r border-gray-200 flex flex-col">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="p-4 border-b border-gray-200">
        <h2 className="text-lg font-semibold text-gray-900 flex items-center">
          <span className="mr-2">üîó</span>
          –°–≤—è–∑–∏ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏
        </h2>
        <p className="text-sm text-gray-600 mt-1">
          –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
        </p>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–∏ */}
      <div className="p-4 border-b border-gray-200">
        <button
          onClick={() => setShowAddForm(!showAddForm)}
          className="w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center"
        >
          <span className="mr-2">‚ûï</span>
          –î–æ–±–∞–≤–∏—Ç—å —Å–≤—è–∑—å
        </button>
      </div>

      {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–∏ */}
      {showAddForm && (
        <div className="p-4 border-b border-gray-200 bg-gray-50">
          <div className="space-y-3">
            {/* –ò—Å—Ç–æ—á–Ω–∏–∫ */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ò—Å—Ç–æ—á–Ω–∏–∫ (–æ—Ç–∫—É–¥–∞)
              </label>
              <select
                value={newConnection.sourceElementId}
                onChange={(e) => setNewConnection(prev => ({ ...prev, sourceElementId: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫</option>
                {elements.map(element => (
                  <option key={element.id} value={element.id}>
                    {element.type} ({element.id.slice(0, 8)})
                  </option>
                ))}
              </select>
            </div>

            {/* –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ (–∫—É–¥–∞)
              </label>
              <select
                value={newConnection.targetElementId}
                onChange={(e) => setNewConnection(prev => ({ ...prev, targetElementId: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ</option>
                {elements.filter(el => el.id !== newConnection.sourceElementId).map(element => (
                  <option key={element.id} value={element.id}>
                    {element.type} ({element.id.slice(0, 8)})
                  </option>
                ))}
              </select>
            </div>

            {/* –¢–∏–ø —Å–≤—è–∑–∏ */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –¢–∏–ø —Å–≤—è–∑–∏
              </label>
              <select
                value={newConnection.connectionType}
                onChange={(e) => setNewConnection(prev => ({ ...prev, connectionType: e.target.value as ConnectionType }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                {connectionTypes.map(type => (
                  <option key={type.value} value={type.value}>
                    {type.icon} {type.label}
                  </option>
                ))}
              </select>
              <p className="text-xs text-gray-500 mt-1">
                {connectionTypes.find(t => t.value === newConnection.connectionType)?.description}
              </p>
            </div>

            {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –û–ø–∏—Å–∞–Ω–∏–µ —Å–≤—è–∑–∏
              </label>
              <input
                type="text"
                value={newConnection.description}
                onChange={(e) => setNewConnection(prev => ({ ...prev, description: e.target.value }))}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–µ—Ä–µ–¥–∞—á–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω—É"
                className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ */}
            <div className="flex space-x-2">
              <button
                onClick={handleAddConnection}
                className="flex-1 px-3 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 text-sm"
              >
                –°–æ–∑–¥–∞—Ç—å
              </button>
              <button
                onClick={() => setShowAddForm(false)}
                className="flex-1 px-3 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400 text-sm"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –°–ø–∏—Å–æ–∫ —Å–≤—è–∑–µ–π */}
      <div className="flex-1 overflow-y-auto">
        {connections.length === 0 ? (
          <div className="p-4 text-center text-gray-500">
            <div className="text-4xl mb-2">üîó</div>
            <p className="text-sm">–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π</p>
            <p className="text-xs text-gray-400 mt-1">
              –î–æ–±–∞–≤—å—Ç–µ —Å–≤—è–∑–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –±–ª–æ–∫–æ–≤
            </p>
          </div>
        ) : (
          <div className="space-y-2 p-2">
            {connections.map(connection => (
              <div
                key={connection.id}
                className={`p-3 border rounded-lg ${
                  connection.isActive 
                    ? 'border-green-200 bg-green-50' 
                    : 'border-gray-200 bg-gray-50'
                }`}
              >
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center mb-1">
                      <span className="text-lg mr-2">
                        {getConnectionIcon(connection.connectionType)}
                      </span>
                      <span className="text-sm font-medium text-gray-900">
                        {connectionTypes.find(t => t.value === connection.connectionType)?.label}
                      </span>
                      <span className={`ml-2 px-2 py-0.5 rounded-full text-xs ${
                        connection.isActive 
                          ? 'bg-green-100 text-green-800' 
                          : 'bg-gray-100 text-gray-600'
                      }`}>
                        {connection.isActive ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–û—Ç–∫–ª—é—á–µ–Ω–∞'}
                      </span>
                    </div>
                    
                    <div className="text-xs text-gray-600 space-y-1">
                      <div>
                        <span className="font-medium">–û—Ç:</span> {getElementName(connection.sourceElementId)}
                      </div>
                      <div>
                        <span className="font-medium">–ö:</span> {getElementName(connection.targetElementId)}
                      </div>
                      {connection.description && (
                        <div className="italic text-gray-500">
                          {connection.description}
                        </div>
                      )}
                    </div>
                  </div>
                  
                  <div className="flex flex-col space-y-1 ml-2">
                    <button
                      onClick={() => onUpdateConnection(connection.id, { isActive: !connection.isActive })}
                      className={`px-2 py-1 rounded text-xs ${
                        connection.isActive
                          ? 'bg-yellow-100 text-yellow-800 hover:bg-yellow-200'
                          : 'bg-green-100 text-green-800 hover:bg-green-200'
                      }`}
                    >
                      {connection.isActive ? '–û—Ç–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å'}
                    </button>
                    <button
                      onClick={() => onDeleteConnection(connection.id)}
                      className="px-2 py-1 bg-red-100 text-red-800 rounded text-xs hover:bg-red-200"
                    >
                      –£–¥–∞–ª–∏—Ç—å
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="p-4 border-t border-gray-200 bg-gray-50">
        <div className="flex justify-between text-sm text-gray-600">
          <span>–í—Å–µ–≥–æ —Å–≤—è–∑–µ–π:</span>
          <span className="font-medium">{connections.length}</span>
        </div>
        <div className="flex justify-between text-sm text-gray-600">
          <span>–ê–∫—Ç–∏–≤–Ω—ã—Ö:</span>
          <span className="font-medium text-green-600">
            {connections.filter(c => c.isActive).length}
          </span>
        </div>
      </div>
    </div>
  );
}
