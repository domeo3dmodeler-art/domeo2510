'use client';

import React, { useState, useEffect } from 'react';

interface Category {
  id: string;
  name: string;
  products_count: number;
  children?: Category[];
  subcategories?: Category[];
  parent_id?: string;
}

interface Property {
  id: string;
  name: string;
  type: string;
}

interface SimplifiedPropertyFilterPanelProps {
  element: any;
  onUpdateElement: (elementId: string, updates: any) => void;
}

interface DisplaySettings {
  showImages: boolean;
  showCounts: boolean;
  cardLayout: 'horizontal' | 'vertical';
  columns: number;
  showProductCards: boolean;
  maxProducts: number;
  customColumns: boolean;
  customProducts: boolean;
  customColumnsValue: number;
  customProductsValue: number;
  propertyCardImage: string;
  maxElements: number; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  showAllElements: boolean; // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  individualImages: { [key: string]: string }; // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –æ–ø—Ü–∏–∏
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
  autoSize: boolean; // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤
  cardHeight: number; // –í—ã—Å–æ—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
  customCardHeight: boolean; // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É
  individualCardHeights: { [key: string]: number }; // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
  cardWidth: number; // –®–∏—Ä–∏–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
  customCardWidth: boolean; // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É
  individualCardWidths: { [key: string]: number }; // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –ø–æ–¥–ø–∏—Å–µ–π
  componentTitle: string; // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  labelPosition: 'inside' | 'outside'; // –ü–æ–∑–∏—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏: –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–ª–∏ –ø–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–æ–π
}

export function SimplifiedPropertyFilterPanel({ element, onUpdateElement }: SimplifiedPropertyFilterPanelProps) {
  const [categories, setCategories] = useState<Category[]>([]);
  const [properties, setProperties] = useState<Property[]>([]);
  const [propertyOptions, setPropertyOptions] = useState<any[]>([]); // –û–ø—Ü–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞
  const [loading, setLoading] = useState(false);
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –≤–∫–ª–∞–¥–∫—É: –Ω–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç - –ø–µ—Ä–≤–∞—è –≤–∫–ª–∞–¥–∫–∞, —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  const getInitialStep = () => {
    // –ï—Å–ª–∏ —É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —É–∂–µ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∑–Ω–∞—á–∏—Ç –æ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
    if (element.props.categoryIds && element.props.categoryIds.length > 0) {
      return 'display'; // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç - –Ω–∞—á–∏–Ω–∞–µ–º —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    }
    return 'categories'; // –ù–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç - –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–∏
  };

  const [step, setStep] = useState<'categories' | 'property' | 'display' | 'preview'>(getInitialStep());
  const [expandedNodes, setExpandedNodes] = useState<Set<string>>(new Set());
  const [displaySettings, setDisplaySettings] = useState<DisplaySettings>({
    showImages: true,
    showCounts: true,
    cardLayout: 'vertical',
    columns: 3,
    showProductCards: false, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω–æ
    maxProducts: 12,
    customColumns: true, // –ö–ê–†–î–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ
    customProducts: false,
    customColumnsValue: 3,
    customProductsValue: 12,
    propertyCardImage: '',
    maxElements: 6, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 6 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    showAllElements: false, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    individualImages: {}, // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –æ–ø—Ü–∏–∏
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
    autoSize: true, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    cardHeight: 150, // –í—ã—Å–æ—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    customCardHeight: true, // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    individualCardHeights: {}, // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
    cardWidth: 200, // –®–∏—Ä–∏–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    customCardWidth: true, // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    individualCardWidths: {}, // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –ø–æ–¥–ø–∏—Å–µ–π
    componentTitle: '–§–∏–ª—å—Ç—Ä —Å–≤–æ–π—Å—Ç–≤', // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    labelPosition: 'inside', // –ü–æ–¥–ø–∏—Å—å –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    ...element.props.displaySettings
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø—Ü–∏–π —Å–≤–æ–π—Å—Ç–≤–∞
  useEffect(() => {
    const loadPropertyOptions = async () => {
      console.log('üîß SimplifiedPropertyFilterPanel: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø—Ü–∏–π:', {
        propertyName: element.props.propertyName,
        categoryIds: element.props.categoryIds,
        categoryIdsLength: element.props.categoryIds?.length
      });

      if (!element.props.propertyName || !element.props.categoryIds || element.props.categoryIds.length === 0) {
        console.log('üîß SimplifiedPropertyFilterPanel: –£—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –æ—á–∏—â–∞–µ–º –æ–ø—Ü–∏–∏');
        setPropertyOptions([]);
        return;
      }

      setLoading(true);
      try {
        console.log('üîß SimplifiedPropertyFilterPanel: –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø—Ü–∏–∏ —Å–≤–æ–π—Å—Ç–≤–∞:', {
          propertyName: element.props.propertyName,
          categoryIds: element.props.categoryIds
        });

        const response = await fetch('/api/catalog/properties/values-with-data', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            propertyNames: [element.props.propertyName],
            categoryIds: element.props.categoryIds
          }),
        });

        if (response.ok) {
          const data = await response.json();
          console.log('üîß SimplifiedPropertyFilterPanel: –û–ø—Ü–∏–∏ —Å–≤–æ–π—Å—Ç–≤–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data);
          setPropertyOptions(data.values || []);
        } else {
          console.error('üîß SimplifiedPropertyFilterPanel: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø—Ü–∏–π —Å–≤–æ–π—Å—Ç–≤–∞:', response.status);
          setPropertyOptions([]);
        }
      } catch (error) {
        console.error('üîß SimplifiedPropertyFilterPanel: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø—Ü–∏–π —Å–≤–æ–π—Å—Ç–≤–∞:', error);
        setPropertyOptions([]);
      } finally {
        setLoading(false);
      }
    };

    loadPropertyOptions();
  }, [element.props.propertyName, element.props.categoryIds]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  useEffect(() => {
    const loadCategories = async () => {
      setLoading(true);
      try {
        console.log('üå≥ SimplifiedPropertyFilterPanel: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
        const response = await fetch('/api/catalog/categories');
        console.log('üå≥ SimplifiedPropertyFilterPanel: –û—Ç–≤–µ—Ç API:', response.status, response.ok);
        
        if (response.ok) {
          const data = await response.json();
          console.log('üå≥ SimplifiedPropertyFilterPanel: –î–∞–Ω–Ω—ã–µ API:', data);
          console.log('üå≥ SimplifiedPropertyFilterPanel: –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:', data.categories);
          console.log('üå≥ SimplifiedPropertyFilterPanel: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', data.categories?.length || 0);
          
          setCategories(data.categories || []);
        } else {
          console.error('üå≥ SimplifiedPropertyFilterPanel: –û—à–∏–±–∫–∞ API:', response.status, response.statusText);
        }
      } catch (error) {
        console.error('üå≥ SimplifiedPropertyFilterPanel: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
      } finally {
        setLoading(false);
      }
    };

    loadCategories();
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö ID –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–≤–∫–ª—é—á–∞—è –¥–æ—á–µ—Ä–Ω–∏–µ)
  const getAllCategoryIds = (categories: Category[], selectedIds: string[]): string[] => {
    const allIds = new Set<string>();
    
    const traverse = (cats: Category[]) => {
      cats.forEach(cat => {
        if (selectedIds.includes(cat.id)) {
          allIds.add(cat.id);
          // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å children –∏–ª–∏ subcategories)
          const childCategories = cat.children || cat.subcategories || [];
          childCategories.forEach(child => {
            allIds.add(child.id);
            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            const nestedChildren = child.children || child.subcategories || [];
            if (nestedChildren.length > 0) {
              traverse(nestedChildren);
            }
          });
        }
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const childCategories = cat.children || cat.subcategories || [];
        if (childCategories.length > 0) {
          traverse(childCategories);
        }
      });
    };
    
    traverse(categories);
    return Array.from(allIds);
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–æ–π—Å—Ç–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  useEffect(() => {
    const loadProperties = async () => {
      if (!element.props.categoryIds?.length) return;

      setLoading(true);
      try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤–∫–ª—é—á–∞—è –¥–æ—á–µ—Ä–Ω–∏–µ
        const allCategoryIds = getAllCategoryIds(categories, element.props.categoryIds);
        
        const query = new URLSearchParams();
        allCategoryIds.forEach((id: string) => {
          query.append('categoryIds', id);
        });

        const response = await fetch(`/api/catalog/properties?${query.toString()}`);
        if (response.ok) {
          const data = await response.json();
          setProperties(data.properties || []);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–æ–π—Å—Ç–≤:', error);
      } finally {
        setLoading(false);
      }
    };

    loadProperties();
  }, [element.props.categoryIds, categories]);

  const handleCategorySelect = (categoryId: string) => {
    const currentIds = element.props.categoryIds || [];
    const newIds = currentIds.includes(categoryId)
      ? currentIds.filter((id: string) => id !== categoryId)
      : [...currentIds, categoryId];
    
    onUpdateElement(element.id, {
      props: { ...element.props, categoryIds: newIds }
    });
  };

  const handlePropertySelect = (propertyId: string) => {
    const property = properties.find(p => p.id === propertyId);
    if (property) {
      onUpdateElement(element.id, {
        props: { 
          ...element.props, 
          selectedPropertyIds: [propertyId],
          propertyName: property.name
        }
      });
      setStep('display'); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    }
  };

  const handleTitleChange = (title: string) => {
    onUpdateElement(element.id, {
      props: { ...element.props, title }
    });
  };

  const handleDisplaySettingsChange = (settings: Partial<DisplaySettings>) => {
    const newSettings = { ...displaySettings, ...settings };
    console.log('üîß SimplifiedPropertyFilterPanel: –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:', {
      oldSettings: displaySettings,
      newSettings: newSettings,
      changedSettings: settings
    });
    setDisplaySettings(newSettings);
    onUpdateElement(element.id, {
      props: { 
        ...element.props, 
        displaySettings: newSettings
      }
    });
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö —É–∑–ª–æ–≤
  const toggleNode = (nodeId: string) => {
    setExpandedNodes(prev => {
      const newSet = new Set(prev);
      if (newSet.has(nodeId)) {
        newSet.delete(nodeId);
      } else {
        newSet.add(nodeId);
      }
      return newSet;
    });
  };

  const isNodeExpanded = (nodeId: string) => {
    return expandedNodes.has(nodeId);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const renderCategoryTree = (categories: Category[], level: number = 0) => {
    console.log('üå≥ SimplifiedPropertyFilterPanel: renderCategoryTree –≤—ã–∑–≤–∞–Ω', {
      categoriesCount: categories.length,
      level,
      categories: categories.map(c => ({ 
        id: c.id, 
        name: c.name, 
        childrenCount: c.children?.length || 0,
        subcategoriesCount: c.subcategories?.length || 0
      }))
    });
    
    return categories.map((category) => {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å children –∏–ª–∏ subcategories)
      const childCategories = category.children || category.subcategories || [];
      const hasChildren = childCategories.length > 0;
      const isExpanded = isNodeExpanded(category.id);
      
      return (
        <div key={category.id} className="mb-1">
          <div 
            className={`flex items-center space-x-2 p-2 rounded-lg hover:bg-gray-50 transition-colors ${
              element.props.categoryIds?.includes(category.id) ? 'bg-blue-50' : ''
            }`}
            style={{ paddingLeft: `${level * 20 + 8}px` }}
          >
            {/* –ò–∫–æ–Ω–∫–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è */}
            {hasChildren ? (
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  toggleNode(category.id);
                }}
                className="w-4 h-4 flex items-center justify-center text-gray-400 hover:text-gray-600 flex-shrink-0"
              >
                {isExpanded ? (
                  <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                  </svg>
                ) : (
                  <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                  </svg>
                )}
              </button>
            ) : (
              <div className="w-4 h-4 flex-shrink-0"></div>
            )}
            
            {/* –ß–µ–∫–±–æ–∫—Å */}
            <div 
              className={`w-5 h-5 rounded border-2 flex items-center justify-center flex-shrink-0 cursor-pointer ${
                element.props.categoryIds?.includes(category.id)
                  ? 'border-blue-500 bg-blue-500'
                  : 'border-gray-300 hover:border-gray-400'
              }`}
              onClick={() => handleCategorySelect(category.id)}
            >
              {element.props.categoryIds?.includes(category.id) && (
                <svg className="w-3 h-3 text-white" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                </svg>
              )}
            </div>
            
            {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
            <div 
              className="flex-1 min-w-0 cursor-pointer"
              onClick={() => handleCategorySelect(category.id)}
            >
              <div className="text-sm font-medium text-gray-900 truncate">
                {category.name}
              </div>
              <div className="text-xs text-gray-500">
                {category.products_count} —Ç–æ–≤–∞—Ä–æ–≤
              </div>
            </div>
            
            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–ª–∏—á–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
            {hasChildren && (
              <div className="text-xs text-gray-400 flex-shrink-0">
                {childCategories.length} –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
              </div>
            )}
          </div>
          
          {/* –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Ä–µ–Ω–¥–µ—Ä–∏–º –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∑–µ–ª —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç) */}
          {hasChildren && isExpanded && (
            <div className="ml-4">
              {renderCategoryTree(childCategories, level + 1)}
            </div>
          )}
        </div>
      );
    });
  };

  const resetConfiguration = () => {
    onUpdateElement(element.id, {
      props: {
        ...element.props,
        categoryIds: [],
        selectedPropertyIds: [],
        propertyName: '',
        title: '–§–∏–ª—å—Ç—Ä'
      }
    });
    setStep('categories');
  };

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="border-b border-gray-200 pb-4">
        <h3 className="text-lg font-semibold text-gray-900">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞</h3>
        <p className="text-sm text-gray-600 mt-1">
          –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Å–≤–æ–π—Å—Ç–≤–∞–º
        </p>
      </div>

      {/* –®–∞–≥–∏ */}
      <div className="flex space-x-4">
        <div className={`flex items-center space-x-2 px-3 py-2 rounded-lg ${
          step === 'categories' ? 'bg-blue-100 text-blue-700' : 'bg-gray-100 text-gray-600'
        }`}>
          <div className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-medium ${
            step === 'categories' ? 'bg-blue-600 text-white' : 'bg-gray-400 text-white'
          }`}>
            1
          </div>
          <span className="text-sm font-medium">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</span>
        </div>
        
        <div className={`flex items-center space-x-2 px-3 py-2 rounded-lg ${
          step === 'property' ? 'bg-blue-100 text-blue-700' : 'bg-gray-100 text-gray-600'
        }`}>
          <div className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-medium ${
            step === 'property' ? 'bg-blue-600 text-white' : 'bg-gray-400 text-white'
          }`}>
            2
          </div>
          <span className="text-sm font-medium">–°–≤–æ–π—Å—Ç–≤–æ</span>
        </div>
        
        <div className={`flex items-center space-x-2 px-3 py-2 rounded-lg ${
          step === 'display' ? 'bg-blue-100 text-blue-700' : 'bg-gray-100 text-gray-600'
        }`}>
          <div className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-medium ${
            step === 'display' ? 'bg-blue-600 text-white' : 'bg-gray-400 text-white'
          }`}>
            3
          </div>
          <span className="text-sm font-medium">–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ</span>
        </div>
        
        <div className={`flex items-center space-x-2 px-3 py-2 rounded-lg ${
          step === 'preview' ? 'bg-blue-100 text-blue-700' : 'bg-gray-100 text-gray-600'
        }`}>
          <div className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-medium ${
            step === 'preview' ? 'bg-blue-600 text-white' : 'bg-gray-400 text-white'
          }`}>
            4
          </div>
          <span className="text-sm font-medium">–ì–æ—Ç–æ–≤–æ</span>
        </div>
      </div>

      {/* –®–∞–≥ 1: –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
      {step === 'categories' && (
        <div className="space-y-4">
          <div>
            <div className="flex items-center justify-between mb-3">
              <h4 className="text-md font-medium text-gray-900">
                –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
              </h4>
              <div className="flex space-x-2">
                <button
                  onClick={() => {
                    // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å–µ —É–∑–ª—ã
                    const allNodeIds = new Set<string>();
                    const collectAllIds = (cats: Category[]) => {
                      cats.forEach(cat => {
                        const childCategories = cat.children || cat.subcategories || [];
                        if (childCategories.length > 0) {
                          allNodeIds.add(cat.id);
                          collectAllIds(childCategories);
                        }
                      });
                    };
                    collectAllIds(categories);
                    setExpandedNodes(allNodeIds);
                  }}
                  className="px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded hover:bg-gray-200 transition-colors"
                >
                  –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ
                </button>
                <button
                  onClick={() => setExpandedNodes(new Set())}
                  className="px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded hover:bg-gray-200 transition-colors"
                >
                  –°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ
                </button>
              </div>
            </div>
            <p className="text-sm text-gray-600 mb-4">
              –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            </p>
            
            {loading ? (
              <div className="text-center py-8">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
                <p className="text-sm text-gray-500 mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...</p>
              </div>
            ) : (
              <div className="max-h-80 overflow-y-auto border border-gray-200 rounded-lg p-3 bg-gray-50">
                {categories.length > 0 ? (
                  renderCategoryTree(categories)
                ) : (
                  <div className="text-center py-8">
                    <div className="text-gray-400 text-4xl mb-2">üìÅ</div>
                    <p className="text-sm text-gray-500">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                  </div>
                )}
              </div>
            )}
            
            {element.props.categoryIds?.length > 0 && (
              <div className="mt-4 flex justify-end">
                <button
                  onClick={() => setStep('property')}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ({element.props.categoryIds.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
                </button>
              </div>
            )}
          </div>
        </div>
      )}

      {/* –®–∞–≥ 2: –í—ã–±–æ—Ä —Å–≤–æ–π—Å—Ç–≤–∞ */}
      {step === 'property' && (
        <div className="space-y-4">
          <div>
            <h4 className="text-md font-medium text-gray-900 mb-3">
              –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            </h4>
            <p className="text-sm text-gray-600 mb-4">
              –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π—Å—Ç–≤–æ, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥—É—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å—Å—è —Ç–æ–≤–∞—Ä—ã
            </p>
            
            {loading ? (
              <div className="text-center py-8">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
                <p className="text-sm text-gray-500 mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–æ–π—Å—Ç–≤...</p>
              </div>
            ) : (
              <div className="grid grid-cols-1 gap-3 max-h-64 overflow-y-auto">
                {properties.map((property) => (
                  <div
                    key={property.id}
                    className={`p-4 rounded-lg border cursor-pointer transition-all ${
                      element.props.selectedPropertyIds?.includes(property.id)
                        ? 'border-blue-500 bg-blue-50'
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                    onClick={() => handlePropertySelect(property.id)}
                  >
                    <div className="flex items-center justify-between">
                      <div>
                        <h5 className="font-medium text-gray-900">{property.name}</h5>
                        <p className="text-sm text-gray-500 capitalize">
                          {property.type}
                        </p>
                      </div>
                      <div className={`w-5 h-5 rounded border-2 flex items-center justify-center ${
                        element.props.selectedPropertyIds?.includes(property.id)
                          ? 'border-blue-500 bg-blue-500'
                          : 'border-gray-300'
                      }`}>
                        {element.props.selectedPropertyIds?.includes(property.id) && (
                          <svg className="w-3 h-3 text-white" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                          </svg>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
            
            <div className="mt-4 flex justify-between">
              <button
                onClick={() => setStep('categories')}
                className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
              >
                –ù–∞–∑–∞–¥
              </button>
              {element.props.selectedPropertyIds?.length > 0 && (
                <button
                  onClick={() => setStep('display')}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  –î–∞–ª–µ–µ
                </button>
              )}
            </div>
          </div>
        </div>
      )}

      {/* –®–∞–≥ 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
      {step === 'display' && (
        <div className="space-y-4">
          <div>
            <h4 className="text-md font-medium text-gray-900 mb-3">
              –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            </h4>
            <p className="text-sm text-gray-600 mb-4">
              –ù–∞—Å—Ç—Ä–æ–π—Ç–µ, –∫–∞–∫ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ñ–∏–ª—å—Ç—Ä—ã
            </p>

            {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
            <div className="space-y-4">
              {/* –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
              <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                <div>
                  <h5 className="text-sm font-medium text-gray-900">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</h5>
                  <p className="text-xs text-gray-500">–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö</p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input
                    type="checkbox"
                    checked={displaySettings.showImages}
                    onChange={(e) => handleDisplaySettingsChange({ showImages: e.target.checked })}
                    className="sr-only peer"
                  />
                  <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                </label>
              </div>

              {/* –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É —Å–≤–æ–π—Å—Ç–≤–∞ */}
              <div className="p-3 bg-gray-50 rounded-lg">
                <h5 className="text-sm font-medium text-gray-900 mb-3">–§–æ—Ç–æ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–≤–æ–π—Å—Ç–≤–∞</h5>
                <p className="text-xs text-gray-500 mb-3">
                  –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞
                </p>
                
                <div className="space-y-3">
                  {/* –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
                  <div className="flex items-center space-x-3">
                    <input
                      type="file"
                      accept="image/*"
                      onChange={(e) => {
                        const file = e.target.files?.[0];
                        if (file) {
                          const reader = new FileReader();
                          reader.onload = (event) => {
                            handleDisplaySettingsChange({ 
                              propertyCardImage: event.target?.result as string 
                            });
                          };
                          reader.readAsDataURL(file);
                        }
                      }}
                      className="hidden"
                      id="property-image-upload"
                    />
                    <label
                      htmlFor="property-image-upload"
                      className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 cursor-pointer transition-colors text-sm"
                    >
                      –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ
                    </label>
                    <span className="text-sm text-gray-600">–∏–ª–∏</span>
                    <input
                      type="url"
                      placeholder="URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                      onChange={(e) => handleDisplaySettingsChange({ 
                        propertyCardImage: e.target.value 
                      })}
                      className="flex-1 px-3 py-2 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  
                  {/* –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä */}
                  {displaySettings.propertyCardImage && (
                    <div className="mt-3">
                      <p className="text-xs text-gray-600 mb-2">–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:</p>
                      <div className="w-24 h-24 border border-gray-200 rounded-lg overflow-hidden">
                        <img
                          src={displaySettings.propertyCardImage}
                          alt="–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä"
                          className="w-full h-full object-cover"
                        />
                      </div>
                      <button
                        onClick={() => handleDisplaySettingsChange({ propertyCardImage: '' })}
                        className="mt-2 text-xs text-red-600 hover:text-red-700 underline"
                      >
                        –£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                      </button>
                    </div>
                  )}
                </div>
              </div>

              {/* –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –æ–ø—Ü–∏–∏ */}
              {element.props.propertyName && (
                <div className="p-3 bg-gray-50 rounded-lg">
                  <h5 className="text-sm font-medium text-gray-900 mb-3">–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</h5>
                  <p className="text-xs text-gray-500 mb-3">
                    –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –æ–ø—Ü–∏–∏ —Å–≤–æ–π—Å—Ç–≤–∞ "{element.props.propertyName}"
                  </p>
                  
                  <div className="space-y-3">
                    {/* –ó–¥–µ—Å—å –±—É–¥—É—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –æ–ø—Ü–∏–∏ —Å–≤–æ–π—Å—Ç–≤–∞ */}
                    {loading ? (
                      <div className="text-center text-gray-500 py-4">
                        <div className="text-sm">–ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø—Ü–∏–π —Å–≤–æ–π—Å—Ç–≤–∞...</div>
                      </div>
                    ) : propertyOptions.length > 0 ? (
                      <div className="space-y-3">
                        {propertyOptions.map((option) => (
                          <div key={option.value} className="flex items-center space-x-3 p-2 border border-gray-200 rounded-lg">
                            <div className="flex-1">
                              <div className="text-sm font-medium text-gray-900">{option.label}</div>
                              {option.count !== undefined && (
                                <div className="text-xs text-gray-500">{option.count} —Ç–æ–≤–∞—Ä–æ–≤</div>
                              )}
                            </div>
                            
                            {/* –ü–æ–ª–µ –¥–ª—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
                            <div className="flex-1">
                              <input
                                type="text"
                                placeholder="URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                                value={displaySettings.individualImages[option.value] || ''}
                                onChange={(e) => {
                                  const newIndividualImages = { ...displaySettings.individualImages };
                                  if (e.target.value) {
                                    newIndividualImages[option.value] = e.target.value;
                                  } else {
                                    delete newIndividualImages[option.value];
                                  }
                                  handleDisplaySettingsChange({ individualImages: newIndividualImages });
                                }}
                                className="w-full px-2 py-1 text-xs border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                              />
                            </div>
                            
                            {/* –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä */}
                            <div className="w-12 h-12 border border-gray-200 rounded overflow-hidden flex-shrink-0">
                              {displaySettings.individualImages[option.value] ? (
                                <img
                                  src={displaySettings.individualImages[option.value]}
                                  alt={option.label}
                                  className="w-full h-full object-cover"
                                />
                              ) : (
                                <div className="w-full h-full bg-gray-100 flex items-center justify-center">
                                  <svg className="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                  </svg>
                                </div>
                              )}
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div className="space-y-2">
                        <p className="text-xs text-gray-600">
                          –û–ø—Ü–∏–∏ —Å–≤–æ–π—Å—Ç–≤–∞ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å–≤–æ–π—Å—Ç–≤–∞ –Ω–∞ —à–∞–≥–µ 2
                        </p>
                      </div>
                    )}
                  </div>
                </div>
              )}

              {/* –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫–∞—Ä—Ç–æ—á–µ–∫ */}
              {element.props.propertyName && (
                <div className="p-3 bg-gray-50 rounded-lg">
                  <h5 className="text-sm font-medium text-gray-900 mb-3">–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫–∞—Ä—Ç–æ—á–µ–∫</h5>
                  <p className="text-xs text-gray-500 mb-3">
                    –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—ã—Å–æ—Ç—É –∏ —à–∏—Ä–∏–Ω—É –¥–ª—è –∫–∞–∂–¥–æ–π –æ–ø—Ü–∏–∏ —Å–≤–æ–π—Å—Ç–≤–∞ "{element.props.propertyName}"
                  </p>
                  
                  <div className="space-y-3">
                    {loading ? (
                      <div className="text-center text-gray-500 py-4">
                        <div className="text-sm">–ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø—Ü–∏–π —Å–≤–æ–π—Å—Ç–≤–∞...</div>
                      </div>
                    ) : propertyOptions.length > 0 ? (
                      <div className="space-y-3">
                        {propertyOptions.map((option) => (
                          <div key={option.value} className="flex items-center space-x-3 p-2 border border-gray-200 rounded-lg">
                            <div className="flex-1">
                              <div className="text-sm font-medium text-gray-900">{option.label}</div>
                              {option.count !== undefined && (
                                <div className="text-xs text-gray-500">{option.count} —Ç–æ–≤–∞—Ä–æ–≤</div>
                              )}
                            </div>
                            
                            {/* –ü–æ–ª—è –¥–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
                            <div className="flex items-center space-x-2">
                              {/* –í—ã—Å–æ—Ç–∞ */}
                              <div className="flex items-center space-x-1">
                                <span className="text-xs text-gray-500">–í:</span>
                                <input
                                  type="number"
                                  min="80"
                                  max="300"
                                  placeholder="–í—ã—Å–æ—Ç–∞"
                                  value={displaySettings.individualCardHeights[option.value] || ''}
                                  onChange={(e) => {
                                    const newIndividualHeights = { ...displaySettings.individualCardHeights };
                                    if (e.target.value) {
                                      newIndividualHeights[option.value] = parseInt(e.target.value) || 150;
                                    } else {
                                      delete newIndividualHeights[option.value];
                                    }
                                    handleDisplaySettingsChange({ individualCardHeights: newIndividualHeights });
                                  }}
                                  className="w-16 px-1 py-1 text-xs border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                />
                              </div>
                              
                              {/* –®–∏—Ä–∏–Ω–∞ */}
                              <div className="flex items-center space-x-1">
                                <span className="text-xs text-gray-500">–®:</span>
                                <input
                                  type="number"
                                  min="100"
                                  max="400"
                                  placeholder="–®–∏—Ä–∏–Ω–∞"
                                  value={displaySettings.individualCardWidths[option.value] || ''}
                                  onChange={(e) => {
                                    const newIndividualWidths = { ...displaySettings.individualCardWidths };
                                    if (e.target.value) {
                                      newIndividualWidths[option.value] = parseInt(e.target.value) || 200;
                                    } else {
                                      delete newIndividualWidths[option.value];
                                    }
                                    handleDisplaySettingsChange({ individualCardWidths: newIndividualWidths });
                                  }}
                                  className="w-16 px-1 py-1 text-xs border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                />
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div className="space-y-2">
                        <p className="text-xs text-gray-600">
                          –û–ø—Ü–∏–∏ —Å–≤–æ–π—Å—Ç–≤–∞ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å–≤–æ–π—Å—Ç–≤–∞ –Ω–∞ —à–∞–≥–µ 2
                        </p>
                      </div>
                    )}
                  </div>
                </div>
              )}

              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–¥–ø–∏—Å–∏ */}
              <div className="p-3 bg-gray-50 rounded-lg">
                <h5 className="text-sm font-medium text-gray-900 mb-3">–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–¥–ø–∏—Å–∏</h5>
                
                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ */}
                <div className="mb-4">
                  <label className="text-xs text-gray-600 mb-1 block">–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞</label>
                  <input
                    type="text"
                    value={displaySettings.componentTitle}
                    onChange={(e) => handleDisplaySettingsChange({ componentTitle: e.target.value })}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫"
                    className="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                  />
                </div>
                
                {/* –ü–æ–∑–∏—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ */}
                <div>
                  <label className="text-xs text-gray-600 mb-2 block">–ü–æ–∑–∏—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏</label>
                  <div className="flex space-x-2">
                    <button
                      onClick={() => handleDisplaySettingsChange({ labelPosition: 'inside' })}
                      className={`flex-1 p-2 rounded-lg border-2 transition-colors ${
                        displaySettings.labelPosition === 'inside'
                          ? 'border-blue-500 bg-blue-50 text-blue-700'
                          : 'border-gray-200 bg-white text-gray-600 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-center">
                        <div className="text-lg mb-1">üìã</div>
                        <div className="text-xs font-medium">–í–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏</div>
                      </div>
                    </button>
                    <button
                      onClick={() => handleDisplaySettingsChange({ labelPosition: 'outside' })}
                      className={`flex-1 p-2 rounded-lg border-2 transition-colors ${
                        displaySettings.labelPosition === 'outside'
                          ? 'border-blue-500 bg-blue-50 text-blue-700'
                          : 'border-gray-200 bg-white text-gray-600 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-center">
                        <div className="text-lg mb-1">üìÑ</div>
                        <div className="text-xs font-medium">–ü–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–æ–π</div>
                      </div>
                    </button>
                  </div>
                </div>
              </div>

              {/* –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ */}
              <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                <div>
                  <h5 className="text-sm font-medium text-gray-900">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</h5>
                  <p className="text-xs text-gray-500">–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input
                    type="checkbox"
                    checked={displaySettings.showCounts}
                    onChange={(e) => handleDisplaySettingsChange({ showCounts: e.target.checked })}
                    className="sr-only peer"
                  />
                  <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                </label>
              </div>

              {/* –ú–∞–∫–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ */}
              <div className="p-3 bg-gray-50 rounded-lg">
                <h5 className="text-sm font-medium text-gray-900 mb-3">–ú–∞–∫–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫</h5>
                <div className="flex space-x-3">
                  <button
                    onClick={() => handleDisplaySettingsChange({ cardLayout: 'vertical' })}
                    className={`flex-1 p-3 rounded-lg border-2 transition-colors ${
                      displaySettings.cardLayout === 'vertical'
                        ? 'border-blue-500 bg-blue-50 text-blue-700'
                        : 'border-gray-200 bg-white text-gray-600 hover:border-gray-300'
                    }`}
                  >
                    <div className="text-center">
                      <div className="text-2xl mb-1">üì±</div>
                      <div className="text-xs font-medium">–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ</div>
                    </div>
                  </button>
                  <button
                    onClick={() => handleDisplaySettingsChange({ cardLayout: 'horizontal' })}
                    className={`flex-1 p-3 rounded-lg border-2 transition-colors ${
                      displaySettings.cardLayout === 'horizontal'
                        ? 'border-blue-500 bg-blue-50 text-blue-700'
                        : 'border-gray-200 bg-white text-gray-600 hover:border-gray-300'
                    }`}
                  >
                    <div className="text-center">
                      <div className="text-2xl mb-1">üìÑ</div>
                      <div className="text-xs font-medium">–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ</div>
                    </div>
                  </button>
                </div>
              </div>

              {/* –†–∞–∑–º–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ */}
              <div className="p-3 bg-gray-50 rounded-lg">
                <div className="flex items-center justify-between mb-3">
                  <h5 className="text-sm font-medium text-gray-900">–†–∞–∑–º–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫</h5>
                  
                  {/* –ö–Ω–æ–ø–∫–∞ –ê–≤—Ç–æ */}
                  <button
                    onClick={() => handleDisplaySettingsChange({ autoSize: !displaySettings.autoSize })}
                    className={`px-3 py-1 text-xs rounded-lg border transition-colors ${
                      displaySettings.autoSize
                        ? 'border-blue-500 bg-blue-50 text-blue-700'
                        : 'border-gray-200 bg-white text-gray-600 hover:border-gray-300'
                    }`}
                  >
                    {displaySettings.autoSize ? '–ê–≤—Ç–æ' : '–†—É—á–Ω–æ–π'}
                  </button>
                </div>
                
                {!displaySettings.autoSize && (
                  <div className="space-y-3">
                    {/* –í—ã—Å–æ—Ç–∞ –∏ —à–∏—Ä–∏–Ω–∞ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ */}
                    <div className="flex items-center space-x-3">
                      {/* –í—ã—Å–æ—Ç–∞ */}
                      <div className="flex-1">
                        <label className="text-xs text-gray-600 mb-1 block">–í—ã—Å–æ—Ç–∞</label>
                        {displaySettings.customCardHeight ? (
                          <div className="flex items-center space-x-1">
                            <input
                              type="number"
                              min="80"
                              max="300"
                              value={displaySettings.cardHeight}
                              onChange={(e) => handleDisplaySettingsChange({ 
                                cardHeight: parseInt(e.target.value) || 150
                              })}
                              className="w-16 px-2 py-1 text-xs border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                            />
                            <span className="text-xs text-gray-500">px</span>
                          </div>
                        ) : (
                          <div className="flex space-x-1">
                            {[100, 120, 150, 180, 200].map((height) => (
                              <button
                                key={height}
                                onClick={() => handleDisplaySettingsChange({ cardHeight: height })}
                                className={`px-2 py-1 text-xs rounded border transition-colors ${
                                  displaySettings.cardHeight === height
                                    ? 'border-blue-500 bg-blue-50 text-blue-700'
                                    : 'border-gray-200 bg-white text-gray-600 hover:border-gray-300'
                                }`}
                              >
                                {height}
                              </button>
                            ))}
                          </div>
                        )}
                      </div>
                      
                      {/* –®–∏—Ä–∏–Ω–∞ */}
                      <div className="flex-1">
                        <label className="text-xs text-gray-600 mb-1 block">–®–∏—Ä–∏–Ω–∞</label>
                        {displaySettings.customCardWidth ? (
                          <div className="flex items-center space-x-1">
                            <input
                              type="number"
                              min="100"
                              max="400"
                              value={displaySettings.cardWidth}
                              onChange={(e) => handleDisplaySettingsChange({ 
                                cardWidth: parseInt(e.target.value) || 200
                              })}
                              className="w-16 px-2 py-1 text-xs border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                            />
                            <span className="text-xs text-gray-500">px</span>
                          </div>
                        ) : (
                          <div className="flex space-x-1">
                            {[150, 180, 200, 250, 300].map((width) => (
                              <button
                                key={width}
                                onClick={() => handleDisplaySettingsChange({ cardWidth: width })}
                                className={`px-2 py-1 text-xs rounded border transition-colors ${
                                  displaySettings.cardWidth === width
                                    ? 'border-blue-500 bg-blue-50 text-blue-700'
                                    : 'border-gray-200 bg-white text-gray-600 hover:border-gray-300'
                                }`}
                              >
                                {width}
                              </button>
                            ))}
                          </div>
                        )}
                      </div>
                    </div>
                    
                    {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ */}
                    <div className="flex items-center justify-between text-xs">
                      <label className="flex items-center space-x-2">
                        <input
                          type="checkbox"
                          checked={displaySettings.customCardHeight}
                          onChange={(e) => handleDisplaySettingsChange({ customCardHeight: e.target.checked })}
                          className="rounded border-gray-300"
                        />
                        <span className="text-gray-600">–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞</span>
                      </label>
                      
                      <label className="flex items-center space-x-2">
                        <input
                          type="checkbox"
                          checked={displaySettings.customCardWidth}
                          onChange={(e) => handleDisplaySettingsChange({ customCardWidth: e.target.checked })}
                          className="rounded border-gray-300"
                        />
                        <span className="text-gray-600">–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞</span>
                      </label>
                    </div>
                  </div>
                )}
                
                {displaySettings.autoSize && (
                  <div className="text-xs text-gray-500 text-center py-2">
                    –†–∞–∑–º–µ—Ä—ã –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                  </div>
                )}
              </div>

              {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ */}
              <div className="p-3 bg-gray-50 rounded-lg">
                <h5 className="text-sm font-medium text-gray-900 mb-3">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫</h5>
                
                {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ */}
                <div className="flex items-center justify-between mb-3">
                  <span className="text-sm text-gray-600">–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</span>
                  <label className="relative inline-flex items-center cursor-pointer">
                    <input
                      type="checkbox"
                      checked={displaySettings.customColumns}
                      onChange={(e) => handleDisplaySettingsChange({ customColumns: e.target.checked })}
                      className="sr-only peer"
                    />
                    <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                  </label>
                </div>

                {displaySettings.customColumns ? (
                  <div className="flex items-center space-x-2">
                    <input
                      type="number"
                      min="1"
                      max="12"
                      value={displaySettings.customColumnsValue}
                      onChange={(e) => handleDisplaySettingsChange({ 
                        customColumnsValue: parseInt(e.target.value) || 1,
                        columns: parseInt(e.target.value) || 1
                      })}
                      className="w-20 px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                    <span className="text-sm text-gray-600">–∫–æ–ª–æ–Ω–æ–∫</span>
                  </div>
                ) : (
                  <div className="flex space-x-2">
                    {[1, 2, 3, 4, 6].map((cols) => (
                      <button
                        key={cols}
                        onClick={() => handleDisplaySettingsChange({ columns: cols })}
                        className={`w-12 h-8 rounded border-2 transition-colors ${
                          displaySettings.columns === cols
                            ? 'border-blue-500 bg-blue-500 text-white'
                            : 'border-gray-200 bg-white text-gray-600 hover:border-gray-300'
                        }`}
                      >
                        {cols}
                      </button>
                    ))}
                  </div>
                )}
              </div>

              {/* –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ */}
              <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                <div>
                  <h5 className="text-sm font-medium text-gray-900">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤</h5>
                  <p className="text-xs text-gray-500">–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–¥ —Ñ–∏–ª—å—Ç—Ä–æ–º</p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input
                    type="checkbox"
                    checked={displaySettings.showProductCards}
                    onChange={(e) => handleDisplaySettingsChange({ showProductCards: e.target.checked })}
                    className="sr-only peer"
                  />
                  <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                </label>
              </div>

              {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */}
              <div className="p-3 bg-gray-50 rounded-lg">
                <h5 className="text-sm font-medium text-gray-900 mb-3">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤</h5>
                <p className="text-xs text-gray-500 mb-3">–°–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ</p>
                
                {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –í—Å–µ/–û–≥—Ä–∞–Ω–∏—á–µ–Ω–æ */}
                <div className="flex items-center justify-between mb-3">
                  <span className="text-sm text-gray-600">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã</span>
                  <label className="relative inline-flex items-center cursor-pointer">
                    <input
                      type="checkbox"
                      checked={displaySettings.showAllElements}
                      onChange={(e) => handleDisplaySettingsChange({ showAllElements: e.target.checked })}
                      className="sr-only peer"
                    />
                    <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                  </label>
                </div>

                {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */}
                {!displaySettings.showAllElements && (
                  <div className="flex items-center space-x-2">
                    <input
                      type="number"
                      min="1"
                      max="50"
                      value={displaySettings.maxElements}
                      onChange={(e) => handleDisplaySettingsChange({ 
                        maxElements: parseInt(e.target.value) || 1
                      })}
                      className="w-20 px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                    <span className="text-sm text-gray-600">—ç–ª–µ–º–µ–Ω—Ç–æ–≤</span>
                  </div>
                )}
              </div>

              {/* –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ */}
              {displaySettings.showProductCards && (
                <div className="p-3 bg-gray-50 rounded-lg">
                  <h5 className="text-sm font-medium text-gray-900 mb-3">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤</h5>
                  
                  {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ */}
                  <div className="flex items-center justify-between mb-3">
                    <span className="text-sm text-gray-600">–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</span>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={displaySettings.customProducts}
                        onChange={(e) => handleDisplaySettingsChange({ customProducts: e.target.checked })}
                        className="sr-only peer"
                      />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                    </label>
                  </div>

                  {displaySettings.customProducts ? (
                    <div className="flex items-center space-x-2">
                      <input
                        type="number"
                        min="1"
                        max="200"
                        value={displaySettings.customProductsValue}
                        onChange={(e) => handleDisplaySettingsChange({ 
                          customProductsValue: parseInt(e.target.value) || 1,
                          maxProducts: parseInt(e.target.value) || 1
                        })}
                        className="w-24 px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                      />
                      <span className="text-sm text-gray-600">—Ç–æ–≤–∞—Ä–æ–≤</span>
                    </div>
                  ) : (
                    <div className="flex space-x-2">
                      {[6, 12, 24, 48, 96].map((count) => (
                        <button
                          key={count}
                          onClick={() => handleDisplaySettingsChange({ maxProducts: count })}
                          className={`px-3 py-1 rounded border-2 transition-colors ${
                            displaySettings.maxProducts === count
                              ? 'border-blue-500 bg-blue-500 text-white'
                              : 'border-gray-200 bg-white text-gray-600 hover:border-gray-300'
                          }`}
                        >
                          {count}
                        </button>
                      ))}
                    </div>
                  )}
                </div>
              )}
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
            <div className="flex justify-between pt-4">
              <button
                onClick={() => setStep('property')}
                className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
              >
                –ù–∞–∑–∞–¥
              </button>
              <button
                onClick={() => setStep('preview')}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                –î–∞–ª–µ–µ
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –®–∞–≥ 4: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä */}
      {step === 'preview' && (
        <div className="space-y-4">
          <div>
            <h4 className="text-md font-medium text-gray-900 mb-3">
              –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            </h4>
            
            {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ */}
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∏–ª—å—Ç—Ä–∞
              </label>
              <input
                type="text"
                value={element.props.title || '–§–∏–ª—å—Ç—Ä'}
                onChange={(e) => handleTitleChange(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–§–∏–ª—å—Ç—Ä"
              />
            </div>
            
            {/* –°–≤–æ–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
            <div className="bg-gray-50 rounded-lg p-4 space-y-3">
              <h5 className="font-medium text-gray-900">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞:</h5>
              
              <div>
                <span className="text-sm text-gray-600">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</span>
                <div className="mt-1">
                  {element.props.categoryIds?.map((id: string) => {
                    const category = categories.find(c => c.id === id);
                    return (
                      <span key={id} className="inline-block bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded mr-2 mb-1">
                        {category?.name || id}
                      </span>
                    );
                  })}
                </div>
              </div>
              
              <div>
                <span className="text-sm text-gray-600">–°–≤–æ–π—Å—Ç–≤–æ:</span>
                <span className="ml-2 text-sm font-medium text-gray-900">
                  {element.props.propertyName || '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'}
                </span>
              </div>
            </div>
            
            <div className="mt-4 flex justify-between">
              <button
                onClick={resetConfiguration}
                className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
              >
                –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–Ω–æ–≤–æ
              </button>
              <button
                onClick={() => setStep('categories')}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
