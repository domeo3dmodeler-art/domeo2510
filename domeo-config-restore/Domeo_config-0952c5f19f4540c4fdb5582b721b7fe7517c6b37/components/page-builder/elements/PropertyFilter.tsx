'use client';

import React, { useState, useEffect } from 'react';
import { BaseElement } from '../types';
import { useFilterConnection } from '../context/ConnectionsContext';

interface PropertyFilterProps {
  element: BaseElement;
  onUpdate: (updates: Partial<BaseElement>) => void;
  onFilterChange?: (propertyName: string, value: any) => void;
  onConnectionData?: (sourceElementId: string, data: any) => void;
}

interface PropertyOption {
  value: string;
  label: string;
  count?: number;
  image?: string | null;
  productImage?: string; // –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
}

interface DisplaySettings {
  showImages: boolean;
  showCounts: boolean;
  cardLayout: 'horizontal' | 'vertical';
  columns: number;
  showProductCards: boolean;
  maxProducts: number;
  customColumns: boolean;
  customProducts: boolean;
  customColumnsValue: number;
  customProductsValue: number;
  propertyCardImage: string;
  maxElements: number; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  showAllElements: boolean; // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  individualImages: { [key: string]: string }; // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –æ–ø—Ü–∏–∏
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
  autoSize: boolean; // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤
  cardHeight: number; // –í—ã—Å–æ—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
  customCardHeight: boolean; // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É
  individualCardHeights: { [key: string]: number }; // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
  cardWidth: number; // –®–∏—Ä–∏–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
  customCardWidth: boolean; // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É
  individualCardWidths: { [key: string]: number }; // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –ø–æ–¥–ø–∏—Å–µ–π
  componentTitle: string; // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  labelPosition: 'inside' | 'outside'; // –ü–æ–∑–∏—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏: –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–ª–∏ –ø–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–æ–π
}

export function PropertyFilter({ element, onUpdate, onFilterChange, onConnectionData }: PropertyFilterProps) {
  const [options, setOptions] = useState<PropertyOption[]>([]);
  const [products, setProducts] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É —Å–≤—è–∑–µ–π
  const { currentValue, globalValue, updateFilter, clearCurrentFilter, isConnected } = useFilterConnection(
    element.id, 
    element.props.propertyName || ''
  );
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ª–æ–∫–∞–ª—å–Ω–æ–µ > –≥–ª–æ–±–∞–ª—å–Ω–æ–µ)
  const selectedValue = currentValue || globalValue || '';
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const displaySettings: DisplaySettings = {
    showImages: true,
    showCounts: true,
    cardLayout: 'vertical',
    columns: 3,
    showProductCards: false, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω–æ
    maxProducts: 12,
    customColumns: true, // –ö–ê–†–î–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ
    customProducts: false,
    customColumnsValue: 3,
    customProductsValue: 12,
    propertyCardImage: '',
    maxElements: 6, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 6 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    showAllElements: false, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    individualImages: {}, // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –æ–ø—Ü–∏–∏
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
    autoSize: true, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    cardHeight: 150, // –í—ã—Å–æ—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    customCardHeight: true, // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    individualCardHeights: {}, // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
    cardWidth: 200, // –®–∏—Ä–∏–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    customCardWidth: true, // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    individualCardWidths: {}, // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –ø–æ–¥–ø–∏—Å–µ–π
    componentTitle: '–§–∏–ª—å—Ç—Ä —Å–≤–æ–π—Å—Ç–≤', // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    labelPosition: 'inside', // –ü–æ–¥–ø–∏—Å—å –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    ...element.props.displaySettings // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ props
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ª–æ–Ω–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const calculateOptimalColumns = () => {
    const componentWidth = element.props.width || 400; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–∑–æ–≤—É—é —à–∏—Ä–∏–Ω—É
    const cardMinWidth = displaySettings.cardLayout === 'vertical' ? 100 : 150; // –£–º–µ–Ω—å—à–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –∫–∞—Ä—Ç–æ—á–∫–∏
    const gap = 12; // –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
    const padding = 32; // –û—Ç—Å—Ç—É–ø—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    
    const availableWidth = componentWidth - padding;
    const optimalColumns = Math.max(1, Math.floor(availableWidth / (cardMinWidth + gap)));
    
    console.log('üîß PropertyFilter: –†–∞—Å—á–µ—Ç –∫–æ–ª–æ–Ω–æ–∫', {
      componentWidth,
      cardMinWidth,
      gap,
      padding,
      availableWidth,
      optimalColumns,
      customColumns: displaySettings.customColumns,
      displaySettingsColumns: displaySettings.columns
    });
    
    return Math.min(optimalColumns, 6); // –ú–∞–∫—Å–∏–º—É–º 6 –∫–æ–ª–æ–Ω–æ–∫
  };

  // –ö–ê–†–î–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç customColumns
  const effectiveColumns = displaySettings.columns || calculateOptimalColumns();

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const calculateOptimalCardSize = () => {
    const componentWidth = element.props.width || 400;
    const componentHeight = element.props.height || 300;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –∫–∞—Ä—Ç–æ—á–∫–∏
    const gap = 12; // gap-3 = 12px
    const padding = 24; // p-3 = 12px —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
    const availableWidth = componentWidth - padding;
    const cardWidth = Math.max(100, Math.min(300, Math.floor((availableWidth - (effectiveColumns - 1) * gap) / effectiveColumns)));
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É –∫–∞—Ä—Ç–æ—á–∫–∏
    const availableHeight = componentHeight - 100; // –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const cardHeight = Math.max(80, Math.min(250, Math.floor(availableHeight / Math.ceil(options.length / effectiveColumns))));
    
    return { cardWidth, cardHeight };
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫–∞—Ä—Ç–æ—á–µ–∫
  const effectiveCardSize = displaySettings.autoSize ? calculateOptimalCardSize() : { 
    cardWidth: displaySettings.cardWidth, 
    cardHeight: displaySettings.cardHeight 
  };
  
  console.log('üîß PropertyFilter: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫', {
    effectiveColumns,
    customColumns: displaySettings.customColumns,
    displaySettingsColumns: displaySettings.columns,
    calculatedColumns: calculateOptimalColumns(),
    elementWidth: element.props.width,
    cardLayout: displaySettings.cardLayout,
    optionsCount: options.length,
    maxElements: displaySettings.maxElements,
    showAllElements: displaySettings.showAllElements,
    individualImages: displaySettings.individualImages, // –î–û–ë–ê–í–õ–ï–ù–û: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    propertyCardImage: displaySettings.propertyCardImage // –î–û–ë–ê–í–õ–ï–ù–û: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  });

  // --- –î–û–ë–ê–í–õ–ï–ù–ù–´–ô –õ–û–ì: –ü—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ---
  console.log(`PropertyFilter [${element.id}]: –†–µ–Ω–¥–µ—Ä. element.props.propertyName:`, element.props.propertyName);
  console.log(`PropertyFilter [${element.id}]: –í—Å–µ props:`, element.props);
  console.log(`PropertyFilter [${element.id}]: selectedValue:`, selectedValue);
  console.log(`PropertyFilter [${element.id}]: products.length:`, products.length);
  console.log(`PropertyFilter [${element.id}]: displaySettings.showProductCards:`, displaySettings.showProductCards);
  console.log(`PropertyFilter [${element.id}]: displaySettings.cardLayout:`, displaySettings.cardLayout);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
  const loadProducts = async (propertyName: string, propertyValue: string) => {
    if (!displaySettings.showProductCards) return;
    
    try {
      console.log('PropertyFilter: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤', { propertyName, propertyValue });
      
      const response = await fetch('/api/catalog/products/filtered', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          categoryIds: element.props.categoryIds,
          filters: {
            [propertyName]: propertyValue
          },
          limit: displaySettings.maxProducts
        }),
      });

      if (response.ok) {
        const data = await response.json();
        console.log('PropertyFilter: –¢–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data);
        setProducts(data.products || []);
      } else {
        console.error('PropertyFilter: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', response.status);
        setProducts([]);
      }
    } catch (error) {
      console.error('PropertyFilter: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
      setProducts([]);
    }
  };

  const loadAllProducts = async () => {
    console.log('üîÑ PropertyFilter: loadAllProducts –≤—ã–∑–≤–∞–Ω–∞', {
      showProductCards: displaySettings.showProductCards,
      categoryIds: element.props.categoryIds,
      maxProducts: displaySettings.maxProducts
    });
    
    if (!displaySettings.showProductCards) {
      console.log('üîÑ PropertyFilter: showProductCards = false, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É');
      return;
    }
    
    try {
      console.log('üîÑ PropertyFilter: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤', { 
        categoryIds: element.props.categoryIds,
        filters: {},
        limit: displaySettings.maxProducts
      });
      
      const response = await fetch('/api/catalog/products/filtered', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          categoryIds: element.props.categoryIds,
          filters: {},
          limit: displaySettings.maxProducts
        }),
      });

      console.log('üîÑ PropertyFilter: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API', {
        status: response.status,
        ok: response.ok
      });

      if (response.ok) {
        const data = await response.json();
        console.log('üîÑ PropertyFilter: –í—Å–µ —Ç–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
          productsCount: data.products?.length || 0,
          data
        });
        setProducts(data.products || []);
      } else {
        console.error('üîÑ PropertyFilter: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤:', response.status);
        setProducts([]);
      }
    } catch (error) {
      console.error('üîÑ PropertyFilter: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤:', error);
      setProducts([]);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π —Å–≤–æ–π—Å—Ç–≤–∞
    const loadPropertyValues = async () => {
      console.log('PropertyFilter: –ó–∞–≥—Ä—É–∑–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π —Å–≤–æ–π—Å—Ç–≤–∞', {
        propertyName: element.props.propertyName,
        categoryIds: element.props.categoryIds,
        selectedPropertyIds: element.props.selectedPropertyIds,
        allProps: element.props
      });

      // –ï—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å propertyName, –Ω–µ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —á–µ—Ä–µ–∑ API
      if (element.props.propertyName) {
        console.log('PropertyFilter: propertyName —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', element.props.propertyName);
      } else {
        console.log('PropertyFilter: propertyName –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ API');
      }

      // –ï—Å–ª–∏ –Ω–µ—Ç propertyName, –Ω–æ –µ—Å—Ç—å selectedPropertyIds, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–º—è —Å–≤–æ–π—Å—Ç–≤–∞
      let propertyName = element.props.propertyName;
      if (!propertyName && element.props.selectedPropertyIds?.length > 0) {
        // –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω–æ–µ
        try {
          const response = await fetch('/api/catalog/properties');
          if (response.ok) {
            const data = await response.json();
            console.log('PropertyFilter: –û—Ç–≤–µ—Ç API /api/catalog/properties:', data);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            let properties = [];
            if (Array.isArray(data)) {
              properties = data;
            } else if (data.properties && Array.isArray(data.properties)) {
              properties = data.properties;
            } else if (data.data && Array.isArray(data.data)) {
              properties = data.data;
            }
            
            console.log('PropertyFilter: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞:', properties);
            
            const property = properties.find((p: any) => p.id === element.props.selectedPropertyIds[0]);
            if (property) {
              propertyName = property.name;
              console.log('PropertyFilter: –ù–∞–π–¥–µ–Ω–æ –∏–º—è —Å–≤–æ–π—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ API:', propertyName);
              
              // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º propertyName –≤ element.props
              console.log('PropertyFilter: –°–æ—Ö—Ä–∞–Ω—è–µ–º propertyName –≤ element.props:', propertyName);
              onUpdate({
                props: {
                  ...element.props,
                  propertyName: propertyName
                }
              });
            } else {
              console.log('PropertyFilter: –°–≤–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ ID:', element.props.selectedPropertyIds[0]);
            }
          }
        } catch (error) {
          console.error('PropertyFilter: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–æ–π—Å—Ç–≤:', error);
        }
      }

      // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å–≤–æ–π—Å—Ç–≤–æ
      if (!propertyName || !element.props.categoryIds?.length || !element.props.selectedPropertyIds?.length) {
        console.log('PropertyFilter: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏', {
          propertyName,
          categoryIds: element.props.categoryIds,
          selectedPropertyIds: element.props.selectedPropertyIds,
          reason: !propertyName ? '–Ω–µ—Ç propertyName' : 
                  !element.props.categoryIds?.length ? '–Ω–µ—Ç categoryIds' : 
                  '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–ª —Å–≤–æ–π—Å—Ç–≤–æ'
        });
        setLoading(false);
      setError(null);
      setOptions([]);
      // –ó–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —Å–≤—è–∑–µ–π
        return;
      }

      setLoading(true);
      setError(null);
      
      try {
      console.log('PropertyFilter: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Å–≤–æ–π—Å—Ç–≤–∞:', propertyName);
      
        let response;
        let data;
        
      if (element.props.filters && Object.keys(element.props.filters).length > 0) {
        console.log('üîç PropertyFilter: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        
          const query = new URLSearchParams();
          element.props.categoryIds.forEach((id: string) => {
            query.append('categoryIds', id);
          });
        query.append('propertyNames', propertyName);
          query.append('filters', JSON.stringify(element.props.filters));

          console.log('PropertyFilter: –ó–∞–ø—Ä–æ—Å –∫ API —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:', `/api/catalog/products/filtered?${query.toString()}`);
          
          response = await fetch(`/api/catalog/products/filtered?${query.toString()}`);
          
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          
          data = await response.json();
          console.log('PropertyFilter: –û—Ç–≤–µ—Ç API —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:', data);
        } else {
        console.log('üîç PropertyFilter: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤');
        
          const query = new URLSearchParams();
          element.props.categoryIds.forEach((id: string) => {
            query.append('categoryIds', id);
          });
        query.append('propertyNames', propertyName);

        console.log('PropertyFilter: –ó–∞–ø—Ä–æ—Å –∫ API:', `/api/catalog/properties/unique-values?${query.toString()}`);
          
        response = await fetch(`/api/catalog/properties/unique-values?${query.toString()}`);
          
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          
          data = await response.json();
        console.log('PropertyFilter: –û—Ç–≤–µ—Ç API:', data);
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
      let uniqueValues: string[] = [];
      
      if (data.success && data.uniqueValues && data.uniqueValues[propertyName]) {
        uniqueValues = data.uniqueValues[propertyName];
        console.log('PropertyFilter: –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ API:', uniqueValues);
      } else if (Array.isArray(data)) {
        uniqueValues = data;
        console.log('PropertyFilter: –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ API (–º–∞—Å—Å–∏–≤):', uniqueValues);
      } else if (data.data && Array.isArray(data.data)) {
        uniqueValues = data.data;
        console.log('PropertyFilter: –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ API (data.data):', uniqueValues);
          } else {
        console.log('PropertyFilter: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API:', data);
        uniqueValues = [];
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ)
        const query = new URLSearchParams();
        element.props.categoryIds.forEach((id: string) => {
          query.append('categoryIds', id);
        });
        query.append('propertyName', propertyName);

      console.log('PropertyFilter: –ó–∞–ø—Ä–æ—Å –∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É API:', `/api/catalog/properties/values-with-data?${query.toString()}`);
      
      const dataResponse = await fetch(`/api/catalog/properties/values-with-data?${query.toString()}`);
      
      if (!dataResponse.ok) {
        throw new Error(`HTTP error! status: ${dataResponse.status}`);
      }
      
      const dataWithCountsAndImages = await dataResponse.json();
      console.log('PropertyFilter: –û—Ç–≤–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ API:', dataWithCountsAndImages);
      
      const optionsWithImages = uniqueValues.map(value => ({
            value,
        label: value,
        count: dataWithCountsAndImages.values[value]?.count || 0,
        image: dataWithCountsAndImages.values[value]?.image || null
      }));

      console.log('PropertyFilter: –û–ø—Ü–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:', optionsWithImages);
      
      setOptions(optionsWithImages);
      setLoading(false);
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –æ–Ω–æ –±—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —Å–≤—è–∑–µ–π
      if (element.props.selectedValue) {
        // –ó–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —Å–≤—è–∑–µ–π
      }
      
    } catch (error) {
      console.error('PropertyFilter: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π:', error);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π —Å–≤–æ–π—Å—Ç–≤–∞');
      setLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤–∞
  useEffect(() => {
    // --- –î–û–ë–ê–í–õ–ï–ù–ù–´–ô –õ–û–ì: –í –Ω–∞—á–∞–ª–µ useEffect ---
    console.log(`PropertyFilter [${element.id}]: useEffect triggered. element.props.propertyName:`, element.props.propertyName);
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —Å–≤–æ–π—Å—Ç–≤–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ
    if (!element.props.selectedPropertyIds?.length) {
      console.log(`PropertyFilter [${element.id}]: –°–≤–æ–π—Å—Ç–≤–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ`);
      setLoading(false);
      setError(null);
      setOptions([]);
      // –ó–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —Å–≤—è–∑–µ–π
      return;
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ propertyName
    if (element.props.propertyName) {
      console.log(`PropertyFilter [${element.id}]: propertyName –∏–∑–º–µ–Ω–∏–ª—Å—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ`);
      setLoading(true);
      setError(null);
      setOptions([]);
      // –ó–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —Å–≤—è–∑–µ–π
    }
    
    loadPropertyValues();
  }, [element.props.propertyName, element.props.categoryIds, element.props.selectedPropertyIds, element.props.filters]);

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
  useEffect(() => {
    console.log('üîç PropertyFilter: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:', {
      elementId: element.id,
      hasFilters: !!element.props.filters,
      filters: element.props.filters,
      filtersKeys: element.props.filters ? Object.keys(element.props.filters) : []
    });
    
    if (element.props.filters && Object.keys(element.props.filters).length > 0) {
      console.log('üîç PropertyFilter: –ü–æ–ª—É—á–µ–Ω—ã –≤–Ω–µ—à–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:', element.props.filters);
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å–≤–æ–π—Å—Ç–≤—É, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      if (element.props.filters.propertyName && element.props.filters.propertyValue) {
        console.log('üîç PropertyFilter: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞:', {
          propertyName: element.props.filters.propertyName,
          propertyValue: element.props.filters.propertyValue,
          categoryIds: element.props.filters.categoryIds
        });
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        setLoading(true);
        setError(null);
        setOptions([]);
        // –ó–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —Å–≤—è–∑–µ–π
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        loadPropertyValues();
      }
    } else {
      console.log('üîç PropertyFilter: –ù–µ—Ç –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É');
    }
  }, [element.props.filters]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    console.log('üîÑ PropertyFilter: useEffect –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤', {
      elementId: element.id,
      propertyName: element.props.propertyName,
      selectedValue,
      showProductCards: displaySettings.showProductCards,
      categoryIds: element.props.categoryIds,
      categoryIdsLength: element.props.categoryIds?.length
    });
    
    if (element.props.propertyName) {
      if (selectedValue) {
        console.log('üîÑ PropertyFilter: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è:', selectedValue);
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        loadProducts(element.props.propertyName, selectedValue);
      } else if (displaySettings.showProductCards && element.props.categoryIds?.length > 0) {
        console.log('üîÑ PropertyFilter: –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –µ—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        loadAllProducts();
      } else {
        console.log('üîÑ PropertyFilter: –£—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤', {
          showProductCards: displaySettings.showProductCards,
          hasCategoryIds: !!element.props.categoryIds,
          categoryIdsLength: element.props.categoryIds?.length
        });
      }
    } else {
      console.log('üîÑ PropertyFilter: propertyName –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
    }
  }, [element.props.propertyName, selectedValue, displaySettings.showProductCards, element.props.categoryIds]);

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    console.log('üîÑ PropertyFilter: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', {
      elementId: element.id,
      propertyName: element.props.propertyName,
      categoryIds: element.props.categoryIds,
      showProductCards: displaySettings.showProductCards
    });
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ props –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    const timer = setTimeout(() => {
      if (displaySettings.showProductCards && element.props.categoryIds?.length > 0) {
        console.log('üîÑ PropertyFilter: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã');
        loadAllProducts();
      }
    }, 1000);
    
    return () => clearTimeout(timer);
  }, []); // –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–≤–æ–π—Å—Ç–≤
  useEffect(() => {
    console.log('üîÑ PropertyFilter: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–≤–æ–π—Å—Ç–≤', {
      elementId: element.id,
      optionsLength: options.length,
      options: options,
      loading: loading,
      error: error,
      propertyName: element.props.propertyName,
      categoryIds: element.props.categoryIds
    });
  }, [options, loading, error, element.props.propertyName, element.props.categoryIds]);

  const handleValueChange = (value: string) => {
    console.log(`üîç PropertyFilter [${element.id}]: handleValueChange –ù–ê–ß–ê–õ–û`, {
      elementId: element.id,
      propertyName: element.props.propertyName,
      oldValue: selectedValue,
      newValue: value,
      hasOnConnectionData: !!onConnectionData
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —Å–≤—è–∑–µ–π
    updateFilter(value, element.props.categoryIds || []);
    
    // --- –î–û–ë–ê–í–õ–ï–ù–ù–´–ô –õ–û–ì: –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ onConnectionData ---
    console.log(`PropertyFilter [${element.id}]: handleValueChange. element.props.propertyName:`, element.props.propertyName, 'value:', value);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    if (onFilterChange) {
      onFilterChange(element.props.propertyName, value);
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —Å–≤—è–∑–µ–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    if (onConnectionData) {
      const connectionData = {
        type: 'filter',
        propertyName: element.props.propertyName,
        value: value,
        categoryIds: element.props.categoryIds
      };
      
      console.log('üîó PropertyFilter –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ:', {
        elementId: element.id,
        connectionData,
        hasOnConnectionData: !!onConnectionData
      });
      
      try {
        onConnectionData(element.id, connectionData);
        console.log('üîó PropertyFilter: onConnectionData –≤—ã–∑–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      } catch (error) {
        console.error('üîó PropertyFilter: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ onConnectionData:', error);
      }
    } else {
      console.log('üîó PropertyFilter: onConnectionData –ù–ï –ü–ï–†–ï–î–ê–ù!', {
        elementId: element.id,
        hasOnConnectionData: !!onConnectionData
      });
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    if (element.props.propertyName && value) {
      loadProducts(element.props.propertyName, value);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç
    onUpdate({
      props: {
        ...element.props,
        selectedValue: value
      }
    });
    
    console.log(`üîç PropertyFilter [${element.id}]: handleValueChange –ö–û–ù–ï–¶`);
  };

  const clearSelection = () => {
    clearCurrentFilter();
    
    if (onFilterChange) {
      onFilterChange(element.props.propertyName, '');
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —Å–≤—è–∑–µ–π
    if (onConnectionData) {
      const connectionData = {
        type: 'filter',
        propertyName: element.props.propertyName,
        value: '',
        categoryIds: element.props.categoryIds
      };
      
      onConnectionData(element.id, connectionData);
    }
    
    onUpdate({
      props: {
        ...element.props,
        selectedValue: ''
      }
    });
  };

  if (loading) {
    return (
      <div className="w-full h-full p-4 border border-gray-200 rounded-lg bg-gray-50 flex items-center justify-center">
        <div className="text-center text-gray-500">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2"></div>
          <div className="text-sm">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="w-full h-full p-4 border border-red-200 rounded-lg bg-red-50 flex items-center justify-center">
        <div className="text-center text-red-600">
          <div className="text-4xl mb-2">‚ö†Ô∏è</div>
          <div className="text-sm font-medium">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div>
          <div className="text-xs">{error}</div>
        </div>
      </div>
    );
  }

  if (!element.props.propertyName) {
    return (
      <div className="w-full h-full p-4 border border-gray-200 rounded-lg bg-gray-50 flex items-center justify-center">
        <div className="text-center text-gray-500">
          <div className="text-4xl mb-2">üîß</div>
          <div className="text-sm font-medium">–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä</div>
          <div className="text-xs">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–≤–æ–π—Å—Ç–≤–æ –≤ –ø–∞–Ω–µ–ª–∏ —Å–ø—Ä–∞–≤–∞</div>
        </div>
      </div>
    );
  }

  return (
    <div className="w-full h-full p-4 border border-gray-300 rounded-lg bg-white max-h-96 overflow-hidden flex flex-col">
      <div className="mb-3 flex-shrink-0">
        <h3 className="text-sm font-medium text-gray-700 mb-1">
          {displaySettings.componentTitle}
        </h3>
          {selectedValue && (
          <div className="text-xs text-gray-500">
            –í—ã–±—Ä–∞–Ω–æ: {selectedValue}
          </div>
          )}
        </div>

      <div className="flex-1 overflow-y-auto">
        <div 
          className="grid gap-3"
          style={{
            gridTemplateColumns: `repeat(${effectiveColumns}, ${effectiveCardSize.cardWidth}px)`, // –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
            gridAutoRows: `${effectiveCardSize.cardHeight}px` // –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
          }}
        >
        {options.slice(0, displaySettings.showAllElements ? options.length : displaySettings.maxElements).map((option) => (
          <div key={option.value} className="w-full">
            {/* –ö–∞—Ä—Ç–æ—á–∫–∞ */}
            <div
              className={`relative p-3 rounded-lg border cursor-pointer transition-all duration-200 w-full flex flex-col ${
                selectedValue === option.value
                  ? 'bg-blue-50 border-blue-300 shadow-md'
                  : 'bg-white border-gray-200 hover:border-gray-300 hover:shadow-sm'
              }`}
              style={{
                height: displaySettings.individualCardHeights[option.value] 
                  ? `${displaySettings.individualCardHeights[option.value]}px` 
                  : `${effectiveCardSize.cardHeight}px`,
                width: displaySettings.individualCardWidths[option.value] 
                  ? `${displaySettings.individualCardWidths[option.value]}px` 
                  : `${effectiveCardSize.cardWidth}px`
              }}
              onClick={() => handleValueChange(option.value)}
            >
              {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
              <div className={`${displaySettings.cardLayout === 'vertical' ? 'flex flex-col h-full' : 'flex items-start space-x-3 h-full'}`}>
                <div className={`${displaySettings.cardLayout === 'vertical' ? 'w-full h-16 mb-2 flex-shrink-0' : 'w-12 h-12 flex-shrink-0'}`}>
                  {(() => {
                    console.log('üñºÔ∏è PropertyFilter: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–ø—Ü–∏–∏', {
                      optionValue: option.value,
                      optionLabel: option.label,
                      individualImage: displaySettings.individualImages[option.value],
                      propertyCardImage: displaySettings.propertyCardImage,
                      optionImage: option.image,
                      individualImages: displaySettings.individualImages
                    });
                    
                    if (displaySettings.individualImages && displaySettings.individualImages[option.value]) {
                      return (
                        <img
                          src={displaySettings.individualImages[option.value]}
                          alt={option.label} 
                          className={`${displaySettings.cardLayout === 'vertical' ? 'w-full h-full' : 'w-12 h-12'} object-cover rounded-lg border border-gray-200`}
                        />
                      );
                    } else if (displaySettings.propertyCardImage) {
                      return (
                        <img
                          src={displaySettings.propertyCardImage}
                          alt={option.label} 
                          className={`${displaySettings.cardLayout === 'vertical' ? 'w-full h-full' : 'w-12 h-12'} object-cover rounded-lg border border-gray-200`}
                        />
                      );
                    } else if (option.image) {
                      return (
                        <img 
                          src={option.image}
                          alt={option.label}
                          className={`${displaySettings.cardLayout === 'vertical' ? 'w-full h-full' : 'w-12 h-12'} object-cover rounded-lg border border-gray-200`}
                        />
                      );
                    } else {
                      return (
                        <div className={`${displaySettings.cardLayout === 'vertical' ? 'w-full h-full' : 'w-12 h-12'} bg-gray-100 rounded-lg border border-gray-200 flex items-center justify-center`}>
                          <svg className={`${displaySettings.cardLayout === 'vertical' ? 'w-8 h-8' : 'w-6 h-6'} text-gray-400`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                          </svg>
                        </div>
                      );
                    }
                  })()}
                </div>
                
                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–≤–æ–π—Å—Ç–≤–µ - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
                {displaySettings.labelPosition === 'inside' && (
                  <div className={`${displaySettings.cardLayout === 'vertical' ? 'flex-1 flex flex-col justify-center text-center' : 'flex-1 min-w-0'}`}>
                    <h4 className={`text-sm font-medium text-gray-900 ${displaySettings.cardLayout === 'vertical' ? 'mb-1' : 'truncate'}`}>
                      {option.label}
                    </h4>
                    {option.count !== undefined && displaySettings.showCounts && (
                      <p className="text-xs text-gray-500">
                        {option.count} —Ç–æ–≤–∞—Ä–æ–≤
                      </p>
                    )}
                  </div>
                )}
                
                {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—ã–±–æ—Ä–∞ */}
                {selectedValue === option.value && (
                  <div className={`${displaySettings.cardLayout === 'vertical' ? 'absolute top-2 right-2' : 'flex-shrink-0'}`}>
                    <div className="w-5 h-5 bg-blue-600 rounded-full flex items-center justify-center">
                      <svg className="w-3 h-3 text-white" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                      </svg>
                    </div>
                  </div>
                )}
              </div>
            </div>
            
            {/* –ü–æ–¥–ø–∏—Å—å –ø–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–æ–π - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å —Å–Ω–∞—Ä—É–∂–∏ */}
            {displaySettings.labelPosition === 'outside' && (
              <div className="mt-2 text-center">
                <h4 className="text-sm font-medium text-gray-900">
                  {option.label}
                </h4>
                {option.count !== undefined && displaySettings.showCounts && (
                  <p className="text-xs text-gray-500">
                    {option.count} —Ç–æ–≤–∞—Ä–æ–≤
                  </p>
                )}
              </div>
            )}
          </div>
        ))}
        </div>
            </div>

      {selectedValue && (
                <button
          onClick={clearSelection}
          className="mt-3 text-xs text-gray-500 hover:text-gray-700 underline flex-shrink-0"
        >
          –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä
        </button>
      )}

      {options.length === 0 && !loading && (
        <div className="text-sm text-gray-500 text-center py-4 flex-shrink-0">
          –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            </div>
          )}

      {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï –≤—ã–±—Ä–∞–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ */}
      {displaySettings.showProductCards && !selectedValue && (
        <div className="mt-6 flex-shrink-0 w-full">
          <h4 className="text-sm font-medium text-gray-900 mb-3">
            –¢–æ–≤–∞—Ä—ã {products.length > 0 ? `(${products.length})` : '(–∑–∞–≥—Ä—É–∑–∫–∞...)'}
          </h4>
          
          {products.length > 0 ? (
            <div 
              className="grid gap-4 w-full"
              style={{
                gridTemplateColumns: `repeat(${effectiveColumns}, 1fr)`
              }}
            >
              {products.map((product) => (
                <div
                  key={product.id}
                  className={`bg-white border border-gray-200 rounded-lg overflow-hidden hover:shadow-md transition-shadow ${
                    displaySettings.cardLayout === 'vertical' ? 'flex flex-col' : 'flex'
                  }`}
                >
                  {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ */}
                  {displaySettings.showImages && (
                    <div className={`${displaySettings.cardLayout === 'vertical' ? 'aspect-square' : 'w-24 h-24 flex-shrink-0'}`}>
                      {product.image ? (
                        <img
                          src={product.image}
                          alt={product.name}
                          className={`w-full h-full object-cover ${
                            displaySettings.cardLayout === 'vertical' ? '' : 'rounded-l-lg'
                          }`}
                        />
                      ) : (
                        <div className={`w-full h-full bg-gray-100 flex items-center justify-center ${
                          displaySettings.cardLayout === 'vertical' ? '' : 'rounded-l-lg'
                        }`}>
                          <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                          </svg>
                        </div>
                      )}
                    </div>
                  )}
                  
                  {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ */}
                  <div className={`p-3 ${displaySettings.cardLayout === 'vertical' ? 'flex-1' : 'flex-1'}`}>
                    <h5 className="text-sm font-medium text-gray-900 truncate mb-1">
                      {product.name}
                    </h5>
                    {product.description && (
                      <p className="text-xs text-gray-500 line-clamp-2 mb-2">
                        {product.description}
                      </p>
                    )}
                    {product.price && (
                      <div className="text-sm font-semibold text-blue-600">
                        {product.price} ‚ÇΩ
            </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center text-gray-500 py-8">
              <div className="text-4xl mb-2">‚è≥</div>
              <div className="text-sm">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...</div>
              <div className="text-xs">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ</div>
            </div>
          )}
          </div>
        )}
    </div>
  );
}