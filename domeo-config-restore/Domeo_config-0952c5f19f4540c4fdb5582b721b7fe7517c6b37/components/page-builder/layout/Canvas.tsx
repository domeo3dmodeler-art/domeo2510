'use client';

import React, { useState, useRef, useCallback, useEffect } from 'react';
import { CanvasProps, BaseElement, Position } from '../types';
import { ElementRenderer } from '../elements/ElementRenderer';
import { GridOverlay } from './GridOverlay';
import { Rulers } from './Rulers';
// import { ConnectionLine } from '../elements/ConnectionLine'; // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω
import { ConnectionEditor } from '../elements/ConnectionEditor';
import { ConnectionContextMenu } from '../elements/ConnectionContextMenu';

export function Canvas({
  page,
  selectedElementId,
  selectedElementIds,
  zoom,
  viewMode,
  onSelectElement,
  onSelectElements,
  onUpdateElement,
  onDeleteElement,
  onAddElement,
  onConnectionData,
  onUpdateConnection,
  onDeleteConnection,
  onCreateConnection
}: CanvasProps) {
  const [isDragging, setIsDragging] = useState(false);
  const [draggedElementId, setDraggedElementId] = useState<string | null>(null);
  const [dragOffset, setDragOffset] = useState<Position>({ x: 0, y: 0 });
  const [isResizing, setIsResizing] = useState(false);
  const [isDragOver, setIsDragOver] = useState(false);
  const [editingConnection, setEditingConnection] = useState<any>(null);
  const [showConnectionMenu, setShowConnectionMenu] = useState(false);
  const [connectionMenuPosition, setConnectionMenuPosition] = useState({ x: 0, y: 0 });
  const canvasRef = useRef<HTMLDivElement>(null);

  // –†–∞–∑–º–µ—Ä—ã canvas
  const canvasWidth = page?.settings?.width || 1440;
  const canvasHeight = page?.settings?.height || 900;

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  const handleMouseDown = useCallback((e: React.MouseEvent, elementId: string) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ resize handle –∏–ª–∏ delete button
    const target = e.target as HTMLElement;
    if (target.dataset.resizeHandle || target.dataset.deleteButton) {
      return;
    }

    e.preventDefault();
    e.stopPropagation();

    const rect = canvasRef.current?.getBoundingClientRect();
    if (!rect) return;

    const element = findElementById(page?.elements || [], elementId);
    if (!element) return;

    const mouseX = e.clientX - rect.left;
    const mouseY = e.clientY - rect.top;

    // –í—ã—á–∏—Å–ª—è–µ–º offset –æ—Ç —É–≥–ª–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–æ —Ç–æ—á–∫–∏ –∫–ª–∏–∫–∞
    const offsetX = mouseX - element.position.x;
    const offsetY = mouseY - element.position.y;

    setIsDragging(true);
    setDraggedElementId(elementId);
    setDragOffset({ x: offsetX, y: offsetY });
    
    // –í—ã–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∑–∞–∂–∞—Ç Ctrl (–¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è)
    if (!e.ctrlKey) {
      onSelectElement(elementId);
    }
  }, [page, onSelectElement]);

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º—ã—à–∏
  useEffect(() => {
    if (typeof document === 'undefined' || !document.addEventListener) return;

    const handleGlobalMouseMove = (e: MouseEvent) => {
      if (!isDragging || !draggedElementId || !canvasRef.current) return;

      const rect = canvasRef.current.getBoundingClientRect();
      const mouseX = e.clientX - rect.left;
      const mouseY = e.clientY - rect.top;

      // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞
      const newX = mouseX - dragOffset.x;
      const newY = mouseY - dragOffset.y;

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –∫ —Å–µ—Ç–∫–µ
      const gridSize = 20;
      const snappedX = Math.round(newX / gridSize) * gridSize;
      const snappedY = Math.round(newY / gridSize) * gridSize;

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö canvas
      const element = findElementById(page?.elements || [], draggedElementId);
      if (!element) return;

      const elementWidth = typeof element.size.width === 'number' ? element.size.width : parseInt(element.size.width) || 200;
      const elementHeight = typeof element.size.height === 'number' ? element.size.height : parseInt(element.size.height) || 100;

      const constrainedX = Math.max(0, Math.min(snappedX, canvasWidth - elementWidth));
      const constrainedY = Math.max(0, Math.min(snappedY, canvasHeight - elementHeight));

      onUpdateElement(draggedElementId, {
        position: { x: constrainedX, y: constrainedY }
      });
    };

    const handleGlobalMouseUp = () => {
      setIsDragging(false);
      setDraggedElementId(null);
      setDragOffset({ x: 0, y: 0 });
    };

    document.addEventListener('mousemove', handleGlobalMouseMove, { passive: false });
    document.addEventListener('mouseup', handleGlobalMouseUp, { passive: false });

    return () => {
      document.removeEventListener('mousemove', handleGlobalMouseMove);
      document.removeEventListener('mouseup', handleGlobalMouseUp);
    };
  }, [isDragging, draggedElementId, dragOffset, page, onUpdateElement, canvasWidth, canvasHeight]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ canvas
  const handleCanvasClick = useCallback((e: React.MouseEvent) => {
    // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–µ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É, —Å–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    if (e.target === e.currentTarget && !e.ctrlKey) {
      onSelectElement(null);
      onSelectElements([]); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    }
  }, [onSelectElement, onSelectElements]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ drag & drop
  const handleDragOver = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'copy';
    setIsDragOver(true);
  }, []);

  const handleDragLeave = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
  }, []);

  const handleDrop = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
    
    try {
      const data = JSON.parse(e.dataTransfer.getData('application/json'));
      console.log('üéØ Canvas: Drop data received:', data);
      
      if (data.type === 'component') {
        const rect = canvasRef.current?.getBoundingClientRect();
        if (!rect) return;
        
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å —É—á–µ—Ç–æ–º –º–∞—Å—à—Ç–∞–±–∞
        const scaledX = x / (zoom / 100);
        const scaledY = y / (zoom / 100);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –∫ —Å–µ—Ç–∫–µ
        const gridSize = 20;
        const snappedX = Math.max(0, Math.round(scaledX / gridSize) * gridSize);
        const snappedY = Math.max(0, Math.round(scaledY / gridSize) * gridSize);
        
        console.log('üéØ Canvas: Adding element at position:', { x: snappedX, y: snappedY });
        onAddElement(data.elementType, { x: snappedX, y: snappedY });
      }
    } catch (error) {
      console.error('Error handling drop:', error);
    }
  }, [zoom, onAddElement]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
  const handleResize = useCallback((elementId: string, newSize: { width: number; height: number }) => {
    onUpdateElement(elementId, { size: newSize });
  }, [onUpdateElement]);

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ ID
  const findElementById = (elements: BaseElement[], id: string): BaseElement | null => {
    for (const element of elements) {
      if (element.id === id) {
        return element;
      }
      if (element.type === 'container' && 'children' in element) {
        const found = findElementById(element.children, id);
        if (found) return found;
      }
    }
    return null;
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Å–≤—è–∑–∏
  const handleConnectionClick = (connection: any) => {
    setEditingConnection(connection);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–∏
  const handleConnectionUpdate = (connectionId: string, updates: any) => {
    if (onUpdateConnection) {
      onUpdateConnection(connectionId, updates);
    }
    setEditingConnection(null);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–∏
  const handleConnectionDelete = (connectionId: string) => {
    if (onDeleteConnection) {
      onDeleteConnection(connectionId);
    }
    setEditingConnection(null);
  };

  if (!page) {
    return (
      <div className="flex-1 flex items-center justify-center bg-gray-50">
        <div className="text-center">
          <div className="w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
          </div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞</h3>
          <p className="text-gray-500">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</p>
        </div>
      </div>
    );
  }

  return (
    <div className="flex-1 flex flex-col bg-gray-50 overflow-hidden">
      {/* Canvas Header */}
      <div className="h-12 bg-white border-b border-gray-200 flex items-center justify-between px-4">
        <div className="flex items-center space-x-4">
          <h2 className="font-medium text-gray-900">{page.name}</h2>
          <span className="text-sm text-gray-500">
            {canvasWidth} √ó {canvasHeight}px
          </span>
        </div>
        <div className="flex items-center space-x-2">
          <span className="text-sm text-gray-500">
            –ú–∞—Å—à—Ç–∞–±: {zoom}%
          </span>
        </div>
      </div>

      {/* Canvas Area */}
      <div className="flex-1 overflow-auto p-8">
        <div className="relative mx-auto" style={{ width: canvasWidth, height: canvasHeight }}>
          {/* Rulers */}
          <Rulers 
            width={canvasWidth} 
            height={canvasHeight} 
            zoom={zoom / 100}
          />

          {/* Canvas Container */}
          <div
            ref={canvasRef}
            className="relative bg-white border border-gray-300 shadow-lg"
            style={{
              width: canvasWidth,
              height: canvasHeight,
              transform: `scale(${zoom / 100})`,
              transformOrigin: 'top left',
              marginTop: 24,
              marginLeft: 24
            }}
            onClick={handleCanvasClick}
            onDragOver={handleDragOver}
            onDragLeave={handleDragLeave}
            onDrop={handleDrop}
          >
            {/* Grid Overlay */}
            {viewMode === 'edit' && (
              <GridOverlay 
                width={canvasWidth} 
                height={canvasHeight} 
                gridSize={20}
              />
            )}

            {/* Page Background */}
            <div
              className="absolute inset-0"
              style={{
                backgroundColor: page.settings.backgroundColor
              }}
            />

            {/* Elements */}
            {page.elements.map((element) => (
              <ElementRenderer
                key={element.id}
                element={element}
                isSelected={selectedElementId === element.id}
                isMultiSelected={selectedElementIds.includes(element.id)}
                zoom={zoom / 100}
                onSelect={() => {
                  onSelectElement(element.id);
                  setShowConnectionMenu(false);
                }}
                onMultiSelect={(e) => {
                  // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å Ctrl
                  const newSelection = selectedElementIds.includes(element.id)
                    ? selectedElementIds.filter(id => id !== element.id)
                    : [...selectedElementIds, element.id];
                  
                  console.log('üñ±Ô∏è Canvas: onMultiSelect –≤—ã–∑–≤–∞–Ω', {
                    elementId: element.id,
                    currentSelection: selectedElementIds,
                    newSelection,
                    newSelectionLength: newSelection.length,
                    clientX: e.clientX,
                    clientY: e.clientY
                  });
                  
                  onSelectElements(newSelection);
                  
                  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ 2 –∏–ª–∏ –±–æ–ª–µ–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                  if (newSelection.length >= 2) {
                    console.log('üñ±Ô∏è Canvas: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ConnectionContextMenu');
                    const rect = canvasRef.current?.getBoundingClientRect();
                    if (rect) {
                      const position = {
                        x: e.clientX - rect.left, // –ü–æ–∑–∏—Ü–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ canvas
                        y: e.clientY - rect.top
                      };
                      console.log('üñ±Ô∏è Canvas: –ü–æ–∑–∏—Ü–∏—è –º–µ–Ω—é:', position);
                      setConnectionMenuPosition(position);
                      setShowConnectionMenu(true);
                    } else {
                      console.log('üñ±Ô∏è Canvas: –û—à–∏–±–∫–∞ - –Ω–µ –Ω–∞–π–¥–µ–Ω rect –¥–ª—è canvas');
                    }
                  } else {
                    console.log('üñ±Ô∏è Canvas: –°–∫—Ä—ã–≤–∞–µ–º ConnectionContextMenu');
                    setShowConnectionMenu(false);
                  }
                }}
                onUpdate={(updates) => onUpdateElement(element.id, updates)}
                onDelete={() => onDeleteElement(element.id)}
                onMouseDown={(e) => handleMouseDown(e, element.id)}
                onResize={(newSize) => handleResize(element.id, newSize)}
                onConnectionData={onConnectionData}
                allElements={page?.elements || []}
              />
            ))}

            {/* Connection Lines - –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã */}
            {/* {viewMode === 'edit' && page.connections && (
              <svg
                className="absolute inset-0 pointer-events-none"
                style={{ zIndex: 10 }}
              >
                {page.connections.map((connection) => {
                  const sourceElement = findElementById(page.elements, connection.sourceElementId);
                  const targetElement = findElementById(page.elements, connection.targetElementId);
                  
                  if (!sourceElement || !targetElement) return null;
                  
                  return (
                    <ConnectionLine
                      key={connection.id}
                      sourceId={connection.sourceElementId}
                      targetId={connection.targetElementId}
                      sourcePosition={sourceElement.position}
                      targetPosition={targetElement.position}
                      sourceSize={sourceElement.size}
                      targetSize={targetElement.size}
                      connectionType={connection.connectionType}
                      isActive={connection.isActive}
                      onClick={() => handleConnectionClick(connection)}
                      zoom={zoom / 100}
                    />
                  );
                })}
              </svg>
            )} */}

            {/* Drop Zone Indicators */}
            {isDragging && (
              <div className="absolute inset-0 border-2 border-dashed border-blue-400 bg-blue-50 bg-opacity-50 pointer-events-none" />
            )}
            
            {isDragOver && (
              <div className="absolute inset-0 border-2 border-dashed border-green-400 bg-green-50 bg-opacity-50 pointer-events-none flex items-center justify-center">
                <div className="bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg">
                  <div className="flex items-center space-x-2">
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                    </svg>
                    <span className="font-medium">–û—Ç–ø—É—Å—Ç–∏—Ç–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞</span>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Connection Editor Modal */}
      {editingConnection && (
        <ConnectionEditor
          connection={editingConnection}
          elements={page.elements.map(el => ({ id: el.id, type: el.type }))}
          onUpdate={handleConnectionUpdate}
          onDelete={handleConnectionDelete}
          onClose={() => setEditingConnection(null)}
        />
      )}

      {/* Connection Context Menu */}
      {showConnectionMenu && onCreateConnection && (
        <ConnectionContextMenu
          selectedElementIds={selectedElementIds}
          onCreateConnection={onCreateConnection}
          onClose={() => setShowConnectionMenu(false)}
          position={connectionMenuPosition}
        />
      )}
    </div>
  );
}
