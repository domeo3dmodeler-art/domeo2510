'use client';

import React, { useState, useCallback } from 'react';
import { Toolbar } from './layout/Toolbar';
import { Canvas } from './layout/Canvas';
import { ComponentsPanel } from './panels/ComponentsPanel';
import { PropertiesPanel } from './panels/PropertiesPanel';
import { PagesPanel } from './panels/PagesPanel';
import { CatalogTreePanel } from './panels/CatalogTreePanel';
import { SavePublishPanel } from './panels/SavePublishPanel';
import { TemplateSelector } from './templates/TemplateSelector';
import { useHistory } from './hooks/useHistory';
import { DocumentProvider } from './context/DocumentContext';
import { ConnectionsProvider } from './context/ConnectionsContext';
import { DocumentData, Page, BaseElement, BlockConnection } from './types';

// –ù–∞—á–∞–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
const initialDocument: DocumentData = {
  id: 'doc-1',
  name: '–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç',
  description: '',
  pages: [
    {
      id: 'page-1',
      name: '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞',
      slug: 'main',
      elements: [],
      settings: {
        width: 1440,
        height: 900,
        backgroundColor: '#ffffff',
        padding: { top: 0, right: 0, bottom: 0, left: 0 },
        margin: { top: 0, right: 0, bottom: 0, left: 0 }
      },
      theme: {
        colors: {
          primary: '#3b82f6',
          secondary: '#64748b',
          accent: '#f59e0b',
          background: '#ffffff',
          text: '#1f2937'
        },
        typography: {
          fontFamily: 'Inter, sans-serif',
          fontSize: {
            small: '14px',
            medium: '16px',
            large: '18px',
            xlarge: '24px'
          },
          lineHeight: {
            tight: 1.2,
            normal: 1.5,
            relaxed: 1.8
          }
        },
        spacing: {
          small: '8px',
          medium: '16px',
          large: '24px'
        },
        borderRadius: {
          small: '4px',
          medium: '8px',
          large: '12px'
        },
        shadows: [
          '0 1px 2px 0 rgb(0 0 0 / 0.05)',
          '0 4px 6px -1px rgb(0 0 0 / 0.1)',
          '0 10px 15px -3px rgb(0 0 0 / 0.1)'
        ]
      },
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    }
  ],
  settings: {
    theme: {
      colors: {
        primary: '#3b82f6',
        secondary: '#64748b',
        accent: '#f59e0b',
        background: '#ffffff',
        text: '#1f2937'
      },
      typography: {
        fontFamily: 'Inter, sans-serif',
        fontSize: {
          small: '14px',
          medium: '16px',
          large: '18px',
          xlarge: '24px'
        },
        lineHeight: {
          tight: 1.2,
          normal: 1.5,
          relaxed: 1.8
        }
      },
      spacing: {
        small: '8px',
        medium: '16px',
        large: '24px'
      },
      borderRadius: {
        small: '4px',
        medium: '8px',
        large: '12px'
      },
      shadows: [
        '0 1px 3px rgba(0, 0, 0, 0.1)',
        '0 4px 6px rgba(0, 0, 0, 0.1)',
        '0 10px 15px rgba(0, 0, 0, 0.1)'
      ]
    }
  },
  connections: [], // –°–≤—è–∑–∏ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏
  createdAt: new Date().toISOString(),
  updatedAt: new Date().toISOString(),
  status: 'draft' as const
};

export function PageBuilder() {
  const [currentDocument, setCurrentDocument] = useState<DocumentData>(initialDocument);
  const [selectedPageId, setSelectedPageId] = useState<string>('page-1');
  const [selectedElementId, setSelectedElementId] = useState<string | null>(null);
  const [selectedElementIds, setSelectedElementIds] = useState<string[]>([]); // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
  const [zoom, setZoom] = useState<number>(100);
  const [viewMode, setViewMode] = useState<'edit' | 'preview'>('edit');
  const [showComponentsPanel, setShowComponentsPanel] = useState<boolean>(true);
  const [showPropertiesPanel, setShowPropertiesPanel] = useState<boolean>(true);
  const [showPagesPanel, setShowPagesPanel] = useState<boolean>(false); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã—Ç–∞
  const [showCatalogPanel, setShowCatalogPanel] = useState<boolean>(false);
  const [showSavePanel, setShowSavePanel] = useState<boolean>(false);
  const [showTemplateSelector, setShowTemplateSelector] = useState<boolean>(false);
  const [savedPages, setSavedPages] = useState<any[]>([]);
  const [loadingPages, setLoadingPages] = useState(false);

  const {
    history,
    currentIndex,
    addToHistory,
    undo,
    redo,
    canUndo,
    canRedo
  } = useHistory(initialDocument);

  const selectedPage = currentDocument.pages.find(page => page.id === selectedPageId);
  const selectedElement = selectedElementId 
    ? findElementById((selectedPage?.elements as BaseElement[]) || [], selectedElementId)
    : null;

  console.log('üö® PageBuilder: –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤', {
    selectedElementId,
    selectedElementIds,
    selectedElement: selectedElement ? { id: selectedElement.id, type: selectedElement.type } : null,
    selectedPageId,
    selectedPageElements: selectedPage?.elements?.length || 0
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ ID
  function findElementById(elements: BaseElement[], id: string): BaseElement | null {
    for (const element of elements) {
      if (element.id === id) {
        return element;
      }
      if (element.type === 'container' && 'children' in element) {
        const found = findElementById(element.children as BaseElement[], id);
        if (found) return found;
      }
    }
    return null;
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  const handleAddElement = useCallback((elementType: string, position: { x: number; y: number }) => {
    if (!selectedPage) return;

    const newElement: BaseElement = {
      id: `element-${Date.now()}`,
      type: elementType as any,
      position,
      size: { width: 200, height: 100 },
      constraints: {
        minWidth: 50,
        minHeight: 50,
        maxWidth: 800,
        maxHeight: 600
      },
      style: {
        backgroundColor: 'transparent',
        borderColor: 'transparent',
        borderWidth: 0,
        borderRadius: 0,
        padding: { top: 8, right: 8, bottom: 8, left: 8 },
        margin: { top: 0, right: 0, bottom: 0, left: 0 }
      },
      props: getDefaultProps(elementType),
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };

    const updatedDocument = {
      ...currentDocument,
      pages: currentDocument.pages.map(page =>
        page.id === selectedPageId
          ? { ...page, elements: [...page.elements, newElement] }
          : page
      ),
      updatedAt: new Date().toISOString()
    };

    setCurrentDocument(updatedDocument);
    addToHistory(updatedDocument);
    setSelectedElementId(newElement.id);
  }, [currentDocument, selectedPageId, addToHistory]);

  const handleUpdateElement = useCallback((elementId: string, updates: Partial<BaseElement>) => {
    if (!selectedPage) return;

    console.log('üö® PageBuilder: handleUpdateElement –≤—ã–∑–≤–∞–Ω!', {
      elementId,
      updates,
      selectedPageId
    });

    const updatedDocument = {
      ...currentDocument,
      pages: currentDocument.pages.map(page =>
        page.id === selectedPageId
          ? {
              ...page,
              elements: updateElementInTree(page.elements, elementId, updates)
            }
          : page
      ),
      updatedAt: new Date().toISOString()
    };

    console.log('üö® PageBuilder: –î–æ–∫—É–º–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!', {
      elementId,
      updatedElement: updatedDocument.pages.find(p => p.id === selectedPageId)?.elements.find(e => e.id === elementId)
    });

    setCurrentDocument(updatedDocument);
    addToHistory(updatedDocument);
  }, [currentDocument, selectedPageId, addToHistory]);

  const handleDeleteElement = useCallback((elementId: string) => {
    if (!selectedPage) return;

    const updatedDocument = {
      ...currentDocument,
      pages: currentDocument.pages.map(page =>
        page.id === selectedPageId
          ? {
              ...page,
              elements: removeElementFromTree(page.elements, elementId)
            }
          : page
      ),
      updatedAt: new Date().toISOString()
    };

    setCurrentDocument(updatedDocument);
    addToHistory(updatedDocument);
    setSelectedElementId(null);
  }, [currentDocument, selectedPageId, addToHistory]);

  const handleSelectElement = useCallback((elementId: string | null) => {
    console.log('üö® PageBuilder: handleSelectElement –≤—ã–∑–≤–∞–Ω!', {
      elementId,
      previousSelectedElementId: selectedElementId
    });
    setSelectedElementId(elementId);
    setSelectedElementIds([]); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
  }, [selectedElementId]);

  const handleSelectElements = useCallback((elementIds: string[]) => {
    console.log('üö® PageBuilder: handleSelectElements –≤—ã–∑–≤–∞–Ω!', {
      elementIds,
      previousSelectedElementIds: selectedElementIds,
      elementsCount: elementIds.length
    });
    setSelectedElementIds(elementIds);
    setSelectedElementId(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
  }, [selectedElementIds]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–µ—Ä–µ–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  function updateElementInTree(elements: BaseElement[], elementId: string, updates: Partial<BaseElement>): BaseElement[] {
    console.log('üö® updateElementInTree: –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç', {
      elementId,
      updates,
      updatesProps: updates.props,
      elementsCount: elements.length
    });
    
    return elements.map(element => {
      if (element.id === elementId) {
        console.log('üö® updateElementInTree: –ù–ê–ô–î–ï–ù –≠–õ–ï–ú–ï–ù–¢!', {
          elementId,
          currentProps: element.props,
          updatesProps: updates.props,
          updatesPropsPropertyName: updates.props?.propertyName
        });
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –º–µ—Ä–∂–∏–º props
        const updatedElement = { 
          ...element, 
          ...updates,
          props: {
            ...element.props,
            ...(updates.props || {})
          }
        };
        console.log('üö® updateElementInTree: –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –∏ –æ–±–Ω–æ–≤–ª–µ–Ω', {
          elementId,
          oldProps: element.props,
          newProps: updatedElement.props,
          propertyName: updatedElement.props.propertyName
        });
        return updatedElement;
      }
        if (element.type === 'container' && 'children' in element) {
          return {
            ...element,
            children: updateElementInTree(element.children as BaseElement[], elementId, updates)
          };
        }
      return element;
    });
  }

  function removeElementFromTree(elements: BaseElement[], elementId: string): BaseElement[] {
    return elements.filter(element => {
      if (element.id === elementId) {
        return false;
      }
      if (element.type === 'container' && 'children' in element) {
        element.children = removeElementFromTree(element.children as BaseElement[], elementId);
      }
      return true;
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞
  function getDefaultProps(elementType: string): Record<string, any> {
    const defaultProps: Record<string, Record<string, any>> = {
      text: { content: '–¢–µ–∫—Å—Ç', fontSize: 16, color: '#1f2937', fontWeight: 'normal' },
      heading: { content: '–ó–∞–≥–æ–ª–æ–≤–æ–∫', level: 1, fontSize: 24, color: '#1f2937', fontWeight: 'bold' },
      image: { src: '', alt: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', width: 200, height: 150 },
      button: { text: '–ö–Ω–æ–ø–∫–∞', variant: 'primary', size: 'medium' },
      container: { children: [], layout: 'block', gap: 0 },
      productConfigurator: { categoryIds: [], showFilters: true, showGrid: true },
      productGrid: { categoryIds: [], limit: 12, columns: 3, showPrice: true },
      priceCalculator: { categoryIds: [], showBreakdown: true },
      cart: { showItems: true, showTotal: true }
    };
    return defaultProps[elementType] || {};
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
  const handleUndo = useCallback(() => {
    const previousDocument = undo();
    if (previousDocument) {
      setCurrentDocument(previousDocument);
    }
  }, [undo]);

  const handleRedo = useCallback(() => {
    const nextDocument = redo();
    if (nextDocument) {
      setCurrentDocument(nextDocument);
    }
  }, [redo]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ UI
  const handleZoomChange = useCallback((newZoom: number) => {
    setZoom(newZoom);
  }, []);

  const handleViewModeChange = useCallback((mode: 'edit' | 'preview') => {
    setViewMode(mode);
  }, []);

  const handlePageSizeChange = useCallback((width: number, height: number) => {
    if (!selectedPage) return;

    const updatedDocument = {
      ...currentDocument,
      pages: currentDocument.pages.map(page =>
        page.id === selectedPageId
          ? {
              ...page,
              settings: {
                ...page.settings,
                width: width,
                height: height
              }
            }
          : page
      ),
      updatedAt: new Date().toISOString()
    };

    setCurrentDocument(updatedDocument);
    addToHistory(updatedDocument);
  }, [currentDocument, selectedPageId, addToHistory]);

  const handleSave = useCallback(() => {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:', currentDocument);
  }, [currentDocument]);


  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞
  const handleSelectTemplate = useCallback((template: any) => {
    const newPage: Page = {
      id: `page-${Date.now()}`,
      name: template.name,
      slug: template.name.toLowerCase().replace(/[^a-z0-9]/g, '-'),
      elements: template.elements.map((element: any, index: number) => ({
        ...element,
        id: `element-${Date.now()}-${index}`,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      })),
    settings: {
      width: 1200,
      height: 1000,
      backgroundColor: '#ffffff',
      padding: { top: 0, right: 0, bottom: 0, left: 0 },
      margin: { top: 0, right: 0, bottom: 0, left: 0 },
      breakpoints: {
        mobile: 768,
        tablet: 1024,
        desktop: 1200
      }
    },
    theme: {
      colors: {
        primary: '#3b82f6',
        secondary: '#64748b',
        accent: '#f59e0b',
        background: '#ffffff',
        text: '#1f2937'
      },
      typography: {
        fontFamily: 'Inter, sans-serif',
        fontSize: {
          small: '14px',
          medium: '16px',
          large: '18px',
          xlarge: '24px'
        },
        lineHeight: {
          tight: 1.2,
          normal: 1.5,
          relaxed: 1.8
        }
      },
      spacing: {
        small: '8px',
        medium: '16px',
        large: '24px'
      },
      borderRadius: {
        small: '4px',
        medium: '8px',
        large: '12px'
      },
      shadows: [
        '0 1px 2px 0 rgb(0 0 0 / 0.05)',
        '0 4px 6px -1px rgb(0 0 0 / 0.1)',
        '0 10px 15px -3px rgb(0 0 0 / 0.1)'
      ]
    },
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };
    
    const newDocument: DocumentData = {
      ...currentDocument,
      pages: [newPage]
    };
    
    setCurrentDocument(newDocument);
    setSelectedPageId(newDocument.pages[0].id);
    setSelectedElementId(null);
    addToHistory(newDocument);
    setShowTemplateSelector(false);
  }, [currentDocument, addToHistory]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü
  const handleAddPage = useCallback(() => {
    const newPage: Page = {
      id: `page-${Date.now()}`,
      name: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentDocument.pages.length + 1}`,
      slug: `page-${currentDocument.pages.length + 1}`,
      elements: [],
      settings: {
        width: 1200,
        height: 800,
        backgroundColor: '#ffffff',
        padding: { top: 0, right: 0, bottom: 0, left: 0 },
        margin: { top: 0, right: 0, bottom: 0, left: 0 }
      },
      theme: {
        colors: {
          primary: '#3b82f6',
          secondary: '#64748b',
          accent: '#f59e0b',
          background: '#ffffff',
          text: '#1f2937'
        },
        typography: {
          fontFamily: 'Inter, sans-serif',
          fontSize: {
            small: '14px',
            medium: '16px',
            large: '18px',
            xlarge: '24px'
          },
          lineHeight: {
            tight: 1.2,
            normal: 1.5,
            relaxed: 1.8
          }
        },
        spacing: {
          small: '8px',
          medium: '16px',
          large: '24px'
        },
        borderRadius: {
          small: '4px',
          medium: '8px',
          large: '12px'
        },
        shadows: [
          '0 1px 2px 0 rgb(0 0 0 / 0.05)',
          '0 4px 6px -1px rgb(0 0 0 / 0.1)',
          '0 10px 15px -3px rgb(0 0 0 / 0.1)'
        ]
      },
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };

    const updatedDocument = {
      ...currentDocument,
      pages: [...currentDocument.pages, newPage],
      updatedAt: new Date().toISOString()
    };

    setCurrentDocument(updatedDocument);
    addToHistory(updatedDocument);
    setSelectedPageId(newPage.id);
  }, [currentDocument, addToHistory]);

  const handleDeletePage = useCallback((pageId: string) => {
    if (currentDocument.pages.length <= 1) return;

    const updatedDocument = {
      ...currentDocument,
      pages: currentDocument.pages.filter(page => page.id !== pageId),
      updatedAt: new Date().toISOString()
    };

    setCurrentDocument(updatedDocument);
    addToHistory(updatedDocument);

    if (selectedPageId === pageId) {
      setSelectedPageId(updatedDocument.pages[0].id);
    }
    setSelectedElementId(null);
  }, [currentDocument, selectedPageId, addToHistory]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–≤—è–∑—è–º–∏
  const handleAddConnection = useCallback((connectionData: Omit<BlockConnection, 'id'>) => {
    const newConnection: BlockConnection = {
      ...connectionData,
      id: `connection-${Date.now()}`
    };

    const updatedDocument = {
      ...currentDocument,
      connections: [...currentDocument.connections, newConnection],
      updatedAt: new Date().toISOString()
    };

    setCurrentDocument(updatedDocument);
    addToHistory(updatedDocument);
  }, [currentDocument, addToHistory]);

  const handleUpdateConnection = useCallback((connectionId: string, updates: Partial<BlockConnection>) => {
    const updatedDocument = {
      ...currentDocument,
      connections: currentDocument.connections.map(conn =>
        conn.id === connectionId ? { ...conn, ...updates } : conn
      ),
      updatedAt: new Date().toISOString()
    };

    setCurrentDocument(updatedDocument);
    addToHistory(updatedDocument);
  }, [currentDocument, addToHistory]);

  const handleDeleteConnection = useCallback((connectionId: string) => {
    const updatedDocument = {
      ...currentDocument,
      connections: currentDocument.connections.filter(conn => conn.id !== connectionId),
      updatedAt: new Date().toISOString()
    };

    setCurrentDocument(updatedDocument);
    addToHistory(updatedDocument);
  }, [currentDocument, addToHistory]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π
  const handleConnectionData = useCallback((sourceElementId: string, data: any) => {
    console.log('üîó handleConnectionData –≤—ã–∑–≤–∞–Ω–∞:', { sourceElementId, data });
    console.log('üîó –í—Å–µ —Å–≤—è–∑–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ:', currentDocument.connections);
    console.log('üîó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–µ–π:', currentDocument.connections?.length || 0);
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–≤—è–∑–∏, –≥–¥–µ –¥–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –ò–°–¢–û–ß–ù–ò–ö–û–ú –¥–∞–Ω–Ω—ã—Ö
    const outgoingConnections = (currentDocument.connections || []).filter(conn => {
      const matches = conn.sourceElementId === sourceElementId && conn.isActive;
      console.log('üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–°–•–û–î–Ø–©–ï–ô —Å–≤—è–∑–∏:', {
        connectionId: conn.id,
        sourceElementId: conn.sourceElementId,
        targetElementId: conn.targetElementId,
        isActive: conn.isActive,
        lookingFor: sourceElementId,
        matches,
        sourceElementIdType: typeof conn.sourceElementId,
        lookingForType: typeof sourceElementId,
        strictEquals: conn.sourceElementId === sourceElementId,
        looseEquals: conn.sourceElementId == sourceElementId
      });
      return matches;
    });

    console.log('üîó –ù–∞–π–¥–µ–Ω—ã –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–≤—è–∑–∏:', outgoingConnections);
    console.log('üîó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π:', outgoingConnections.length);

    if (outgoingConnections.length === 0) {
      console.log('‚ö†Ô∏è –ù–ï–¢ –ê–ö–¢–ò–í–ù–´–• –°–í–Ø–ó–ï–ô –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞:', sourceElementId);
      console.log('‚ö†Ô∏è –í—Å–µ —Å–≤—è–∑–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ:', currentDocument.connections);
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    outgoingConnections.forEach(connection => {
      const targetElement = findElementById((selectedPage?.elements as BaseElement[]) || [], connection.targetElementId);
      
      console.log('üîó –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–≤—è–∑—å:', { 
        connection, 
        targetElement: targetElement ? { id: targetElement.id, type: targetElement.type } : null 
      });
      
      if (targetElement) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–≤—è–∑–∏
        switch (connection.connectionType) {
          case 'filter':
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
            console.log('üîç –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤:', { 
              sourceElementId, 
              targetElementId: connection.targetElementId, 
              data,
              targetElementType: targetElement.type 
            });
            
            // –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç - PropertyFilter, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Ñ–∏–ª—å—Ç—Ä—ã
            if (targetElement.type === 'propertyFilter') {
              // –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å–≤–æ–π—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–∞
              const propertyName = data.propertyName;
              const propertyValue = data.value || data;
              
              console.log('üîç –û–±–Ω–æ–≤–ª—è–µ–º PropertyFilter —Ñ–∏–ª—å—Ç—Ä:', { 
                propertyName, 
                propertyValue,
                targetElementId: connection.targetElementId,
                data 
              });
              
              // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å –Ω–æ–≤—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
              const updates: Partial<BaseElement> = {
                props: {
                  ...targetElement.props,
                  filters: {
                    propertyName: propertyName,
                    propertyValue: propertyValue,
                    categoryIds: data.categoryIds
                  }
                }
              };
              
              console.log('üîç –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫ PropertyFilter:', updates);
              handleUpdateElement(connection.targetElementId, updates);
            }
            // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥–∞–µ–º —á–µ—Ä–µ–∑ filters
            else if (connection.targetProperty === 'filters') {
              const updates: Partial<BaseElement> = {
                props: {
                  ...targetElement.props,
                  filters: { ...targetElement.props.filters, [connection.sourceProperty]: data }
                }
              };
              handleUpdateElement(connection.targetElementId, updates);
            }
            break;
          case 'cart':
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
            console.log('üõí –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É:', data);
            break;
          case 'navigate':
            // –ù–∞–≤–∏–≥–∞—Ü–∏—è
            console.log('üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è:', data);
            break;
        }
      } else {
        console.error('‚ùå –¶–µ–ª–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', connection.targetElementId);
      }
    });
  }, [currentDocument.connections, selectedPage?.elements, handleUpdateElement]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤—è–∑–µ–π
  const handleCreateTestConnection = useCallback(() => {
    console.log('üß™ –¢–µ—Å—Ç —Å–≤—è–∑–µ–π: –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–≤—è–∑—å');
    
    // –ù–∞—Ö–æ–¥–∏–º PropertyFilter —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const elements = selectedPage?.elements || [];
    const propertyFilters = elements.filter(el => el.type === 'propertyFilter');
    
    if (propertyFilters.length < 2) {
      alert('–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 PropertyFilter —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏. –î–æ–±–∞–≤—å—Ç–µ PropertyFilter –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
      return;
    }
    
    const firstFilter = propertyFilters[0];
    const secondFilter = propertyFilters[1];
    
    console.log('üß™ –¢–µ—Å—Ç —Å–≤—è–∑–µ–π: –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É PropertyFilter:', {
      source: { id: firstFilter.id, type: firstFilter.type, propertyName: firstFilter.props.propertyName },
      target: { id: secondFilter.id, type: secondFilter.type, propertyName: secondFilter.props.propertyName }
    });
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–≤—è–∑—å –º–µ–∂–¥—É PropertyFilter
    const testConnection: BlockConnection = {
      id: `test-connection-${Date.now()}`,
      sourceElementId: firstFilter.id,
      targetElementId: secondFilter.id,
      connectionType: 'filter',
      sourceProperty: 'selectedValue',
      targetProperty: 'filters',
      description: `–°–≤—è–∑—å —Ñ–∏–ª—å—Ç—Ä–∞: ${firstFilter.props.propertyName} ‚Üí ${secondFilter.props.propertyName}`,
      isActive: true
    };
    
    const updatedDocument = {
      ...currentDocument,
      connections: [...(currentDocument.connections || []), testConnection],
      updatedAt: new Date().toISOString()
    };
    
    setCurrentDocument(updatedDocument);
    addToHistory(updatedDocument);
    
    console.log('üß™ –¢–µ—Å—Ç —Å–≤—è–∑–µ–π: –°–≤—è–∑—å —Å–æ–∑–¥–∞–Ω–∞:', testConnection);
    console.log('üß™ –¢–µ—Å—Ç —Å–≤—è–∑–µ–π: –í—Å–µ —Å–≤—è–∑–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ:', updatedDocument.connections);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Å–≤—è–∑—å
    setTimeout(() => {
      console.log('üß™ –¢–µ—Å—Ç —Å–≤—è–∑–µ–π: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö...');
      const testData = {
        type: 'filter',
        propertyName: firstFilter.props.propertyName || 'Domeo_–°—Ç–∏–ª—å Web',
        value: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è',
        categoryIds: firstFilter.props.categoryIds || []
      };
      
      console.log('üß™ –¢–µ—Å—Ç —Å–≤—è–∑–µ–π: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', testData);
      handleConnectionData(firstFilter.id, testData);
    }, 1000);
    
    alert(`–°–≤—è–∑—å —Å–æ–∑–¥–∞–Ω–∞ –º–µ–∂–¥—É PropertyFilter "${firstFilter.props.propertyName}" –∏ "${secondFilter.props.propertyName}". –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ª–æ–≥–æ–≤.`);
  }, [currentDocument, selectedPage, addToHistory, handleConnectionData]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
  const handleTestDataTransfer = useCallback(() => {
    console.log('üß™ –¢–µ—Å—Ç –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö: –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç');
    
    const elements = selectedPage?.elements || [];
    const propertyFilters = elements.filter(el => el.type === 'propertyFilter');
    
    if (propertyFilters.length < 1) {
      alert('–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 1 PropertyFilter –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö.');
      return;
    }
    
    const firstFilter = propertyFilters[0];
    
    console.log('üß™ –¢–µ—Å—Ç –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä:', {
      id: firstFilter.id,
      propertyName: firstFilter.props.propertyName,
      categoryIds: firstFilter.props.categoryIds
    });
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const testData = {
      type: 'filter',
      propertyName: firstFilter.props.propertyName || 'Domeo_–°—Ç–∏–ª—å Web',
      value: '–¢–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ',
      categoryIds: firstFilter.props.categoryIds || []
    };
    
    console.log('üß™ –¢–µ—Å—Ç –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:', testData);
    handleConnectionData(firstFilter.id, testData);
    
    alert('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ª–æ–≥–æ–≤.');
  }, [selectedPage, handleConnectionData]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–≤—è–∑–∏
  const handleCreateConnection = useCallback((sourceElementId: string, targetElementId: string, connectionType: BlockConnection['connectionType']) => {
    console.log('üîó –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏:', { sourceElementId, targetElementId, connectionType });
    
    const newConnection: BlockConnection = {
      id: `connection-${Date.now()}`,
      sourceElementId,
      targetElementId,
      connectionType,
      isActive: true,
      description: `–°–≤—è–∑—å ${connectionType} –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏`
    };

    console.log('üîó –ù–æ–≤–∞—è —Å–≤—è–∑—å:', newConnection);
    console.log('üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ ID —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', {
      sourceElementExists: selectedPage?.elements?.find(el => el.id === sourceElementId) ? '–î–ê' : '–ù–ï–¢',
      targetElementExists: selectedPage?.elements?.find(el => el.id === targetElementId) ? '–î–ê' : '–ù–ï–¢',
      allElementIds: selectedPage?.elements?.map(el => el.id),
      sourceElementId,
      targetElementId
    });

    const updatedDocument = {
      ...currentDocument,
      connections: [...(currentDocument.connections || []), newConnection],
      updatedAt: new Date().toISOString()
    };

    console.log('üîó –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç:', {
      connectionsCount: updatedDocument.connections.length,
      connections: updatedDocument.connections
    });

    setCurrentDocument(updatedDocument);
    addToHistory(updatedDocument);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    setSelectedElementIds([]);
  }, [currentDocument, addToHistory]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ ID
  function findElementById(elements: BaseElement[], id: string): BaseElement | null {
    for (const element of elements) {
      if (element.id === id) {
        return element;
      }
      if (element.type === 'container' && 'children' in element) {
        const found = findElementById(element.children as BaseElement[], id);
        if (found) return found;
      }
    }
    return null;
  }

  const handleDuplicatePage = useCallback((pageId: string) => {
    const pageToDuplicate = currentDocument.pages.find(page => page.id === pageId);
    if (!pageToDuplicate) return;

    const newPage: Page = {
      ...pageToDuplicate,
      id: `page-${Date.now()}`,
      name: `${pageToDuplicate.name} (–∫–æ–ø–∏—è)`,
      slug: `${pageToDuplicate.slug}-copy`,
      elements: JSON.parse(JSON.stringify(pageToDuplicate.elements)), // Deep clone
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };

    const updatedDocument = {
      ...currentDocument,
      pages: [...currentDocument.pages, newPage],
      updatedAt: new Date().toISOString()
    };

    setCurrentDocument(updatedDocument);
    addToHistory(updatedDocument);
    setSelectedPageId(newPage.id);
  }, [currentDocument, addToHistory]);

  const handleUpdatePage = useCallback((pageId: string, updates: Partial<Page>) => {
    const updatedDocument = {
      ...currentDocument,
      pages: currentDocument.pages.map(page =>
        page.id === pageId
          ? { ...page, ...updates, updatedAt: new Date().toISOString() }
          : page
      ),
      updatedAt: new Date().toISOString()
    };

    setCurrentDocument(updatedDocument);
    addToHistory(updatedDocument);
  }, [currentDocument, addToHistory]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
  const loadSavedPages = useCallback(async () => {
    setLoadingPages(true);
    try {
      const response = await fetch('/api/pages/simple-create');
      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          setSavedPages(data.pages);
        }
      }
    } catch (error) {
      console.error('Error loading saved pages:', error);
    } finally {
      setLoadingPages(false);
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const handleSavePage = useCallback(async (title: string, description: string) => {
    const currentPage = currentDocument.pages.find(p => p.id === selectedPageId);
    if (!currentPage) throw new Error('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

    const response = await fetch('/api/pages/simple-create', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        title,
        description,
        elements: currentPage.elements.map(element => ({
          type: element.type,
          props: element.props,
          position: element.position,
          size: element.size,
          zIndex: element.zIndex,
          parentId: element.parentId
        })),
        isPublished: false
      })
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    }

    const data = await response.json();
    if (data.success) {
      await loadSavedPages(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü
    }
  }, [currentDocument, selectedPageId, loadSavedPages]);

  // –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const handlePublishPage = useCallback(async (pageId: string) => {
    const response = await fetch(`/api/pages/${pageId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        isPublished: true
      })
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.error || '–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
    }

    await loadSavedPages(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü
  }, [loadSavedPages]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const handleLoadPage = useCallback(async (pageId: string) => {
    const response = await fetch(`/api/pages/${pageId}`);
    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
    }

    const data = await response.json();
    if (data.success) {
      const page = data.page;
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
      const newPage: Page = {
        id: `page-${Date.now()}`,
        name: page.title,
        slug: page.url,
        elements: page.elements.map((element: any) => ({
          id: `element-${Date.now()}-${Math.random()}`,
          type: element.type,
          props: element.props,
          position: element.position,
          size: element.size,
          zIndex: element.zIndex,
          parentId: element.parentId
        })),
        settings: {
          width: 1200,
          height: 800,
          backgroundColor: '#ffffff',
          padding: { top: 0, right: 0, bottom: 0, left: 0 },
          margin: { top: 0, right: 0, bottom: 0, left: 0 }
        },
        theme: currentDocument.pages[0].theme
      };

      setCurrentDocument(prev => ({
        ...prev,
        pages: [...prev.pages, newPage]
      }));

      setSelectedPageId(newPage.id);
    }
  }, [currentDocument.pages]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  React.useEffect(() => {
    loadSavedPages();
  }, [loadSavedPages]);

  return (
    <ConnectionsProvider>
      <DocumentProvider value={currentDocument}>
      <div className="h-screen flex flex-col bg-gray-100">
        {/* Toolbar */}
               <Toolbar
                 zoom={zoom}
                 viewMode={viewMode}
                 pageWidth={selectedPage?.settings?.width || 1440}
                 pageHeight={selectedPage?.settings?.height || 900}
                 onZoomChange={handleZoomChange}
                 onViewModeChange={handleViewModeChange}
                 onPageSizeChange={handlePageSizeChange}
                 onSave={handleSave}
                 onUndo={handleUndo}
                 onRedo={handleRedo}
                 canUndo={canUndo}
                 canRedo={canRedo}
                 showComponentsPanel={showComponentsPanel}
                 showPropertiesPanel={showPropertiesPanel}
                 onToggleComponentsPanel={() => setShowComponentsPanel(!showComponentsPanel)}
                 onTogglePropertiesPanel={() => setShowPropertiesPanel(!showPropertiesPanel)}
                 onTogglePagesPanel={() => setShowPagesPanel(!showPagesPanel)}
                 showCatalogPanel={showCatalogPanel}
                 onToggleCatalogPanel={() => setShowCatalogPanel(!showCatalogPanel)}
                 showSavePanel={showSavePanel}
                 onToggleSavePanel={() => setShowSavePanel(!showSavePanel)}
                 showPagesPanel={showPagesPanel}
                 onShowTemplates={() => setShowTemplateSelector(true)}
               />

        {/* Main Content */}
        <div className="flex-1 flex overflow-hidden">
          {/* Pages Panel */}
          {showPagesPanel && (
            <div className="w-64 lg:w-72 xl:w-80 bg-white border-r border-gray-200 flex-shrink-0 overflow-hidden">
              <PagesPanel
                document={currentDocument}
                selectedPageId={selectedPageId}
                onSelectPage={setSelectedPageId}
                onAddPage={handleAddPage}
                onDeletePage={handleDeletePage}
                onDuplicatePage={handleDuplicatePage}
                onUpdatePage={handleUpdatePage}
              />
            </div>
          )}

          {/* Catalog Panel */}
          {showCatalogPanel && (
            <div className="w-64 lg:w-72 xl:w-80 bg-white border-r border-gray-200 flex-shrink-0 overflow-hidden">
              <CatalogTreePanel
                onCategorySelect={(categoryId) => {
                  console.log('Selected category:', categoryId);
                  // TODO: Handle category selection
                }}
              />
            </div>
          )}

          {/* Save/Publish Panel */}
          {showSavePanel && (
            <div className="w-80 lg:w-96 xl:w-[28rem] bg-white border-r border-gray-200 flex-shrink-0 overflow-hidden">
              <SavePublishPanel
                document={currentDocument}
                onSave={handleSavePage}
                onPublish={handlePublishPage}
                onLoad={handleLoadPage}
                savedPages={savedPages}
                isLoading={loadingPages}
              />
            </div>
          )}

          {/* Components Panel */}
          {showComponentsPanel && (
            <div className="w-64 lg:w-72 xl:w-80 bg-white border-r border-gray-200 flex-shrink-0 overflow-hidden">
              <ComponentsPanel
                onAddElement={handleAddElement}
                selectedCategory={null}
              />
            </div>
          )}

          {/* Canvas */}
          <div className="flex-1 flex flex-col min-w-0">
            <Canvas
              page={selectedPage ? { ...selectedPage, connections: currentDocument.connections } : undefined}
              selectedElementId={selectedElementId}
              selectedElementIds={selectedElementIds}
              zoom={zoom}
              viewMode={viewMode}
              onSelectElement={handleSelectElement}
              onSelectElements={handleSelectElements}
              onUpdateElement={handleUpdateElement}
              onDeleteElement={handleDeleteElement}
              onAddElement={handleAddElement}
              onConnectionData={handleConnectionData}
              onUpdateConnection={handleUpdateConnection}
              onDeleteConnection={handleDeleteConnection}
              onCreateConnection={handleCreateConnection}
            />
          </div>

          {/* Properties Panel */}
          {showPropertiesPanel && (
            <div className="w-80 lg:w-96 xl:w-[28rem] bg-white border-l border-gray-200 flex-shrink-0 overflow-hidden">
              <PropertiesPanel
                element={selectedElement}
                page={selectedPage}
                onUpdateElement={handleUpdateElement}
                onUpdatePage={(updates) => handleUpdatePage(selectedPageId, updates)}
              />
            </div>
          )}
        </div>

        {/* Export Manager */}

        {/* Template Selector Modal */}
        {showTemplateSelector && (
          <TemplateSelector
            onSelectTemplate={handleSelectTemplate}
            onClose={() => setShowTemplateSelector(false)}
          />
      )}
      </div>
      </DocumentProvider>
    </ConnectionsProvider>
  );
}
