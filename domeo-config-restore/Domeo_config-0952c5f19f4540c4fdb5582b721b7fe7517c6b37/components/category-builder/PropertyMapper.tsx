'use client';

import React, { useState, useEffect } from 'react';
import { Card, Button, Checkbox, Select } from '../ui';

interface PropertyMapping {
  fieldName: string;
  displayName: string;
  dataType: 'text' | 'number' | 'select' | 'boolean' | 'image';
  isRequired: boolean;
  isFilterable: boolean;
  isVisible: boolean;
  options?: string[];
  unit?: string;
}

interface PropertyMapperProps {
  priceListHeaders: string[];
  priceListData: any[];
  onMappingComplete: (mapping: PropertyMapping[]) => void;
  onBack: () => void;
}

export default function PropertyMapper({ 
  priceListHeaders, 
  priceListData, 
  onMappingComplete, 
  onBack 
}: PropertyMapperProps) {
  const [mappings, setMappings] = useState<PropertyMapping[]>([]);
  const [selectedFields, setSelectedFields] = useState<string[]>([]);

  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞–ø–ø–∏–Ω–≥–∞ –¥–ª—è –≤—Å–µ—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const initialMappings: PropertyMapping[] = priceListHeaders.map(header => ({
      fieldName: header,
      displayName: header,
      dataType: detectDataType(header, priceListData),
      isRequired: false,
      isFilterable: false,
      isVisible: false,
      options: detectOptions(header, priceListData),
      unit: detectUnit(header)
    }));
    setMappings(initialMappings);
  }, [priceListHeaders, priceListData]);

  const detectDataType = (fieldName: string, data: any[]): PropertyMapping['dataType'] => {
    const fieldNameLower = fieldName.toLowerCase();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–æ–ª—è
    if (fieldNameLower.includes('—Ñ–æ—Ç–æ') || fieldNameLower.includes('–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ') || fieldNameLower.includes('–∫–∞—Ä—Ç–∏–Ω–∫–∞')) {
      return 'image';
    }
    if (fieldNameLower.includes('—Ü–µ–Ω–∞') || fieldNameLower.includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å') || fieldNameLower.includes('—Ä—É–±')) {
      return 'number';
    }
    if (fieldNameLower.includes('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ') || fieldNameLower.includes('—à—Ç') || fieldNameLower.includes('—à—Ç—É–∫')) {
      return 'number';
    }
    if (fieldNameLower.includes('–¥–∞') || fieldNameLower.includes('–Ω–µ—Ç') || fieldNameLower.includes('–µ—Å—Ç—å')) {
      return 'boolean';
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ –¥–∞–Ω–Ω—ã–º
    const sampleValues = data.slice(0, 10).map(row => row[fieldName]).filter(val => val !== null && val !== undefined);
    
    if (sampleValues.length === 0) return 'text';
    
    const isNumeric = sampleValues.every(val => !isNaN(Number(val)) && val !== '');
    if (isNumeric) return 'number';
    
    const uniqueValues = [...new Set(sampleValues)].length;
    if (uniqueValues <= 5 && sampleValues.length > 0) return 'select';
    
    return 'text';
  };

  const detectOptions = (fieldName: string, data: any[]): string[] => {
    const values = data.slice(0, 50).map(row => row[fieldName]).filter(val => val !== null && val !== undefined);
    return [...new Set(values)].slice(0, 10); // –ú–∞–∫—Å–∏–º—É–º 10 –æ–ø—Ü–∏–π
  };

  const detectUnit = (fieldName: string): string => {
    const fieldNameLower = fieldName.toLowerCase();
    
    if (fieldNameLower.includes('—Ü–µ–Ω–∞') || fieldNameLower.includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å')) return '‚ÇΩ';
    if (fieldNameLower.includes('—Ä–∞–∑–º–µ—Ä') || fieldNameLower.includes('—à–∏—Ä–∏–Ω–∞') || fieldNameLower.includes('–≤—ã—Å–æ—Ç–∞')) return '–º–º';
    if (fieldNameLower.includes('–≤–µ—Å')) return '–∫–≥';
    if (fieldNameLower.includes('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')) return '—à—Ç';
    
    return '';
  };

  const updateMapping = (fieldName: string, updates: Partial<PropertyMapping>) => {
    setMappings(prev => prev.map(mapping => 
      mapping.fieldName === fieldName ? { ...mapping, ...updates } : mapping
    ));
  };

  const toggleFieldSelection = (fieldName: string) => {
    setSelectedFields(prev => 
      prev.includes(fieldName) 
        ? prev.filter(f => f !== fieldName)
        : [...prev, fieldName]
    );
  };

  const handleComplete = () => {
    const activeMappings = mappings.filter(mapping => selectedFields.includes(mapping.fieldName));
    onMappingComplete(activeMappings);
  };

  const getDataTypeIcon = (type: PropertyMapping['dataType']) => {
    switch (type) {
      case 'text': return 'üìù';
      case 'number': return 'üî¢';
      case 'select': return 'üìã';
      case 'boolean': return '‚úÖ';
      case 'image': return 'üñºÔ∏è';
      default: return 'üìù';
    }
  };

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex justify-between items-center">
        <div>
          <h3 className="text-lg font-semibold text-black">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤–æ–π—Å—Ç–≤</h3>
          <p className="text-gray-600">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –∏–∑ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞</p>
        </div>
        <Button variant="secondary" onClick={onBack}>
          ‚Üê –ù–∞–∑–∞–¥
        </Button>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-4 gap-4">
        <div className="text-center p-3 bg-gray-50 rounded">
          <div className="text-2xl font-bold text-black">{priceListHeaders.length}</div>
          <div className="text-sm text-gray-600">–í—Å–µ–≥–æ –ø–æ–ª–µ–π</div>
        </div>
        <div className="text-center p-3 bg-gray-50 rounded">
          <div className="text-2xl font-bold text-black">{priceListData.length}</div>
          <div className="text-sm text-gray-600">–¢–æ–≤–∞—Ä–æ–≤</div>
        </div>
        <div className="text-center p-3 bg-gray-50 rounded">
          <div className="text-2xl font-bold text-black">{selectedFields.length}</div>
          <div className="text-sm text-gray-600">–í—ã–±—Ä–∞–Ω–æ</div>
        </div>
        <div className="text-center p-3 bg-gray-50 rounded">
          <div className="text-2xl font-bold text-black">
            {mappings.filter(m => m.isFilterable).length}
          </div>
          <div className="text-sm text-gray-600">–§–∏–ª—å—Ç—Ä—ã</div>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π */}
      <Card variant="base">
        <div className="p-6">
          <h4 className="font-medium text-black mb-4">–ü–æ–ª—è –∏–∑ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞</h4>
          <div className="space-y-3">
            {mappings.map((mapping) => (
              <div key={mapping.fieldName} className="flex items-center space-x-4 p-3 border border-gray-200 rounded">
                <Checkbox
                  checked={selectedFields.includes(mapping.fieldName)}
                  onChange={() => toggleFieldSelection(mapping.fieldName)}
                />
                
                <div className="flex-1">
                  <div className="flex items-center space-x-2 mb-2">
                    <span className="text-lg">{getDataTypeIcon(mapping.dataType)}</span>
                    <span className="font-medium text-black">{mapping.fieldName}</span>
                    {mapping.unit && (
                      <span className="text-sm text-gray-500">({mapping.unit})</span>
                    )}
                  </div>
                  
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm text-gray-600 mb-1">–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</label>
                      <input
                        type="text"
                        value={mapping.displayName}
                        onChange={(e) => updateMapping(mapping.fieldName, { displayName: e.target.value })}
                        className="w-full px-3 py-2 border border-gray-300 rounded text-sm"
                        placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm text-gray-600 mb-1">–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö</label>
                      <Select
                        value={mapping.dataType}
                        onChange={(e) => updateMapping(mapping.fieldName, { dataType: e.target.value as PropertyMapping['dataType'] })}
                        options={[
                          { value: 'text', label: 'üìù –¢–µ–∫—Å—Ç' },
                          { value: 'number', label: 'üî¢ –ß–∏—Å–ª–æ' },
                          { value: 'select', label: 'üìã –°–ø–∏—Å–æ–∫' },
                          { value: 'boolean', label: '‚úÖ –î–∞/–ù–µ—Ç' },
                          { value: 'image', label: 'üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' }
                        ]}
                        className="text-sm"
                      />
                    </div>
                  </div>
                  
                  {mapping.dataType === 'select' && mapping.options && (
                    <div className="mt-2">
                      <label className="block text-sm text-gray-600 mb-1">–í–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞</label>
                      <div className="flex flex-wrap gap-1">
                        {mapping.options.map((option, index) => (
                          <span key={index} className="px-2 py-1 bg-gray-100 text-gray-800 text-xs rounded">
                            {option}
                          </span>
                        ))}
                      </div>
                    </div>
                  )}
                  
                  <div className="flex space-x-4 mt-3">
                    <label className="flex items-center">
                      <Checkbox
                        checked={mapping.isRequired}
                        onChange={(e) => updateMapping(mapping.fieldName, { isRequired: e.target.checked })}
                      />
                      <span className="ml-2 text-sm text-gray-600">–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ</span>
                    </label>
                    
                    <label className="flex items-center">
                      <Checkbox
                        checked={mapping.isFilterable}
                        onChange={(e) => updateMapping(mapping.fieldName, { isFilterable: e.target.checked })}
                      />
                      <span className="ml-2 text-sm text-gray-600">–î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏</span>
                    </label>
                    
                    <label className="flex items-center">
                      <Checkbox
                        checked={mapping.isVisible}
                        onChange={(e) => updateMapping(mapping.fieldName, { isVisible: e.target.checked })}
                      />
                      <span className="ml-2 text-sm text-gray-600">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ –∫–∞—Ä—Ç–æ—á–∫–µ</span>
                    </label>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </Card>

      {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
      <div className="flex justify-between">
        <Button variant="secondary" onClick={onBack}>
          –û—Ç–º–µ–Ω–∞
        </Button>
        <Button 
          variant="primary" 
          onClick={handleComplete}
          disabled={selectedFields.length === 0}
        >
          –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ({selectedFields.length} –ø–æ–ª–µ–π)
        </Button>
      </div>
    </div>
  );
}
