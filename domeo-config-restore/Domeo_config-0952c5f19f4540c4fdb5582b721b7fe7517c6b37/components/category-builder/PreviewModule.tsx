'use client';

import React, { useState } from 'react';
import { Card, Button } from '../ui';
import CartModule from './CartModule';
import ExportModule from './ExportModule';

interface PreviewModuleProps {
  modules: any[];
  cartItems: any[];
  onAddToCart: (item: any) => void;
  onUpdateCartQuantity: (id: string, quantity: number) => void;
  onRemoveFromCart: (id: string) => void;
  onClearCart: () => void;
  onExport: (format: 'pdf' | 'xlsx' | 'csv') => void;
  onCreateQuote: () => void;
  onCreateInvoice: () => void;
  onCreateFactoryOrder: () => void;
}

export default function PreviewModule({
  modules,
  cartItems,
  onAddToCart,
  onUpdateCartQuantity,
  onRemoveFromCart,
  onClearCart,
  onExport,
  onCreateQuote,
  onCreateInvoice,
  onCreateFactoryOrder
}: PreviewModuleProps) {
  const [selectedClient, setSelectedClient] = useState<string | null>(null);
  const [previewMode, setPreviewMode] = useState<'desktop' | 'tablet' | 'mobile'>('desktop');

  // –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  const demoProducts = [
    {
      id: '1',
      name: '–î–≤–µ—Ä—å –º–µ–∂–∫–æ–º–Ω–∞—Ç–Ω–∞—è "–ö–ª–∞—Å—Å–∏–∫"',
      sku: 'DOOR-001',
      price: 15000,
      image: '/api/placeholder/200/200',
      specifications: {
        '–†–∞–∑–º–µ—Ä': '2000x800',
        '–¶–≤–µ—Ç': '–ë–µ–ª—ã–π',
        '–ú–∞—Ç–µ—Ä–∏–∞–ª': '–ú–î–§',
        '–§—É—Ä–Ω–∏—Ç—É—Ä–∞': '–ó–æ–ª–æ—Ç–∞—è'
      }
    },
    {
      id: '2',
      name: '–î–≤–µ—Ä—å –≤—Ö–æ–¥–Ω–∞—è "–ü—Ä–µ–º–∏—É–º"',
      sku: 'DOOR-002',
      price: 25000,
      image: '/api/placeholder/200/200',
      specifications: {
        '–†–∞–∑–º–µ—Ä': '2100x900',
        '–¶–≤–µ—Ç': '–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π',
        '–ú–∞—Ç–µ—Ä–∏–∞–ª': '–ú–µ—Ç–∞–ª–ª',
        '–£—Ç–µ–ø–ª–µ–Ω–∏–µ': '–î–∞'
      }
    }
  ];

  const handleAddToCart = (product: any) => {
    const cartItem = {
      ...product,
      quantity: 1,
      total: product.price
    };
    onAddToCart(cartItem);
  };

  const getPreviewWidth = () => {
    switch (previewMode) {
      case 'mobile': return 'w-80';
      case 'tablet': return 'w-96';
      case 'desktop': return 'w-full';
      default: return 'w-full';
    }
  };

  return (
    <div className="space-y-6">
      {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º */}
      <Card variant="base">
        <div className="p-4">
          <div className="flex justify-between items-center mb-4">
            <h3 className="text-lg font-semibold text-black">üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞</h3>
            <div className="flex space-x-2">
              <Button
                variant={previewMode === 'desktop' ? 'primary' : 'ghost'}
                size="sm"
                onClick={() => setPreviewMode('desktop')}
              >
                üñ•Ô∏è Desktop
              </Button>
              <Button
                variant={previewMode === 'tablet' ? 'primary' : 'ghost'}
                size="sm"
                onClick={() => setPreviewMode('tablet')}
              >
                üì± Tablet
              </Button>
              <Button
                variant={previewMode === 'mobile' ? 'primary' : 'ghost'}
                size="sm"
                onClick={() => setPreviewMode('mobile')}
              >
                üì± Mobile
              </Button>
            </div>
          </div>

          {/* –í—ã–±–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞ */}
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-600 mb-2">
              –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
            </label>
            <select
              value={selectedClient || ''}
              onChange={(e) => setSelectedClient(e.target.value || null)}
              className="w-full max-w-md px-3 py-2 border border-gray-300 text-black focus:outline-none focus:ring-2 focus:ring-yellow-400"
            >
              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞</option>
              <option value="client-1">–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</option>
              <option value="client-2">–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á</option>
              <option value="client-3">–°–∏–¥–æ—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞</option>
            </select>
          </div>
        </div>
      </Card>

      {/* –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞ */}
      <div className="flex justify-center">
        <div className={`${getPreviewWidth()} border border-gray-300 rounded-lg overflow-hidden bg-white`}>
          <div className="p-6">
            <h1 className="text-2xl font-bold text-black mb-6">–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä –¥–≤–µ—Ä–µ–π</h1>
            
            {/* –ú–æ–¥—É–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞ */}
            <div className="space-y-6">
              {/* –§–∏–ª—å—Ç—Ä—ã */}
              <Card variant="base">
                <div className="p-4">
                  <h3 className="font-medium text-black mb-3">üîç –§–∏–ª—å—Ç—Ä—ã</h3>
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm text-gray-600 mb-1">–†–∞–∑–º–µ—Ä</label>
                      <select className="w-full px-3 py-2 border border-gray-300 rounded text-sm">
                        <option>2000x800</option>
                        <option>2100x900</option>
                        <option>2200x1000</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-sm text-gray-600 mb-1">–¶–≤–µ—Ç</label>
                      <select className="w-full px-3 py-2 border border-gray-300 rounded text-sm">
                        <option>–ë–µ–ª—ã–π</option>
                        <option>–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π</option>
                        <option>–°–µ—Ä—ã–π</option>
                      </select>
                    </div>
                  </div>
                </div>
              </Card>

              {/* –°–µ–ª–µ–∫—Ç–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤ */}
              <Card variant="base">
                <div className="p-4">
                  <h3 className="font-medium text-black mb-3">üìã –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞</h3>
                  <div className="space-y-3">
                    {demoProducts.map((product) => (
                      <div key={product.id} className="flex items-center space-x-4 p-3 border border-gray-200 rounded">
                        <img
                          src={product.image}
                          alt={product.name}
                          className="w-16 h-16 object-cover rounded"
                        />
                        <div className="flex-1">
                          <h4 className="font-medium text-black">{product.name}</h4>
                          <p className="text-sm text-gray-600">–ê—Ä—Ç–∏–∫—É–ª: {product.sku}</p>
                          <div className="text-sm text-gray-500">
                            {Object.entries(product.specifications).map(([key, value]) => (
                              <span key={key} className="mr-2">
                                {key}: {value}
                              </span>
                            ))}
                          </div>
                        </div>
                        <div className="text-right">
                          <div className="text-lg font-bold text-black">
                            {product.price.toLocaleString()} ‚ÇΩ
                          </div>
                          <Button
                            variant="primary"
                            size="sm"
                            onClick={() => handleAddToCart(product)}
                            className="mt-2"
                          >
                            –í –∫–æ—Ä–∑–∏–Ω—É
                          </Button>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </Card>

              {/* –ö–æ—Ä–∑–∏–Ω–∞ */}
              <CartModule
                items={cartItems}
                onUpdateQuantity={onUpdateCartQuantity}
                onRemoveItem={onRemoveFromCart}
                onClearCart={onClearCart}
                onExport={onExport}
                onCreateQuote={onCreateQuote}
                onCreateInvoice={onCreateInvoice}
                onCreateFactoryOrder={onCreateFactoryOrder}
              />

              {/* –≠–∫—Å–ø–æ—Ä—Ç */}
              <ExportModule
                onExportPDF={() => onExport('pdf')}
                onExportExcel={() => onExport('xlsx')}
                onExportCSV={() => onExport('csv')}
                onCreateQuote={onCreateQuote}
                onCreateInvoice={onCreateInvoice}
                onCreateFactoryOrder={onCreateFactoryOrder}
                cartItems={cartItems}
                selectedClient={selectedClient || undefined}
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
