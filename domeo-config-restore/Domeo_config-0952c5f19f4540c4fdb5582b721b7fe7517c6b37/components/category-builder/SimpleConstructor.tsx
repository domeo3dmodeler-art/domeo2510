'use client';

import React, { useState } from 'react';
import { Card, Button } from '../ui';

interface Module {
  id: string;
  type: string;
  title: string;
  description: string;
  config: any;
}

interface SimpleConstructorProps {
  onComplete: (modules: Module[]) => void;
  onCancel: () => void;
}

const AVAILABLE_MODULES = [
  {
    type: 'product-selector',
    title: '–í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞',
    description: '–ú–æ–¥—É–ª—å –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞',
    icon: 'üõçÔ∏è'
  },
  {
    type: 'property-selector',
    title: '–í—ã–±–æ—Ä —Å–≤–æ–π—Å—Ç–≤',
    description: '–ú–æ–¥—É–ª—å –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–≤–æ–π—Å—Ç–≤ —Ç–æ–≤–∞—Ä–∞',
    icon: '‚öôÔ∏è'
  },
  {
    type: 'price-calculator',
    title: '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ü–µ–Ω—ã',
    description: '–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã',
    icon: 'üí∞'
  },
  {
    type: 'cart',
    title: '–ö–æ—Ä–∑–∏–Ω–∞',
    description: '–ú–æ–¥—É–ª—å –∫–æ—Ä–∑–∏–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤',
    icon: 'üõí'
  },
  {
    type: 'product-gallery',
    title: '–ì–∞–ª–µ—Ä–µ—è —Ç–æ–≤–∞—Ä–æ–≤',
    description: '–ú–æ–¥—É–ª—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤',
    icon: 'üñºÔ∏è'
  }
];

export default function SimpleConstructor({ onComplete, onCancel }: SimpleConstructorProps) {
  const [selectedModules, setSelectedModules] = useState<Module[]>([]);
  const [draggedModule, setDraggedModule] = useState<string | null>(null);

  const handleAddModule = (moduleType: string) => {
    const moduleTemplate = AVAILABLE_MODULES.find(m => m.type === moduleType);
    if (!moduleTemplate) return;

    const newModule: Module = {
      id: `${moduleType}-${Date.now()}`,
      type: moduleType,
      title: moduleTemplate.title,
      description: moduleTemplate.description,
      config: {}
    };

    setSelectedModules(prev => [...prev, newModule]);
  };

  const handleRemoveModule = (moduleId: string) => {
    setSelectedModules(prev => prev.filter(m => m.id !== moduleId));
  };

  const handleMoveModule = (fromIndex: number, toIndex: number) => {
    const newModules = [...selectedModules];
    const [movedModule] = newModules.splice(fromIndex, 1);
    newModules.splice(toIndex, 0, movedModule);
    setSelectedModules(newModules);
  };

  const handleComplete = () => {
    if (selectedModules.length === 0) {
      alert('–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–æ–¥—É–ª—å');
      return;
    }
    onComplete(selectedModules);
  };

  return (
    <div className="h-full flex flex-col">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="p-4 border-b border-gray-200">
        <h2 className="text-xl font-semibold text-black">–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</h2>
        <p className="text-gray-600">–î–æ–±–∞–≤—å—Ç–µ –º–æ–¥—É–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞</p>
      </div>

      <div className="flex-1 flex overflow-hidden">
        {/* –ü–∞–Ω–µ–ª—å –º–æ–¥—É–ª–µ–π */}
        <div className="w-1/3 border-r border-gray-200 p-4 overflow-y-auto">
          <h3 className="text-lg font-medium text-black mb-4">–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏</h3>
          <div className="space-y-2">
            {AVAILABLE_MODULES.map((module) => (
              <div
                key={module.type}
                className="p-3 border border-gray-200 rounded-lg cursor-pointer hover:bg-gray-50 transition-colors"
                onClick={() => handleAddModule(module.type)}
              >
                <div className="flex items-center space-x-3">
                  <span className="text-2xl">{module.icon}</span>
                  <div>
                    <h4 className="font-medium text-black">{module.title}</h4>
                    <p className="text-sm text-gray-600">{module.description}</p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* –û–±–ª–∞—Å—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏—è */}
        <div className="flex-1 p-4 overflow-y-auto">
          <h3 className="text-lg font-medium text-black mb-4">–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞</h3>
          
          {selectedModules.length === 0 ? (
            <div className="flex items-center justify-center h-64 border-2 border-dashed border-gray-300 rounded-lg">
              <div className="text-center">
                <div className="text-4xl mb-2">üé®</div>
                <p className="text-gray-500">–î–æ–±–∞–≤—å—Ç–µ –º–æ–¥—É–ª–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ —Å–ª–µ–≤–∞</p>
              </div>
            </div>
          ) : (
            <div className="space-y-3">
              {selectedModules.map((module, index) => (
                <Card key={module.id} variant="base">
                  <div className="p-4">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <span className="text-2xl">
                          {AVAILABLE_MODULES.find(m => m.type === module.type)?.icon}
                        </span>
                        <div>
                          <h4 className="font-medium text-black">{module.title}</h4>
                          <p className="text-sm text-gray-600">{module.description}</p>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        {index > 0 && (
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => handleMoveModule(index, index - 1)}
                          >
                            ‚Üë
                          </Button>
                        )}
                        {index < selectedModules.length - 1 && (
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => handleMoveModule(index, index + 1)}
                          >
                            ‚Üì
                          </Button>
                        )}
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleRemoveModule(module.id)}
                        >
                          ‚úï
                        </Button>
                      </div>
                    </div>
                  </div>
                </Card>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
      <div className="p-4 border-t border-gray-200">
        <div className="flex justify-between">
          <Button variant="secondary" onClick={onCancel}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button variant="primary" onClick={handleComplete}>
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
          </Button>
        </div>
      </div>
    </div>
  );
}

