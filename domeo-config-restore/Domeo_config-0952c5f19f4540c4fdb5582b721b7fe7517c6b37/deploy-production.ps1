# üöÄ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π Production –î–µ–ø–ª–æ–π –¥–ª—è Yandex Cloud (PowerShell)
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .\deploy-production.ps1

param(
    [Parameter(Mandatory=$true)]
    [string]$VMIP,
    
    [string]$SSHKey = "C:\Users\petr2\.ssh\ssh-key-1757583003347\ssh-key-1757583003347",
    [string]$Username = "ubuntu",
    [switch]$SkipSSL,
    [switch]$SkipFirewall
)

$ErrorActionPreference = "Stop"

function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host "[$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')] $Message" -ForegroundColor $Color
}

function Write-Success {
    param([string]$Message)
    Write-ColorOutput "‚úÖ $Message" "Green"
}

function Write-Error {
    param([string]$Message)
    Write-ColorOutput "‚ùå $Message" "Red"
    throw $Message
}

function Write-Warning {
    param([string]$Message)
    Write-ColorOutput "‚ö†Ô∏è $Message" "Yellow"
}

function Write-Info {
    param([string]$Message)
    Write-ColorOutput "‚ÑπÔ∏è $Message" "Cyan"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VM
function Test-VMConnection {
    Write-Info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VM: $VMIP"
    
    try {
        $result = ssh -i $SSHKey -o ConnectTimeout=10 -o StrictHostKeyChecking=no $Username@$VMIP "echo 'Connection successful'" 2>$null
        if ($LASTEXITCODE -eq 0) {
            Write-Success "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VM —É—Å–ø–µ—à–Ω–æ"
            return $true
        } else {
            Write-Error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VM"
            return $false
        }
    } catch {
        Write-Error "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $($_.Exception.Message)"
        return $false
    }
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ VM
function Deploy-ProductionConfig {
    Write-Info "–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞ VM..."
    
    # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
    $productionFiles = @(
        "docker-compose.production-full.yml",
        "Dockerfile.production-full", 
        "nginx/nginx-production.conf",
        "env.production.template",
        "deploy-production.sh",
        "monitoring/",
        "sql/"
    )
    
    $archiveName = "domeo-production-$(Get-Date -Format 'yyyyMMdd_HHmmss').zip"
    
    # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
    $filesToArchive = @()
    foreach ($file in $productionFiles) {
        if (Test-Path $file) {
            if ((Get-Item $file) -is [System.IO.DirectoryInfo]) {
                Get-ChildItem $file -Recurse | ForEach-Object { $filesToArchive += $_.FullName }
            } else {
                $filesToArchive += (Get-Item $file).FullName
            }
        }
    }
    
    Compress-Archive -Path $filesToArchive -DestinationPath $archiveName -Force
    Write-Success "–ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: $archiveName"
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—Ä—Ö–∏–≤ –Ω–∞ VM
    scp -i $SSHKey -o StrictHostKeyChecking=no $archiveName $Username@$VMIP:/tmp/
    
    if ($LASTEXITCODE -eq 0) {
        Write-Success "–ê—Ä—Ö–∏–≤ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ VM"
    } else {
        Write-Error "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ö–∏–≤–∞"
    }
    
    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞ VM
    $setupCommands = @"
cd /opt/domeo
rm -rf *
unzip /tmp/$archiveName
rm /tmp/$archiveName

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
mkdir -p nginx/ssl
mkdir -p data/{postgres,redis,uploads,logs,backups,prometheus,grafana,loki}
mkdir -p monitoring/{grafana/dashboards,grafana/datasources}

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞
chown -R ubuntu:ubuntu /opt/domeo
chmod +x *.sh

# –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
cp nginx/nginx-production.conf nginx/nginx.conf

echo "Production configuration deployed"
"@
    
    $setupCommands | ssh -i $SSHKey -o StrictHostKeyChecking=no $Username@$VMIP "bash"
    
    if ($LASTEXITCODE -eq 0) {
        Write-Success "Production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞ –Ω–∞ VM"
    } else {
        Write-Error "–û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    }
    
    # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∞—Ä—Ö–∏–≤
    Remove-Item $archiveName -ErrorAction SilentlyContinue
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ VM
function Set-ProductionEnvironment {
    Write-Info "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ VM..."
    
    $envCommands = @"
cd /opt/domeo

# –°–æ–∑–¥–∞–µ–º production .env —Ñ–∞–π–ª
cp env.production.template .env.production

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
POSTGRES_PASS=\$(openssl rand -base64 32)
REDIS_PASS=\$(openssl rand -base64 32)
NEXTAUTH_SECRET=\$(openssl rand -base64 32)
JWT_SECRET=\$(openssl rand -base64 32)
GRAFANA_PASS=\$(openssl rand -base64 16)

# –ó–∞–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ .env.production
sed -i "s/your_secure_postgres_password_here/\$POSTGRES_PASS/" .env.production
sed -i "s/your_secure_redis_password_here/\$REDIS_PASS/" .env.production
sed -i "s/your_super_secret_nextauth_key_here_minimum_32_characters/\$NEXTAUTH_SECRET/" .env.production
sed -i "s/your_jwt_secret_key_here_minimum_32_characters/\$JWT_SECRET/" .env.production
sed -i "s/your_secure_grafana_password_here/\$GRAFANA_PASS/" .env.production
sed -i "s/yourdomain.com/$VMIP/" .env.production

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞
chmod 600 .env.production

echo "Environment configured with secure passwords"
echo "PostgreSQL Password: \$POSTGRES_PASS"
echo "Redis Password: \$REDIS_PASS"
echo "NextAuth Secret: \$NEXTAUTH_SECRET"
echo "JWT Secret: \$JWT_SECRET"
echo "Grafana Password: \$GRAFANA_PASS"
"@
    
    $envCommands | ssh -i $SSHKey -o StrictHostKeyChecking=no $Username@$VMIP "bash"
    
    if ($LASTEXITCODE -eq 0) {
        Write-Success "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏"
    } else {
        Write-Error "–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"
    }
}

# –ó–∞–ø—É—Å–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ production —Å—Ç–µ–∫–∞
function Start-ProductionStack {
    Write-Info "–ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π production —Å—Ç–µ–∫..."
    
    $startCommands = @"
cd /opt/domeo

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
docker-compose -f docker-compose.production-full.yml down 2>/dev/null || true

# –°–æ–∑–¥–∞–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if [ ! -f nginx/ssl/cert.pem ]; then
    openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
        -keyout nginx/ssl/key.pem \
        -out nginx/ssl/cert.pem \
        -subj "/C=RU/ST=Moscow/L=Moscow/O=Domeo/OU=IT/CN=$VMIP"
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º production —Å—Ç–µ–∫
docker-compose -f docker-compose.production-full.yml up -d --build

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
sleep 60

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
docker-compose -f docker-compose.production-full.yml ps

echo "Production stack started"
"@
    
    $startCommands | ssh -i $SSHKey -o StrictHostKeyChecking=no $Username@$VMIP "bash"
    
    if ($LASTEXITCODE -eq 0) {
        Write-Success "Production —Å—Ç–µ–∫ –∑–∞–ø—É—â–µ–Ω"
    } else {
        Write-Error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ production —Å—Ç–µ–∫–∞"
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
function Test-ProductionHealth {
    Write-Info "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å production —Å—Ç–µ–∫–∞..."
    
    Start-Sleep -Seconds 30
    
    $maxAttempts = 30
    $attempt = 1
    
    while ($attempt -le $maxAttempts) {
        try {
            $response = Invoke-WebRequest -Uri "http://$VMIP/api/health" -Method GET -TimeoutSec 5
            if ($response.StatusCode -eq 204) {
                Write-Success "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! Health check –ø—Ä–æ–π–¥–µ–Ω"
                break
            }
        } catch {
            Write-Info "–ü–æ–ø—ã—Ç–∫–∞ $attempt/$maxAttempts : –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–æ..."
            Start-Sleep -Seconds 10
            $attempt++
        }
    }
    
    if ($attempt -gt $maxAttempts) {
        Write-Warning "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ $maxAttempts –ø–æ–ø—ã—Ç–æ–∫"
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã
    try {
        Invoke-WebRequest -Uri "http://$VMIP:3001" -Method GET -TimeoutSec 5 | Out-Null
        Write-Success "Grafana –¥–æ—Å—Ç—É–ø–µ–Ω"
    } catch {
        Write-Warning "Grafana –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    }
    
    try {
        Invoke-WebRequest -Uri "http://$VMIP:9090" -Method GET -TimeoutSec 5 | Out-Null
        Write-Success "Prometheus –¥–æ—Å—Ç—É–ø–µ–Ω"
    } catch {
        Write-Warning "Prometheus –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    }
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function Main {
    Write-ColorOutput "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π production –¥–µ–ø–ª–æ–π –Ω–∞ VM: $VMIP" "Magenta"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SSH –∫–ª—é—á–∞
    if (-not (Test-Path $SSHKey)) {
        Write-Error "SSH –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: $SSHKey"
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if (-not (Test-VMConnection)) {
        Write-Error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VM"
    }
    
    # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    Deploy-ProductionConfig
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    Set-ProductionEnvironment
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º production —Å—Ç–µ–∫
    Start-ProductionStack
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
    Test-ProductionHealth
    
    Write-Success "üéâ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π production –¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!"
    Write-Success "üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://$VMIP"
    Write-Success "üìä Grafana: http://$VMIP:3001"
    Write-Success "üìà Prometheus: http://$VMIP:9090"
    Write-Success "üîç Health Check: http://$VMIP/api/health"
    Write-Success ""
    Write-Success "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    Write-Success "1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ DNS –¥–ª—è –≤–∞—à–µ–≥–æ –¥–æ–º–µ–Ω–∞"
    Write-Success "2. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"
    Write-Success "3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç—ã"
    Write-Success "4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±—ç–∫–∞–ø—ã"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
try {
    Main
} catch {
    Write-Error "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: $($_.Exception.Message)"
    exit 1
}
