const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testStatusBlocking() {
  console.log('üß™ –¢–ï–°–¢ –ë–õ–û–ö–ò–†–û–í–ö–ò –°–¢–ê–¢–£–°–û–í\n');

  try {
    // 1. –ù–∞—Ö–æ–¥–∏–º —Å—á–µ—Ç —Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    const invoice = await prisma.invoice.findFirst({
      where: { 
        status: { in: ['ORDERED', 'IN_PRODUCTION', 'READY', 'COMPLETED'] }
      },
      select: {
        id: true,
        number: true,
        status: true,
        parent_document_id: true,
        cart_session_id: true
      }
    });

    if (!invoice) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Å—á–µ—Ç —Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º');
      return;
    }

    console.log(`üìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç: ${invoice.number}`);
    console.log(`   - ID: ${invoice.id}`);
    console.log(`   - –°—Ç–∞—Ç—É—Å: ${invoice.status}`);

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
    const orders = await prisma.order.findMany({
      where: {
        OR: [
          { parent_document_id: invoice.id },
          { cart_session_id: invoice.cart_session_id }
        ]
      },
      select: { id: true }
    });

    console.log(`\nüì¶ –°–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã: ${orders.length}`);

    let hasSupplierOrders = false;
    for (const order of orders) {
      const supplierOrders = await prisma.supplierOrder.findMany({
        where: { parent_document_id: order.id },
        select: { id: true, number: true, status: true }
      });

      if (supplierOrders.length > 0) {
        hasSupplierOrders = true;
        console.log(`   - –ó–∞–∫–∞–∑ ${order.id}: ${supplierOrders.length} –∑–∞–∫–∞–∑–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É`);
        supplierOrders.forEach(so => {
          console.log(`     * ${so.number}: ${so.status}`);
        });
      }
    }

    console.log(`\nüîí –ï—Å—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫—É: ${hasSupplierOrders ? '–î–ê' : '–ù–ï–¢'}`);

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º API –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º API –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏...');
    
    const response = await fetch(`http://localhost:3000/api/invoices/${invoice.id}/status`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ status: 'DRAFT' })
    });

    const result = await response.json();
    console.log(`   –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
    console.log(`   –û—Ç–≤–µ—Ç:`, result);

    if (response.status === 403 && result.blocked) {
      console.log('‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
      console.log(`   –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${result.currentStatus}`);
    } else {
      console.log('‚ùå –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    }

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç –±–µ–∑ –∑–∞–∫–∞–∑–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
    console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç –±–µ–∑ –∑–∞–∫–∞–∑–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É...');
    
    const freeInvoice = await prisma.invoice.findFirst({
      where: { 
        status: 'DRAFT',
        NOT: { id: invoice.id }
      },
      select: { id: true, number: true, status: true }
    });

    if (freeInvoice) {
      console.log(`üìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π —Å—á–µ—Ç: ${freeInvoice.number}`);
      
      const freeResponse = await fetch(`http://localhost:3000/api/invoices/${freeInvoice.id}/status`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ status: 'SENT' })
      });

      const freeResult = await freeResponse.json();
      console.log(`   –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${freeResponse.status}`);
      
      if (freeResponse.ok) {
        console.log('‚úÖ –°–≤–æ–±–æ–¥–Ω—ã–π —Å—á–µ—Ç –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å!');
      } else {
        console.log('‚ùå –°–≤–æ–±–æ–¥–Ω—ã–π —Å—á–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!');
        console.log(`   –û—Ç–≤–µ—Ç:`, freeResult);
      }
    } else {
      console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π —Å—á–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testStatusBlocking();
