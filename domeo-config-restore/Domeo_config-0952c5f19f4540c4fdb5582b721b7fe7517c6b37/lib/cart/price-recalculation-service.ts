// –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ

import { CartItem } from '@/types/cart';

export interface PriceCalculationResult {
  success: boolean;
  price?: number;
  error?: string;
  sku_1c?: string;
  breakdown?: Array<{ label: string; amount: number }>;
}

export interface PriceRecalculationOptions {
  validateCombination?: boolean;
  useCache?: boolean;
  timeout?: number;
}

class PriceRecalculationService {
  private cache = new Map<string, PriceCalculationResult>();
  private readonly CACHE_TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
  private readonly DEFAULT_TIMEOUT = 10000; // 10 —Å–µ–∫—É–Ω–¥

  /**
   * –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
   */
  async recalculateItemPrice(
    item: CartItem, 
    options: PriceRecalculationOptions = {}
  ): Promise<PriceCalculationResult> {
    const {
      validateCombination = true,
      useCache = true,
      timeout = this.DEFAULT_TIMEOUT
    } = options;

    // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    const cacheKey = this.createCacheKey(item);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (useCache && this.cache.has(cacheKey)) {
      const cached = this.cache.get(cacheKey)!;
      if (Date.now() - cached.timestamp < this.CACHE_TTL) {
        console.log('üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', cacheKey);
        return cached;
      } else {
        this.cache.delete(cacheKey);
      }
    }

    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
      if (validateCombination) {
        const validationResult = await this.validateCombination(item);
        if (!validationResult.success) {
          return {
            success: false,
            error: validationResult.error
          };
        }
      }

      // –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ API
      const priceResult = await this.calculatePriceViaAPI(item, timeout);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      if (useCache && priceResult.success) {
        this.cache.set(cacheKey, {
          ...priceResult,
          timestamp: Date.now()
        });
      }

      return priceResult;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã:', error);
      return {
        success: false,
        error: this.getErrorMessage(error)
      };
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
   */
  private async validateCombination(item: CartItem): Promise<{ success: boolean; error?: string }> {
    try {
      const response = await fetch('/api/available-params', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          style: item.style,
          model: item.model,
          color: item.color
        })
      });

      if (!response.ok) {
        return {
          success: false,
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤'
        };
      }

      const data = await response.json();
      const availableParams = data.params;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
      if (item.finish && !availableParams.finishes?.includes(item.finish)) {
        return {
          success: false,
          error: `–ü–æ–∫—Ä—ã—Ç–∏–µ "${item.finish}" –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏`
        };
      }

      if (item.color && !availableParams.colors?.includes(item.color)) {
        return {
          success: false,
          error: `–¶–≤–µ—Ç "${item.color}" –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏`
        };
      }

      if (item.width && !availableParams.widths?.includes(item.width)) {
        return {
          success: false,
          error: `–®–∏—Ä–∏–Ω–∞ ${item.width} –º–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏`
        };
      }

      if (item.height && !availableParams.heights?.includes(item.height)) {
        return {
          success: false,
          error: `–í—ã—Å–æ—Ç–∞ ${item.height} –º–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏`
        };
      }

      return { success: true };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏:', error);
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤'
      };
    }
  }

  /**
   * –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ API
   */
  private async calculatePriceViaAPI(
    item: CartItem, 
    timeout: number
  ): Promise<PriceCalculationResult> {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), timeout);

    try {
      const response = await fetch('/api/price/doors', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        signal: controller.signal,
        body: JSON.stringify({
          selection: {
            style: item.style,
            model: item.model,
            finish: item.finish,
            color: item.color,
            width: item.width,
            height: item.height,
            hardware_kit: item.hardwareKitId ? { id: item.hardwareKitId } : undefined,
            handle: item.handleId ? { id: item.handleId } : undefined
          }
        })
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        if (response.status === 404) {
          return {
            success: false,
            error: '–¢–æ–≤–∞—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω'
          };
        }
        
        return {
          success: false,
          error: `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`
        };
      }

      const priceData = await response.json();
      
      if (!priceData.total) {
        return {
          success: false,
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É'
        };
      }

      return {
        success: true,
        price: priceData.total,
        sku_1c: priceData.sku_1c,
        breakdown: priceData.breakdown
      };

    } catch (error) {
      clearTimeout(timeoutId);
      
      if (error.name === 'AbortError') {
        return {
          success: false,
          error: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã'
        };
      }

      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  private createCacheKey(item: CartItem): string {
    return JSON.stringify({
      style: item.style,
      model: item.model,
      finish: item.finish,
      color: item.color,
      width: item.width,
      height: item.height,
      hardwareKitId: item.hardwareKitId,
      handleId: item.handleId
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–Ω—è—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
   */
  private getErrorMessage(error: any): string {
    if (error.message) {
      return error.message;
    }
    
    if (typeof error === 'string') {
      return error;
    }

    return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ü–µ–Ω—ã';
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
   */
  clearCache(): void {
    this.cache.clear();
    console.log('üóëÔ∏è –ö—ç—à —Ü–µ–Ω –æ—á–∏—â–µ–Ω');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
   */
  getCacheStats(): { size: number; keys: string[] } {
    return {
      size: this.cache.size,
      keys: Array.from(this.cache.keys())
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const priceRecalculationService = new PriceRecalculationService();
