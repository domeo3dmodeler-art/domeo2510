// lib/cart/cart-service.ts
// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞

import {
  Cart,
  CartItem,
  CartItemOption,
  CartItemModification,
  CartStatus,
  CartCalculation,
  CartValidationResult,
  CartValidationError,
  CartValidationWarning,
  ClientInfo,
  CartEvent,
  CartEventType,
  CartSettings,
  CartStats
} from './types';
import { priceService, PriceCalculationRequest } from '../price/price-service';

export class CartService {
  private static instance: CartService;
  private cart: Cart;
  private settings: CartSettings;
  private listeners: Set<(cart: Cart) => void> = new Set();
  private eventListeners: Set<(event: CartEvent) => void> = new Set();

  private constructor() {
    this.settings = {
      autoSave: true,
      autoSaveInterval: 30,
      maxItems: 100,
      maxQuantity: 999,
      allowNegativeQuantities: false,
      defaultTaxRate: 20,
      currency: 'RUB',
      locale: 'ru-RU'
    };

    this.cart = this.createEmptyCart();
    this.initializeAutoSave();
  }

  static getInstance(): CartService {
    if (!CartService.instance) {
      CartService.instance = new CartService();
    }
    return CartService.instance;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–π –∫–æ—Ä–∑–∏–Ω—ã
  private createEmptyCart(): Cart {
    return {
      id: this.generateCartId(),
      items: [],
      subtotal: 0,
      discount: 0,
      discountType: 'percentage',
      discountValue: 0,
      deliveryCost: 0,
      installationCost: 0,
      tax: 0,
      taxRate: this.settings.defaultTaxRate,
      total: 0,
      status: CartStatus.ACTIVE,
      createdAt: new Date(),
      updatedAt: new Date()
    };
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
  subscribe(listener: (cart: Cart) => void): () => void {
    this.listeners.add(listener);
    return () => this.listeners.delete(listener);
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∫–æ—Ä–∑–∏–Ω—ã
  subscribeToEvents(listener: (event: CartEvent) => void): () => void {
    this.eventListeners.add(listener);
    return () => this.eventListeners.delete(listener);
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π
  private notifyListeners(): void {
    this.listeners.forEach(listener => {
      try {
        listener(this.cart);
      } catch (error) {
        console.error('Error in cart listener:', error);
      }
    });
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
  private notifyEventListeners(event: CartEvent): void {
    this.eventListeners.forEach(listener => {
      try {
        listener(event);
      } catch (error) {
        console.error('Error in cart event listener:', error);
      }
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ—Ä–∑–∏–Ω—ã
  getCart(): Cart {
    return { ...this.cart };
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
  addItem(item: Omit<CartItem, 'id' | 'subtotal' | 'discount' | 'tax' | 'total' | 'addedAt' | 'updatedAt'>): CartItem {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    if (this.cart.items.length >= this.settings.maxItems) {
      throw new Error(`–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ (${this.settings.maxItems})`);
    }

    if (item.quantity > this.settings.maxQuantity) {
      throw new Error(`–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ (${this.settings.maxQuantity})`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä
    const existingItemIndex = this.cart.items.findIndex(
      cartItem => cartItem.productId === item.productId && 
      this.areItemsEqual(cartItem, item)
    );

    let cartItem: CartItem;

    if (existingItemIndex >= 0) {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
      cartItem = this.cart.items[existingItemIndex];
      cartItem.quantity += item.quantity;
      cartItem.updatedAt = new Date();
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
      cartItem = {
        ...item,
        id: this.generateItemId(),
        addedAt: new Date(),
        updatedAt: new Date()
      };
      this.cart.items.push(cartItem);
    }

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã
    this.calculateItemPrices(cartItem);
    this.calculateCartTotals();

    // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
    const event: CartEvent = {
      type: CartEventType.ITEM_ADDED,
      cartId: this.cart.id,
      itemId: cartItem.id,
      data: { item: cartItem },
      timestamp: new Date()
    };

    this.notifyEventListeners(event);
    this.notifyListeners();

    return cartItem;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
  updateItem(itemId: string, updates: Partial<CartItem>): CartItem {
    const itemIndex = this.cart.items.findIndex(item => item.id === itemId);
    
    if (itemIndex === -1) {
      throw new Error('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ');
    }

    const cartItem = this.cart.items[itemIndex];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const hasRealChanges = Object.keys(updates).some(key => {
      const currentValue = cartItem[key as keyof CartItem];
      const newValue = updates[key as keyof CartItem];
      return currentValue !== newValue;
    });

    console.log('üîç CartService change detection:', {
      updates,
      currentItem: {
        hardwareKitId: cartItem.hardwareKitId,
        finish: cartItem.metadata?.finish,
        color: cartItem.metadata?.color,
        width: cartItem.metadata?.width,
        height: cartItem.metadata?.height
      },
      hasRealChanges
    });

    // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä
    if (!hasRealChanges) {
      console.log('‚è≠Ô∏è No real changes detected in CartService, skipping update');
      return cartItem;
    }

    const updatedItem = { ...cartItem, ...updates, updatedAt: new Date() };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    if (updates.quantity && updates.quantity > this.settings.maxQuantity) {
      throw new Error(`–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ (${this.settings.maxQuantity})`);
    }

    this.cart.items[itemIndex] = updatedItem;
    
    // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–≤–µ—Ä–∏ (–≤–∫–ª—é—á–∞—è –∫–æ–º–ø–ª–µ–∫—Ç —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã), –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É —á–µ—Ä–µ–∑ API
    if (updatedItem.categoryId === 'doors' && 
        (updates.hardwareKitId !== undefined || updates.metadata)) {
      console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–≤–µ—Ä–∏, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ API');
      this.recalculateItemPrice(itemId).catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã:', error);
        // Fallback –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ä–∞—Å—á–µ—Ç—É
        this.calculateItemPrices(updatedItem);
        this.calculateCartTotals();
      });
    } else {
      // –û–±—ã—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ü–µ–Ω—ã
      this.calculateItemPrices(updatedItem);
      this.calculateCartTotals();
    }

    // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
    const event: CartEvent = {
      type: CartEventType.ITEM_UPDATED,
      cartId: this.cart.id,
      itemId: updatedItem.id,
      data: { updates, item: updatedItem },
      timestamp: new Date()
    };

    this.notifyEventListeners(event);
    this.notifyListeners();

    return updatedItem;
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
  removeItem(itemId: string): void {
    const itemIndex = this.cart.items.findIndex(item => item.id === itemId);
    
    if (itemIndex === -1) {
      throw new Error('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ');
    }

    const removedItem = this.cart.items[itemIndex];
    this.cart.items.splice(itemIndex, 1);
    this.calculateCartTotals();

    // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
    const event: CartEvent = {
      type: CartEventType.ITEM_REMOVED,
      cartId: this.cart.id,
      itemId: removedItem.id,
      data: { item: removedItem },
      timestamp: new Date()
    };

    this.notifyEventListeners(event);
    this.notifyListeners();
  }

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
  updateQuantity(itemId: string, quantity: number): CartItem {
    if (quantity <= 0 && !this.settings.allowNegativeQuantities) {
      this.removeItem(itemId);
      return this.cart.items[0]; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    }

    return this.updateItem(itemId, { quantity });
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ü–∏–∏ –∫ —Ç–æ–≤–∞—Ä—É
  addOption(itemId: string, option: CartItemOption): CartItem {
    const cartItem = this.cart.items.find(item => item.id === itemId);
    if (!cartItem) {
      throw new Error('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ');
    }

    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ–ø—Ü–∏—é —Å —Ç–∞–∫–∏–º –∂–µ ID
    cartItem.options = cartItem.options.filter(opt => opt.id !== option.id);
    cartItem.options.push(option);

    this.calculateItemPrices(cartItem);
    this.calculateCartTotals();

    // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
    const event: CartEvent = {
      type: CartEventType.OPTION_CHANGED,
      cartId: this.cart.id,
      itemId: cartItem.id,
      data: { option, item: cartItem },
      timestamp: new Date()
    };

    this.notifyEventListeners(event);
    this.notifyListeners();

    return cartItem;
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫ —Ç–æ–≤–∞—Ä—É
  addModification(itemId: string, modification: CartItemModification): CartItem {
    const cartItem = this.cart.items.find(item => item.id === itemId);
    if (!cartItem) {
      throw new Error('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ');
    }

    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é —Å —Ç–∞–∫–∏–º –∂–µ ID
    cartItem.modifications = cartItem.modifications.filter(mod => mod.id !== modification.id);
    cartItem.modifications.push(modification);

    this.calculateItemPrices(cartItem);
    this.calculateCartTotals();

    // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
    const event: CartEvent = {
      type: CartEventType.MODIFICATION_CHANGED,
      cartId: this.cart.id,
      itemId: cartItem.id,
      data: { modification, item: cartItem },
      timestamp: new Date()
    };

    this.notifyEventListeners(event);
    this.notifyListeners();

    return cartItem;
  }

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏
  applyDiscount(type: 'percentage' | 'fixed', value: number): void {
    this.cart.discountType = type;
    this.cart.discountValue = value;
    this.calculateCartTotals();

    // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
    const event: CartEvent = {
      type: CartEventType.DISCOUNT_APPLIED,
      cartId: this.cart.id,
      data: { type, value },
      timestamp: new Date()
    };

    this.notifyEventListeners(event);
    this.notifyListeners();
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ
  updateClientInfo(clientInfo: ClientInfo): void {
    this.cart.clientInfo = clientInfo;

    // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
    const event: CartEvent = {
      type: CartEventType.CLIENT_INFO_UPDATED,
      cartId: this.cart.id,
      data: { clientInfo },
      timestamp: new Date()
    };

    this.notifyEventListeners(event);
    this.notifyListeners();
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
  clearCart(): void {
    const itemCount = this.cart.items.length;
    this.cart.items = [];
    this.calculateCartTotals();

    // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
    const event: CartEvent = {
      type: CartEventType.CART_CLEARED,
      cartId: this.cart.id,
      data: { itemCount },
      timestamp: new Date()
    };

    this.notifyEventListeners(event);
    this.notifyListeners();
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã
  validateCart(): CartValidationResult {
    const errors: CartValidationError[] = [];
    const warnings: CartValidationWarning[] = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
    this.cart.items.forEach(item => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      if (!item.productName) {
        errors.push({
          itemId: item.id,
          field: 'productName',
          message: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ',
          type: 'required'
        });
      }

      if (item.quantity <= 0) {
        errors.push({
          itemId: item.id,
          field: 'quantity',
          message: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0',
          type: 'invalid'
        });
      }

      if (item.basePrice <= 0) {
        errors.push({
          itemId: item.id,
          field: 'basePrice',
          message: '–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0',
          type: 'invalid'
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
      item.options.forEach(option => {
        if (option.required && !option.value) {
          errors.push({
            itemId: item.id,
            field: `option_${option.id}`,
            message: `–û–ø—Ü–∏—è "${option.name}" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞`,
            type: 'required'
          });
        }
      });
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
    if (this.cart.status !== CartStatus.DRAFT && !this.cart.clientInfo?.name) {
      warnings.push({
        field: 'clientInfo',
        message: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ',
        type: 'recommendation'
      });
    }

    return {
      isValid: errors.length === 0,
      errors,
      warnings
    };
  }

  // –†–∞—Å—á–µ—Ç —Ü–µ–Ω —Ç–æ–≤–∞—Ä–∞
  private calculateItemPrices(item: CartItem): void {
    let subtotal = item.basePrice * item.quantity;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø—Ü–∏–π
    item.options.forEach(option => {
      subtotal += option.price * item.quantity;
    });

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
    let finalPrice = subtotal;
    item.modifications.forEach(modification => {
      finalPrice *= modification.priceMultiplier;
      finalPrice += modification.priceAdd * item.quantity;
    });

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–ª–æ–≥–∏ –∏ —Å–∫–∏–¥–∫–∏
    const discount = 0; // –ü–æ–∫–∞ –±–µ–∑ —Å–∫–∏–¥–æ–∫ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    const tax = (finalPrice - discount) * (this.cart.taxRate / 100);

    item.subtotal = subtotal;
    item.discount = discount;
    item.tax = tax;
    item.total = finalPrice - discount + tax;
  }

  // –ü–µ—Ä–µ—Å—á–µ—Ç —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ API (–¥–ª—è –¥–≤–µ—Ä–µ–π)
  private async recalculateItemPriceInternal(itemId: string): Promise<void> {
    const itemIndex = this.cart.items.findIndex(item => item.id === itemId);
    if (itemIndex === -1) {
      throw new Error('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ');
    }

    const item = this.cart.items[itemIndex];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–≤–∞—Ä –¥–≤–µ—Ä—å—é
    if (item.categoryId === 'doors' && item.metadata) {
      try {
        const requestData: PriceCalculationRequest = {
          style: item.metadata.style,
          model: item.metadata.model,
          finish: item.metadata.finish,
          color: item.metadata.color,
          width: item.metadata.width,
          height: item.metadata.height,
          hardware_kit: item.hardwareKitId ? { id: item.hardwareKitId } : undefined
        };

        console.log('üîÑ –ü–µ—Ä–µ—Å—á–µ—Ç —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å:', requestData);

        const priceResult = await priceService.calculatePriceUniversal(requestData);
        const newPrice = priceResult.total;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞
        item.basePrice = newPrice;
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
        this.calculateItemPrices(item);
        this.calculateCartTotals();
        
        console.log('‚úÖ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', { itemId, oldPrice: item.basePrice, newPrice });
        
        // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        const event: CartEvent = {
          type: CartEventType.ITEM_UPDATED,
          cartId: this.cart.id,
          itemId: item.id,
          data: { 
            updates: { basePrice: newPrice }, 
            item: item 
          },
          timestamp: new Date()
        };
        
        this.notifyEventListeners(event);
        this.notifyListeners();
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞:', error);
        throw error;
      }
    } else {
      // –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤, –Ω–µ —è–≤–ª—è—é—â–∏—Ö—Å—è –¥–≤–µ—Ä—è–º–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç
      this.calculateItemPrices(item);
      this.calculateCartTotals();
    }
  }

  // –†–∞—Å—á–µ—Ç –æ–±—â–∏—Ö –∏—Ç–æ–≥–æ–≤ –∫–æ—Ä–∑–∏–Ω—ã
  private calculateCartTotals(): void {
    this.cart.subtotal = this.cart.items.reduce((sum, item) => sum + item.subtotal, 0);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É –Ω–∞ –∫–æ—Ä–∑–∏–Ω—É
    if (this.cart.discountType === 'percentage') {
      this.cart.discount = this.cart.subtotal * (this.cart.discountValue / 100);
    } else {
      this.cart.discount = Math.min(this.cart.discountValue, this.cart.subtotal);
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–ª–æ–≥
    const taxableAmount = this.cart.subtotal - this.cart.discount + this.cart.deliveryCost + this.cart.installationCost;
    this.cart.tax = taxableAmount * (this.cart.taxRate / 100);

    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞
    this.cart.total = this.cart.subtotal - this.cart.discount + this.cart.deliveryCost + this.cart.installationCost + this.cart.tax;

    this.cart.updatedAt = new Date();
  }

  // –ü–µ—Ä–µ—Å—á–µ—Ç —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ API (–ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥)
  async recalculateItemPrice(itemId: string): Promise<void> {
    return this.recalculateItemPriceInternal(itemId);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
  getCalculation(): CartCalculation {
    const itemsSubtotal = this.cart.items.reduce((sum, item) => sum + item.subtotal, 0);
    const itemsDiscount = this.cart.items.reduce((sum, item) => sum + item.discount, 0);
    const itemsTax = this.cart.items.reduce((sum, item) => sum + item.tax, 0);
    const itemsTotal = this.cart.items.reduce((sum, item) => sum + item.total, 0);

    const optionsValue = this.cart.items.reduce((sum, item) => 
      sum + item.options.reduce((optSum, opt) => optSum + opt.price * item.quantity, 0), 0
    );

    const modificationsValue = this.cart.items.reduce((sum, item) => 
      sum + item.modifications.reduce((modSum, mod) => modSum + mod.priceAdd * item.quantity, 0), 0
    );

    return {
      items: {
        subtotal: itemsSubtotal,
        discount: itemsDiscount,
        tax: itemsTax,
        total: itemsTotal
      },
      cart: {
        subtotal: this.cart.subtotal,
        discount: this.cart.discount,
        delivery: this.cart.deliveryCost,
        installation: this.cart.installationCost,
        tax: this.cart.tax,
        total: this.cart.total
      },
      breakdown: {
        baseItems: itemsSubtotal - optionsValue,
        options: optionsValue,
        modifications: modificationsValue,
        discounts: this.cart.discount,
        delivery: this.cart.deliveryCost,
        installation: this.cart.installationCost,
        tax: this.cart.tax
      }
    };
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  private generateCartId(): string {
    return `cart_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  private generateItemId(): string {
    return `item_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  private areItemsEqual(item1: CartItem, item2: Partial<CartItem>): boolean {
    // –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    return item1.productId === item2.productId &&
           JSON.stringify(item1.options) === JSON.stringify(item2.options) &&
           JSON.stringify(item1.modifications) === JSON.stringify(item2.modifications);
  }

  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  private initializeAutoSave(): void {
    if (this.settings.autoSave) {
      setInterval(() => {
        this.saveToStorage();
      }, this.settings.autoSaveInterval * 1000);
    }
  }

  private saveToStorage(): void {
    if (typeof localStorage !== 'undefined') {
      localStorage.setItem('cart_data', JSON.stringify(this.cart));
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  loadFromStorage(): void {
    if (typeof localStorage !== 'undefined') {
      const savedCart = localStorage.getItem('cart_data');
      if (savedCart) {
        try {
          const parsedCart = JSON.parse(savedCart);
          this.cart = {
            ...parsedCart,
            createdAt: new Date(parsedCart.createdAt),
            updatedAt: new Date(parsedCart.updatedAt)
          };
          this.notifyListeners();
        } catch (error) {
          console.error('Error loading cart from storage:', error);
        }
      }
    }
  }
}



