// lib/price/price-service.ts
// –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω

export interface PriceCalculationRequest {
  style: string;
  model: string;
  finish: string;
  color: string;
  width: number;
  height: number;
  hardware_kit?: { id: string };
  handle?: { id: string };
}

export interface PriceCalculationResponse {
  total: number;
  basePrice: number;
  sku_1c?: string;
  breakdown?: {
    doorPrice: number;
    hardwarePrice: number;
    handlePrice: number;
  };
}

export class PriceService {
  private static instance: PriceService;
  private cache: Map<string, PriceCalculationResponse> = new Map();
  private cacheTimeout = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

  private constructor() {}

  static getInstance(): PriceService {
    if (!PriceService.instance) {
      PriceService.instance = new PriceService();
    }
    return PriceService.instance;
  }

  // –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ API
  async calculatePrice(request: PriceCalculationRequest): Promise<PriceCalculationResponse> {
    const cacheKey = this.generateCacheKey(request);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cached = this.cache.get(cacheKey);
    if (cached) {
      console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É:', cached);
      return cached;
    }

    try {
      console.log('üîÑ –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ API:', request);
      
      const response = await fetch('/api/price/doors', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(request)
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      
      const result: PriceCalculationResponse = {
        total: data.total,
        basePrice: data.total,
        sku_1c: data.sku_1c,
        breakdown: data.breakdown
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      this.cache.set(cacheKey, result);
      
      // –û—á–∏—â–∞–µ–º –∫—ç—à —á–µ—Ä–µ–∑ timeout
      setTimeout(() => {
        this.cache.delete(cacheKey);
      }, this.cacheTimeout);

      console.log('‚úÖ –¶–µ–Ω–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞:', result);
      return result;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã:', error);
      throw error;
    }
  }

  // –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ü–µ–Ω—ã (fallback)
  calculatePriceLocal(request: PriceCalculationRequest): PriceCalculationResponse {
    console.log('üîÑ –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ü–µ–Ω—ã:', request);
    
    // –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –ø–æ —Å—Ç–∏–ª—è–º
    const stylePrices: Record<string, number> = {
      '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π': 15000,
      '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π': 18000,
      '–ù–µ–æ–∫–ª–∞—Å—Å–∏–∫–∞': 17000,
      '–°–∫—Ä—ã—Ç—ã–π': 25000,
      '–ê–ª—é–º–∏–Ω–∏–π': 22000
    };

    const basePrice = stylePrices[request.style] || 15000;
    
    // –ú–Ω–æ–∂–∏—Ç–µ–ª–∏
    const area = (request.width * request.height) / 1000000; // –º¬≤
    const areaMultiplier = Math.max(0.8, Math.min(1.5, area));
    
    const finishMultipliers: Record<string, number> = {
      '–≠–º–∞–ª—å': 1.0,
      '–®–ø–æ–Ω': 1.3,
      '–ù–∞–Ω–æ—Ç–µ–∫—Å': 1.1,
      '–°—Ç–µ–∫–ª–æ': 1.4,
      '–ü–æ–¥ –æ—Ç–¥–µ–ª–∫—É': 0.9
    };
    
    const finishMultiplier = finishMultipliers[request.finish] || 1.0;
    
    const hardwareMultiplier = request.hardware_kit ? 1.3 : 1.0;
    
    const total = Math.round(basePrice * areaMultiplier * finishMultiplier * hardwareMultiplier);
    
    const result: PriceCalculationResponse = {
      total,
      basePrice,
      breakdown: {
        doorPrice: total * 0.8,
        hardwarePrice: total * 0.15,
        handlePrice: total * 0.05
      }
    };

    console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞:', result);
    return result;
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ü–µ–Ω—ã (API + fallback)
  async calculatePriceUniversal(request: PriceCalculationRequest): Promise<PriceCalculationResponse> {
    try {
      return await this.calculatePrice(request);
    } catch (error) {
      console.warn('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç:', error);
      return this.calculatePriceLocal(request);
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
  clearCache(): void {
    this.cache.clear();
    console.log('üßπ –ö—ç—à —Ü–µ–Ω –æ—á–∏—â–µ–Ω');
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞
  private generateCacheKey(request: PriceCalculationRequest): string {
    return JSON.stringify({
      style: request.style,
      model: request.model,
      finish: request.finish,
      color: request.color,
      width: request.width,
      height: request.height,
      hardware_kit: request.hardware_kit?.id,
      handle: request.handle?.id
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
  getCacheStats(): { size: number; keys: string[] } {
    return {
      size: this.cache.size,
      keys: Array.from(this.cache.keys())
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
export const priceService = PriceService.getInstance();
