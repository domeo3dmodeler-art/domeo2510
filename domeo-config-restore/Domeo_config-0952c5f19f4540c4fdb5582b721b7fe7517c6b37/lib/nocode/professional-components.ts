// ===================== –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ =====================

import { 
  ComponentConfig, 
  ComponentType, 
  ComponentCategory,
  ComponentStyles,
  AnimationConfig,
  DataBindingConfig 
} from './types';

// ===================== –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ =====================

export const defaultStyles: ComponentStyles = {
  display: 'block',
  position: 'relative',
  margin: { top: 0, right: 0, bottom: 0, left: 0 },
  padding: { top: 16, right: 16, bottom: 16, left: 16 },
  backgroundColor: '#ffffff',
  borderColor: '#e5e7eb',
  borderWidth: 1,
  borderStyle: 'solid',
  borderRadius: 8,
  boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
  fontSize: 14,
  fontWeight: 'normal',
  color: '#374151',
  textAlign: 'left',
  lineHeight: 1.5,
  opacity: 1,
  transform: 'none',
  filter: 'none',
};

// ===================== –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã =====================

export const PROFESSIONAL_COMPONENTS: Partial<ComponentConfig>[] = [
  // ===================== E-commerce –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã =====================
  {
    type: 'product-grid' as ComponentType,
    title: '–°–µ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤',
    description: '–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–µ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π',
    icon: 'üõçÔ∏è',
    category: 'ecommerce' as ComponentCategory,
    settings: {
      columns: 3,
      gap: 16,
      showFilters: true,
      showSorting: true,
      showPagination: true,
      itemsPerPage: 12,
      cardStyle: 'modern',
      showPrice: true,
      showRating: true,
      showAddToCart: true,
    },
    styles: {
      ...defaultStyles,
      display: 'grid',
      gap: 16,
    },
    animations: [
      {
        id: 'fade-in',
        name: '–ü–æ—è–≤–ª–µ–Ω–∏–µ',
        type: 'fadeIn',
        duration: 300,
        delay: 0,
        easing: 'ease-out',
        trigger: 'load',
        properties: { opacity: [0, 1] },
      },
    ],
    dataBinding: {
      source: 'products',
      field: '*',
      filter: 'category === currentCategory',
      sort: { field: 'name', direction: 'asc' },
      limit: 12,
    },
  },
  {
    type: 'price-calculator' as ComponentType,
    title: '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ü–µ–Ω—ã',
    description: '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π',
    icon: 'üí∞',
    category: 'ecommerce' as ComponentCategory,
    settings: {
      basePrice: 0,
      showBreakdown: true,
      currency: 'RUB',
      taxIncluded: true,
      discountEnabled: true,
      formula: 'basePrice + optionsPrice + tax - discount',
    },
    styles: {
      ...defaultStyles,
      backgroundColor: '#f8fafc',
      borderColor: '#3b82f6',
      borderWidth: 2,
    },
    animations: [
      {
        id: 'price-update',
        name: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã',
        type: 'scale',
        duration: 200,
        delay: 0,
        easing: 'ease-out',
        trigger: 'custom',
        properties: { transform: ['scale(1)', 'scale(1.05)', 'scale(1)'] },
      },
    ],
    dataBinding: {
      source: 'cart',
      field: 'totalPrice',
      transform: 'formatCurrency',
    },
  },
  {
    type: 'filter-panel' as ComponentType,
    title: '–ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤',
    description: '–ú–æ—â–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º',
    icon: 'üîç',
    category: 'ecommerce' as ComponentCategory,
    settings: {
      filters: [
        { type: 'range', field: 'price', label: '–¶–µ–Ω–∞', min: 0, max: 100000 },
        { type: 'multiselect', field: 'brand', label: '–ë—Ä–µ–Ω–¥', options: [] },
        { type: 'multiselect', field: 'color', label: '–¶–≤–µ—Ç', options: [] },
        { type: 'multiselect', field: 'size', label: '–†–∞–∑–º–µ—Ä', options: [] },
      ],
      showReset: true,
      showCount: true,
      collapsible: true,
    },
    styles: {
      ...defaultStyles,
      backgroundColor: '#ffffff',
      borderColor: '#d1d5db',
    },
    dataBinding: {
      source: 'products',
      field: 'filters',
    },
  },
  {
    type: 'search-bar' as ComponentType,
    title: '–ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞',
    description: '–£–º–Ω—ã–π –ø–æ–∏—Å–∫ —Å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏',
    icon: 'üîé',
    category: 'ecommerce' as ComponentCategory,
    settings: {
      placeholder: '–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤...',
      showSuggestions: true,
      debounceMs: 300,
      minLength: 2,
      maxSuggestions: 10,
      searchFields: ['name', 'description', 'tags'],
      highlightResults: true,
    },
    styles: {
      ...defaultStyles,
      backgroundColor: '#ffffff',
      borderColor: '#3b82f6',
      borderWidth: 2,
      borderRadius: 25,
    },
    animations: [
      {
        id: 'focus',
        name: '–§–æ–∫—É—Å',
        type: 'scale',
        duration: 200,
        delay: 0,
        easing: 'ease-out',
        trigger: 'hover',
        properties: { transform: ['scale(1)', 'scale(1.02)'] },
      },
    ],
    dataBinding: {
      source: 'products',
      field: 'searchResults',
    },
  },
  {
    type: 'cart-summary' as ComponentType,
    title: '–ö–æ—Ä–∑–∏–Ω–∞',
    description: '–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫—É–ø–æ–∫ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —ç–∫—Å–ø–æ—Ä—Ç–∞',
    icon: 'üõí',
    category: 'ecommerce' as ComponentCategory,
    settings: {
      showQuantity: true,
      showTotal: true,
      showTax: true,
      showDiscount: true,
      allowEdit: true,
      allowRemove: true,
      exportFormats: ['pdf', 'excel', 'csv'],
      showRelatedProducts: true,
    },
    styles: {
      ...defaultStyles,
      backgroundColor: '#f8fafc',
      borderColor: '#10b981',
      borderWidth: 2,
    },
    animations: [
      {
        id: 'add-to-cart',
        name: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É',
        type: 'scale',
        duration: 300,
        delay: 0,
        easing: 'ease-out',
        trigger: 'custom',
        properties: { transform: ['scale(1)', 'scale(1.1)', 'scale(1)'] },
      },
    ],
    dataBinding: {
      source: 'cart',
      field: '*',
    },
  },

  // ===================== Layout –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã =====================
  {
    type: 'text-block' as ComponentType,
    title: '–¢–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫',
    description: '–ë–æ–≥–∞—Ç—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º',
    icon: 'üìù',
    category: 'content' as ComponentCategory,
    settings: {
      content: '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç...',
      allowHtml: true,
      maxLength: 5000,
      showWordCount: true,
      placeholder: '–ù–∞—á–Ω–∏—Ç–µ –ø–µ—á–∞—Ç–∞—Ç—å...',
    },
    styles: {
      ...defaultStyles,
      backgroundColor: '#ffffff',
      borderColor: 'transparent',
      borderWidth: 0,
    },
    dataBinding: {
      source: 'custom',
      field: 'content',
    },
  },
  {
    type: 'image-block' as ComponentType,
    title: '–ë–ª–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
    description: '–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π',
    icon: 'üñºÔ∏è',
    category: 'media' as ComponentCategory,
    settings: {
      src: '',
      alt: '',
      width: '100%',
      height: 'auto',
      lazyLoading: true,
      showCaption: false,
      caption: '',
      clickAction: 'none',
      linkUrl: '',
    },
    styles: {
      ...defaultStyles,
      backgroundColor: 'transparent',
      borderColor: 'transparent',
      borderWidth: 0,
      borderRadius: 8,
    },
    animations: [
      {
        id: 'fade-in',
        name: '–ü–æ—è–≤–ª–µ–Ω–∏–µ',
        type: 'fadeIn',
        duration: 500,
        delay: 0,
        easing: 'ease-out',
        trigger: 'load',
        properties: { opacity: [0, 1] },
      },
    ],
    dataBinding: {
      source: 'custom',
      field: 'imageUrl',
    },
  },

  // ===================== Interactive –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã =====================
  {
    type: 'slider' as ComponentType,
    title: '–°–ª–∞–π–¥–µ—Ä',
    description: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–ª–∞–π–¥–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–Ω–∞—á–µ–Ω–∏–π',
    icon: 'üéöÔ∏è',
    category: 'interactive' as ComponentCategory,
    settings: {
      min: 0,
      max: 100,
      step: 1,
      defaultValue: 50,
      showLabels: true,
      showValue: true,
      orientation: 'horizontal',
      trackColor: '#e5e7eb',
      thumbColor: '#3b82f6',
    },
    styles: {
      ...defaultStyles,
      backgroundColor: 'transparent',
      borderColor: 'transparent',
      borderWidth: 0,
    },
    dataBinding: {
      source: 'custom',
      field: 'value',
    },
  },
  {
    type: 'tabs' as ComponentType,
    title: '–í–∫–ª–∞–¥–∫–∏',
    description: '–¢–∞–±—ã –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
    icon: 'üìë',
    category: 'interactive' as ComponentCategory,
    settings: {
      tabs: [
        { id: 'tab1', label: '–í–∫–ª–∞–¥–∫–∞ 1', content: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–∫–∏ 1' },
        { id: 'tab2', label: '–í–∫–ª–∞–¥–∫–∞ 2', content: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–∫–∏ 2' },
      ],
      defaultTab: 'tab1',
      orientation: 'horizontal',
      showIcons: false,
      closable: false,
    },
    styles: {
      ...defaultStyles,
      backgroundColor: '#ffffff',
      borderColor: '#e5e7eb',
    },
    dataBinding: {
      source: 'custom',
      field: 'activeTab',
    },
  },
  {
    type: 'accordion' as ComponentType,
    title: '–ê–∫–∫–æ—Ä–¥–µ–æ–Ω',
    description: '–°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—ã–µ —Å–µ–∫—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
    icon: 'üìã',
    category: 'interactive' as ComponentCategory,
    settings: {
      items: [
        { id: 'item1', title: '–°–µ–∫—Ü–∏—è 1', content: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ–∫—Ü–∏–∏ 1', expanded: false },
        { id: 'item2', title: '–°–µ–∫—Ü–∏—è 2', content: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ–∫—Ü–∏–∏ 2', expanded: false },
      ],
      allowMultiple: true,
      showIcons: true,
      animation: true,
    },
    styles: {
      ...defaultStyles,
      backgroundColor: '#ffffff',
      borderColor: '#e5e7eb',
    },
    animations: [
      {
        id: 'expand',
        name: '–†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ',
        type: 'slideIn',
        duration: 300,
        delay: 0,
        easing: 'ease-out',
        trigger: 'custom',
        properties: { height: ['0px', 'auto'] },
      },
    ],
    dataBinding: {
      source: 'custom',
      field: 'expandedItems',
    },
  },

  // ===================== Form –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã =====================
  {
    type: 'button' as ComponentType,
    title: '–ö–Ω–æ–ø–∫–∞',
    description: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏',
    icon: 'üîò',
    category: 'forms' as ComponentCategory,
    settings: {
      text: '–ù–∞–∂–º–∏—Ç–µ –º–µ–Ω—è',
      variant: 'primary',
      size: 'medium',
      disabled: false,
      loading: false,
      icon: '',
      iconPosition: 'left',
      action: 'none',
      linkUrl: '',
    },
    styles: {
      ...defaultStyles,
      backgroundColor: '#3b82f6',
      color: '#ffffff',
      borderColor: '#3b82f6',
      borderRadius: 6,
      textAlign: 'center',
      fontWeight: 'bold',
    },
    animations: [
      {
        id: 'click',
        name: '–ù–∞–∂–∞—Ç–∏–µ',
        type: 'scale',
        duration: 150,
        delay: 0,
        easing: 'ease-out',
        trigger: 'click',
        properties: { transform: ['scale(1)', 'scale(0.95)', 'scale(1)'] },
      },
    ],
    dataBinding: {
      source: 'custom',
      field: 'clicked',
    },
  },
  {
    type: 'input' as ComponentType,
    title: '–ü–æ–ª–µ –≤–≤–æ–¥–∞',
    description: '–ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π',
    icon: 'üìù',
    category: 'forms' as ComponentCategory,
    settings: {
      type: 'text',
      placeholder: '–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ...',
      required: false,
      disabled: false,
      readonly: false,
      maxLength: 255,
      minLength: 0,
      pattern: '',
      validation: {
        required: false,
        min: 0,
        max: 255,
        pattern: '',
        custom: '',
      },
    },
    styles: {
      ...defaultStyles,
      backgroundColor: '#ffffff',
      borderColor: '#d1d5db',
      borderWidth: 1,
      borderRadius: 6,
    },
    dataBinding: {
      source: 'custom',
      field: 'value',
    },
  },
  {
    type: 'select' as ComponentType,
    title: '–í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫',
    description: '–°–ø–∏—Å–æ–∫ –≤—ã–±–æ—Ä–∞ —Å –ø–æ–∏—Å–∫–æ–º',
    icon: 'üìã',
    category: 'forms' as ComponentCategory,
    settings: {
      options: [
        { value: 'option1', label: '–û–ø—Ü–∏—è 1' },
        { value: 'option2', label: '–û–ø—Ü–∏—è 2' },
      ],
      multiple: false,
      searchable: true,
      clearable: true,
      placeholder: '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é...',
      disabled: false,
    },
    styles: {
      ...defaultStyles,
      backgroundColor: '#ffffff',
      borderColor: '#d1d5db',
      borderWidth: 1,
      borderRadius: 6,
    },
    dataBinding: {
      source: 'custom',
      field: 'selectedValue',
    },
  },
];

// ===================== –£—Ç–∏–ª–∏—Ç—ã =====================

export function createComponent(
  type: ComponentType, 
  overrides: Partial<ComponentConfig> = {}
): ComponentConfig {
  const baseComponent = PROFESSIONAL_COMPONENTS.find(comp => comp.type === type);
  
  if (!baseComponent) {
    throw new Error(`Component type ${type} not found`);
  }

  const id = `component-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
  
  return {
    id,
    type,
    title: baseComponent.title || '',
    description: baseComponent.description || '',
    icon: baseComponent.icon || 'üì¶',
    category: baseComponent.category || 'custom',
    position: { x: 0, y: 0 },
    size: { width: 300, height: 200 },
    zIndex: 1,
    locked: false,
    settings: { ...baseComponent.settings },
    styles: { ...baseComponent.styles },
    animations: [...(baseComponent.animations || [])],
    conditions: [],
    dataBinding: { ...baseComponent.dataBinding },
    version: 1,
    createdAt: new Date(),
    updatedAt: new Date(),
    ...overrides,
  };
}

export function getComponentsByCategory(category: ComponentCategory): Partial<ComponentConfig>[] {
  return PROFESSIONAL_COMPONENTS.filter(comp => comp.category === category);
}

export function getComponentByType(type: ComponentType): Partial<ComponentConfig> | undefined {
  return PROFESSIONAL_COMPONENTS.find(comp => comp.type === type);
}
