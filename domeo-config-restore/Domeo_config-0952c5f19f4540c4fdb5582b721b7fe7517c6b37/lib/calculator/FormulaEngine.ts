/**
 * üöÄ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –î–í–ò–ñ–û–ö –§–û–†–ú–£–õ
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª—é–±—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –ª–æ–≥–∏–∫—É, —É—Å–ª–æ–≤–∏—è
 */

export interface Variable {
  id: string;
  name: string;
  type: 'number' | 'string' | 'boolean' | 'array' | 'object' | 'date';
  value: any;
  source?: 'input' | 'catalog' | 'api' | 'formula' | 'constant';
  validation?: ValidationRule[];
  dependencies?: string[];
}

export interface ValidationRule {
  type: 'min' | 'max' | 'required' | 'regex' | 'custom';
  value?: any;
  message: string;
  customFunction?: (value: any) => boolean;
}

export interface Formula {
  id: string;
  name: string;
  expression: string;
  description?: string;
  category?: string;
  variables: string[]; // IDs –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  resultType: 'number' | 'string' | 'boolean' | 'array' | 'object';
  conditions?: ConditionalRule[];
}

export interface ConditionalRule {
  condition: string; // –õ–æ–≥–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
  formula: string;   // –§–æ—Ä–º—É–ª–∞ –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ true
  elseFormula?: string; // –§–æ—Ä–º—É–ª–∞ –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ false
}

export class FormulaEngine {
  private variables: Map<string, Variable> = new Map();
  private formulas: Map<string, Formula> = new Map();
  private cache: Map<string, any> = new Map();
  
  // üîß –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
  private mathFunctions = {
    // –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    add: (a: number, b: number) => a + b,
    subtract: (a: number, b: number) => a - b,
    multiply: (a: number, b: number) => a * b,
    divide: (a: number, b: number) => b !== 0 ? a / b : 0,
    power: (a: number, b: number) => Math.pow(a, b),
    sqrt: (a: number) => Math.sqrt(a),
    
    // –¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è
    sin: (a: number) => Math.sin(a),
    cos: (a: number) => Math.cos(a),
    tan: (a: number) => Math.tan(a),
    
    // –õ–æ–≥–∞—Ä–∏—Ñ–º—ã
    log: (a: number) => Math.log(a),
    log10: (a: number) => Math.log10(a),
    
    // –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ
    round: (a: number, decimals = 0) => Math.round(a * Math.pow(10, decimals)) / Math.pow(10, decimals),
    ceil: (a: number) => Math.ceil(a),
    floor: (a: number) => Math.floor(a),
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    min: (...args: number[]) => Math.min(...args),
    max: (...args: number[]) => Math.max(...args),
    avg: (...args: number[]) => args.reduce((a, b) => a + b, 0) / args.length,
    sum: (...args: number[]) => args.reduce((a, b) => a + b, 0),
    
    // –£—Å–ª–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    if: (condition: boolean, trueValue: any, falseValue: any) => condition ? trueValue : falseValue,
    
    // –°—Ç—Ä–æ–∫–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    concat: (...args: string[]) => args.join(''),
    length: (str: string) => str.length,
    upper: (str: string) => str.toUpperCase(),
    lower: (str: string) => str.toLowerCase(),
    
    // –§—É–Ω–∫—Ü–∏–∏ –º–∞—Å—Å–∏–≤–æ–≤
    count: (arr: any[]) => arr.length,
    first: (arr: any[]) => arr[0],
    last: (arr: any[]) => arr[arr.length - 1],
    
    // –§—É–Ω–∫—Ü–∏–∏ –¥–∞—Ç
    now: () => new Date(),
    year: (date: Date) => date.getFullYear(),
    month: (date: Date) => date.getMonth() + 1,
    day: (date: Date) => date.getDate(),
    
    // –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    pmt: (rate: number, nper: number, pv: number) => {
      // –†–∞—Å—á–µ—Ç –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç—É
      if (rate === 0) return -pv / nper;
      return -pv * (rate * Math.pow(1 + rate, nper)) / (Math.pow(1 + rate, nper) - 1);
    },
    
    // –ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    abs: (a: number) => Math.abs(a),
    sign: (a: number) => Math.sign(a),
    random: () => Math.random(),
    
    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º
    getPrice: (productId: string) => this.getCatalogValue(productId, 'price'),
    getProperty: (productId: string, property: string) => this.getCatalogValue(productId, property),
    filterProducts: (categoryId: string, filters: any) => this.filterCatalogProducts(categoryId, filters),
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    custom: (functionName: string, ...args: any[]) => this.executeCustomFunction(functionName, args)
  };

  /**
   * üìù –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
   */
  addVariable(variable: Variable): void {
    this.variables.set(variable.id, variable);
    this.clearCache();
  }

  /**
   * üìù –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É–ª—É
   */
  addFormula(formula: Formula): void {
    this.formulas.set(formula.id, formula);
    this.clearCache();
  }

  /**
   * üî¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
   */
  setVariable(id: string, value: any): void {
    const variable = this.variables.get(id);
    if (variable) {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (variable.validation) {
        this.validateValue(value, variable.validation);
      }
      
      variable.value = value;
      this.clearCache();
    }
  }

  /**
   * üßÆ –í—ã—á–∏—Å–ª–∏—Ç—å —Ñ–æ—Ä–º—É–ª—É
   */
  calculate(formulaId: string): any {
    const cacheKey = `formula_${formulaId}`;
    
    if (this.cache.has(cacheKey)) {
      return this.cache.get(cacheKey);
    }

    const formula = this.formulas.get(formulaId);
    if (!formula) {
      throw new Error(`–§–æ—Ä–º—É–ª–∞ ${formulaId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }

    try {
      let result;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
      if (formula.conditions && formula.conditions.length > 0) {
        for (const rule of formula.conditions) {
          if (this.evaluateCondition(rule.condition)) {
            result = this.evaluateExpression(rule.formula);
            break;
          } else if (rule.elseFormula) {
            result = this.evaluateExpression(rule.elseFormula);
            break;
          }
        }
      } else {
        result = this.evaluateExpression(formula.expression);
      }

      this.cache.set(cacheKey, result);
      return result;
      
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª—ã ${formulaId}:`, error);
      throw error;
    }
  }

  /**
   * üîç –í—ã—á–∏—Å–ª–∏—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
   */
  private evaluateExpression(expression: string): any {
    // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è
    let processedExpression = expression;
    
    // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    for (const [id, variable] of this.variables) {
      const regex = new RegExp(`\\b${id}\\b`, 'g');
      processedExpression = processedExpression.replace(regex, JSON.stringify(variable.value));
    }

    // –ó–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    processedExpression = this.replaceFunctions(processedExpression);

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ
    return this.safeEvaluate(processedExpression);
  }

  /**
   * üîß –ó–∞–º–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–π –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏
   */
  private replaceFunctions(expression: string): string {
    // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π
    const functionRegex = /(\w+)\((.*?)\)/g;
    
    return expression.replace(functionRegex, (match, functionName, args) => {
      if (this.mathFunctions[functionName as keyof typeof this.mathFunctions]) {
        const parsedArgs = this.parseArguments(args);
        const result = (this.mathFunctions as any)[functionName](...parsedArgs);
        return JSON.stringify(result);
      }
      return match;
    });
  }

  /**
   * üìä –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
   */
  private parseArguments(argsString: string): any[] {
    if (!argsString.trim()) return [];
    
    const args = [];
    let currentArg = '';
    let parenthesesCount = 0;
    let inQuotes = false;
    
    for (let i = 0; i < argsString.length; i++) {
      const char = argsString[i];
      
      if (char === '"' && argsString[i-1] !== '\\') {
        inQuotes = !inQuotes;
      }
      
      if (!inQuotes) {
        if (char === '(') parenthesesCount++;
        if (char === ')') parenthesesCount--;
        
        if (char === ',' && parenthesesCount === 0) {
          args.push(this.parseValue(currentArg.trim()));
          currentArg = '';
          continue;
        }
      }
      
      currentArg += char;
    }
    
    if (currentArg.trim()) {
      args.push(this.parseValue(currentArg.trim()));
    }
    
    return args;
  }

  /**
   * üîç –ü–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏—è
   */
  private parseValue(value: string): any {
    // –ß–∏—Å–ª–æ
    if (/^-?\d+\.?\d*$/.test(value)) {
      return parseFloat(value);
    }
    
    // –°—Ç—Ä–æ–∫–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
    if (value.startsWith('"') && value.endsWith('"')) {
      return value.slice(1, -1);
    }
    
    // –ë—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ
    if (value === 'true') return true;
    if (value === 'false') return false;
    if (value === 'null') return null;
    
    // –ú–∞—Å—Å–∏–≤
    if (value.startsWith('[') && value.endsWith(']')) {
      try {
        return JSON.parse(value);
      } catch {
        return value;
      }
    }
    
    // –û–±—ä–µ–∫—Ç
    if (value.startsWith('{') && value.endsWith('}')) {
      try {
        return JSON.parse(value);
      } catch {
        return value;
      }
    }
    
    return value;
  }

  /**
   * üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ
   */
  private safeEvaluate(expression: string): any {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      const dangerousPatterns = [
        /eval\s*\(/,
        /Function\s*\(/,
        /setTimeout\s*\(/,
        /setInterval\s*\(/,
        /import\s*\(/,
        /require\s*\(/
      ];
      
      for (const pattern of dangerousPatterns) {
        if (pattern.test(expression)) {
          throw new Error('–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ');
        }
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Function constructor –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
      return new Function(`"use strict"; return (${expression})`)();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è:', expression, error);
      throw error;
    }
  }

  /**
   * ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
   */
  private validateValue(value: any, rules: ValidationRule[]): void {
    for (const rule of rules) {
      switch (rule.type) {
        case 'required':
          if (value === null || value === undefined || value === '') {
            throw new Error(rule.message);
          }
          break;
          
        case 'min':
          if (typeof value === 'number' && value < rule.value) {
            throw new Error(rule.message);
          }
          break;
          
        case 'max':
          if (typeof value === 'number' && value > rule.value) {
            throw new Error(rule.message);
          }
          break;
          
        case 'regex':
          if (typeof value === 'string' && !new RegExp(rule.value).test(value)) {
            throw new Error(rule.message);
          }
          break;
          
        case 'custom':
          if (rule.customFunction && !rule.customFunction(value)) {
            throw new Error(rule.message);
          }
          break;
      }
    }
  }

  /**
   * üîç –í—ã—á–∏—Å–ª–∏—Ç—å —É—Å–ª–æ–≤–∏–µ
   */
  private evaluateCondition(condition: string): boolean {
    try {
      const result = this.evaluateExpression(condition);
      return Boolean(result);
    } catch {
      return false;
    }
  }

  /**
   * üóÇÔ∏è –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
   */
  private async getCatalogValue(productId: string, property: string): Promise<any> {
    try {
      const { catalogDataSource } = await import('./CatalogDataSource');
      return await catalogDataSource.getProductProperty(productId, property);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
      return null;
    }
  }

  /**
   * üîç –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–∞
   */
  private async filterCatalogProducts(categoryId: string, filters: any): Promise<any[]> {
    try {
      const { catalogDataSource } = await import('./CatalogDataSource');
      return await catalogDataSource.findProducts({ categoryId, ...filters });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
      return [];
    }
  }

  /**
   * üîß –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é
   */
  private executeCustomFunction(functionName: string, args: any[]): any {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è ${functionName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
  }

  /**
   * üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
   */
  private clearCache(): void {
    this.cache.clear();
  }

  /**
   * üìä –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
   */
  getVariables(): Variable[] {
    return Array.from(this.variables.values());
  }

  /**
   * üìä –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–æ—Ä–º—É–ª—ã
   */
  getFormulas(): Formula[] {
    return Array.from(this.formulas.values());
  }

  /**
   * üîç –ù–∞–π—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ñ–æ—Ä–º—É–ª—ã
   */
  getFormulaDependencies(formulaId: string): string[] {
    const formula = this.formulas.get(formulaId);
    if (!formula) return [];
    
    const dependencies = new Set<string>();
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    for (const [id] of this.variables) {
      const regex = new RegExp(`\\b${id}\\b`);
      if (regex.test(formula.expression)) {
        dependencies.add(id);
      }
    }
    
    return Array.from(dependencies);
  }

  /**
   * üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –≤—Å–µ –∑–∞–≤–∏—Å–∏–º—ã–µ —Ñ–æ—Ä–º—É–ª—ã
   */
  recalculateAll(): void {
    this.clearCache();
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ñ–æ—Ä–º—É–ª—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    const calculationOrder = this.getCalculationOrder();
    
    for (const formulaId of calculationOrder) {
      this.calculate(formulaId);
    }
  }

  /**
   * üìã –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
   */
  private getCalculationOrder(): string[] {
    // –¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
    const visited = new Set<string>();
    const order: string[] = [];
    
    const visit = (formulaId: string) => {
      if (visited.has(formulaId)) return;
      visited.add(formulaId);
      
      const dependencies = this.getFormulaDependencies(formulaId);
      for (const dep of dependencies) {
        // –ï—Å–ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å - —ç—Ç–æ –¥—Ä—É–≥–∞—è —Ñ–æ—Ä–º—É–ª–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã—á–∏—Å–ª—è–µ–º –µ—ë
        if (this.formulas.has(dep)) {
          visit(dep);
        }
      }
      
      order.push(formulaId);
    };
    
    for (const [formulaId] of this.formulas) {
      visit(formulaId);
    }
    
    return order;
  }
}
