/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
 */

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
export function safeLog(message: string, ...args: any[]): void {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É
    const hasCyrillic = /[–∞-—è—ë]/i.test(message);
    
    if (hasCyrillic) {
      // –î–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º console.log —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏
      console.log(Buffer.from(message, 'utf8').toString('utf8'), ...args);
    } else {
      // –î–ª—è –ª–∞—Ç–∏–Ω–∏—Ü—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π console.log
      console.log(message, ...args);
    }
  } catch (error) {
    // Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π console.log
    console.log(message, ...args);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
export function safeLogObject(obj: any, label?: string): void {
  try {
    const jsonString = JSON.stringify(obj, null, 2);
    const hasCyrillic = /[–∞-—è—ë]/i.test(jsonString);
    
    if (hasCyrillic) {
      if (label) {
        console.log(Buffer.from(label, 'utf8').toString('utf8'));
      }
      console.log(Buffer.from(jsonString, 'utf8').toString('utf8'));
    } else {
      if (label) {
        console.log(label);
      }
      console.log(jsonString);
    }
  } catch (error) {
    // Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π console.log
    if (label) {
      console.log(label);
    }
    console.log(obj);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —ç–º–æ–¥–∑–∏ –∏ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
export function logWithEmoji(emoji: string, message: string, ...args: any[]): void {
  safeLog(`${emoji} ${message}`, ...args);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
export function safeLogError(message: string, error?: any): void {
  try {
    const hasCyrillic = /[–∞-—è—ë]/i.test(message);
    
    if (hasCyrillic) {
      console.error(Buffer.from(message, 'utf8').toString('utf8'));
    } else {
      console.error(message);
    }
    
    if (error) {
      console.error(error);
    }
  } catch (e) {
    console.error(message, error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
export function logSuccess(message: string, ...args: any[]): void {
  logWithEmoji('‚úÖ', message, ...args);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
export function logWarning(message: string, ...args: any[]): void {
  logWithEmoji('‚ö†Ô∏è', message, ...args);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
export function logInfo(message: string, ...args: any[]): void {
  logWithEmoji('‚ÑπÔ∏è', message, ...args);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ª–∞–¥–∫–∏
export function logDebug(message: string, ...args: any[]): void {
  if (process.env.NODE_ENV === 'development') {
    logWithEmoji('üîç', message, ...args);
  }
}
