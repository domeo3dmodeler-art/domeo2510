/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */

interface CacheItem<T> {
  data: T;
  timestamp: number;
  ttl: number; // Time to live –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
}

class MemoryCache {
  private cache = new Map<string, CacheItem<any>>();

  set<T>(key: string, data: T, ttlMs: number = 5 * 60 * 1000): void {
    this.cache.set(key, {
      data,
      timestamp: Date.now(),
      ttl: ttlMs
    });
  }

  get<T>(key: string): T | null {
    const item = this.cache.get(key);
    
    if (!item) {
      return null;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    if (Date.now() - item.timestamp > item.ttl) {
      this.cache.delete(key);
      return null;
    }

    return item.data;
  }

  has(key: string): boolean {
    const item = this.cache.get(key);
    
    if (!item) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    if (Date.now() - item.timestamp > item.ttl) {
      this.cache.delete(key);
      return false;
    }

    return true;
  }

  delete(key: string): boolean {
    return this.cache.delete(key);
  }

  clear(): void {
    this.cache.clear();
  }

  size(): number {
    return this.cache.size;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
  getStats(): { size: number; keys: string[] } {
    return {
      size: this.cache.size,
      keys: Array.from(this.cache.keys())
    };
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
export const cache = new MemoryCache();

/**
 * –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
 */
export function cached<T extends (...args: any[]) => any>(
  fn: T,
  keyGenerator: (...args: Parameters<T>) => string,
  ttlMs: number = 5 * 60 * 1000
): T {
  return ((...args: Parameters<T>) => {
    const key = keyGenerator(...args);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cached = cache.get(key);
    if (cached !== null) {
      console.log(`üéØ Cache hit for key: ${key}`);
      return cached;
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏ –∫—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log(`üíæ Cache miss for key: ${key}, executing function`);
    const result = fn(...args);
    
    // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - Promise, –∫—ç—à–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if (result instanceof Promise) {
      return result.then(data => {
        cache.set(key, data, ttlMs);
        return data;
      });
    } else {
      cache.set(key, result, ttlMs);
      return result;
    }
  }) as T;
}

/**
 * –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Prisma –∑–∞–ø—Ä–æ—Å–æ–≤
 */
export async function cachedPrismaQuery<T>(
  key: string,
  queryFn: () => Promise<T>,
  ttlMs: number = 5 * 60 * 1000
): Promise<T> {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  const cached = cache.get<T>(key);
  if (cached !== null) {
    console.log(`üéØ Cache hit for Prisma query: ${key}`);
    return cached;
  }

  // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –∫—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  console.log(`üíæ Cache miss for Prisma query: ${key}, executing query`);
  const result = await queryFn();
  cache.set(key, result, ttlMs);
  
  return result;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –∫–ª—é—á–µ–π –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export const cacheKeys = {
  // –ö—ç—à –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–≤–µ—Ä–µ–π
  availableDoorParams: (style: string, model: string) => 
    `available_params:doors:${style}:${model}`,
  
  // –ö—ç—à –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  categoryProducts: (categoryName: string) => 
    `products:category:${categoryName}`,
  
  // –ö—ç—à –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã
  hardwareKits: () => 
    `products:hardware_kits`,
  
  // –ö—ç—à –¥–ª—è —Ä—É—á–µ–∫
  handles: () => 
    `products:handles`,
  
  // –ö—ç—à –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–∞—Ç–∞–ª–æ–≥–∞
  catalogCategories: () => 
    `catalog:categories`,
  
  // –ö—ç—à –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  adminStats: () => 
    `stats:admin`,
  
  // –ö—ç—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  users: () => 
    `users:all`
};

/**
 * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
 */
export function clearCacheByPattern(pattern: string): number {
  let cleared = 0;
  const keys = Array.from(cache['cache'].keys());
  
  for (const key of keys) {
    if (key.includes(pattern)) {
      cache.delete(key);
      cleared++;
    }
  }
  
  console.log(`üßπ Cleared ${cleared} cache entries matching pattern: ${pattern}`);
  return cleared;
}

/**
 * Middleware –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
 */
export function invalidateCacheOnChange(entityType: string): void {
  // –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
  if (entityType === 'product') {
    clearCacheByPattern('products:');
    clearCacheByPattern('available_params:');
  }
  
  // –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  if (entityType === 'category') {
    clearCacheByPattern('catalog:');
    clearCacheByPattern('products:category:');
  }
  
  // –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  if (entityType === 'user') {
    clearCacheByPattern('users:');
  }
}

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∫—ç—à–∞
 */
export function logCacheStats(): void {
  const stats = cache.getStats();
  console.log('üìä Cache Statistics:', {
    size: stats.size,
    keys: stats.keys.slice(0, 10), // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∫–ª—é—á–µ–π
    totalKeys: stats.keys.length
  });
}

export function warmupCache(): void {
  console.log('üî• Warming up cache...');
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  console.log('‚úÖ Cache warmup completed');
}
