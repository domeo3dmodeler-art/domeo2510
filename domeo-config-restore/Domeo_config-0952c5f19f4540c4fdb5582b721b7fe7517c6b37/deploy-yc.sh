#!/bin/bash

# üöÄ –î–µ–ø–ª–æ–π –Ω–∞ Yandex Cloud VM
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./deploy-yc.sh [staging|production]

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
ENVIRONMENT=${1:-production}
if [[ "$ENVIRONMENT" != "staging" && "$ENVIRONMENT" != "production" ]]; then
    error "–ù–µ–≤–µ—Ä–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: staging –∏–ª–∏ production"
    exit 1
fi

log "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π –Ω–∞ YC VM –¥–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: $ENVIRONMENT"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
if [[ "$ENVIRONMENT" == "staging" ]]; then
    VM_HOST=${STAGING_HOST:-"89.169.189.66"}
    VM_PORT=${STAGING_PORT:-"3001"}
    VM_USER=${STAGING_USER:-"ubuntu"}
    VM_PATH="/opt/domeo-staging"
else
    VM_HOST=${PROD_HOST:-"130.193.40.35"}
    VM_PORT=${PROD_PORT:-"3000"}
    VM_USER=${PROD_USER:-"ubuntu"}
    VM_PATH="/opt/domeo"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if [[ -z "$VM_SSH_KEY" ]]; then
    error "VM_SSH_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export VM_SSH_KEY=/path/to/ssh/key"
    exit 1
fi

if [[ ! -f "$VM_SSH_KEY" ]]; then
    error "SSH –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: $VM_SSH_KEY"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VM
log "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VM ($VM_HOST)..."
if ! ssh -i "$VM_SSH_KEY" -o ConnectTimeout=10 -o StrictHostKeyChecking=no "$VM_USER@$VM_HOST" "echo 'Connection OK'"; then
    error "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VM"
    exit 1
fi

success "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VM —É—Å–ø–µ—à–Ω–æ"

# –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –Ω–∞ VM
log "üíæ –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –Ω–∞ VM..."
ssh -i "$VM_SSH_KEY" -o StrictHostKeyChecking=no "$VM_USER@$VM_HOST" << EOF
cd $VM_PATH
if [ -d ".next" ]; then
    tar -czf backup-\$(date +%Y%m%d_%H%M%S).tar.gz .next package.json package-lock.json prisma
    echo "‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω"
else
    echo "‚ö†Ô∏è –ü–∞–ø–∫–∞ .next –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±—ç–∫–∞–ø"
fi
EOF

# –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–µ–∫—Ç –ª–æ–∫–∞–ª—å–Ω–æ
log "üî® –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–µ–∫—Ç –ª–æ–∫–∞–ª—å–Ω–æ..."
if [[ "$ENVIRONMENT" == "staging" ]]; then
    npm run build:staging
else
    npm run build:prod
fi

# –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ –¥–ª—è –¥–µ–ø–ª–æ—è
log "üì¶ –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ –¥–ª—è –¥–µ–ø–ª–æ—è..."
tar -czf domeo-deploy.tar.gz \
    .next \
    package.json \
    package-lock.json \
    prisma \
    docker-compose.prod.yml \
    Dockerfile \
    nginx.conf \
    env.production.example

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—Ä—Ö–∏–≤ –Ω–∞ VM
log "üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—Ä—Ö–∏–≤ –Ω–∞ VM..."
scp -i "$VM_SSH_KEY" -o StrictHostKeyChecking=no domeo-deploy.tar.gz "$VM_USER@$VM_HOST:/tmp/"

# –î–µ–ø–ª–æ–∏–º –Ω–∞ VM
log "üöÄ –î–µ–ø–ª–æ–∏–º –Ω–∞ VM..."
ssh -i "$VM_SSH_KEY" -o StrictHostKeyChecking=no "$VM_USER@$VM_HOST" << EOF
set -e

cd $VM_PATH

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
if command -v docker-compose &> /dev/null; then
    docker-compose -f docker-compose.prod.yml down || true
fi

# –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
tar -xzf /tmp/domeo-deploy.tar.gz
rm /tmp/domeo-deploy.tar.gz

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º production –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
npm ci --only=production

# –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î
npx prisma migrate deploy

# –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
docker-compose -f docker-compose.prod.yml up -d

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
sleep 30

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
docker-compose -f docker-compose.prod.yml ps
EOF

# –ü—Ä–æ–≤–µ—Ä—è–µ–º health check
log "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º health check..."
sleep 30
if curl -f "http://$VM_HOST:$VM_PORT/api/health"; then
    success "‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–µ–Ω!"
    success "üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ: http://$VM_HOST:$VM_PORT"
else
    error "‚ùå Health check –Ω–µ –ø—Ä–æ—à–µ–ª"
    
    # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    warning "üîÑ –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è..."
    ssh -i "$VM_SSH_KEY" -o StrictHostKeyChecking=no "$VM_USER@$VM_HOST" << EOF
cd $VM_PATH
docker-compose -f docker-compose.prod.yml down
# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞
BACKUP_FILE=\$(ls -t backup-*.tar.gz | head -n1)
if [ -n "\$BACKUP_FILE" ]; then
    tar -xzf "\$BACKUP_FILE"
    docker-compose -f docker-compose.prod.yml up -d
    echo "‚úÖ –û—Ç–∫–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω"
else
    echo "‚ùå –ë—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi
EOF
    exit 1
fi

# –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
rm domeo-deploy.tar.gz

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
log "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
ssh -i "$VM_SSH_KEY" -o StrictHostKeyChecking=no "$VM_USER@$VM_HOST" "cd $VM_PATH && docker-compose -f docker-compose.prod.yml ps"

success "üéâ –î–µ–ø–ª–æ–π –Ω–∞ YC VM –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
success "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: http://$VM_HOST:$VM_PORT/api/health"
success "üîç –õ–æ–≥–∏: ssh -i $VM_SSH_KEY $VM_USER@$VM_HOST 'cd $VM_PATH && docker-compose -f docker-compose.prod.yml logs -f'"

