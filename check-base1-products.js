const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkBase1Products() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –¢–û–í–ê–†–û–í –ú–û–î–ï–õ–ò DomeoDoors_Base_1');
  console.log('='.repeat(60));
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –º–æ–¥–µ–ª–∏ DomeoDoors_Base_1
  const allProducts = await prisma.product.findMany({
    where: {
      catalog_category: {
        name: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏'
      }
    },
    select: {
      id: true,
      sku: true,
      name: true,
      properties_data: true
    }
  });
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –º–æ–¥–µ–ª–∏ DomeoDoors_Base_1
  const products = allProducts.filter(product => {
    const properties = product.properties_data ?
      (typeof product.properties_data === 'string' ? JSON.parse(product.properties_data) : product.properties_data) : {};
    return properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'] === 'DomeoDoors_Base_1';
  });
  
  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –º–æ–¥–µ–ª–∏ DomeoDoors_Base_1: ${products.length}`);
  
  if (products.length === 0) {
    console.log('‚ùå –¢–æ–≤–∞—Ä—ã –º–æ–¥–µ–ª–∏ DomeoDoors_Base_1 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
    await prisma.$disconnect();
    return;
  }
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
  const analysis = {};
  
  products.forEach(product => {
    const properties = product.properties_data ?
      (typeof product.properties_data === 'string' ? JSON.parse(product.properties_data) : product.properties_data) : {};
    
    const style = properties['Domeo_–°—Ç–∏–ª—å Web'] || 'N/A';
    const model = properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'] || 'N/A';
    const finish = properties['–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è'] || 'N/A';
    const color = properties['Domeo_–¶–≤–µ—Ç'] || 'N/A';
    const width = properties['–®–∏—Ä–∏–Ω–∞/–º–º'] || 'N/A';
    const height = properties['–í—ã—Å–æ—Ç–∞/–º–º'] || 'N/A';
    const price = properties['–¶–µ–Ω–∞ –†–†–¶'] || 'N/A';
    
    const key = `${style}|${model}|${finish}|${color}|${width}|${height}`;
    
    if (!analysis[key]) {
      analysis[key] = {
        count: 0,
        products: [],
        style, model, finish, color, width, height, price
      };
    }
    
    analysis[key].count++;
    analysis[key].products.push({
      sku: product.sku,
      name: product.name,
      price: price
    });
  });
  
  console.log('\nüìã –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ö–û–ú–ë–ò–ù–ê–¶–ò–ò –ú–û–î–ï–õ–ò DomeoDoors_Base_1:');
  console.log('-'.repeat(80));
  
  Object.values(analysis).forEach((combo, index) => {
    console.log(`${index + 1}. ${combo.style} | ${combo.model} | ${combo.finish} | ${combo.color} | ${combo.width}√ó${combo.height}`);
    console.log(`   –¢–æ–≤–∞—Ä–æ–≤: ${combo.count}, –¶–µ–Ω–∞: ${combo.price}`);
    console.log(`   SKU: ${combo.products.map(p => p.sku).join(', ')}`);
    console.log('');
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∏–∑ –æ—à–∏–±–∫–∏
  const targetCombo = '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è|DomeoDoors_Base_1|–ü–≠–¢|–ë–µ–∂–µ–≤—ã–π|700|2100';
  const targetComboExists = analysis[targetCombo];
  
  console.log('üéØ –ü–†–û–í–ï–†–ö–ê –ü–†–û–ë–õ–ï–ú–ù–û–ô –ö–û–ú–ë–ò–ù–ê–¶–ò–ò:');
  console.log('-'.repeat(50));
  console.log(`–ò—Å–∫–æ–º–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: ${targetCombo}`);
  
  if (targetComboExists) {
    console.log('‚úÖ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞!');
    console.log(`   –¢–æ–≤–∞—Ä–æ–≤: ${targetComboExists.count}`);
    console.log(`   –¶–µ–Ω–∞: ${targetComboExists.price}`);
  } else {
    console.log('‚ùå –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –ù–ï –Ω–∞–π–¥–µ–Ω–∞!');
    
    // –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    console.log('\nüîç –ü–û–•–û–ñ–ò–ï –ö–û–ú–ë–ò–ù–ê–¶–ò–ò:');
    Object.values(analysis).forEach(combo => {
      if (combo.model === 'DomeoDoors_Base_1' && combo.style === '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è') {
        console.log(`   ${combo.finish} | ${combo.color} | ${combo.width}√ó${combo.height} (${combo.count} —Ç–æ–≤–∞—Ä–æ–≤)`);
      }
    });
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∫—Ä—ã—Ç–∏—è –∏ —Ü–≤–µ—Ç–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ DomeoDoors_Base_1
  const availableFinishes = new Set();
  const availableColors = new Set();
  const availableSizes = new Set();
  
  Object.values(analysis).forEach(combo => {
    if (combo.model === 'DomeoDoors_Base_1' && combo.style === '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è') {
      availableFinishes.add(combo.finish);
      availableColors.add(combo.color);
      availableSizes.add(`${combo.width}√ó${combo.height}`);
    }
  });
  
  console.log('\nüìä –î–û–°–¢–£–ü–ù–´–ï –í–ê–†–ò–ê–ù–¢–´ –î–õ–Ø –ú–û–î–ï–õ–ò DomeoDoors_Base_1 (–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è):');
  console.log('-'.repeat(50));
  console.log(`–ü–æ–∫—Ä—ã—Ç–∏—è: ${Array.from(availableFinishes).join(', ')}`);
  console.log(`–¶–≤–µ—Ç–∞: ${Array.from(availableColors).join(', ')}`);
  console.log(`–†–∞–∑–º–µ—Ä—ã: ${Array.from(availableSizes).join(', ')}`);
  
  await prisma.$disconnect();
}

checkBase1Products().catch(console.error);
