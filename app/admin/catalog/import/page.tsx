'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { Button, Card, Badge } from '../../../../components/ui';
import { Upload, Download, FileText, CheckCircle, XCircle, AlertTriangle, History, RefreshCw, Trash2, Database, Upload as UploadIcon, ArrowRight, ArrowLeft, Settings } from 'lucide-react';
import * as XLSX from 'xlsx';
import { useImportTemplate, useFileAnalysis } from '../../../../hooks/useImportTemplate';
import CatalogTree from '../../../../components/admin/CatalogTree';
import TemplateManager from '../../../../components/admin/TemplateManager';

interface ImportHistoryItem {
  id: string;
  filename: string;
  imported_count: number;
  error_count: number;
  status: string;
  created_at: string;
}

interface PriceListData {
  headers: string[];
  rows: any[][];
  totalRows: number;
}

interface PhotoData {
  files: File[];
  totalCount: number;
}

interface PropertyMapping {
  fieldName: string;
  displayName: string;
  dataType: 'text' | 'number' | 'select' | 'boolean' | 'image';
  isRequired: boolean;
  isFilterable: boolean;
  isVisible: boolean;
  options?: string[];
  unit?: string;
}

interface CatalogCategory {
  id: string;
  name: string;
  level: number;
  parent_id?: string;
  product_count?: number;
  displayName?: string;
}

type ImportStep = 'catalog' | 'template' | 'upload' | 'validation' | 'import' | 'complete';
type PhotoStep = 'photo-catalog' | 'photo-mapping' | 'photo-upload' | 'photo-complete';
type TabType = 'products' | 'photos' | 'templates';

export default function CatalogImportPage() {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [activeTab, setActiveTab] = useState<TabType>('products');
  const [currentStep, setCurrentStep] = useState<ImportStep>('catalog');
  const [currentPhotoStep, setCurrentPhotoStep] = useState<PhotoStep>('photo-catalog');
  const [priceListData, setPriceListData] = useState<PriceListData | null>(null);
  const [photoData, setPhotoData] = useState<PhotoData | null>(null);
  const [propertyMappings, setPropertyMappings] = useState<PropertyMapping[]>([]);
  const [isProcessing, setIsProcessing] = useState(false);
  const [selectedCatalogCategoryId, setSelectedCatalogCategoryId] = useState<string>('');
  const [selectedPhotoCategoryId, setSelectedPhotoCategoryId] = useState<string>('');
  const [requiredFields, setRequiredFields] = useState<any[]>([]);
  const [completedSteps, setCompletedSteps] = useState<ImportStep[]>([]);
  const [completedPhotoSteps, setCompletedPhotoSteps] = useState<PhotoStep[]>([]);
  const [showProgressModal, setShowProgressModal] = useState(false);
  const [progressMessage, setProgressMessage] = useState('');
  
  // –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞
  const [fileHeaders, setFileHeaders] = useState<any[]>([]);
  const [fieldMappings, setFieldMappings] = useState<any[]>([]);
  
  // –•—É–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏
  const { template, loading: templateLoading, loadTemplate, createTemplate } = useImportTemplate();
  const { analyzeFile, analyzing } = useFileAnalysis();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const [importHistory, setImportHistory] = useState<ImportHistoryItem[]>([]);
  const [loadingHistory, setLoadingHistory] = useState(false);
  const [catalogCategories, setCatalogCategories] = useState<CatalogCategory[]>([]);
  const [categorySearchTerm, setCategorySearchTerm] = useState('');
  const [photoCategorySearchTerm, setPhotoCategorySearchTerm] = useState('');
  const [uploadingPhotos, setUploadingPhotos] = useState(false);
  const [photoMappingProperty, setPhotoMappingProperty] = useState<string>('–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞');
  const [existingProductProperties, setExistingProductProperties] = useState<string[]>([]);
  const [loadingProperties, setLoadingProperties] = useState(false);
  const [selectedFields, setSelectedFields] = useState<Set<string>>(new Set());
  const [fieldSettings, setFieldSettings] = useState<Record<string, {
    displayName: string;
    isRequired: boolean;
    dataType: 'text' | 'number' | 'select' | 'boolean' | 'image';
  }>>({});

  useEffect(() => {
    loadImportHistory();
    loadCatalogCategories();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const urlParams = new URLSearchParams(window.location.search);
    const categoryParam = urlParams.get('category');
    if (categoryParam) {
      setSelectedCatalogCategoryId(categoryParam);
    }
  }, []);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  useEffect(() => {
    if (selectedCatalogCategoryId) {
      loadExistingProductProperties(selectedCatalogCategoryId);
    }
  }, [selectedCatalogCategoryId]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ñ–æ—Ç–æ
  useEffect(() => {
    if (selectedPhotoCategoryId) {
      loadExistingProductProperties(selectedPhotoCategoryId);
    }
  }, [selectedPhotoCategoryId]);

  const loadImportHistory = async () => {
    try {
      setLoadingHistory(true);
      const response = await fetch('/api/catalog/import?action=history');
      const data = await response.json();
      setImportHistory(data);
    } catch (error) {
      console.error('Error loading import history:', error);
    } finally {
      setLoadingHistory(false);
    }
  };

  const loadExistingProductProperties = async (categoryId: string) => {
    if (!categoryId) {
      setExistingProductProperties([]);
      return;
    }

    setLoadingProperties(true);
    try {
      const response = await fetch(`/api/catalog/products?categoryId=${categoryId}&limit=10`);
      const data = await response.json();
      
      console.log('Existing products response:', data);
      
      if (data.success && data.products && data.products.length > 0) {
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤
        const allProperties = new Set<string>();
        
        data.products.forEach((product: any) => {
          if (product.properties_data) {
            try {
              const properties = typeof product.properties_data === 'string' 
                ? JSON.parse(product.properties_data) 
                : product.properties_data;
              
              Object.keys(properties).forEach(key => {
                // –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è
                if (!['photos', 'id', 'created_at', 'updated_at'].includes(key)) {
                  allProperties.add(key);
                }
              });
            } catch (error) {
              console.error('Error parsing properties_data:', error);
            }
          }
        });
        
        setExistingProductProperties(Array.from(allProperties).sort());
        console.log('Loaded existing properties:', Array.from(allProperties));
      } else {
        setExistingProductProperties([]);
      }
    } catch (error) {
      console.error('Error loading existing product properties:', error);
      setExistingProductProperties([]);
    } finally {
      setLoadingProperties(false);
    }
  };

  const loadCatalogCategories = async () => {
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞...');
      const response = await fetch('/api/catalog/categories-flat');
      const data = await response.json();
      
      console.log('üì¶ –û—Ç–≤–µ—Ç API –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', data);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –Ω–æ–≤–æ–≥–æ API
      const categories = data.categories || [];
      
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
      console.log('–ü—Ä–∏–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categories[0]);
      
      // –ü—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      setCatalogCategories(categories);
      
      console.log('üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏:', categories.filter((c: CatalogCategory) => (c.product_count || 0) > 0).length);
      
    } catch (error) {
      console.error('Error loading catalog categories:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è CSV –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∞–π—Å–∞
  function createCSVFromPriceListData(rows: any[][], headers: string[]): string {
    let csvContent = '';
    csvContent += headers.map(header => `"${header.replace(/"/g, '""')}"`).join(',') + '\n';
    rows.forEach(row => {
      const csvRow = row.map(cell => {
        if (cell === null || cell === undefined) return '""';
        const cellStr = String(cell);
        if (cellStr.includes(',') || cellStr.includes('"') || cellStr.includes('\n')) {
          return `"${cellStr.replace(/"/g, '""')}"`;
        }
        return cellStr;
      }).join(',');
      csvContent += csvRow + '\n';
    });
    return csvContent;
  }

  const handleCatalogCategorySelect = (categoryId: string) => {
    setSelectedCatalogCategoryId(categoryId);
  };

  const handleCatalogComplete = async () => {
    setCompletedSteps(prev => [...prev, 'catalog']);
    setCurrentStep('template');
  };

  const handleTemplateComplete = () => {
    setCompletedSteps(prev => [...prev, 'template']);
    setCurrentStep('upload');
  };

  const handleFileUpload = async (file: File) => {
    setIsProcessing(true);
    try {
      const buffer = await file.arrayBuffer();
      const workbook = XLSX.read(buffer, { type: 'array' });
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

      if (jsonData.length < 2) {
        alert('–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö');
        return;
      }

      const headers = jsonData[0] as string[];
      const rows = jsonData.slice(1) as any[][];

      setPriceListData({
        headers,
        rows,
        totalRows: rows.length
      });

      setCompletedSteps(prev => [...prev, 'upload']);
      setCurrentStep('validation');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞');
    } finally {
      setIsProcessing(false);
    }
  };

  const handleValidationComplete = () => {
    setCompletedSteps(prev => [...prev, 'validation']);
    setCurrentStep('import');
  };

  const handlePhotosComplete = async (photoFiles: File[]) => {
    const photoData: PhotoData = {
      files: photoFiles,
      totalCount: photoFiles.length
    };
    
    setPhotoData(photoData);
    
    try {
      setUploadingPhotos(true);
      const formData = new FormData();
      
      photoFiles.forEach((photo) => {
        formData.append('photos', photo);
      });
      
      formData.append('category', selectedPhotoCategoryId);
      formData.append('mapping_property', photoMappingProperty);

      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...', photoFiles.length, '—Ñ–∞–π–ª–æ–≤');
      
      const response = await fetch('/api/admin/import/photos', {
        method: 'POST',
        body: formData
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }

      const result = await response.json();
      console.log('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', result);
      
      // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
      let reportMessage = `üì∏ –ó–ê–ì–†–£–ó–ö–ê –§–û–¢–û –ó–ê–í–ï–†–®–ï–ù–ê!\n\n`;
      reportMessage += `üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${result.uploaded || 0}\n`;
      reportMessage += `üîó –ü—Ä–∏–≤—è–∑–∞–Ω–æ –∫ —Ç–æ–≤–∞—Ä–∞–º: ${result.linked || 0}\n`;
      reportMessage += `‚ùå –û—à–∏–±–æ–∫: ${result.errors || 0}\n\n`;
      
      if (result.uploaded > 0) {
        reportMessage += `‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${result.uploaded} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n`;
      }
      
      if (result.linked > 0) {
        reportMessage += `üéØ ${result.linked} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ\n`;
      }
      
      if (result.errors > 0) {
        reportMessage += `‚ö†Ô∏è ${result.errors} —Ñ–∞–π–ª–æ–≤ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å\n`;
      }
      
      if (result.details && result.details.length > 0) {
        reportMessage += `\nüìã –î–µ—Ç–∞–ª–∏:\n`;
        result.details.forEach((detail: any) => {
          reportMessage += `‚Ä¢ ${detail.fileName}: ${detail.message}\n`;
        });
      }
      
      alert(reportMessage);
      
      setCompletedPhotoSteps(prev => [...prev, 'photo-upload']);
      setCurrentPhotoStep('photo-complete');
      
    } catch (error) {
      console.error('Error uploading photos:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ' + (error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    } finally {
      setUploadingPhotos(false);
    }
  };

  const getStepTitle = () => {
    if (activeTab === 'products') {
      switch (currentStep) {
        case 'catalog': return '–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞';
        case 'template': return '–ü—Ä–æ—Å–º–æ—Ç—Ä —à–∞–±–ª–æ–Ω–∞';
        case 'upload': return '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞';
        case 'validation': return '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è';
        case 'import': return '–ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤';
        case 'complete': return '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞';
        default: return '–ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤';
      }
    } else if (activeTab === 'photos') {
      switch (currentPhotoStep) {
        case 'photo-catalog': return '–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ñ–æ—Ç–æ';
        case 'photo-mapping': return '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏';
        case 'photo-upload': return '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π';
        case 'photo-complete': return '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ';
        default: return '–ò–º–ø–æ—Ä—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π';
      }
    } else if (activeTab === 'templates') {
      return '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏';
    }
    return '–ò–º–ø–æ—Ä—Ç';
  };

  const getStepDescription = () => {
    if (activeTab === 'products') {
      switch (currentStep) {
        case 'catalog': return '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤';
        case 'template': return '–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏ —Å–∫–∞—á–∞–π—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
        case 'upload': return '–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö';
        case 'validation': return '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª–µ–π —Ñ–∞–π–ª–∞ —à–∞–±–ª–æ–Ω—É';
        case 'import': return '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∏–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É';
        case 'complete': return '–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã';
        default: return '';
      }
    } else if (activeTab === 'photos') {
      switch (currentPhotoStep) {
        case 'photo-catalog': return '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π';
        case 'photo-mapping': return '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∫ —Ç–æ–≤–∞—Ä–∞–º';
        case 'photo-upload': return '–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤';
        case 'photo-complete': return '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã';
        default: return '';
      }
    } else if (activeTab === 'templates') {
      return '–°–æ–∑–¥–∞–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ –∏–º–ø–æ—Ä—Ç–∞';
    }
    return '';
  };

  const renderStepContent = () => {
    if (activeTab === 'products') {
      return renderProductStepContent();
    } else if (activeTab === 'photos') {
      return renderPhotoStepContent();
    } else if (activeTab === 'templates') {
      return (
        <div className="space-y-6">
          <div className="bg-gray-50 p-4 rounded-lg">
            <h4 className="font-medium text-gray-900 mb-2">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏</h4>
            <p className="text-gray-700 text-sm">
              –°–æ–∑–¥–∞–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            </p>
          </div>
          
          <div className="text-center py-8">
            <div className="text-4xl mb-4">üìã</div>
            <h3 className="text-lg font-semibold text-gray-900 mb-2">–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</h3>
            <p className="text-gray-600">
              –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö
            </p>
          </div>
        </div>
      );
    }
    return null;
  };

  const renderProductStepContent = () => {
    switch (currentStep) {
      case 'catalog':
        return (
          <div className="space-y-6">
            <div className="grid gap-4">
              <h4 className="text-lg font-medium">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞—Ç–∞–ª–æ–≥–∞:</h4>
              
              {/* –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º */}
              <div className="relative">
                <input
                  type="text"
                  placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏..."
                  value={categorySearchTerm}
                  onChange={(e) => setCategorySearchTerm(e.target.value)}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-black focus:border-transparent"
                />
                <div className="absolute right-3 top-2.5 text-gray-400">
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                  </svg>
                </div>
              </div>

              {/* –î–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
              <div className="border rounded-lg max-h-80 overflow-y-auto">
                <CatalogTree
                  categories={catalogCategories}
                  selectedCategoryId={selectedCatalogCategoryId}
                  onCategorySelect={setSelectedCatalogCategoryId}
                  searchTerm={categorySearchTerm}
                />
              </div>

              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
              {selectedCatalogCategoryId && (
                <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                      <span className="text-sm font-medium text-blue-900">
                        –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {catalogCategories.find(c => c.id === selectedCatalogCategoryId)?.name}
                      </span>
                    </div>
                  </div>
                </div>
              )}
            </div>
            
            <div className="flex justify-between">
              <Button variant="secondary" onClick={() => setCurrentStep('upload')}>
                <ArrowLeft className="w-4 h-4 mr-2" />
                –ù–∞–∑–∞–¥
              </Button>
              <Button
                onClick={handleCatalogComplete}
                disabled={!selectedCatalogCategoryId}
                className={selectedCatalogCategoryId ? 'bg-black hover:bg-gray-800' : ''}
              >
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                <ArrowRight className="w-4 h-4 ml-2" />
          </Button>
        </div>
      </div>
        );

      case 'template':
        return (
          <div className="space-y-6">
            <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
              <div className="flex items-center space-x-2">
                <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                <span className="text-sm font-medium text-blue-900">
                  –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {catalogCategories.find(c => c.id === selectedCatalogCategoryId)?.name}
                </span>
              </div>
            </div>

            {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–º */}
            <TemplateManager
              catalogCategoryId={selectedCatalogCategoryId}
              catalogCategoryName={catalogCategories.find(c => c.id === selectedCatalogCategoryId)?.name}
            />

            {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è */}
            <div className="flex justify-end">
              <Button
                onClick={handleTemplateComplete}
                className="bg-black hover:bg-gray-800"
              >
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞
                <ArrowRight className="w-4 h-4 ml-2" />
              </Button>
            </div>
          </div>
        );

      case 'upload':
        return (
          <div className="space-y-6">
            <div className="bg-gray-50 border-2 border-dashed border-gray-300 rounded-lg p-6">
              <div className="text-center">
                <div className="text-3xl mb-3">üìä</div>
                <h3 className="text-lg font-semibold text-black mb-2">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞</h3>
                <p className="text-gray-600 mb-4 text-sm">–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö</p>
                
                <input
                  type="file"
                  accept=".xlsx,.xls,.csv"
                  onChange={(e) => {
                    const file = e.target.files?.[0];
                    if (file) {
                      handleFileUpload(file);
                    }
                  }}
                  className="hidden"
                  id="price-list-upload"
                />
                <label
                  htmlFor="price-list-upload"
                  className="inline-flex items-center px-4 py-2 bg-black text-white rounded hover:bg-yellow-400 hover:text-black transition-all duration-200 cursor-pointer text-sm"
                >
                  {isProcessing ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª'}
                </label>
                
                <p className="text-xs text-gray-500 mt-2">–§–æ—Ä–º–∞—Ç—ã: .xlsx, .csv</p>
              </div>
            </div>
          </div>
        );

      case 'validation':
        return priceListData ? (
          <div className="space-y-6">
            <div className="bg-gray-50 p-4 rounded-lg">
              <h4 className="font-medium text-gray-900 mb-2">–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª–µ–π</h4>
              <p className="text-gray-700 text-sm">
                –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ñ–∞–π–ª–∞ —à–∞–±–ª–æ–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
              </p>
            </div>

            {/* –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–∞–π–ª–∞ —Å —à–∞–±–ª–æ–Ω–æ–º */}
            <div className="space-y-4">
              <div className="bg-green-50 p-4 rounded-lg border border-green-200">
                <div className="flex items-center space-x-2">
                  <CheckCircle className="h-5 w-5 text-green-500" />
                  <span className="text-sm font-medium text-green-900">
                    –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {priceListData.totalRows} —Å—Ç—Ä–æ–∫
                  </span>
                </div>
              </div>
              
              <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                <div className="flex items-center space-x-2">
                  <AlertTriangle className="h-5 w-5 text-blue-500" />
                  <span className="text-sm font-medium text-blue-900">
                    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª–µ–π...
                  </span>
                </div>
              </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è */}
            <div className="flex justify-end">
              <Button
                onClick={handleValidationComplete}
                className="bg-black hover:bg-gray-800"
              >
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ –∏–º–ø–æ—Ä—Ç—É
                <ArrowRight className="w-4 h-4 ml-2" />
              </Button>
            </div>
          </div>
        ) : (
          <div className="text-center py-8">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mx-auto mb-4"></div>
            <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
          </div>
        );

      case 'import':
        return (
          <div className="space-y-6">
            <div className="bg-gray-50 p-4 rounded-lg">
              <h4 className="font-medium text-gray-900 mb-2">–ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤</h4>
              <p className="text-gray-700 text-sm">
                –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∏–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É
              </p>
            </div>

            {/* –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ */}
            <div className="text-center py-8">
              <Button
                onClick={() => {
                  setCompletedSteps(prev => [...prev, 'import']);
                  setCurrentStep('complete');
                }}
                className="bg-black hover:bg-gray-800"
              >
                –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã
                <Upload className="w-4 h-4 ml-2" />
              </Button>
            </div>
          </div>
        );

      case 'complete':
        return (
          <div className="space-y-6">
            <div className="bg-green-50 p-6 rounded-lg border border-green-200 text-center">
              <div className="text-4xl mb-4">‚úÖ</div>
              <h3 className="text-xl font-semibold text-green-900 mb-2">–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!</h3>
              <p className="text-green-700">
                –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
              </p>
            </div>

            <div className="flex justify-center">
              <Button
                onClick={() => {
                  setCurrentStep('catalog');
                  setCompletedSteps([]);
                  setPriceListData(null);
                  setPhotoData(null);
                  setSelectedCatalogCategoryId('');
                }}
                className="bg-black hover:bg-gray-800"
              >
                –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
                <RefreshCw className="w-4 h-4 ml-2" />
              </Button>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  const renderPhotoStepContent = () => {
    switch (currentPhotoStep) {
      case 'photo-catalog':
        return (
          <div className="space-y-6">
            <div className="grid gap-4">
              <h4 className="text-lg font-medium">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:</h4>
              
              {/* –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º */}
              <div className="relative">
                <input
                  type="text"
                  placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏..."
                  value={photoCategorySearchTerm}
                  onChange={(e) => setPhotoCategorySearchTerm(e.target.value)}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-black focus:border-transparent"
                />
                <div className="absolute right-3 top-2.5 text-gray-400">
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                  </svg>
                </div>
              </div>

              {/* –î–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
              <div className="border rounded-lg max-h-80 overflow-y-auto">
                <CatalogTree
                  categories={catalogCategories}
                  selectedCategoryId={selectedPhotoCategoryId}
                  onCategorySelect={setSelectedPhotoCategoryId}
                  searchTerm={photoCategorySearchTerm}
                />
              </div>

              {selectedPhotoCategoryId && (
                <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                      <span className="text-sm font-medium text-blue-900">
                        –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {catalogCategories.find(c => c.id === selectedPhotoCategoryId)?.name}
                      </span>
                    </div>
                  </div>
                </div>
              )}
            </div>
            
            <div className="flex justify-between">
              <Button variant="secondary" onClick={() => setCurrentPhotoStep('photo-upload')}>
                <ArrowLeft className="w-4 h-4 mr-2" />
                –ù–∞–∑–∞–¥
              </Button>
              <Button
                onClick={() => {
                  setCompletedPhotoSteps(prev => [...prev, 'photo-catalog']);
                  setCurrentPhotoStep('photo-mapping');
                }}
                disabled={!selectedPhotoCategoryId}
                className={selectedPhotoCategoryId ? 'bg-black hover:bg-gray-800' : ''}
              >
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                <ArrowRight className="w-4 h-4 ml-2" />
              </Button>
            </div>
          </div>
        );

      case 'photo-mapping':
        return (
          <div className="space-y-6">
            <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
              <div className="flex items-center space-x-2">
                <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                <span className="text-sm font-medium text-blue-900">
                  –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {catalogCategories.find(c => c.id === selectedPhotoCategoryId)?.name}
                </span>
              </div>
            </div>

            {/* –í—ã–±–æ—Ä —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ */}
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –°–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —Ñ–æ—Ç–æ
                </label>
                <select
                  value={photoMappingProperty}
                  onChange={(e) => setPhotoMappingProperty(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-black focus:border-transparent"
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π—Å—Ç–≤–æ...</option>
                  {existingProductProperties.map(prop => (
                    <option key={prop} value={prop}>{prop}</option>
                  ))}
                </select>
                <p className="text-xs text-gray-500 mt-1">
                  –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞
                </p>
              </div>

              {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è */}
              <div className="flex justify-end">
                <Button
                  onClick={() => {
                    setCompletedPhotoSteps(prev => [...prev, 'photo-mapping']);
                    setCurrentPhotoStep('photo-upload');
                  }}
                  disabled={!photoMappingProperty}
                  className={photoMappingProperty ? 'bg-black hover:bg-gray-800' : ''}
                >
                  –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ –∑–∞–≥—Ä—É–∑–∫–µ
                  <ArrowRight className="w-4 h-4 ml-2" />
                </Button>
              </div>
            </div>
          </div>
        );

      case 'photo-upload':
        return (
          <div className="space-y-6">
            <div className="bg-gray-50 p-4 rounded-lg">
              <h4 className="font-medium text-gray-900 mb-2">–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</h4>
              <p className="text-gray-700 text-sm">
                –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∏—Ö –ø—Ä–∏–≤—è–∑–∫—É –ø–æ {photoMappingProperty}
              </p>
            </div>

            {/* –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ */}
            <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
              <input
                type="file"
                multiple
                accept="image/*"
                onChange={(e) => {
                  const files = Array.from(e.target.files || []);
                  handlePhotosComplete(files);
                }}
                className="hidden"
                id="photo-upload"
              />
              <label
                htmlFor="photo-upload"
                className="cursor-pointer flex flex-col items-center space-y-2"
              >
                <div className="text-4xl">üì∏</div>
                <div className="text-lg font-medium text-gray-900">
                  {uploadingPhotos ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏'}
                </div>
                <div className="text-sm text-gray-500">
                  –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, GIF, WebP
                </div>
              </label>
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ */}
            <div className="text-center">
              <Button
                variant="secondary"
                onClick={() => {
                  setCompletedPhotoSteps(prev => [...prev, 'photo-upload']);
                  setCurrentPhotoStep('photo-complete');
                }}
                disabled={uploadingPhotos}
              >
                –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ
              </Button>
            </div>
          </div>
        );

      case 'photo-complete':
        return (
          <div className="space-y-6">
            <div className="bg-green-50 p-6 rounded-lg border border-green-200 text-center">
              <div className="text-4xl mb-4">‚úÖ</div>
              <h3 className="text-xl font-semibold text-green-900 mb-2">–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</h3>
              <p className="text-green-700">
                –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Ç–æ–≤–∞—Ä–∞–º
              </p>
            </div>

            <div className="flex justify-center">
              <Button
                onClick={() => {
                  setCurrentPhotoStep('photo-catalog');
                  setCompletedPhotoSteps([]);
                  setPhotoData(null);
                  setSelectedPhotoCategoryId('');
                }}
                className="bg-black hover:bg-gray-800"
              >
                –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ
                <RefreshCw className="w-4 h-4 ml-2" />
              </Button>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900">–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</h1>
          <p className="mt-2 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –∫–∞—Ç–∞–ª–æ–≥</p>
        </div>

        {/* –í–∫–ª–∞–¥–∫–∏ */}
        <div className="mb-6">
          <div className="border-b border-gray-200">
            <nav className="-mb-px flex space-x-8">
              <button
                onClick={() => setActiveTab('products')}
                className={`py-2 px-1 border-b-2 font-medium text-sm ${
                  activeTab === 'products'
                    ? 'border-black text-black'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                üì¶ –ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤
              </button>
              <button
                onClick={() => setActiveTab('photos')}
                className={`py-2 px-1 border-b-2 font-medium text-sm ${
                  activeTab === 'photos'
                    ? 'border-black text-black'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                üì∏ –ò–º–ø–æ—Ä—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
              </button>
              <button
                onClick={() => setActiveTab('templates')}
                className={`py-2 px-1 border-b-2 font-medium text-sm ${
                  activeTab === 'templates'
                    ? 'border-black text-black'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏
              </button>
            </nav>
          </div>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        <div className="bg-white rounded-lg shadow-sm">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —à–∞–≥–∞ */}
          <div className="border-b border-gray-200 p-6">
            <div className="flex items-center justify-between mb-6">
              <div>
                <h2 className="text-lg font-semibold text-black">{getStepTitle()}</h2>
                <p className="text-gray-600">{getStepDescription()}</p>
              </div>
              {(activeTab === 'products' && currentStep !== 'catalog') || 
               (activeTab === 'photos' && currentPhotoStep !== 'photo-catalog') ? (
                <Button variant="secondary" onClick={() => {
                  if (activeTab === 'products') {
                    setCurrentStep('catalog');
                    setCompletedSteps([]);
                    setPriceListData(null);
                    setSelectedCatalogCategoryId('');
                  } else if (activeTab === 'photos') {
                    setCurrentPhotoStep('photo-catalog');
                    setCompletedPhotoSteps([]);
                    setPhotoData(null);
                    setSelectedPhotoCategoryId('');
                  }
                }}>
                  –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
                </Button>
              ) : null}
            </div>

            {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä */}
            <div className="flex items-center space-x-4 mb-8">
              {(activeTab === 'products' ? [
                { key: 'catalog', label: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', icon: 'üìÅ' },
                { key: 'template', label: '–®–∞–±–ª–æ–Ω', icon: 'üìã' },
                { key: 'upload', label: '–§–∞–π–ª', icon: 'üìä' },
                { key: 'validation', label: '–ü—Ä–æ–≤–µ—Ä–∫–∞', icon: 'üîç' },
                { key: 'import', label: '–ò–º–ø–æ—Ä—Ç', icon: '‚¨ÜÔ∏è' },
                { key: 'complete', label: '–ì–æ—Ç–æ–≤–æ', icon: '‚úÖ' }
              ] : activeTab === 'photos' ? [
                { key: 'photo-catalog', label: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', icon: 'üìÅ' },
                { key: 'photo-mapping', label: '–ü—Ä–∏–≤—è–∑–∫–∞', icon: 'üîó' },
                { key: 'photo-upload', label: '–ó–∞–≥—Ä—É–∑–∫–∞', icon: 'üì∏' },
                { key: 'photo-complete', label: '–ì–æ—Ç–æ–≤–æ', icon: '‚úÖ' }
              ] : []).map((step, index) => {
                const isActive = activeTab === 'products' 
                  ? step.key === currentStep 
                  : step.key === currentPhotoStep;
                const isCompleted = activeTab === 'products'
                  ? completedSteps.includes(step.key as ImportStep)
                  : completedPhotoSteps.includes(step.key as PhotoStep);
                
                return (
                  <div key={step.key} className="flex items-center">
                    <div className={`flex items-center justify-center w-10 h-10 rounded-full border-2 transition-colors ${
                      isActive 
                        ? 'border-black bg-black text-white' 
                        : isCompleted 
                          ? 'border-green-500 bg-green-500 text-white' 
                          : 'border-gray-300 bg-white text-gray-500'
                    }`}>
                      <span className="text-sm font-medium">{step.icon}</span>
                    </div>
                    <div className="ml-3">
                      <p className={`text-sm font-medium ${
                        isActive ? 'text-black' : isCompleted ? 'text-green-600' : 'text-gray-500'
                      }`}>
                        {step.label}
                      </p>
                    </div>
                    {index < (activeTab === 'products' ? 5 : activeTab === 'photos' ? 3 : 0) && (
                      <div className={`w-8 h-0.5 mx-2 ${
                        isCompleted ? 'bg-green-500' : 'bg-gray-300'
                      }`} />
                    )}
                  </div>
                );
              })}
            </div>
          </div>

          {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–∞–≥–∞ */}
          <div className="p-6">
            {renderStepContent()}
          </div>
        </div>
      </div>
    </div>
  );
}