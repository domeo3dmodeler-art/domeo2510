'use client';

import React, { useState } from 'react';
import { Button } from '@/components/ui';

export default function TestNotificationFull() {
  const [result, setResult] = useState('');
  const [testInvoiceId, setTestInvoiceId] = useState('');
  const [testClientId, setTestClientId] = useState('');

  const createTestData = async () => {
    try {
      setResult('üîÑ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
      const clientResponse = await fetch('/api/clients', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json; charset=utf-8'
        },
        body: JSON.stringify({
          firstName: '–¢–µ—Å—Ç–æ–≤—ã–π',
          lastName: '–ö–ª–∏–µ–Ω—Ç',
          middleName: '–î–ª—è',
          phone: '+7 (999) 123-45-67',
          address: '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
          objectId: 'test-object-' + Date.now()
        })
      });
      
      const clientData = await clientResponse.json();
      if (!clientData.client) {
        setResult(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: ${JSON.stringify(clientData)}`);
        return;
      }
      
      const clientId = clientData.client.id;
      setTestClientId(clientId);
      setResult(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: ${clientData.client.lastName} ${clientData.client.firstName} (ID: ${clientId})`);
      
      // –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç
      const invoiceResponse = await fetch('/api/invoices', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json; charset=utf-8'
        },
        body: JSON.stringify({
          client_id: clientId,
          status: 'SENT',
          total_amount: 1000,
          subtotal: 1000,
          tax_amount: 0,
          currency: 'RUB',
          notes: '–¢–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
        })
      });
      
      const invoiceData = await invoiceResponse.json();
      if (invoiceData.success && invoiceData.invoice) {
        setTestInvoiceId(invoiceData.invoice.id);
        setResult(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç —Å–æ–∑–¥–∞–Ω: ${invoiceData.invoice.number} (ID: ${invoiceData.invoice.id})`);
      } else {
        setResult(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞: ${JSON.stringify(invoiceData)}`);
      }
    } catch (error: any) {
      setResult('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
    }
  };

  const testNotificationFlow = async () => {
    if (!testInvoiceId) {
      setResult('‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
      return;
    }
    
    try {
      setResult('üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...\n');
      
      // 1. –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ "–û–ø–ª–∞—á–µ–Ω" - –¥–æ–ª–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
      setResult(prev => prev + '1Ô∏è‚É£ –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—á–µ—Ç –≤ —Å—Ç–∞—Ç—É—Å "–û–ø–ª–∞—á–µ–Ω"...\n');
      const paidResponse = await fetch(`/api/invoices/${testInvoiceId}/status`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json; charset=utf-8'
        },
        body: JSON.stringify({ status: 'PAID' })
      });
      const paidData = await paidResponse.json();
      if (paidData.success) {
        setResult(prev => prev + `‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–û–ø–ª–∞—á–µ–Ω" - –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã\n`);
      } else {
        setResult(prev => prev + `‚ùå –û—à–∏–±–∫–∞: ${JSON.stringify(paidData)}\n`);
        return;
      }
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // 2. –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ "–ó–∞–∫–∞–∑ —Ä–∞–∑–º–µ—â–µ–Ω" - –¥–æ–ª–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ç–æ—Ä–∞
      setResult(prev => prev + '2Ô∏è‚É£ –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—á–µ—Ç –≤ —Å—Ç–∞—Ç—É—Å "–ó–∞–∫–∞–∑ —Ä–∞–∑–º–µ—â–µ–Ω"...\n');
      const productionResponse = await fetch(`/api/invoices/${testInvoiceId}/status`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json; charset=utf-8'
        },
        body: JSON.stringify({ status: 'IN_PRODUCTION' })
      });
      const productionData = await productionResponse.json();
      if (productionData.success) {
        setResult(prev => prev + `‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–ó–∞–∫–∞–∑ —Ä–∞–∑–º–µ—â–µ–Ω" - –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω\n`);
      } else {
        setResult(prev => prev + `‚ùå –û—à–∏–±–∫–∞: ${JSON.stringify(productionData)}\n`);
        return;
      }
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // 3. –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ "–ü–æ–ª—É—á–µ–Ω –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞" - –¥–æ–ª–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ç–æ—Ä–∞
      setResult(prev => prev + '3Ô∏è‚É£ –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—á–µ—Ç –≤ —Å—Ç–∞—Ç—É—Å "–ü–æ–ª—É—á–µ–Ω –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"...\n');
      const receivedResponse = await fetch(`/api/invoices/${testInvoiceId}/status`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json; charset=utf-8'
        },
        body: JSON.stringify({ status: 'RECEIVED_FROM_SUPPLIER' })
      });
      const receivedData = await receivedResponse.json();
      if (receivedData.success) {
        setResult(prev => prev + `‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–ü–æ–ª—É—á–µ–Ω –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞" - –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω\n`);
      } else {
        setResult(prev => prev + `‚ùå –û—à–∏–±–∫–∞: ${JSON.stringify(receivedData)}\n`);
        return;
      }
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // 4. –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ "–ò—Å–ø–æ–ª–Ω–µ–Ω" - –¥–æ–ª–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ç–æ—Ä–∞
      setResult(prev => prev + '4Ô∏è‚É£ –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—á–µ—Ç –≤ —Å—Ç–∞—Ç—É—Å "–ò—Å–ø–æ–ª–Ω–µ–Ω"...\n');
      const completedResponse = await fetch(`/api/invoices/${testInvoiceId}/status`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json; charset=utf-8'
        },
        body: JSON.stringify({ status: 'COMPLETED' })
      });
      const completedData = await completedResponse.json();
      if (completedData.success) {
        setResult(prev => prev + `‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–ò—Å–ø–æ–ª–Ω–µ–Ω" - –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω\n`);
      } else {
        setResult(prev => prev + `‚ùå –û—à–∏–±–∫–∞: ${JSON.stringify(completedData)}\n`);
        return;
      }
      
      setResult(prev => prev + '\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
      
    } catch (error: any) {
      setResult(prev => prev + `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  };

  const getNotifications = async () => {
    try {
      const response = await fetch('/api/notifications', {
        headers: {
          'Content-Type': 'application/json; charset=utf-8'
        }
      });
      const data = await response.json();
      if (response.ok) {
        setResult(`üì¨ –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${data.notifications.length}\n\n${JSON.stringify(data.notifications, null, 2)}`);
      } else {
        setResult(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${JSON.stringify(data)}`);
      }
    } catch (error: any) {
      setResult('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
    }
  };

  const clearNotifications = async () => {
    try {
      setResult('üîÑ –û—á–∏—â–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å API –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      setResult('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã (–∑–∞–≥–ª—É—à–∫–∞)');
    } catch (error: any) {
      setResult('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
    }
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h1>
      
      <div className="space-y-4">
        <div className="grid grid-cols-2 gap-4">
          <Button onClick={createTestData} className="w-full">
            –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
          </Button>
          <Button onClick={testNotificationFlow} variant="success" disabled={!testInvoiceId}>
            –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ç–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
          </Button>
        </div>
        
        <div className="grid grid-cols-2 gap-4">
          <Button onClick={getNotifications} variant="secondary">
            –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          </Button>
          <Button onClick={clearNotifications} variant="warning">
            –û—á–∏—Å—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          </Button>
        </div>
      </div>
      
      <div className="mt-6 p-4 bg-gray-100 rounded-md">
        <h3 className="font-bold mb-2">–°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</h3>
        <div className="whitespace-pre-wrap text-sm">
          {result || '–ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ" –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'}
        </div>
      </div>
      
      <div className="mt-6 p-4 bg-blue-50 rounded-md">
        <h3 className="font-bold mb-2">–õ–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</h3>
        <ul className="text-sm space-y-1">
          <li>‚Ä¢ <strong>PAID</strong> ‚Üí —É–≤–µ–¥–æ–º–ª—è—é—Ç—Å—è –≤—Å–µ <strong>–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏</strong></li>
          <li>‚Ä¢ <strong>IN_PRODUCTION</strong> ‚Üí —É–≤–µ–¥–æ–º–ª—è–µ—Ç—Å—è <strong>–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ç–æ—Ä</strong></li>
          <li>‚Ä¢ <strong>RECEIVED_FROM_SUPPLIER</strong> ‚Üí —É–≤–µ–¥–æ–º–ª—è–µ—Ç—Å—è <strong>–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ç–æ—Ä</strong></li>
          <li>‚Ä¢ <strong>COMPLETED</strong> ‚Üí —É–≤–µ–¥–æ–º–ª—è–µ—Ç—Å—è <strong>–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ç–æ—Ä</strong></li>
        </ul>
      </div>
    </div>
  );
}
