'use client';

import { useState, useEffect, useMemo, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import AdminLayout from '../../components/layout/AdminLayout';
import { Card, Button } from '../../components/ui';
import { ClientAuthGuard } from '../../components/auth/ClientAuthGuard';

interface User {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  middleName?: string;
  role: string;
  permissions: string[];
}

export default function DashboardPage() {
  return (
    <ClientAuthGuard>
      <DashboardContent />
    </ClientAuthGuard>
  );
}

function DashboardContent() {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [stats, setStats] = useState<any>(null);
  const [userCount, setUserCount] = useState<number>(0);
  const [complectatorStats, setComplectatorStats] = useState<any>(null);
  const router = useRouter();

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Ä–æ–ª–∏ (–≤—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è)
  const roleContent = useMemo(() => {
    if (!user) {
      return {
        title: '–ó–∞–≥—Ä—É–∑–∫–∞...',
        description: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ',
        widgets: [],
        quickActions: []
      };
    }
    
    switch (user.role) {
      case 'admin':
        return {
          title: '–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
          description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
          widgets: [
            { title: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤', count: stats?.total?.totalCategories || 0, link: '/admin/categories', icon: 'üìÅ' },
            { title: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', count: userCount, link: '/admin/users', icon: 'üë•' },
            { title: '–ò–º–ø–æ—Ä—Ç –ø—Ä–∞–π—Å–æ–≤', count: stats?.total?.totalImports || 0, link: '/admin/import', icon: 'üìä' },
            { title: '–¢–æ–≤–∞—Ä—ã', count: stats?.total?.totalProducts || 0, link: '/admin/catalog/products', icon: 'üì¶' }
          ],
          quickActions: [
            { title: '–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', link: '/admin/categories/builder', icon: '‚ûï' },
            { title: '–ò–º–ø–æ—Ä—Ç –ø—Ä–∞–π—Å–∞', link: '/admin/import', icon: 'üì•' },
            { title: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', link: '/admin/users', icon: 'üë§' },
            { title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã', link: '/admin/settings', icon: '‚öôÔ∏è' }
          ]
        };
      case 'complectator':
        return {
          title: '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ç–æ—Ä–∞',
          description: '–†–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏',
          widgets: [
            { title: '–ö–ª–∏–µ–Ω—Ç—ã', count: complectatorStats?.clients?.total || 0, link: '/clients', icon: 'üë•' },
            { title: '–ö–ü –≤ —Ä–∞–±–æ—Ç–µ', count: complectatorStats?.quotes?.inWork || 0, link: '/quotes', icon: 'üìÑ' },
            { title: '–°—á–µ—Ç–∞', count: complectatorStats?.invoices?.total || 0, link: '/invoices', icon: 'üí∞' },
            { title: '–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤', count: complectatorStats?.products?.total || 0, link: '/doors', icon: 'üì¶' }
          ],
          quickActions: [
            { title: '–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞', link: '/clients', icon: 'üë§' },
            { title: '–°–æ–∑–¥–∞—Ç—å –ö–ü', link: '/quotes', icon: 'üìù' },
            { title: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä –¥–≤–µ—Ä–µ–π', link: '/doors', icon: 'üö™' },
            { title: '–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤', link: '/', icon: 'üì¶' }
          ]
        };
      case 'executor':
        return {
          title: '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è',
          description: '–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∏ —Ä–∞–±–æ—Ç–∞ —Å —Ñ–∞–±—Ä–∏–∫–æ–π',
          widgets: [
            { title: '–ó–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç–µ', count: '8', link: '/orders', icon: '‚ö°' },
            { title: '–ó–∞–∫–∞–∑—ã —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞', count: '5', link: '/factory', icon: 'üè≠' },
            { title: '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ', count: '32', link: '/orders?status=completed', icon: '‚úÖ' },
            { title: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', count: '3', link: '/notifications', icon: 'üîî' }
          ],
          quickActions: [
            { title: '–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã', link: '/orders?status=new', icon: 'üÜï' },
            { title: '–ó–∞–∫–∞–∑ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞', link: '/factory', icon: 'üè≠' },
            { title: '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ', link: '/tracking', icon: 'üìç' },
            { title: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', link: '/notifications', icon: 'üîî' }
          ]
        };
      default:
        return {
          title: '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
          description: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É',
          widgets: [],
          quickActions: []
        };
    }
  }, [user, stats, userCount, complectatorStats]);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    const token = localStorage.getItem('authToken');
    const userRole = localStorage.getItem('userRole');
    const userId = localStorage.getItem('userId');

    if (!token || !userRole || !userId) {
      router.push('/login');
      return;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    setUser({
      id: userId,
      email: localStorage.getItem('userEmail') || '',
      firstName: localStorage.getItem('userFirstName') || '–ò–≤–∞–Ω',
      lastName: localStorage.getItem('userLastName') || '–ò–≤–∞–Ω–æ–≤',
      middleName: localStorage.getItem('userMiddleName') || '–ò–≤–∞–Ω–æ–≤–∏—á',
      role: userRole,
      permissions: JSON.parse(localStorage.getItem('userPermissions') || '[]')
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π
    fetchStats();
    setIsLoading(false);
  }, [router]);

  const fetchStats = useCallback(async () => {
    try {
      const promises = [
        fetch('/api/admin/stats'),
        fetch('/api/users')
      ];

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ç–æ—Ä–∞ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ç–æ—Ä
      const userRole = localStorage.getItem('userRole');
      if (userRole === 'complectator') {
        promises.push(fetch('/api/complectator/stats'));
      }

      const responses = await Promise.all(promises);
      
      if (responses[0].ok) {
        const statsData = await responses[0].json();
        setStats(statsData);
      }
      
      if (responses[1].ok) {
        const usersData = await responses[1].json();
        setUserCount(usersData.users?.length || 0);
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ç–æ—Ä–∞
      if (userRole === 'complectator' && responses[2]?.ok) {
        const complectatorData = await responses[2].json();
        setComplectatorStats(complectatorData.stats);
      }
    } catch (error) {
      console.error('Error loading stats:', error);
    }
  }, []);

  const handleLogout = () => {
    localStorage.removeItem('authToken');
    localStorage.removeItem('userRole');
    localStorage.removeItem('userId');
    localStorage.removeItem('userEmail');
    localStorage.removeItem('userFirstName');
    localStorage.removeItem('userLastName');
    localStorage.removeItem('userMiddleName');
    localStorage.removeItem('userPermissions');
    router.push('/login');
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-white flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-black mx-auto"></div>
          <p className="mt-4 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
      </div>
    );
  }

  if (!user) {
    return null;
  }

  // –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º AdminLayout, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –æ–±—ã—á–Ω—ã–π –ª–µ–π–∞—É—Ç
  if (user.role === 'admin') {
    return (
      <AdminLayout
        title={roleContent.title}
        subtitle={roleContent.description}
      >
        <div className="space-y-8">
          {/* Widgets Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {roleContent.widgets.map((widget, index) => (
              <Card key={index} variant="interactive" className="hover:border-black transition-all duration-200">
                <div className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-gray-600">{widget.title}</p>
                      <p className="text-2xl font-bold text-black mt-1">{widget.count}</p>
                    </div>
                    <div className="text-2xl">{widget.icon}</div>
                  </div>
                </div>
              </Card>
            ))}
          </div>

          {/* Quick Actions */}
          <Card variant="base">
            <div className="p-6">
              <h2 className="text-xl font-semibold text-black mb-4">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                {roleContent.quickActions.map((action, index) => (
                  <Button
                    key={index}
                    variant="secondary"
                    className="p-4 h-auto flex flex-col items-center space-y-2"
                    onClick={() => router.push(action.link)}
                  >
                    <div className="text-2xl">{action.icon}</div>
                    <p className="text-sm font-medium">{action.title}</p>
                  </Button>
                ))}
              </div>
            </div>
          </Card>

        </div>
      </AdminLayout>
    );
  }

  // –î–ª—è –Ω–µ-–∞–¥–º–∏–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ª–µ–π–∞—É—Ç
  return (
    <div className="min-h-screen bg-white">
      {/* Header */}
      <header className="bg-white border-b border-black/10">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex items-center space-x-3">
              <div 
                onClick={() => router.push('/')}
                className="cursor-pointer hover:opacity-70 transition-opacity duration-200"
              >
                <h1 className="text-2xl font-bold text-black">Domeo</h1>
                <p className="text-xs text-gray-500 font-medium">Configurators</p>
              </div>
              <div className="flex items-center">
                <span className="text-black mx-3 text-lg font-bold">‚Ä¢</span>
                <h2 className="text-lg font-semibold text-black">{getRoleDisplayName(user.role)}</h2>
              </div>
            </div>
            <div className="flex items-center space-x-4">
              <div className="text-sm text-gray-600">
                {user.lastName} {user.firstName.charAt(0)}.{user.middleName ? user.middleName.charAt(0) + '.' : ''} ({getRoleText(user.role)})
              </div>
              <button
                onClick={handleLogout}
                className="px-3 py-1 border border-black text-black hover:bg-black hover:text-white transition-all duration-200 text-sm"
              >
                –í—ã–π—Ç–∏
              </button>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Welcome Section */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-black">{roleContent.title}</h1>
          <p className="text-gray-600 mt-2">{roleContent.description}</p>
        </div>

        {/* Widgets Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          {roleContent.widgets.map((widget, index) => (
            <div
              key={index}
              onClick={() => router.push(widget.link)}
              className="bg-white border border-gray-200 p-6 hover:border-black transition-all duration-200 group cursor-pointer"
            >
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">{widget.title}</p>
                  <p className="text-2xl font-bold text-black mt-1">{widget.count}</p>
                </div>
                <div className="text-2xl group-hover:scale-110 transition-transform duration-200">
                  {widget.icon}
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* Quick Actions */}
        <div className="bg-gray-50 p-6">
          <h2 className="text-xl font-semibold text-black mb-4">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            {roleContent.quickActions.map((action, index) => (
              <button
                key={index}
                onClick={() => router.push(action.link)}
                className="bg-white border border-gray-200 p-4 hover:border-black hover:bg-black hover:text-white transition-all duration-200 group text-center"
              >
                <div className="text-2xl mb-2 group-hover:scale-110 transition-transform duration-200">
                  {action.icon}
                </div>
                <p className="text-sm font-medium">{action.title}</p>
              </button>
            ))}
          </div>
        </div>

      </main>
    </div>
  );

  function getRoleText(role: string) {
    const roleMap: { [key: string]: string } = {
      'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      'complectator': '–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ç–æ—Ä',
      'executor': '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'
    };
    return roleMap[role] || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  }

  function getRoleDisplayName(role: string) {
    const roleMap: { [key: string]: string } = {
      'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      'complectator': '–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ç–æ—Ä',
      'executor': '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'
    };
    return roleMap[role] || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  }
}
