// api/quotes/[id]/status/route.ts
// API —Ä–æ—É—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ö–ü

import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { isStatusBlocked } from '@/lib/validation/status-blocking';
import { getStatusLabel } from '@/lib/utils/status-labels';
import { notifyUsersByRole } from '@/lib/notifications';
import { canUserChangeStatus } from '@/lib/auth/permissions';
import { UserRole } from '@/lib/auth/roles';
import jwt from 'jsonwebtoken';

const VALID_STATUSES = ['DRAFT', 'SENT', 'ACCEPTED', 'REJECTED'];

// PUT /api/quotes/[id]/status - –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ö–ü
export async function PUT(req: NextRequest, { params }: { params: Promise<{ id: string }> }) {
  try {
    const { id } = await params;
    const body = await req.json();
    const { status, notes } = body;

    // –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Ç–æ–∫–µ–Ω–∞
    let userId = 'system'; // fallback
    try {
      const authHeader = req.headers.get('authorization');
      if (authHeader && authHeader.startsWith('Bearer ')) {
        const token = authHeader.substring(7);
        const decoded = jwt.verify(token, process.env.JWT_SECRET || "your-super-secret-jwt-key-change-this-in-production-min-32-chars");
        userId = decoded.userId;
      }
    } catch (tokenError) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_id –∏–∑ —Ç–æ–∫–µ–Ω–∞:', tokenError);
    }
    
    console.log('üîÑ API: Updating quote status:', { id, status, body });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
    if (!status || !VALID_STATUSES.includes(status)) {
      return NextResponse.json(
        { 
          error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å',
          details: {
            validStatuses: VALID_STATUSES,
            providedStatus: status
          }
        },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ö–ü
    const existingQuote = await prisma.quote.findUnique({
      where: { id },
      select: { 
        id: true, 
        status: true
      }
    });

    console.log('üîç API: Found quote:', existingQuote);

    if (!existingQuote) {
      console.log('‚ùå API: Quote not found:', id);
      return NextResponse.json(
        { error: '–ö–ü –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
    let userRole: UserRole | null = null;
    try {
      const authHeader = req.headers.get('authorization');
      const token = req.cookies.get('auth-token')?.value;
      const authToken = authHeader && authHeader.startsWith('Bearer ') 
        ? authHeader.substring(7) 
        : token;
      
      if (authToken) {
        const decoded: any = jwt.verify(authToken, process.env.JWT_SECRET || "your-super-secret-jwt-key-change-this-in-production-min-32-chars");
        userRole = decoded.role as UserRole;
        console.log('üë§ API: User role from token:', userRole);
      }
    } catch (tokenError) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –∏–∑ —Ç–æ–∫–µ–Ω–∞:', tokenError);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ —Ä–æ–ª–∏
    if (userRole) {
      const canChange = canUserChangeStatus(userRole, 'quote', existingQuote.status);
      if (!canChange) {
        console.log('üîí API: User does not have permission to change status:', { userRole, currentStatus: existingQuote.status });
        return NextResponse.json(
          { 
            error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞',
            details: {
              userRole,
              currentStatus: existingQuote.status,
              reason: '–°—Ç–∞—Ç—É—Å –ö–ü –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≤–∞—à–µ–π —Ä–æ–ª–∏'
            }
          },
          { status: 403 }
        );
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å—Ç–∞—Ç—É—Å–∞
    const isBlocked = await isStatusBlocked(id, 'quote');
    if (isBlocked) {
      console.log('üîí –°—Ç–∞—Ç—É—Å –ö–ü –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è');
      return NextResponse.json(
        { 
          error: '–°—Ç–∞—Ç—É—Å –ö–ü –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫—É.',
          blocked: true,
          currentStatus: getStatusLabel(existingQuote.status, 'quote')
        },
        { status: 403 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    const oldQuote = await prisma.quote.findUnique({
      where: { id },
      select: { status: true }
    });

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateData: any = {
      status
    };

    console.log('üíæ API: Updating quote with data:', updateData);

    const updatedQuote = await prisma.quote.update({
      where: { id },
      data: updateData
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if (oldQuote && oldQuote.status !== status) {
      try {
        await prisma.documentHistory.create({
          data: {
            document_id: id,
            user_id: userId,
            action: 'status_change',
            old_value: oldQuote.status,
            new_value: status,
            details: JSON.stringify({ 
              document_type: 'quote',
              notes: notes || null 
            }),
            created_at: new Date()
          }
        });
      } catch (historyError) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏:', historyError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é
      }
    }

    console.log('‚úÖ API: Quote updated successfully:', updatedQuote);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const oldStatus = oldQuote.status;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    try {
      const quoteForNotification = await prisma.quote.findUnique({
        where: { id },
        select: { client_id: true, number: true, status: true }
      });
      
      console.log('üîî –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ Quote:', {
        documentId: id,
        documentType: 'quote',
        documentNumber: quoteForNotification?.number,
        oldStatus,
        newStatus: status,
        clientId: quoteForNotification?.client_id
      });
      
      if (quoteForNotification) {
        const { sendStatusNotification } = await import('@/lib/notifications/status-notifications');
        await sendStatusNotification(
          id,
          'quote',
          quoteForNotification.number,
          oldStatus,
          status,
          quoteForNotification.client_id || ''
        );
        console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ Quote –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      }
    } catch (notificationError) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ Quote:', notificationError);
      console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        message: notificationError instanceof Error ? notificationError.message : String(notificationError),
        stack: notificationError instanceof Error ? notificationError.stack : undefined
      });
    }

    return NextResponse.json({
      success: true,
      message: `–°—Ç–∞—Ç—É—Å –ö–ü –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${status}"`,
      quote: {
        id: updatedQuote.id,
        status: updatedQuote.status
      }
    });

  } catch (error: any) {
    console.error('‚ùå API: Error updating quote status:', error);
    console.error('‚ùå API: Error details:', {
      message: error.message,
      stack: error.stack,
      name: error.name
    });
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ö–ü' },
      { status: 500 }
    );
  }
}

// GET /api/quotes/[id]/status - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ö–ü
export async function GET(req: NextRequest, { params }: { params: Promise<{ id: string }> }) {
  try {
    const { id } = await params;
    const quote = await prisma.quote.findUnique({
      where: { id },
      select: { 
        id: true, 
        status: true, 
        number: true,
        updated_at: true
      }
    });

    if (!quote) {
      return NextResponse.json(
        { error: '–ö–ü –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }

    return NextResponse.json({
      id: quote.id,
      number: quote.number,
      status: quote.status,
      updated_at: quote.updated_at,
      canExport: quote.status === 'ACCEPTED'
    });

  } catch (error: any) {
    console.error('Error fetching quote status:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ö–ü' },
      { status: 500 }
    );
  }
}
