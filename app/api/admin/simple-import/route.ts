import { NextRequest, NextResponse } from 'next/server';
import { simpleImportService } from '../../../../lib/services/simple-import.service';

export async function POST(req: NextRequest) {
  try {
    const formData = await req.formData();
    const file = formData.get('file') as File;
    const catalogCategoryId = formData.get('catalogCategoryId') as string;
    const updateExisting = formData.get('updateExisting') === 'true';
    
    if (!file) {
      return NextResponse.json(
        { success: false, error: '–§–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' },
        { status: 400 }
      );
    }
    
    if (!catalogCategoryId) {
      return NextResponse.json(
        { success: false, error: 'ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' },
        { status: 400 }
      );
    }
    
    console.log('üìÅ –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞:', file.name);
    console.log('üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:', catalogCategoryId);
    console.log('üìÅ –û–±–Ω–æ–≤–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ:', updateExisting);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ Buffer
    const fileBuffer = Buffer.from(await file.arrayBuffer());
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –∏–º–ø–æ—Ä—Ç
    const result = await simpleImportService.importProducts(
      fileBuffer,
      catalogCategoryId,
      {
        skipEmptyValues: true,
        validateRequiredFields: true,
        updateExisting: updateExisting
      }
    );
    
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞:', result);
    
    return NextResponse.json({
      success: result.success,
      imported: result.imported,
      updated: result.updated,
      errors: result.errors,
      warnings: result.warnings,
      message: result.success 
        ? `–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ${result.imported} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤, ${result.updated} –æ–±–Ω–æ–≤–ª–µ–Ω–æ`
        : '–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞', 
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' 
      },
      { status: 500 }
    );
  }
}

export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const catalogCategoryId = searchParams.get('catalogCategoryId');
    const action = searchParams.get('action');
    
    if (!catalogCategoryId) {
      return NextResponse.json(
        { success: false, error: 'ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' },
        { status: 400 }
      );
    }
    
    if (action === 'template') {
      // –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω Excel —Ñ–∞–π–ª–∞
      const templateBuffer = await simpleImportService.createTemplateFile(catalogCategoryId);
      
      return new NextResponse(templateBuffer, {
        headers: {
          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
          'Content-Disposition': `attachment; filename="template_${catalogCategoryId}.xlsx"`
        }
      });
    }
    
    return NextResponse.json(
      { success: false, error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' },
      { status: 400 }
    );
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ (GET):', error);
    return NextResponse.json(
      { 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö', 
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' 
      },
      { status: 500 }
    );
  }
}