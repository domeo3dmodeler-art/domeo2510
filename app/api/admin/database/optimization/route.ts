import { NextRequest, NextResponse } from 'next/server';
import { dbOptimizationService } from '../../../../../lib/services/database-optimization.service';

// GET /api/admin/database/optimization - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const action = searchParams.get('action');

    switch (action) {
      case 'stats':
        const stats = await dbOptimizationService.getPerformanceStats();
        return NextResponse.json({
          success: true,
          stats
        });

      case 'recommendations':
        const recommendations = await dbOptimizationService.getOptimizationRecommendations();
        return NextResponse.json({
          success: true,
          recommendations
        });

      default:
        return NextResponse.json({
          success: true,
          message: 'API –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
          endpoints: [
            'GET /api/admin/database/optimization?action=stats',
            'GET /api/admin/database/optimization?action=recommendations',
            'POST /api/admin/database/optimization?action=optimize',
            'POST /api/admin/database/optimization?action=update-stats',
            'POST /api/admin/database/optimization?action=normalize-properties',
            'POST /api/admin/database/optimization?action=cleanup-cache'
          ]
        });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏' },
      { status: 500 }
    );
  }
}

// POST /api/admin/database/optimization - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
export async function POST(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const action = searchParams.get('action');

    if (!action) {
      return NextResponse.json(
        { error: '–ù–µ —É–∫–∞–∑–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ' },
        { status: 400 }
      );
    }

    switch (action) {
      case 'optimize':
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ë–î...');
        await dbOptimizationService.performFullOptimization();
        return NextResponse.json({
          success: true,
          message: '–ü–æ–ª–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
        });

      case 'update-stats':
        console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤...');
        await dbOptimizationService.updateProductStatsCache();
        return NextResponse.json({
          success: true,
          message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
        });

      case 'normalize-properties':
        console.log('üîÑ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–≤–æ–π—Å—Ç–≤ —Ç–æ–≤–∞—Ä–æ–≤...');
        await dbOptimizationService.normalizeProductProperties();
        return NextResponse.json({
          success: true,
          message: '–°–≤–æ–π—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã'
        });

      case 'cleanup-cache':
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞...');
        await dbOptimizationService.cleanupExpiredCache();
        return NextResponse.json({
          success: true,
          message: '–ö—ç—à –æ—á–∏—â–µ–Ω'
        });

      case 'optimize-sqlite':
        console.log('üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ SQLite...');
        await dbOptimizationService.optimizeSQLiteSettings();
        return NextResponse.json({
          success: true,
          message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ SQLite –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã'
        });

      case 'create-virtual-columns':
        console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫...');
        await dbOptimizationService.createVirtualColumns();
        return NextResponse.json({
          success: true,
          message: '–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Å–æ–∑–¥–∞–Ω—ã'
        });

      case 'optimize-indexes':
        console.log('üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤...');
        await dbOptimizationService.optimizeIndexes();
        return NextResponse.json({
          success: true,
          message: '–ò–Ω–¥–µ–∫—Å—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã'
        });

      default:
        return NextResponse.json(
          { error: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action}` },
          { status: 400 }
        );
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è ${action}:`, error);
    return NextResponse.json(
      { 
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
}
