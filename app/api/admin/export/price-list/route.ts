import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import * as XLSX from 'xlsx';
import { apiErrorHandler } from '@/lib/api-error-handler';
import { apiValidator } from '@/lib/api-validator';

const prisma = new PrismaClient();

export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const catalogCategoryId = searchParams.get('catalogCategoryId');
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    apiValidator.validateId(catalogCategoryId!, 'catalogCategoryId');

    console.log('üîç –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–∞–π—Å–∞ –≤ Excel –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', catalogCategoryId);

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    const category = await prisma.catalogCategory.findUnique({
      where: { id: catalogCategoryId },
      select: { name: true }
    });

    if (!category) {
      return NextResponse.json({ success: false, error: 'Category not found' }, { status: 404 });
    }

    console.log('üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞–π–¥–µ–Ω–∞:', category.name);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const products = await prisma.product.findMany({
      where: { catalog_category_id: catalogCategoryId },
      select: {
        id: true,
        sku: true,
        name: true,
        properties_data: true,
        base_price: true,
        stock_quantity: true
      },
      take: 10000, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10,000 —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      orderBy: { sku: 'asc' }
    });

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞: ${products.length}`);

    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Excel
    const headers = [
      '‚Ññ', 'SKU', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞', '–®–∏—Ä–∏–Ω–∞/–º–º', '–í—ã—Å–æ—Ç–∞/–º–º', 
      '–¢–æ–ª—â–∏–Ω–∞/–º–º', '–¶–≤–µ—Ç', '–°—Ç–∏–ª—å', '–¢–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', '–¢–∏–ø –æ—Ç–∫—Ä—ã–≤–∞–Ω–∏—è', 
      '–ü–æ—Å—Ç–∞–≤—â–∏–∫', '–¶–µ–Ω–∞ —Ä—Ä—Ü', '–¶–µ–Ω–∞ –æ–ø—Ç', '–¶–µ–Ω–∞ –±–∞–∑–æ–≤–∞—è', '–û—Å—Ç–∞—Ç–æ–∫'
    ];
    
    const data = [];

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
    products.forEach((product, index) => {
      const row = [];
      
      // –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
      row.push(index + 1);
      
      // SKU –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
      row.push(product.sku || '');
      row.push(product.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è');

      // –ü–∞—Ä—Å–∏–º —Å–≤–æ–π—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
      let properties = {};
      if (product.properties_data) {
        try {
          properties = typeof product.properties_data === 'string' 
            ? JSON.parse(product.properties_data) 
            : product.properties_data;
        } catch (e) {
          console.error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–≤–æ–π—Å—Ç–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.id}:`, e);
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
      row.push(properties['–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'] || '');
      row.push(properties['–®–∏—Ä–∏–Ω–∞/–º–º'] || '');
      row.push(properties['–í—ã—Å–æ—Ç–∞/–º–º'] || '');
      row.push(properties['–¢–æ–ª—â–∏–Ω–∞/–º–º'] || '');
      row.push(properties['Domeo_–¶–≤–µ—Ç'] || '');
      row.push(properties['Domeo_–°—Ç–∏–ª—å Web'] || '');
      row.push(properties['–¢–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏'] || '');
      row.push(properties['–¢–∏–ø –æ—Ç–∫—Ä—ã–≤–∞–Ω–∏—è'] || '');
      row.push(properties['–ü–æ—Å—Ç–∞–≤—â–∏–∫'] || '');
      row.push(properties['–¶–µ–Ω–∞ –†–†–¶'] || '');
      row.push(properties['–¶–µ–Ω–∞ –æ–ø—Ç'] || '');

      // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É –∏ –æ—Å—Ç–∞—Ç–æ–∫
      row.push(product.base_price || 0);
      row.push(product.stock_quantity || 0);

      data.push(row);
    });

    // –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
    const worksheet = XLSX.utils.aoa_to_sheet([headers, ...data]);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, '–ü—Ä–∞–π—Å');

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª
    const excelBuffer = XLSX.write(workbook, { 
      type: 'buffer', 
      bookType: 'xlsx',
      compression: true
    });

    // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const safeCategoryName = category.name.replace(/[^a-zA-Z0-9–∞-—è–ê-–Ø\s]/g, '_');
    const fileName = `price_${safeCategoryName}_${new Date().toISOString().split('T')[0]}.xlsx`;

    console.log('‚úÖ Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω:', fileName, `(${products.length} —Ç–æ–≤–∞—Ä–æ–≤)`);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º Excel —Ñ–∞–π–ª
    return new NextResponse(excelBuffer, {
      status: 200,
      headers: {
        'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'Content-Disposition': `attachment; filename*=UTF-8''${encodeURIComponent(fileName)}`,
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      }
    });

  } catch (error) {
    return apiErrorHandler.handle(error, 'price-list-export');
  }
}