import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import * as XLSX from 'xlsx';
import { apiErrorHandler } from '@/lib/api-error-handler';
import { apiValidator } from '@/lib/api-validator';
import { validateAndFixData } from '@/lib/encoding-utils';

const prisma = new PrismaClient();

export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const catalogCategoryId = searchParams.get('catalogCategoryId');
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    apiValidator.validateId(catalogCategoryId!, 'catalogCategoryId');

    console.log('üîç –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–∞–π—Å–∞ –≤ Excel –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', catalogCategoryId);

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    const category = await prisma.catalogCategory.findUnique({
      where: { id: catalogCategoryId },
      select: { name: true }
    });

    if (!category) {
      return NextResponse.json({ success: false, error: 'Category not found' }, { status: 404 });
    }

    console.log('üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞–π–¥–µ–Ω–∞:', category.name);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const products = await prisma.product.findMany({
      where: { catalog_category_id: catalogCategoryId },
      select: {
        id: true,
        sku: true,
        name: true,
        properties_data: true,
        base_price: true,
        stock_quantity: true
      },
      take: 10000, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10,000 —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      orderBy: { sku: 'asc' }
    });

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞: ${products.length}`);

    // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è fallback
    const template = await prisma.importTemplate.findUnique({
      where: { catalog_category_id: catalogCategoryId }
    });

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
    const exportConfigResponse = await fetch(`${req.url.split('/api')[0]}/api/admin/export/config?catalogCategoryId=${catalogCategoryId}&exportType=price_list`);
    let exportConfig = null;
    
    if (exportConfigResponse.ok) {
      const configData = await exportConfigResponse.json();
      if (configData.success) {
        exportConfig = configData.config;
      }
    }

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—è —Å–≤–æ–π—Å—Ç–≤ –∏–∑ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
    const allPropertyFields = new Set<string>();
    
    products.forEach(product => {
      if (product.properties_data) {
        try {
          const properties = typeof product.properties_data === 'string' 
            ? JSON.parse(product.properties_data) 
            : product.properties_data;
          
          Object.keys(properties).forEach(key => {
            if (key && key.trim() !== '') {
              allPropertyFields.add(key);
            }
          });
        } catch (e) {
          console.warn(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–≤–æ–π—Å—Ç–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.id}:`, e);
        }
      }
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—è –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    let sortedPropertyFields = Array.from(allPropertyFields).sort();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ "SKU –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ" –≤ properties
    const skuInternalField = 'SKU –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ';
    const hasSkuInternal = sortedPropertyFields.includes(skuInternalField);
    
    // –£–±–∏—Ä–∞–µ–º "SKU –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ" –∏–∑ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (hasSkuInternal) {
      sortedPropertyFields = sortedPropertyFields.filter(field => field !== skuInternalField);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—è —Ü–µ–Ω –≤ properties
    // –í–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è —Ü–µ–Ω—ã –†–†–¶
    const priceRrcVariants = [
      '–¶–µ–Ω–∞ —Ä—Ä—Ü (–≤–∫–ª—é—á–∞—è —Ü–µ–Ω—É –ø–æ–ª–æ—Ç–Ω–∞, –∫–æ—Ä–æ–±–∞, –Ω–∞–ª–∏—á–Ω–∏–∫–æ–≤, –¥–æ–±–æ—Ä–æ–≤)',
      '–¶–µ–Ω–∞ –†–†–¶',
      '–¶–µ–Ω–∞ —Ä—Ä—Ü',
      '–¶–µ–Ω–∞ —Ä–æ–∑–Ω–∏—Ü–∞',
      '–†–†–¶'
    ];
    
    // –í–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è —Ü–µ–Ω—ã –æ–ø—Ç
    const priceOptVariants = [
      '–¶–µ–Ω–∞ –æ–ø—Ç',
      '–¶–µ–Ω–∞ –æ–ø—Ç–æ–≤–∞—è',
      '–û–ø—Ç'
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–∏ –ø–æ–ª—è –≤ properties
    // –ù–ï —É–¥–∞–ª—è–µ–º –∏—Ö –∏–∑ sortedPropertyFields - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è –≤ —ç–∫—Å–ø–æ—Ä—Ç–µ
    const hasPriceRrc = priceRrcVariants.some(variant => sortedPropertyFields.includes(variant));
    const hasPriceOpt = priceOptVariants.some(variant => sortedPropertyFields.includes(variant));
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    // "SKU –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ" –≤—Å–µ–≥–¥–∞ –≤ –Ω–∞—á–∞–ª–µ (–∏–∑ properties, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∏–∑ product.sku)
    // –ó–∞—Ç–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è —Å–≤–æ–π—Å—Ç–≤ (–í–ö–õ–Æ–ß–ê–Ø –ø–æ–ª—è —Ü–µ–Ω, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ properties)
    // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è —Ü–µ–Ω –≤ –∫–æ–Ω—Ü–µ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ properties
    const headers = [
      skuInternalField, // –í—Å–µ–≥–¥–∞ –≤ –Ω–∞—á–∞–ª–µ
      ...sortedPropertyFields, // –í—Å–µ –ø–æ–ª—è —Å–≤–æ–π—Å—Ç–≤ (–≤–∫–ª—é—á–∞—è —Ü–µ–Ω—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
      ...(hasPriceRrc ? [] : ['–¶–µ–Ω–∞ —Ä—Ä—Ü (–≤–∫–ª—é—á–∞—è —Ü–µ–Ω—É –ø–æ–ª–æ—Ç–Ω–∞, –∫–æ—Ä–æ–±–∞, –Ω–∞–ª–∏—á–Ω–∏–∫–æ–≤, –¥–æ–±–æ—Ä–æ–≤)']),
      ...(hasPriceOpt ? [] : ['–¶–µ–Ω–∞ –æ–ø—Ç'])
    ];
    
    const data = [];

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
    products.forEach((product, index) => {
      const row = [];

      // –ü–∞—Ä—Å–∏–º —Å–≤–æ–π—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏
      let properties = {};
      if (product.properties_data) {
        try {
          const rawProperties = typeof product.properties_data === 'string' 
            ? JSON.parse(product.properties_data) 
            : product.properties_data;
          properties = validateAndFixData(rawProperties);
        } catch (e) {
          console.error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–≤–æ–π—Å—Ç–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.id}:`, e);
        }
      }

      // SKU –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤–æ–µ - –±–µ—Ä–µ–º –∏–∑ properties, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∏–∑ product.sku
      const skuValue = hasSkuInternal 
        ? (properties[skuInternalField] || product.sku || '')
        : (product.sku || '');
      row.push(skuValue || '-');

      // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è —Å–≤–æ–π—Å—Ç–≤ –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ (–±–µ–∑ "SKU –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ" –∏ —Ü–µ–Ω, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏)
      sortedPropertyFields.forEach(field => {
        const value = properties[field];
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if (value === undefined || value === null || value === '') {
          row.push('-');
        } else {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–º
          if (typeof value === 'number' || !isNaN(Number(value))) {
            row.push(Number(value));
          } else {
            row.push(String(value));
          }
        }
      });

      // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É —Ä—Ä—Ü —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç –≤ properties
      if (!hasPriceRrc) {
        const priceRrcFull = properties['–¶–µ–Ω–∞ —Ä—Ä—Ü (–≤–∫–ª—é—á–∞—è —Ü–µ–Ω—É –ø–æ–ª–æ—Ç–Ω–∞, –∫–æ—Ä–æ–±–∞, –Ω–∞–ª–∏—á–Ω–∏–∫–æ–≤, –¥–æ–±–æ—Ä–æ–≤)'] 
          || properties['–¶–µ–Ω–∞ –†–†–¶'] 
          || properties['–¶–µ–Ω–∞ —Ä—Ä—Ü']
          || properties['–¶–µ–Ω–∞ —Ä–æ–∑–Ω–∏—Ü–∞']
          || '';
        row.push(priceRrcFull && !isNaN(Number(priceRrcFull)) ? Number(priceRrcFull) : '-');
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –æ–ø—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç –≤ properties
      if (!hasPriceOpt) {
        const priceOpt = properties['–¶–µ–Ω–∞ –æ–ø—Ç'] || properties['–¶–µ–Ω–∞ –æ–ø—Ç–æ–≤–∞—è'] || '';
        row.push(priceOpt && !isNaN(Number(priceOpt)) ? Number(priceOpt) : '-');
      }

      data.push(row);
    });

    // –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
    const worksheet = XLSX.utils.aoa_to_sheet([headers, ...data]);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, '–ü—Ä–∞–π—Å');

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª
    const excelBuffer = XLSX.write(workbook, { 
      type: 'buffer', 
      bookType: 'xlsx',
      compression: true
    });

    // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const safeCategoryName = category.name.replace(/[^a-zA-Z0-9–∞-—è–ê-–Ø\s]/g, '_');
    const fileName = `price_${safeCategoryName}_${new Date().toISOString().split('T')[0]}.xlsx`;

    console.log('‚úÖ Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω:', fileName, `(${products.length} —Ç–æ–≤–∞—Ä–æ–≤)`);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º Excel —Ñ–∞–π–ª
    return new NextResponse(excelBuffer, {
      status: 200,
      headers: {
        'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'Content-Disposition': `attachment; filename*=UTF-8''${encodeURIComponent(fileName)}`,
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      }
    });

  } catch (error) {
    return apiErrorHandler.handle(error, 'price-list-export');
  }
}