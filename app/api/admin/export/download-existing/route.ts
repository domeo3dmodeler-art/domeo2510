import { NextRequest, NextResponse } from 'next/server';
import fs from 'fs';
import path from 'path';

export async function GET(req: NextRequest) {
  try {
    console.log('üîç –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—Ä–∞–π—Å–∞');

    // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞
    const files = fs.readdirSync(process.cwd()).filter((file: string) => 
      file.startsWith('price_') && file.endsWith('.csv')
    );

    if (files.length === 0) {
      return NextResponse.json({ 
        success: false, 
        error: '–§–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞.' 
      }, { status: 404 });
    }

    // –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    const latestFile = files.sort().pop();
    const filePath = path.join(process.cwd(), latestFile!);
    
    console.log('üìÅ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª:', latestFile);

    // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    const fileContent = fs.readFileSync(filePath, 'utf8');

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º CSV —Ñ–∞–π–ª
    return new NextResponse(fileContent, {
      status: 200,
      headers: {
        'Content-Type': 'text/csv; charset=utf-8',
        'Content-Disposition': `attachment; filename="${latestFile}"`,
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      }
    });

  } catch (error) {
    console.error('‚ùå Error downloading file:', error);
    return NextResponse.json(
      { success: false, error: `Failed to download file: ${error.message}` },
      { status: 500 }
    );
  }
}