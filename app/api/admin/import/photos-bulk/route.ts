import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { writeFile, mkdir } from 'fs/promises';
import path from 'path';
import { validateImageFile, generateUniqueFileName } from '../../../../../lib/validation/file-validation';
import { uploadRateLimiter, getClientIP, createRateLimitResponse } from '../../../../../lib/security/rate-limiter';

const prisma = new PrismaClient();

// POST /api/admin/import/photos-bulk - –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
export async function POST(request: NextRequest) {
  try {
    // Rate limiting
    const clientIP = getClientIP(request);
    if (!uploadRateLimiter.isAllowed(clientIP)) {
      return createRateLimitResponse(uploadRateLimiter, clientIP);
    }

    const formData = await request.formData();
    const photos = formData.getAll('photos') as File[];
    const category = formData.get('category') as string;
    const mappingProperty = formData.get('mapping_property') as string;
    const autoLink = formData.get('auto_link') === 'true';

    console.log('=== –ú–ê–°–°–û–í–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –§–û–¢–û ===');
    console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ:', photos.length);
    console.log('–ö–∞—Ç–µ–≥–æ—Ä–∏—è:', category);
    console.log('–°–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏:', mappingProperty);
    console.log('–ê–≤—Ç–æ–ø—Ä–∏–≤—è–∑–∫–∞:', autoLink);

    if (!photos || photos.length === 0) {
      return NextResponse.json(
        { success: false, message: '–ù–µ –≤—ã–±—Ä–∞–Ω—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏' },
        { status: 400 }
      );
    }

    if (!category) {
      return NextResponse.json(
        { success: false, message: '–ù–µ —É–∫–∞–∑–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏' },
        { status: 400 }
      );
    }

    if (!mappingProperty) {
      return NextResponse.json(
        { success: false, message: '–ù–µ —É–∫–∞–∑–∞–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —Ñ–æ—Ç–æ' },
        { status: 400 }
      );
    }

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    const uploadDir = path.join(process.cwd(), 'public', 'uploads', 'products', category);
    
    try {
      await mkdir(uploadDir, { recursive: true });
      console.log('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞:', uploadDir);
    } catch (error) {
      console.log('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', error);
    }

    const uploadedPhotos: any[] = [];
    const uploadErrors: string[] = [];
    const linkingResults: any[] = [];

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    for (let i = 0; i < photos.length; i++) {
      const photo = photos[i];
      
      try {
        console.log(`–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ ${i + 1}/${photos.length}: ${photo.name}`);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ (—É–±—Ä–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–∑–º–µ—Ä–∞)
        const validation = validateImageFile(photo);
        if (!validation.isValid) {
          uploadErrors.push(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ${photo.name}: ${validation.error}`);
          continue;
        }
        
        const bytes = await photo.arrayBuffer();
        const buffer = Buffer.from(bytes);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        const fileName = generateUniqueFileName(photo.name);
        const filePath = path.join(uploadDir, fileName);
        
        await writeFile(filePath, buffer);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        const photoInfo = {
          originalName: photo.name,
          fileName: fileName,
          filePath: `/uploads/products/${category}/${fileName}`,
          size: photo.size,
          type: photo.type,
          uploadedAt: new Date().toISOString()
        };
        
        uploadedPhotos.push(photoInfo);
        
        console.log(`Photo ${i + 1} uploaded successfully:`, fileName, 'size:', photo.size);
        
      } catch (error) {
        console.error(`Error uploading photo ${i + 1}:`, error);
        uploadErrors.push(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ${photo.name}: ${error.message}`);
      }
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ —Ñ–æ—Ç–æ –∫ —Ç–æ–≤–∞—Ä–∞–º
    let linkedPhotos = 0;
    let linkedProducts = 0;
    
    if (autoLink && mappingProperty && uploadedPhotos.length > 0) {
      console.log('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ —Ñ–æ—Ç–æ –∫ —Ç–æ–≤–∞—Ä–∞–º –ø–æ —Å–≤–æ–π—Å—Ç–≤—É:', mappingProperty);
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const products = await prisma.product.findMany({
          where: {
            catalog_category_id: category
          },
          select: {
            id: true,
            sku: true,
            properties_data: true
          }
        });
        
        console.log(`–ù–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category}`);
        
        for (const photo of uploadedPhotos) {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
          const fileNameWithoutExt = path.parse(photo.originalName).name;
          
          console.log(`\n=== –û–ë–†–ê–ë–û–¢–ö–ê –§–û–¢–û: ${photo.originalName} ===`);
          console.log(`–ò–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: ${fileNameWithoutExt}`);
          
          // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä—ã —Å —Ç–∞–∫–∏–º –∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ–º —Å–≤–æ–π—Å—Ç–≤–∞
          const matchingProducts = products.filter(product => {
            try {
              const properties = JSON.parse(product.properties_data || '{}');
              const propertyValue = properties[mappingProperty];
              
              if (propertyValue) {
                const valueStr = propertyValue.toString().trim();
                const fileNameStr = fileNameWithoutExt.trim();
                
                // –ë–æ–ª–µ–µ –≥–∏–±–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (—É—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä –∏ –ø—Ä–æ–±–µ–ª—ã)
                const exactMatch = valueStr.toLowerCase() === fileNameStr.toLowerCase();
                const partialMatch = valueStr.toLowerCase().includes(fileNameStr.toLowerCase()) ||
                                   fileNameStr.toLowerCase().includes(valueStr.toLowerCase());
                
                if (exactMatch || partialMatch) {
                  console.log(`‚úÖ –ù–ê–ô–î–ï–ù–û –°–û–í–ü–ê–î–ï–ù–ò–ï –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.sku}: "${valueStr}" ~ "${fileNameStr}"`);
                  return true;
                }
              }
              
              return false;
            } catch (error) {
              console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞ ${product.sku}:`, error);
              return false;
            }
          });
          
          console.log(`–ù–∞–π–¥–µ–Ω–æ ${matchingProducts.length} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ñ–æ—Ç–æ ${photo.originalName}`);
          
          // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ñ–æ—Ç–æ –∫–æ –≤—Å–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Ç–æ–≤–∞—Ä–∞–º
          for (const product of matchingProducts) {
            try {
              const currentProperties = JSON.parse(product.properties_data || '{}');
              
              // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ photos –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
              if (!currentProperties.photos) {
                currentProperties.photos = [];
              }
              
              // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ—á–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
              const exactFileName = photo.originalName.replace(/\.[^/.]+$/, ""); // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
              
              // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ñ–æ—Ç–æ —Å —Ç–∞–∫–∏–º –∂–µ –∏–º–µ–Ω–µ–º (–≤–∫–ª—é—á–∞—è —Å—É—Ñ—Ñ–∏–∫—Å—ã)
              const existingPhotoIndex = currentProperties.photos.findIndex((existingPhoto: string) => {
                const existingFileName = existingPhoto.split('/').pop()?.replace(/\.[^/.]+$/, "") || '';
                return existingFileName === exactFileName;
              });
              
              if (existingPhotoIndex !== -1) {
                // –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ñ–æ—Ç–æ
                currentProperties.photos[existingPhotoIndex] = photo.filePath;
                
                await prisma.product.update({
                  where: { id: product.id },
                  data: {
                    properties_data: JSON.stringify(currentProperties)
                  }
                });
                
                linkedPhotos++;
                console.log(`üîÑ –§–æ—Ç–æ ${photo.originalName} –∑–∞–º–µ–Ω–µ–Ω–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.sku}`);
                
                linkingResults.push({
                  photo: photo.originalName,
                  product: product.sku,
                  status: 'replaced'
                });
              } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –≤ –≥–∞–ª–µ—Ä–µ—é
                currentProperties.photos.push(photo.filePath);
                
                await prisma.product.update({
                  where: { id: product.id },
                  data: {
                    properties_data: JSON.stringify(currentProperties)
                  }
                });
                
                linkedPhotos++;
                console.log(`‚úÖ –§–æ—Ç–æ ${photo.originalName} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≥–∞–ª–µ—Ä–µ—é —Ç–æ–≤–∞—Ä–∞ ${product.sku}`);
                
                linkingResults.push({
                  photo: photo.originalName,
                  product: product.sku,
                  status: 'linked'
                });
              }
            } catch (error) {
              console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ —Ñ–æ—Ç–æ –∫ —Ç–æ–≤–∞—Ä—É ${product.sku}:`, error);
              
              linkingResults.push({
                photo: photo.originalName,
                product: product.sku,
                status: 'error',
                error: error.message
              });
            }
          }
          
          if (matchingProducts.length > 0) {
            linkedProducts += matchingProducts.length;
          }
        }
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ —Ñ–æ—Ç–æ –∫ —Ç–æ–≤–∞—Ä–∞–º:', error);
      }
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    const stats = {
      totalPhotos: photos.length,
      uploadedPhotos: uploadedPhotos.length,
      uploadErrors: uploadErrors.length,
      linkedPhotos: linkedPhotos,
      linkedProducts: linkedProducts,
      linkingResults: linkingResults
    };

    console.log('‚úÖ –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', stats);

    return NextResponse.json({
      success: true,
      message: `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${uploadedPhotos.length} –∏–∑ ${photos.length} —Ñ–æ—Ç–æ`,
      stats: stats,
      uploadedPhotos: uploadedPhotos,
      uploadErrors: uploadErrors,
      linkingResults: linkingResults
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ:', error);
    return NextResponse.json(
      { success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ' },
      { status: 500 }
    );
  }
}
