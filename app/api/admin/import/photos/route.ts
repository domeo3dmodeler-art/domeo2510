import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { writeFile, mkdir } from 'fs/promises';
import fs from 'fs';
import path from 'path';
import { validateImageFile, generateUniqueFileName } from '../../../../../lib/validation/file-validation';
import { uploadRateLimiter, getClientIP, createRateLimitResponse } from '../../../../../lib/security/rate-limiter';
import { upsertPropertyPhoto, deletePropertyPhotos } from '../../../../../lib/property-photos';

const prisma = new PrismaClient();

// DELETE /api/admin/import/photos - –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–∏–≤—è–∑–æ–∫ —Ñ–æ—Ç–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export async function DELETE(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const category = searchParams.get('category');
    const propertyName = searchParams.get('property_name');

    if (!category) {
      return NextResponse.json(
        { success: false, message: '–ù–µ —É–∫–∞–∑–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è' },
        { status: 400 }
      );
    }

    let deletedCount = 0;

    if (propertyName) {
      // –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞
      const result = await prisma.propertyPhoto.deleteMany({
      where: {
          categoryId: category,
          propertyName: propertyName
        }
      });
      deletedCount = result.count;
    } else {
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const result = await prisma.propertyPhoto.deleteMany({
        where: {
          categoryId: category
        }
      });
      deletedCount = result.count;
    }

    // –û—á–∏—â–∞–µ–º –∫—ç—à
    try {
      await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/catalog/doors/photos`, {
        method: 'DELETE'
      });
      await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/catalog/doors/complete-data`, {
        method: 'DELETE'
      });
      } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞:', error);
    }

    return NextResponse.json({
      success: true,
      message: `–£–¥–∞–ª–µ–Ω–æ ${deletedCount} —Ñ–æ—Ç–æ`,
      deletedCount
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–æ—Ç–æ:', error);
    return NextResponse.json(
      { success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–æ—Ç–æ' },
      { status: 500 }
    );
  }
}

// POST /api/admin/import/photos - –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —Å–≤–æ–π—Å—Ç–≤ —Ç–æ–≤–∞—Ä–æ–≤
export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
    const clientIP = getClientIP(request);
    const isAllowed = uploadRateLimiter.isAllowed(clientIP);
    
    if (!isAllowed) {
      return createRateLimitResponse(uploadRateLimiter, clientIP);
    }

    const formData = await request.formData();
    const photos = formData.getAll('photos') as File[];
    const category = formData.get('category') as string;
    const mappingProperty = formData.get('mapping_property') as string;
    const uploadType = formData.get('upload_type') as string || 'property';

    console.log('=== –ó–ê–ì–†–£–ó–ö–ê –§–û–¢–û ===');
    console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ:', photos.length);
    console.log('–ö–∞—Ç–µ–≥–æ—Ä–∏—è:', category);
    console.log('–°–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏:', mappingProperty);
    console.log('–¢–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏:', uploadType);

    if (!category || !mappingProperty) {
      return NextResponse.json(
        { success: false, message: '–ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–ª–∏ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏' },
        { status: 400 }
      );
    }

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    const uploadDir = path.join(process.cwd(), 'public', 'uploads', 'products', category);
    
    try {
      await mkdir(uploadDir, { recursive: true });
      console.log('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞:', uploadDir);
    } catch (error) {
      console.log('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', error);
    }

    const uploadedPhotos: any[] = [];
    const uploadErrors: string[] = [];

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    for (let i = 0; i < photos.length; i++) {
      const photo = photos[i];
      
      try {
        console.log(`–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ ${i + 1}/${photos.length}: ${photo.name}`);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
        const validation = validateImageFile(photo);
        if (!validation.isValid) {
          uploadErrors.push(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ${photo.name}: ${validation.error}`);
          continue;
        }
        
        const bytes = await photo.arrayBuffer();
        const buffer = Buffer.from(bytes);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        const fileName = generateUniqueFileName(photo.name);
        const filePath = path.join(uploadDir, fileName);
        
        await writeFile(filePath, buffer);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–±—É–¥–µ–º –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ç–∏–ø –ø–æ–∑–∂–µ)
        const uploadedPhoto = {
          originalName: photo.name,
          fileName: fileName,
          filePath: `products/${category}/${fileName}`, // –ë–µ–∑ /uploads, —Ç.–∫. API –¥–æ–±–∞–≤–ª—è–µ—Ç —ç—Ç–æ
          size: photo.size,
          type: photo.type,
          photoInfo: null // –û–ø—Ä–µ–¥–µ–ª–∏–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        };
        
        uploadedPhotos.push(uploadedPhoto);
        
        console.log(`Photo ${i} uploaded successfully:`, fileName);
        
      } catch (error) {
        console.error(`Error uploading photo ${i}:`, error);
        uploadErrors.push(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ${photo.name}: ${error.message}`);
      }
    }
    
    // –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–æ—Ç–æ (–æ–±–ª–æ–∂–∫–∞/–≥–∞–ª–µ—Ä–µ—è)
    // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê:
    // 1. –î–ª—è –ö–ê–ñ–î–û–ì–û —Ñ–∞–π–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏, —É–±–∏—Ä–∞—è –í–°–ï —Å—É—Ñ—Ñ–∏–∫—Å—ã _N
    // 2. –ï—Å–ª–∏ —Ñ–∞–π–ª –ë–ï–ó _N (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –±–∞–∑–æ–≤—ã–º –∏–º–µ–Ω–µ–º) = –æ–±–ª–æ–∂–∫–∞ (cover)
    // 3. –ï—Å–ª–∏ —Ñ–∞–π–ª —Å _N (–Ω–∞–ø—Ä–∏–º–µ—Ä, X_1, X_2) = –≥–∞–ª–µ—Ä–µ—è (gallery_N)
    // 4. –†–µ–≥–∏—Å—Ç—Ä –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è
    //
    // –ü—Ä–∏–º–µ—Ä—ã:
    // "DomeoDoors_Base_1.png" -> –±–∞–∑–æ–≤–æ–µ –∏–º—è "domeodoors_base_1" -> –æ–±–ª–æ–∂–∫–∞
    // "DomeoDoors_Base_1_1.png" -> –±–∞–∑–æ–≤–æ–µ –∏–º—è "domeodoors_base_1" -> –≥–∞–ª–µ—Ä–µ—è_1
    // "DomeoDoors_Base_1_2.png" -> –±–∞–∑–æ–≤–æ–µ –∏–º—è "domeodoors_base_1" -> –≥–∞–ª–µ—Ä–µ—è_2
    // "DomeoDoors_Base_2.png" -> –±–∞–∑–æ–≤–æ–µ –∏–º—è "domeodoors_base_2" -> –æ–±–ª–æ–∂–∫–∞
    // "DomeoDoors_Base_2_1.png" -> –±–∞–∑–æ–≤–æ–µ –∏–º—è "domeodoors_base_2" -> –≥–∞–ª–µ—Ä–µ—è_1
    
    console.log('\n=== –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–ò–ü–ê –§–û–¢–û ===');
    console.log('–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤:', uploadedPhotos.length);
    
    for (const photo of uploadedPhotos) {
      const nameWithoutExt = photo.originalName.replace(/\.[^/.]+$/, "").toLowerCase();
      
      // –õ–û–ì–ò–ö–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –¢–ò–ü–ê –§–û–¢–û:
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∫–æ–Ω—Ü–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å—É—Ñ—Ñ–∏–∫—Å _N (–≥–∞–ª–µ—Ä–µ—è)
      // 2. –£–±–∏—Ä–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å _N –µ—Å–ª–∏ –µ—Å—Ç—å
      // 3. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–º—è –º–æ–¥–µ–ª–∏ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç –ë–î
      // 
      // –ü—Ä–∏–º–µ—Ä—ã:
      // "domeodoors_alberti4" -> –º–æ–¥–µ–ª—å "domeodoors_alberti_4" (–æ–±–ª–æ–∂–∫–∞)
      // "domeodoors_alberti4_1" -> –º–æ–¥–µ–ª—å "domeodoors_alberti_4" (–≥–∞–ª–µ—Ä–µ—è_1)
      // "domeodoors_base_1" -> –º–æ–¥–µ–ª—å "domeodoors_base_1" (–æ–±–ª–æ–∂–∫–∞)
      // "domeodoors_base_1_1" -> –º–æ–¥–µ–ª—å "domeodoors_base_1" (–≥–∞–ª–µ—Ä–µ—è_1)
      
      // –õ–û–ì–ò–ö–ê:
      // 1. –ï—Å–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ _1, _2 –∏ —Ç.–¥. (–Ω–∞–ø—Ä–∏–º–µ—Ä, base_1_1, base_1_2) ‚Üí –ì–ê–õ–ï–†–ï–Ø
      // 2. –ï—Å–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –ù–ï –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ _N ‚Üí –û–ë–õ–û–ñ–ö–ê
      // 
      // –ü—Ä–∏–º–µ—Ä—ã:
      // "Base_1.png" ‚Üí –æ–±–ª–æ–∂–∫–∞ (–ø–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º —Å–≤–æ–π—Å—Ç–≤–∞)
      // "Base_1_1.png" ‚Üí –≥–∞–ª–µ—Ä–µ—è_1 (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π _1)
      // "Base_1_2.png" ‚Üí –≥–∞–ª–µ—Ä–µ—è_2 (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π _2)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∫–æ–Ω—Ü–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å _N
      // –ù–∞–ø—Ä–∏–º–µ—Ä: "d29_1" ‚Üí –Ω–∞—à–ª–∏ "_1" –≤ –∫–æ–Ω—Ü–µ, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –≥–∞–ª–µ—Ä–µ—è
      // –í–∞–∂–Ω–æ: –∏—â–µ–º –∏–º–µ–Ω–Ω–æ "_N" (–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ + —Ü–∏—Ñ—Ä–∞), –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—É
      const galleryMatch = nameWithoutExt.match(/_(\d+)$/);
      
      let baseName: string;
      let galleryNumber: number | null = null;
      let isCover: boolean;
      
      if (galleryMatch) {
        // –ï—Å—Ç—å —Å—É—Ñ—Ñ–∏–∫—Å _N –≤ –∫–æ–Ω—Ü–µ - —ç—Ç–æ –≥–∞–ª–µ—Ä–µ—è
        // –ü—Ä–∏–º–µ—Ä: "d29_1" ‚Üí galleryMatch –Ω–∞—Ö–æ–¥–∏—Ç "_1", —ç—Ç–æ –≥–∞–ª–µ—Ä–µ—è
        // –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—É—Ñ—Ñ–∏–∫—Å _N –∏–∑ –∏–º–µ–Ω–∏
        baseName = nameWithoutExt.slice(0, -galleryMatch[0].length);
        galleryNumber = parseInt(galleryMatch[1]);
        isCover = false;
        
        console.log(`üì∏ –ì–ê–õ–ï–†–ï–Ø: ${nameWithoutExt} ‚Üí –±–∞–∑–∞ "${baseName}", –Ω–æ–º–µ—Ä ${galleryNumber}`);
      } else {
        // –ù–ï–¢ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—É—Ñ—Ñ–∏–∫—Å–∞ _N - —ç—Ç–æ –û–ë–õ–û–ñ–ö–ê
        baseName = nameWithoutExt;
        galleryNumber = null;
        isCover = true;
        
        console.log(`üì∑ –û–ë–õ–û–ñ–ö–ê: ${nameWithoutExt}`);
      }
      
      const modelName = baseName;
      
      photo.photoInfo = {
        fileName: photo.originalName,
        isCover: isCover,
        number: galleryNumber,
        baseName: modelName,
        isGallery: !isCover
      };
      
      if (isCover) {
        console.log(`‚úÖ –û–±–ª–æ–∂–∫–∞: ${photo.originalName} -> –º–æ–¥–µ–ª—å "${modelName}"`);
      } else {
        console.log(`üì∏ –ì–∞–ª–µ—Ä–µ—è ${galleryNumber}: ${photo.originalName} -> –º–æ–¥–µ–ª—å "${modelName}"`);
      }
    }
    
    console.log('\n=== –ö–û–ù–ï–¶ –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –¢–ò–ü–ê ===\n');
    
    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ñ–æ—Ç–æ –∫ —Ç–æ–≤–∞—Ä–∞–º –∏–ª–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º
    let linkedPhotos = 0;
    const linkedDetails: any[] = [];

    if (mappingProperty && uploadedPhotos.length > 0) {
      if (uploadType === 'property') {
        console.log('–ü—Ä–∏–≤—è–∑–∫–∞ —Ñ–æ—Ç–æ –∫ —Å–≤–æ–π—Å—Ç–≤–∞–º —Ç–æ–≤–∞—Ä–æ–≤ (property_photos)...');
        
        for (const photo of uploadedPhotos) {
          const { photoInfo } = photo;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ photoInfo –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
          if (!photoInfo) {
            console.error(`‚ùå photoInfo –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${photo.originalName}`);
            continue;
          }
          
          console.log(`\n=== –û–ë–†–ê–ë–û–¢–ö–ê –§–û–¢–û: ${photo.originalName} ===`);
          console.log(`–¢–∏–ø —Ñ–æ—Ç–æ: ${photoInfo.isCover ? '–û–ë–õ–û–ñ–ö–ê' : '–ì–ê–õ–ï–†–ï–Ø'}`);
          console.log(`–ë–∞–∑–æ–≤–æ–µ –∏–º—è: ${photoInfo.baseName}`);
          console.log(`–ù–æ–º–µ—Ä: ${photoInfo.number || 'N/A'}`);

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–æ—Ç–æ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
          const photoType = photoInfo.isCover 
            ? 'cover' 
            : (photoInfo.number ? `gallery_${photoInfo.number}` : 'cover');

          // –î–ª—è propertyValue –í–°–ï–ì–î–ê —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
          // –û–Ω–æ –¥–æ–ª–∂–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞
          const propertyValue = nameWithoutExt;
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ property_photos
          const savedPhoto = await upsertPropertyPhoto(
            category,
            mappingProperty,
            propertyValue,
            photo.filePath,
            photoType,
            {
              originalFilename: photo.originalName,
              fileSize: photo.size,
              mimeType: photo.type
            }
          );

          if (savedPhoto) {
            linkedPhotos++;
            
            // –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            const searchValue = mappingProperty === '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞' 
              ? photo.originalName.replace(/\.[^/.]+$/, "").toLowerCase()
              : photoInfo.baseName;
            
            console.log(`–ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ —Å–≤–æ–π—Å—Ç–≤—É "${mappingProperty}" = "${searchValue}"`);
            
            // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä—ã —Å —ç—Ç–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const products = await prisma.product.findMany({
          where: {
                catalog_category_id: category,
                properties_data: {
                  contains: `"${mappingProperty}":"${searchValue}"`
                }
          },
          select: {
            id: true,
            sku: true,
                name: true
              }
            });

            linkedDetails.push({
              fileName: photo.originalName,
              message: `–ü—Ä–∏–≤—è–∑–∞–Ω–æ –∫ ${products.length} —Ç–æ–≤–∞—Ä–∞–º`,
              productsLinked: products.length,
              matchedProducts: products.map(p => ({
                id: p.id,
                sku: p.sku,
                name: p.name
              }))
            });

            console.log(`‚úÖ –§–æ—Ç–æ ${photo.originalName} –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ —Å–≤–æ–π—Å—Ç–≤—É ${mappingProperty}="${photoInfo.baseName}"`);
          } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ ${photo.originalName}`);
          }
        }
      } else {
        console.log('–ü—Ä–∏–≤—è–∑–∫–∞ —Ñ–æ—Ç–æ –∫ —Ç–æ–≤–∞—Ä–∞–º (properties_data)...');

        for (const photo of uploadedPhotos) {
          const { photoInfo } = photo;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ photoInfo –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
          if (!photoInfo) {
            console.error(`‚ùå photoInfo –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${photo.originalName}`);
            continue;
          }
          
          console.log(`\n=== –û–ë–†–ê–ë–û–¢–ö–ê –§–û–¢–û: ${photo.originalName} ===`);
          console.log(`–ë–∞–∑–æ–≤–æ–µ –∏–º—è: ${photoInfo.baseName}`);

          // –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
          const searchValue = mappingProperty === '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞' 
            ? photo.originalName.replace(/\.[^/.]+$/, "").toLowerCase()
            : photoInfo.baseName;
          
          console.log(`–ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ —Å–≤–æ–π—Å—Ç–≤—É "${mappingProperty}" = "${searchValue}"`);

          // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä—ã —Å —ç—Ç–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º —Å–≤–æ–π—Å—Ç–≤–∞
          const products = await prisma.product.findMany({
            where: {
              catalog_category_id: category,
              properties_data: {
                contains: `"${mappingProperty}":"${searchValue}"`
              }
            },
            select: {
              id: true,
              sku: true,
              name: true,
              properties_data: true
            }
          });

          let productsUpdated = 0;
          for (const product of products) {
            try {
              const properties = JSON.parse(product.properties_data || '{}');
              
              // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–æ—Ç–æ
              if (!properties.photos) {
                properties.photos = { cover: null, gallery: [] };
              } else if (Array.isArray(properties.photos)) {
                // –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: –º–∞—Å—Å–∏–≤ -> –æ–±—ä–µ–∫—Ç
                const oldPhotos = properties.photos;
                properties.photos = {
                  cover: oldPhotos[0] || null,
                  gallery: oldPhotos.slice(1)
                };
              }
              
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—É–¥–∞ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ
              if (photo.photoInfo.isCover) {
                // –û–±–ª–æ–∂–∫–∞ - –∑–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
                properties.photos.cover = photo.filePath;
                console.log(`üì∏ –û–±–ª–æ–∂–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.sku}: ${photo.filePath}`);
              } else if (photo.photoInfo.number) {
                // –ì–∞–ª–µ—Ä–µ—è - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤
                const galleryNumber = photo.photoInfo.number;
                // –ó–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–∏–≤ null'–∞–º–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                while (properties.photos.gallery.length < galleryNumber - 1) {
                  properties.photos.gallery.push(null);
                }
                properties.photos.gallery[galleryNumber - 1] = photo.filePath;
                console.log(`üì∏ –§–æ—Ç–æ –≥–∞–ª–µ—Ä–µ–∏ ${galleryNumber} –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.sku}: ${photo.filePath}`);
              } else {
                // –ë–µ–∑ –Ω–æ–º–µ—Ä–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü –≥–∞–ª–µ—Ä–µ–∏
                properties.photos.gallery.push(photo.filePath);
              }
                
              await prisma.product.update({
                where: { id: product.id },
                data: {
                  properties_data: JSON.stringify(properties)
                }
              });
              
              productsUpdated++;
            } catch (error) {
              console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ${product.sku}:`, error);
            }
          }

          if (productsUpdated > 0) {
                linkedPhotos++;
            linkedDetails.push({
              fileName: photo.originalName,
              message: `–ü—Ä–∏–≤—è–∑–∞–Ω–æ –∫ ${productsUpdated} —Ç–æ–≤–∞—Ä–∞–º`,
              productsLinked: productsUpdated,
              matchedProducts: products.slice(0, productsUpdated).map(p => ({
                id: p.id,
                sku: p.sku,
                name: p.name
              }))
            });

            console.log(`‚úÖ –§–æ—Ç–æ ${photo.originalName} –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ ${productsUpdated} —Ç–æ–≤–∞—Ä–∞–º`);
          }
        }
      }
    }

    // –û—á–∏—â–∞–µ–º –∫—ç—à
    try {
      await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/catalog/doors/photos`, {
        method: 'DELETE'
      });
      await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/catalog/doors/complete-data`, {
        method: 'DELETE'
      });
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞:', error);
    }

    const result = {
      success: true,
      uploaded: uploadedPhotos.length,
      linked: linkedPhotos,
      errors: uploadErrors.length,
      uploadErrors,
      linkedDetails,
      photos: uploadedPhotos,
      category,
      upload_dir: uploadDir,
      mapping_property: mappingProperty
    };

        console.log('=== –†–ï–ó–£–õ–¨–¢–ê–¢ –ó–ê–ì–†–£–ó–ö–ò ===');
    console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${result.uploaded}`);
    console.log(`–ü—Ä–∏–≤—è–∑–∞–Ω–æ –∫ ${uploadType === 'property' ? '—Å–≤–æ–π—Å—Ç–≤–∞–º' : '—Ç–æ–≤–∞—Ä–∞–º'}: ${result.linked}`);
    console.log(`–û—à–∏–±–æ–∫: ${result.errors}`);

        return NextResponse.json(result);

  } catch (error) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ:', error);
    return NextResponse.json(
      { success: false, message: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ' },
      { status: 500 }
    );
  }
}
