import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import * as XLSX from 'xlsx';
import { validateDocumentFile } from '@/lib/validation/file-validation';
import { fixAllEncoding, fixFieldsEncoding } from '@/lib/encoding-utils';
import { apiErrorHandler } from '@/lib/api-error-handler';
import { apiValidator } from '@/lib/api-validator';

const prisma = new PrismaClient();

// ===================== –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ô –ò–ú–ü–û–†–¢ =====================

export async function POST(req: NextRequest) {
  try {
    const formData = await req.formData();
    const file = formData.get("file") as File;
    const categoryId = formData.get("category") as string;
    const mode = formData.get("mode") as string || 'preview'; // 'preview' –∏–ª–∏ 'import'
    const templateId = formData.get("templateId") as string;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!file) {
      return NextResponse.json({ error: "–§–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω" }, { status: 400 });
    }

    if (!categoryId) {
      return NextResponse.json({ error: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞" }, { status: 400 });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    const validation = validateDocumentFile(file);
    if (!validation.isValid) {
      console.error('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞:', {
        filename: file.name,
        size: file.size,
        type: file.type,
        error: validation.error
      });
      return NextResponse.json({ 
        error: validation.error,
        details: {
          filename: file.name,
          size: file.size,
          type: file.type
        }
      }, { status: 400 });
    }

    console.log('üîç –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç:', {
      filename: file.name,
      categoryId,
      mode,
      templateId: templateId || 'auto'
    });

    // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
    let template;
    if (templateId) {
      template = await prisma.importTemplate.findUnique({
        where: { id: templateId }
      });
    } else {
      template = await prisma.importTemplate.findFirst({
        where: { 
          catalog_category_id: categoryId,
          is_active: true 
        },
        orderBy: { created_at: 'desc' }
      });
    }

    if (!template) {
      console.error('‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categoryId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
      const category = await prisma.catalogCategory.findUnique({
        where: { id: categoryId },
        select: { name: true }
      });

      const errorMessage = category 
        ? `–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category.name}". –°–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º.`
        : `–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID "${categoryId}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`;

      return NextResponse.json(
        { 
          error: errorMessage,
          details: {
            categoryId,
            categoryName: category?.name || null,
            message: "–°–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª '–®–∞–±–ª–æ–Ω—ã' –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –∏–º–ø–æ—Ä—Ç–∞."
          }
        },
        { status: 400 }
      );
    }

    // –ü–∞—Ä—Å–∏–º –ø–æ–ª—è —à–∞–±–ª–æ–Ω–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏
    let requiredFields = JSON.parse(template.required_fields || '[]');
    let calculatorFields = JSON.parse(template.calculator_fields || '[]');
    let exportFields = JSON.parse(template.export_fields || '[]');
    let templateConfig = JSON.parse(template.template_config || '{}');
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
    requiredFields = fixFieldsEncoding(requiredFields);
    calculatorFields = fixFieldsEncoding(calculatorFields);
    exportFields = fixFieldsEncoding(exportFields);
    templateConfig = fixAllEncoding(templateConfig);

    console.log('üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω:', {
      name: template.name,
      requiredFields: requiredFields.length,
      calculatorFields: calculatorFields.length,
      exportFields: exportFields.length
    });

    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    const buffer = await file.arrayBuffer();
    const workbook = XLSX.read(buffer, { type: 'buffer' });
    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    const rawData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

    if (rawData.length < 2) {
      return NextResponse.json(
        { error: "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö" },
        { status: 400 }
      );
    }

    const headers = rawData[0] as string[];
    const rows = rawData.slice(1) as any[][];

    console.log('üìä –î–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞:', {
      headers: headers.length,
      rows: rows.length,
      sampleHeaders: headers.slice(0, 5)
    });

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const fixedHeaders = fixFieldsEncoding(headers);
    
    console.log('üîß –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏:', fixedHeaders);

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —à–∞–±–ª–æ–Ω–æ–º
    const availableRequiredFields = requiredFields.filter(field => fixedHeaders.includes(field));
    const missingFields = requiredFields.filter(field => !fixedHeaders.includes(field));
    
    console.log('üìã –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π:', {
      requiredFields: requiredFields.length,
      availableRequiredFields: availableRequiredFields.length,
      missingFields: missingFields.length,
      availableFields: fixedHeaders
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SKU –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ - —ç—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    const hasInternalSku = fixedHeaders.includes('SKU –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ');
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è –∏–∑ —à–∞–±–ª–æ–Ω–∞ –ò –Ω–µ—Ç SKU –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ - –æ—à–∏–±–∫–∞
    if (availableRequiredFields.length === 0 && !hasInternalSku) {
      return NextResponse.json({
        error: "–§–∞–π–ª –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à–∞–±–ª–æ–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        details: {
          category: template.catalog_category?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
          missingFields: missingFields,
          availableFields: fixedHeaders,
          templateRequiredFields: requiredFields,
          suggestion: "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã 'SKU –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ' –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤, –∏–ª–∏ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ —à–∞–±–ª–æ–Ω–∞. –°–∫–∞—á–∞–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É."
        },
        message: `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è. –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã 'SKU –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ' –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤, –∏–ª–∏ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ —à–∞–±–ª–æ–Ω–∞: ${missingFields.slice(0, 5).join(', ')}.`
      }, { status: 400 });
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π, –Ω–æ –µ—Å—Ç—å SKU –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ - —ç—Ç–æ —Ä–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω/—Å–≤–æ–π—Å—Ç–≤
    if (availableRequiredFields.length === 0 && hasInternalSku) {
      console.log('‚ÑπÔ∏è –†–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ SKU –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ, —Ä–∞–∑—Ä–µ—à–∞–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω/—Å–≤–æ–π—Å—Ç–≤');
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const products = [];
    const errors = [];

    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      try {
        const product: any = {
          sku: '', // –ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω
          name: '',
          properties_data: {},
          row_number: i + 2
        };

        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –ø–æ–ª—è –∏–∑ —à–∞–±–ª–æ–Ω–∞ (requiredFields)
        // –ü–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —à–∞–±–ª–æ–Ω–µ - –ò–ì–ù–û–†–ò–†–£–Æ–¢–°–Ø
        const properties: any = {};
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—è –∏–∑ —à–∞–±–ª–æ–Ω–∞
        requiredFields.forEach(field => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ –ø–æ–ª–µ –≤ —Ñ–∞–π–ª–µ
          const headerIndex = fixedHeaders.indexOf(field);
          if (headerIndex !== -1 && row[headerIndex] !== undefined) {
            const value = row[headerIndex];
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if (value !== undefined && value !== null && value !== '' && value !== '-') {
              properties[field] = value;
            }
          }
          // –ï—Å–ª–∏ –ø–æ–ª–µ –∏–∑ —à–∞–±–ª–æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ñ–∞–π–ª–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
          // –ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –ë–î
          // –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏: –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –µ—Å–ª–∏ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ
        });

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 —Å—Ç—Ä–æ–∫)
        if (i < 3) {
          console.log(`üìã –°—Ç—Ä–æ–∫–∞ ${i + 2}: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª–µ–π –∏–∑ —à–∞–±–ª–æ–Ω–∞: ${Object.keys(properties).length}`);
          console.log(`  –ü–æ–ª—è –∏–∑ —à–∞–±–ª–æ–Ω–∞ (${requiredFields.length}):`, requiredFields);
          console.log(`  –ü–æ–ª—è –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ (${Object.keys(properties).length}):`, Object.keys(properties));
          console.log(`  –í—Å–µ –ø–æ–ª—è –≤ —Ñ–∞–π–ª–µ (${fixedHeaders.length}):`, fixedHeaders);
        }

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É —Å–≤–æ–π—Å—Ç–≤
        product.properties_data = fixAllEncoding(properties);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º SKU –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ
        const internalSku = properties['SKU –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ'];
        if (internalSku && internalSku.trim() !== '') {
          product.sku = internalSku.trim();
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å SKU –≤–æ –≤—Å–µ–π –ë–î
          // –ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ preview - –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–º –ø–æ–∑–∂–µ
          // –ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ import - –ø—Ä–æ–≤–µ—Ä–∏–º –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        } else {
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π SKU
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥: timestamp (–º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã) + –Ω–∞–Ω–æ—Å–µ–∫—É–Ω–¥—ã + —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ + –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏
          // –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ—á–µ–Ω—å –≤—ã—Å–æ–∫—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –ë–î
          const supplierSku = properties['–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'] || `ITEM_${i + 1}`;
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π SKU —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º timestamp + –Ω–∞–Ω–æ—Å–µ–∫—É–Ω–¥—ã + —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ + –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
          const timestamp = Date.now();
          
          // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–Ω–æ—Å–µ–∫—É–Ω–¥—ã —á–µ—Ä–µ–∑ process.hrtime –¥–ª—è –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
          let nanoSeconds = '';
          try {
            if (typeof process !== 'undefined' && process.hrtime) {
              const hrtime = process.hrtime();
              // hrtime –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç [—Å–µ–∫—É–Ω–¥—ã, –Ω–∞–Ω–æ—Å–µ–∫—É–Ω–¥—ã]
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–Ω–æ—Å–µ–∫—É–Ω–¥—ã –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
              nanoSeconds = hrtime[1].toString().padStart(9, '0').slice(-6); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Ü–∏—Ñ—Ä
            } else {
              // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –Ω–∞–Ω–æ—Å–µ–∫—É–Ω–¥
              nanoSeconds = Math.floor(Math.random() * 1000000).toString().padStart(6, '0');
            }
          } catch (e) {
            // –ï—Å–ª–∏ process.hrtime –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
            nanoSeconds = Math.floor(Math.random() * 1000000).toString().padStart(6, '0');
          }
          
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–ª—É—á–∞–π–Ω–∞—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (8 —Å–∏–º–≤–æ–ª–æ–≤)
          const randomSuffix = Math.random().toString(36).substring(2, 10);
          // –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ —Å padding (6 —Ü–∏—Ñ—Ä)
          const rowIndex = (i + 1).toString().padStart(6, '0');
          // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (20 —Å–∏–º–≤–æ–ª–æ–≤)
          const supplierSkuShort = supplierSku.substring(0, 20);
          
          // –§–æ—Ä–º–∞—Ç: SKU_timestamp_nanoSeconds_random_rowIndex_supplierSku
          // –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏: ~2^48 (timestamp) * 2^20 (nanoSeconds) * 2^48 (random) * 2^20 (rowIndex) = ~2^136
          // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–æ–ª–ª–∏–∑–∏–∏ –∫—Ä–∞–π–Ω–µ –º–∞–ª–∞ (< 10^-40)
          product.sku = `SKU_${timestamp}_${nanoSeconds}_${randomSuffix}_${rowIndex}_${supplierSkuShort}`;
          
          // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ü–∏–∫–ª–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
          // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–æ–ª–ª–∏–∑–∏–∏ —Å —Ç–∞–∫–∏–º —Ñ–æ—Ä–º–∞—Ç–æ–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω—É–ª–µ–≤–∞—è
          // –ï—Å–ª–∏ –∫–æ–ª–ª–∏–∑–∏—è –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç (–∫—Ä–∞–π–Ω–µ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ), Prisma –≤—ã–±—Ä–æ—Å–∏—Ç –æ—à–∏–±–∫—É P2002 –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ - –∏—â–µ–º –ø–æ–ª–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤–æ –≤—Å–µ—Ö –ø–æ–ª—è—Ö —à–∞–±–ª–æ–Ω–∞
        const nameField = requiredFields.find(field => 
          field.toLowerCase().includes('–Ω–∞–∑–≤–∞–Ω–∏–µ') || 
          field.toLowerCase().includes('–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ') ||
          field.toLowerCase().includes('–∏–º—è')
        );
        
        if (nameField && properties[nameField]) {
          product.name = properties[nameField];
        } else {
          product.name = '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        if (!internalSku || internalSku.trim() === '') {
          // –ï—Å–ª–∏ SKU –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –ø—É—Å—Ç–æ–µ - —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ —à–∞–±–ª–æ–Ω–∞
          const missingRequiredFields = requiredFields.filter(field => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ –≤ —Ñ–∞–π–ª–µ –ò –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ –æ–Ω–æ
            const hasFieldInFile = fixedHeaders.includes(field);
            const value = properties[field];
            return !hasFieldInFile || !value || value.toString().trim() === '' || value === '-';
          });

          if (missingRequiredFields.length > 0) {
            throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ —à–∞–±–ª–æ–Ω–∞: ${missingRequiredFields.join(', ')}`);
          }
        } else {
          // –ï—Å–ª–∏ SKU –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ - —ç—Ç–æ —Ä–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–ª–∏—á–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
          if (!product.name || product.name === '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è') {
            throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
          }
        }

        products.push(product);

      } catch (error) {
        errors.push({
          row: i + 2,
          error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
          data: row
        });
      }
    }

    console.log('üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:', {
      total: products.length,
      errors: errors.length,
      sampleProducts: products.slice(0, 3).map(p => ({
        sku: p.sku,
        name: p.name,
        propertiesCount: Object.keys(p.properties_data).length,
        properties: Object.keys(p.properties_data)
      }))
    });

    // –ï—Å–ª–∏ —Ä–µ–∂–∏–º preview, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
    if (mode === 'preview') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö SKU
      // SKU –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤–æ –≤—Å–µ–π –ë–î (–Ω–µ —Ç–æ–ª—å–∫–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏), —Ç–∞–∫ –∫–∞–∫ SKU –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
      const skuChecks: Array<{ 
        sku: string; 
        exists: boolean; 
        row: number; 
        existingCategoryId?: string | null;
        existingCategoryName?: string | null;
        existingProductName?: string | null;
      }> = [];
      
      for (const product of products) {
        if (product.sku) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å SKU –≤–æ –≤—Å–µ–π –ë–î (–Ω–µ —Ç–æ–ª—å–∫–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
          const existingProduct = await prisma.product.findUnique({
            where: {
              sku: product.sku
            },
            select: { 
              id: true, 
              catalog_category_id: true,
              name: true,
              catalog_category: {
                select: {
                  id: true,
                  name: true
                }
              }
            }
          });
          
          skuChecks.push({
            sku: product.sku,
            exists: !!existingProduct,
            row: product.row_number || 0,
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω)
            existingCategoryId: existingProduct?.catalog_category_id || null,
            existingCategoryName: existingProduct?.catalog_category?.name || null,
            existingProductName: existingProduct?.name || null
          });
        }
      }
      
      const notFoundSkus = skuChecks.filter(check => !check.exists);
      const foundSkus = skuChecks.filter(check => check.exists);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ SKU –≤ –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö (–¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è)
      const skusInOtherCategories = skuChecks.filter(check => 
        check.exists && 
        check.existingCategoryId && 
        check.existingCategoryId !== categoryId
      );
      
      return NextResponse.json({
        success: true,
        mode: 'preview',
        template: {
          name: template.name,
          requiredFields,
          calculatorFields,
          exportFields
        },
        data: {
          totalRows: rows.length,
          validProducts: products.length,
          errors: errors.length,
          sampleProducts: products.slice(0, 5),
          sampleErrors: errors.slice(0, 5)
        },
        skuCheck: {
          total: skuChecks.length,
          found: foundSkus.length,
          notFound: notFoundSkus.length,
          notFoundSkus: notFoundSkus.slice(0, 20), // –ü–µ—Ä–≤—ã–µ 20 –¥–ª—è –ø–æ–∫–∞–∑–∞
          skusInOtherCategories: skusInOtherCategories.length > 0 ? skusInOtherCategories.slice(0, 20) : [], // SKU –≤ –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
          warning: notFoundSkus.length > 0 
            ? `–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${notFoundSkus.length} –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö SKU. –≠—Ç–∏ —Ç–æ–≤–∞—Ä—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –∫–∞–∫ –Ω–æ–≤—ã–µ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ.` 
            : null,
          crossCategoryWarning: skusInOtherCategories.length > 0
            ? `–û–®–ò–ë–ö–ê: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${skusInOtherCategories.length} SKU, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö. –ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–ø—Ä–µ—â–µ–Ω. –ò—Å–ø—Ä–∞–≤—å—Ç–µ SKU –≤ —Ñ–∞–π–ª–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`
            : null,
          crossCategorySkus: skusInOtherCategories.length > 0 
            ? skusInOtherCategories.map(check => ({
                sku: check.sku,
                row: check.row,
                existingCategoryName: check.existingCategoryName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
                existingCategoryId: check.existingCategoryId,
                existingProductName: check.existingProductName || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
              }))
            : []
        }
      });
    }

    // –†–µ–∂–∏–º –∏–º–ø–æ—Ä—Ç–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    let importedCount = 0;
    let updatedCount = 0;
    let createdCount = 0;
    let errorCount = 0;

    for (const product of products) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ SKU –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –≤–æ –≤—Å–µ–π –ë–î (–Ω–µ —Ç–æ–ª—å–∫–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
        // SKU –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –≤–æ –≤—Å–µ–π –ë–î —Ç–æ–≤–∞—Ä–æ–≤
        const existingProduct = await prisma.product.findUnique({
          where: {
            sku: product.sku
          },
          include: {
            catalog_category: {
              select: {
                id: true,
                name: true
              }
            }
          }
        });
        
        // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω –≤ –¥—Ä—É–≥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –ó–ê–ü–†–ï–©–ê–ï–ú –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –≤—ã–¥–∞–µ–º –æ—à–∏–±–∫—É
        if (existingProduct && existingProduct.catalog_category_id !== categoryId) {
          const existingCategoryName = existingProduct.catalog_category?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è';
          const errorMessage = `SKU "${product.sku}" (—Ç–æ–≤–∞—Ä "${existingProduct.name}") —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${existingCategoryName}" (ID: ${existingProduct.catalog_category_id}). –ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–ø—Ä–µ—â–µ–Ω. –£–¥–∞–ª–∏—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ SKU –≤ —Ñ–∞–π–ª–µ.`;
          
          console.error(`‚ùå ${errorMessage}`);
          throw new Error(errorMessage);
        }

        if (existingProduct) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä - —Ç–æ–ª—å–∫–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è
          console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: SKU="${product.sku}", ID=${existingProduct.id}`);
          
          const updateData: any = {
            updated_at: new Date()
          };

          // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —É–∫–∞–∑–∞–Ω–æ
          if (product.name && product.name !== '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è') {
            updateData.name = product.name;
            console.log(`  üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è: "${product.name}"`);
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
          const existingProperties = existingProduct.properties_data ? 
            (typeof existingProduct.properties_data === 'string' ? 
              JSON.parse(existingProduct.properties_data) : 
              existingProduct.properties_data) : {};

          const newProperties = { ...existingProperties };
          
          console.log(`  üìä –ü–æ–ª—è –∏–∑ —Ñ–∞–π–ª–∞ (${Object.keys(product.properties_data).length}):`, Object.keys(product.properties_data));
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ –≤ —Ñ–∞–π–ª–µ
          // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –ø–æ–ª–µ–π –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
          const fixedKeys = fixFieldsEncoding(Object.keys(product.properties_data));
          let updatedFieldsCount = 0;
          Object.keys(product.properties_data).forEach((originalKey, index) => {
            const fixedKey = fixedKeys[index];
            const value = product.properties_data[originalKey];
            if (value !== undefined && value !== null && value !== '' && value !== '-') {
              const oldValue = newProperties[fixedKey];
              newProperties[fixedKey] = value;
              updatedFieldsCount++;
              console.log(`  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è "${fixedKey}": "${oldValue}" ‚Üí "${value}"`);
            }
          });

          console.log(`  üìà –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ–π: ${updatedFieldsCount}`);

          updateData.properties_data = JSON.stringify(newProperties);
          updateData.specifications = JSON.stringify(newProperties);

          await prisma.product.update({
            where: { id: existingProduct.id },
            data: updateData
          });

          console.log(`  ‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`);
          updatedCount++;
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä - –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
          // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –ø–æ–ª–µ–π –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
          const fixedProperties = fixFieldsEncoding(Object.keys(product.properties_data)).reduce((acc, fixedKey, index) => {
            const originalKey = Object.keys(product.properties_data)[index];
            acc[fixedKey] = product.properties_data[originalKey];
            return acc;
          }, {} as Record<string, any>);
          
          try {
            await prisma.product.create({
              data: {
                sku: product.sku,
                name: product.name,
                catalog_category_id: categoryId,
                properties_data: JSON.stringify(fixedProperties),
                specifications: JSON.stringify(fixedProperties),
                base_price: 0,
                stock_quantity: 0,
                is_active: true
              }
            });

            createdCount++;
          } catch (createError: any) {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ SKU
            if (createError.code === 'P2002' && createError.meta?.target?.includes('sku')) {
              console.error(`‚ùå SKU "${product.sku}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î (–∫–æ–Ω—Ñ–ª–∏–∫—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏)`);
              throw new Error(`SKU "${product.sku}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. SKU –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –≤–æ –≤—Å–µ–π –ë–î —Ç–æ–≤–∞—Ä–æ–≤.`);
            }
            throw createError; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
          }
        }

        importedCount++;

      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–∞ ${product.sku}:`, error);
        errorCount++;
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–º–ø–æ—Ä—Ç–∞
    await prisma.importHistory.create({
      data: {
        template_id: template.id,
        catalog_category_id: categoryId,
        filename: file.name,
        file_size: file.size,
        imported_count: importedCount,
        error_count: errorCount + errors.length,
        status: errorCount > 0 ? 'partial' : 'completed',
        errors: JSON.stringify(errors),
        import_data: JSON.stringify({
          template: template.name,
          requiredFields,
          totalRows: rows.length
        })
      }
    });

           console.log('‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:', {
             imported: importedCount,
             created: createdCount,
             updated: updatedCount,
             errors: errorCount,
             validationErrors: errors.length
           });
           
           // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
           if (updatedCount > 0) {
             console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${updatedCount}`);
           }
           if (createdCount > 0) {
             console.log(`‚ûï –°–æ–∑–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${createdCount}`);
           }
           if (errorCount > 0) {
             console.log(`‚ùå –û—à–∏–±–æ–∫ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: ${errorCount}`);
           }

    return NextResponse.json({
      success: true,
      mode: 'import',
      imported: importedCount,
      created: createdCount,
      updated: updatedCount,
      errors: errorCount + errors.length,
      validationErrors: errors.length,
      template: template.name,
      filename: file.name
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞:', error);
    return apiErrorHandler.handle(error, 'unified-import');
  }
}
