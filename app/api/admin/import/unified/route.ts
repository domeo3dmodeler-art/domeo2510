import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import * as XLSX from 'xlsx';
import { validateDocumentFile } from '../../../../lib/validation/file-validation';
import { fixAllEncoding, fixFieldsEncoding } from '@/lib/encoding-utils';
import { apiErrorHandler } from '@/lib/api-error-handler';
import { apiValidator } from '@/lib/api-validator';

const prisma = new PrismaClient();

// ===================== –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ô –ò–ú–ü–û–†–¢ =====================

export async function POST(req: NextRequest) {
  try {
    const formData = await req.formData();
    const file = formData.get("file") as File;
    const categoryId = formData.get("category") as string;
    const mode = formData.get("mode") as string || 'preview'; // 'preview' –∏–ª–∏ 'import'
    const templateId = formData.get("templateId") as string;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!file) {
      return NextResponse.json({ error: "–§–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω" }, { status: 400 });
    }

    if (!categoryId) {
      return NextResponse.json({ error: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞" }, { status: 400 });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    const validation = validateDocumentFile(file);
    if (!validation.isValid) {
      return NextResponse.json({ error: validation.error }, { status: 400 });
    }

    console.log('üîç –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç:', {
      filename: file.name,
      categoryId,
      mode,
      templateId: templateId || 'auto'
    });

    // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
    let template;
    if (templateId) {
      template = await prisma.importTemplate.findUnique({
        where: { id: templateId }
      });
    } else {
      template = await prisma.importTemplate.findFirst({
        where: { 
          catalog_category_id: categoryId,
          is_active: true 
        },
        orderBy: { created_at: 'desc' }
      });
    }

    if (!template) {
      return NextResponse.json(
        { error: "–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" },
        { status: 404 }
      );
    }

    // –ü–∞—Ä—Å–∏–º –ø–æ–ª—è —à–∞–±–ª–æ–Ω–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏
    let requiredFields = JSON.parse(template.required_fields || '[]');
    let calculatorFields = JSON.parse(template.calculator_fields || '[]');
    let exportFields = JSON.parse(template.export_fields || '[]');
    let templateConfig = JSON.parse(template.template_config || '{}');
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
    requiredFields = fixFieldsEncoding(requiredFields);
    calculatorFields = fixFieldsEncoding(calculatorFields);
    exportFields = fixFieldsEncoding(exportFields);
    templateConfig = fixAllEncoding(templateConfig);

    console.log('üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω:', {
      name: template.name,
      requiredFields: requiredFields.length,
      calculatorFields: calculatorFields.length,
      exportFields: exportFields.length
    });

    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    const buffer = await file.arrayBuffer();
    const workbook = XLSX.read(buffer, { type: 'buffer' });
    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    const rawData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

    if (rawData.length < 2) {
      return NextResponse.json(
        { error: "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö" },
        { status: 400 }
      );
    }

    const headers = rawData[0] as string[];
    const rows = rawData.slice(1) as any[][];

    console.log('üìä –î–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞:', {
      headers: headers.length,
      rows: rows.length,
      sampleHeaders: headers.slice(0, 5)
    });

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const fixedHeaders = fixFieldsEncoding(headers);
    
    console.log('üîß –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏:', fixedHeaders);

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —à–∞–±–ª–æ–Ω–æ–º
    const availableRequiredFields = requiredFields.filter(field => fixedHeaders.includes(field));
    const missingFields = requiredFields.filter(field => !fixedHeaders.includes(field));
    
    console.log('üìã –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π:', {
      requiredFields: requiredFields.length,
      availableRequiredFields: availableRequiredFields.length,
      missingFields: missingFields.length,
      availableFields: fixedHeaders
    });

    // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è –∏–∑ —à–∞–±–ª–æ–Ω–∞ - –æ—à–∏–±–∫–∞
    if (availableRequiredFields.length === 0) {
      return NextResponse.json({
        error: "–§–∞–π–ª –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à–∞–±–ª–æ–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        details: {
          category: template.catalog_category?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
          missingFields: missingFields,
          availableFields: fixedHeaders,
          templateRequiredFields: requiredFields,
          suggestion: "–°–∫–∞—á–∞–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É"
        },
        message: `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingFields.join(', ')}. –°–∫–∞—á–∞–π—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${template.catalog_category?.name || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π'}" –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É.`
      }, { status: 400 });
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const products = [];
    const errors = [];

    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      try {
        const product: any = {
          sku: '', // –ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω
          name: '',
          properties_data: {},
          row_number: i + 2
        };

        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ —à–∞–±–ª–æ–Ω–∞
        const properties: any = {};
        availableRequiredFields.forEach(field => {
          const headerIndex = fixedHeaders.indexOf(field);
          if (headerIndex !== -1 && row[headerIndex] !== undefined) {
            properties[field] = row[headerIndex];
          }
        });

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É —Å–≤–æ–π—Å—Ç–≤
        product.properties_data = fixAllEncoding(properties);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º SKU –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ
        const internalSku = properties['SKU –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ'];
        if (internalSku && internalSku.trim() !== '') {
          product.sku = internalSku.trim();
        } else {
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
          const supplierSku = properties['–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'] || `ITEM_${i + 1}`;
          product.sku = `SKU_${Date.now()}_${supplierSku}`;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ - –∏—â–µ–º –ø–æ–ª–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—è—Ö
        const nameField = availableRequiredFields.find(field => 
          field.toLowerCase().includes('–Ω–∞–∑–≤–∞–Ω–∏–µ') || 
          field.toLowerCase().includes('–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ') ||
          field.toLowerCase().includes('–∏–º—è')
        );
        
        if (nameField) {
          product.name = properties[nameField] || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
        } else {
          product.name = '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        if (!internalSku || internalSku.trim() === '') {
          // –ï—Å–ª–∏ SKU –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –ø—É—Å—Ç–æ–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ —à–∞–±–ª–æ–Ω–∞
          const missingRequiredFields = availableRequiredFields.filter(field => {
            const value = properties[field];
            return !value || value.toString().trim() === '' || value === '-';
          });

          if (missingRequiredFields.length > 0) {
            throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ —à–∞–±–ª–æ–Ω–∞: ${missingRequiredFields.join(', ')}`);
          }
        } else {
          // –ï—Å–ª–∏ SKU –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
          if (!product.name || product.name === '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è') {
            throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
          }
        }

        products.push(product);

      } catch (error) {
        errors.push({
          row: i + 2,
          error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
          data: row
        });
      }
    }

    console.log('üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:', {
      total: products.length,
      errors: errors.length
    });

    // –ï—Å–ª–∏ —Ä–µ–∂–∏–º preview, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
    if (mode === 'preview') {
      return NextResponse.json({
        success: true,
        mode: 'preview',
        template: {
          name: template.name,
          requiredFields,
          calculatorFields,
          exportFields
        },
        data: {
          totalRows: rows.length,
          validProducts: products.length,
          errors: errors.length,
          sampleProducts: products.slice(0, 5),
          sampleErrors: errors.slice(0, 5)
        }
      });
    }

    // –†–µ–∂–∏–º –∏–º–ø–æ—Ä—Ç–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    let importedCount = 0;
    let updatedCount = 0;
    let createdCount = 0;
    let errorCount = 0;

    for (const product of products) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ SKU –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É
        const existingProduct = await prisma.product.findFirst({
          where: {
            sku: product.sku,
            catalog_category_id: categoryId
          }
        });

        if (existingProduct) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä - —Ç–æ–ª—å–∫–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è
          const updateData: any = {
            updated_at: new Date()
          };

          // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —É–∫–∞–∑–∞–Ω–æ
          if (product.name && product.name !== '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è') {
            updateData.name = product.name;
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
          const existingProperties = existingProduct.properties_data ? 
            (typeof existingProduct.properties_data === 'string' ? 
              JSON.parse(existingProduct.properties_data) : 
              existingProduct.properties_data) : {};

          const newProperties = { ...existingProperties };
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ –≤ —Ñ–∞–π–ª–µ
          Object.keys(product.properties_data).forEach(key => {
            const value = product.properties_data[key];
            if (value !== undefined && value !== null && value !== '' && value !== '-') {
              newProperties[key] = value;
            }
          });

          updateData.properties_data = JSON.stringify(newProperties);
          updateData.specifications = JSON.stringify(newProperties);

          await prisma.product.update({
            where: { id: existingProduct.id },
            data: updateData
          });

          updatedCount++;
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä - –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
          await prisma.product.create({
            data: {
              sku: product.sku,
              name: product.name,
              catalog_category_id: categoryId,
              properties_data: JSON.stringify(product.properties_data),
              specifications: JSON.stringify(product.properties_data),
              base_price: 0,
              stock_quantity: 0,
              is_active: true
            }
          });

          createdCount++;
        }

        importedCount++;

      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–∞ ${product.sku}:`, error);
        errorCount++;
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–º–ø–æ—Ä—Ç–∞
    await prisma.importHistory.create({
      data: {
        template_id: template.id,
        catalog_category_id: categoryId,
        filename: file.name,
        file_size: file.size,
        imported_count: importedCount,
        error_count: errorCount + errors.length,
        status: errorCount > 0 ? 'partial' : 'completed',
        errors: JSON.stringify(errors),
        import_data: JSON.stringify({
          template: template.name,
          requiredFields,
          totalRows: rows.length
        })
      }
    });

    console.log('‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:', {
      imported: importedCount,
      created: createdCount,
      updated: updatedCount,
      errors: errorCount,
      validationErrors: errors.length
    });

    return NextResponse.json({
      success: true,
      mode: 'import',
      imported: importedCount,
      created: createdCount,
      updated: updatedCount,
      errors: errorCount + errors.length,
      validationErrors: errors.length,
      template: template.name,
      filename: file.name
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞:', error);
    return apiErrorHandler.handle(error, 'unified-import');
  }
}
