import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { apiErrorHandler } from '@/lib/api-error-handler';

const prisma = new PrismaClient();

// POST /api/admin/products/rename-property - –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const { categoryId, propertyName, oldValue, newValue } = body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!categoryId || !propertyName || !oldValue || !newValue) {
      return NextResponse.json(
        { 
          error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
          required: ['categoryId', 'propertyName', 'oldValue', 'newValue']
        },
        { status: 400 }
      );
    }

    console.log(`üîÑ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ "${propertyName}": "${oldValue}" ‚Üí "${newValue}" –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}`);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const products = await prisma.product.findMany({
      where: {
        catalog_category_id: categoryId
      },
      select: {
        id: true,
        sku: true,
        properties_data: true,
        specifications: true
      }
    });

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);

    let updatedCount = 0;
    let errorCount = 0;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
    for (const product of products) {
      try {
        // –ü–∞—Ä—Å–∏–º properties_data
        const propertiesData = typeof product.properties_data === 'string'
          ? JSON.parse(product.properties_data)
          : product.properties_data;

        // –ü–∞—Ä—Å–∏–º specifications
        const specifications = typeof product.specifications === 'string'
          ? JSON.parse(product.specifications || '{}')
          : product.specifications;

        let hasChanges = false;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ –≤ properties_data (—Å —É—á–µ—Ç–æ–º —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤)
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
        if (propertiesData[propertyName]) {
          const currentValue = String(propertiesData[propertyName]);
          if (currentValue.toLowerCase() === oldValue.toLowerCase()) {
            propertiesData[propertyName] = newValue;
            hasChanges = true;
            console.log(`  ‚úÖ –¢–æ–≤–∞—Ä ${product.sku}: "${propertyName}" = "${currentValue}" ‚Üí "${newValue}"`);
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–∫–∂–µ –ø–æ–ª–µ "–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è", –µ—Å–ª–∏ —ç—Ç–æ —Å–≤–æ–π—Å—Ç–≤–æ "–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è"
        const generalPropertyName = `–û–±—â–µ–µ_${propertyName}`;
        if (propertiesData[generalPropertyName]) {
          const currentValue = String(propertiesData[generalPropertyName]);
          if (currentValue.toLowerCase() === oldValue.toLowerCase()) {
            propertiesData[generalPropertyName] = newValue;
            hasChanges = true;
            console.log(`  ‚úÖ –¢–æ–≤–∞—Ä ${product.sku}: "${generalPropertyName}" = "${currentValue}" ‚Üí "${newValue}"`);
          }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ –≤ specifications (—Å —É—á–µ—Ç–æ–º —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤)
        if (specifications[propertyName]) {
          const currentValue = String(specifications[propertyName]);
          if (currentValue.toLowerCase() === oldValue.toLowerCase()) {
            specifications[propertyName] = newValue;
            hasChanges = true;
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–∫–∂–µ –ø–æ–ª–µ "–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è" –≤ specifications
        if (specifications[generalPropertyName]) {
          const currentValue = String(specifications[generalPropertyName]);
          if (currentValue.toLowerCase() === oldValue.toLowerCase()) {
            specifications[generalPropertyName] = newValue;
            hasChanges = true;
          }
        }

        // –ï—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –ë–î
        if (hasChanges) {
          await prisma.product.update({
            where: { id: product.id },
            data: {
              properties_data: JSON.stringify(propertiesData),
              specifications: JSON.stringify(specifications),
              updated_at: new Date()
            }
          });
          updatedCount++;
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ${product.sku}:`, error);
        errorCount++;
      }
    }

    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${updatedCount}, –æ—à–∏–±–æ–∫: ${errorCount}`);

    return NextResponse.json({
      success: true,
      message: `–°–≤–æ–π—Å—Ç–≤–æ "${propertyName}" –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: "${oldValue}" ‚Üí "${newValue}"`,
      stats: {
        totalProducts: products.length,
        updated: updatedCount,
        errors: errorCount
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤–∞:', error);
    return apiErrorHandler.handle(error, 'rename-property');
  } finally {
    await prisma.$disconnect();
  }
}

