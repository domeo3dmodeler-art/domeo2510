// api/invoices/[id]/status/route.ts
// API —Ä–æ—É—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –°—á–µ—Ç–∞

import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { notifyUsersByRole, notifyUser } from '@/lib/notifications';
import jwt from 'jsonwebtoken';

const VALID_STATUSES = ['DRAFT', 'SENT', 'PAID', 'CANCELLED', 'IN_PRODUCTION', 'RECEIVED_FROM_SUPPLIER', 'COMPLETED'];

// PUT /api/invoices/[id]/status - –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –°—á–µ—Ç–∞
export async function PUT(req: NextRequest, { params }: { params: Promise<{ id: string }> }) {
  try {
    const { id } = await params;
    const body = await req.json();
    const { status, notes } = body;
    
    console.log('üîÑ API: Updating invoice status:', { id, status, body });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
    if (!status || !VALID_STATUSES.includes(status)) {
      return NextResponse.json(
        { 
          error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å',
          details: {
            validStatuses: VALID_STATUSES,
            providedStatus: status
          }
        },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –°—á–µ—Ç–∞
    const existingInvoice = await prisma.invoice.findUnique({
      where: { id },
      select: { 
        id: true, 
        status: true
      }
    });

    console.log('üîç API: Found invoice:', existingInvoice);

    if (!existingInvoice) {
      console.log('‚ùå API: Invoice not found:', id);
      return NextResponse.json(
        { error: '–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    // if (existingInvoice.status === 'COMPLETED' && status !== 'COMPLETED') {
    //   return NextResponse.json(
    //     { error: '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ —Å—á–µ—Ç–∞' },
    //     { status: 400 }
    //   );
    // }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateData: any = {
      status
    };

    console.log('üíæ API: Updating invoice with data:', updateData);

    const updatedInvoice = await prisma.invoice.update({
      where: { id },
      data: updateData
    });

    console.log('‚úÖ API: Invoice updated successfully:', updatedInvoice);

    // –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    let userId = 'system';
    try {
      const authHeader = req.headers.get('authorization');
      if (authHeader && authHeader.startsWith('Bearer ')) {
        const token = authHeader.substring(7);
        const decoded: any = jwt.verify(token, process.env.JWT_SECRET || "your-super-secret-jwt-key-change-this-in-production-min-32-chars");
        userId = decoded.userId;
      }
    } catch (tokenError) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_id –∏–∑ —Ç–æ–∫–µ–Ω–∞:', tokenError);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    try {
      if (status === 'PAID') {
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –æ —Ç–æ–º, —á—Ç–æ —Å—á–µ—Ç –æ–ø–ª–∞—á–µ–Ω
        await notifyUsersByRole('executor', {
          clientId: existingInvoice.client_id,
          documentId: id,
          type: 'invoice_paid',
          title: '–°—á–µ—Ç –æ–ø–ª–∞—á–µ–Ω',
          message: `–°—á–µ—Ç ${existingInvoice.number} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å "–û–ø–ª–∞—á–µ–Ω/–ó–∞–∫–∞–∑". –¢–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å.`
        });
      } else if (['IN_PRODUCTION', 'RECEIVED_FROM_SUPPLIER', 'COMPLETED'].includes(status)) {
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ç–æ—Ä–∞ –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
        const statusNames: Record<string, string> = {
          'IN_PRODUCTION': '–ó–∞–∫–∞–∑ —Ä–∞–∑–º–µ—â–µ–Ω',
          'RECEIVED_FROM_SUPPLIER': '–ü–æ–ª—É—á–µ–Ω –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
          'COMPLETED': '–ò—Å–ø–æ–ª–Ω–µ–Ω'
        };
        
        await notifyUsersByRole('complectator', {
          clientId: existingInvoice.client_id,
          documentId: id,
          type: 'status_changed',
          title: '–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω',
          message: `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞ ${existingInvoice.number} –Ω–∞ "${statusNames[status]}".`
        });
      }
    } catch (notificationError) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', notificationError);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    }

    return NextResponse.json({
      success: true,
      message: `–°—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${status}"`,
      invoice: {
        id: updatedInvoice.id,
        status: updatedInvoice.status
      }
    });

  } catch (error: any) {
    console.error('‚ùå API: Error updating invoice status:', error);
    console.error('‚ùå API: Error details:', {
      message: error.message,
      stack: error.stack,
      name: error.name
    });
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å—á–µ—Ç–∞' },
      { status: 500 }
    );
  }
}

// GET /api/invoices/[id]/status - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –°—á–µ—Ç–∞
export async function GET(req: NextRequest, { params }: { params: Promise<{ id: string }> }) {
  try {
    const { id } = await params;
    const invoice = await prisma.invoice.findUnique({
      where: { id },
      select: { 
        id: true, 
        status: true, 
        number: true,
        updated_at: true
      }
    });

    if (!invoice) {
      return NextResponse.json(
        { error: '–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }

    return NextResponse.json({
      id: invoice.id,
      number: invoice.number,
      status: invoice.status,
      updated_at: invoice.updated_at,
      canExport: invoice.status === 'PAID'
    });

  } catch (error: any) {
    console.error('Error fetching invoice status:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å—á–µ—Ç–∞' },
      { status: 500 }
    );
  }
}
