import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// GET /api/price/doors - –ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö
export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const model = searchParams.get('model');
    
    if (!model) {
      return NextResponse.json({
        ok: true,
        message: "API –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω –¥–≤–µ—Ä–µ–π",
        usage: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST –∑–∞–ø—Ä–æ—Å —Å –¥–∞–Ω–Ω—ã–º–∏ selection –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã",
        example: {
          method: "POST",
          body: {
            selection: {
              model: "–ö–ª–∞—Å—Å–∏–∫–∞",
              hardware_kit: { id: "KIT_STD" },
              handle: { id: "HNDL_PRO" }
            }
          }
        }
      });
    }

    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω model, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const product = await prisma.product.findFirst({
      where: { model },
      select: {
        id: true,
        sku: true,
        name: true,
        model: true,
        series: true,
        base_price: true
      }
    });

    if (!product) {
      return NextResponse.json({
        ok: false,
        error: "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
      });
    }

    return NextResponse.json({
      ok: true,
      product: {
        id: product.id,
        sku: product.sku,
        name: product.name,
        model: product.model,
        series: product.series,
        base_price: product.base_price
      },
      message: "–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST –∑–∞–ø—Ä–æ—Å"
    });
  } catch (error) {
    console.error('Error in GET /api/price/doors:', error);
    return NextResponse.json(
      { error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω–∞—Ö" },
      { status: 500 }
    );
  }
}

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const { selection } = body;
    
    console.log('üí∞ Price calculation request:', {
      style: selection.style,
      model: selection.model,
      finish: selection.finish,
      color: selection.color,
      width: selection.width,
      height: selection.height,
      hardware_kit: selection.hardware_kit,
      handle: selection.handle
    });
    

    if (!selection) {
      return NextResponse.json(
        { error: "–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã" },
        { status: 400 }
      );
    }

    // –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
    const products = await prisma.product.findMany({
      where: {
        catalog_category: {
          name: "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
        }
      },
      select: {
        id: true,
        sku: true,
        name: true,
        model: true,
        series: true,
        base_price: true,
        properties_data: true
      },
      orderBy: {
        id: 'asc'
      }
    });

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
    const product = products.find(p => {
      const properties = p.properties_data ? 
        (typeof p.properties_data === 'string' ? JSON.parse(p.properties_data) : p.properties_data) : {};

      // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ —Å—Ç–∏–ª—é –∏ –º–æ–¥–µ–ª–∏
      const styleMatch = !selection.style || properties['Domeo_–°—Ç–∏–ª—å Web'] === selection.style;
      const modelMatch = !selection.model || properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web']?.includes(selection.model);
      
      if (!styleMatch || !modelMatch) {
        return false;
      }

      // –ó–∞—Ç–µ–º –ø–æ –æ—Å—Ç–∞–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
      const finishMatch = !selection.finish || properties['–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è'] === selection.finish;
      const colorMatch = !selection.color || properties['Domeo_–¶–≤–µ—Ç'] === selection.color;
      const typeMatch = !selection.type || properties['–¢–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏'] === selection.type;
      const widthMatch = !selection.width || properties['–®–∏—Ä–∏–Ω–∞/–º–º'] == selection.width;
      const heightMatch = !selection.height || properties['–í—ã—Å–æ—Ç–∞/–º–º'] == selection.height;
      
      console.log('üîç Product filter:', {
        productId: p.id,
        styleMatch,
        modelMatch,
        finishMatch,
        colorMatch,
        typeMatch,
        widthMatch,
        heightMatch,
        requestedFinish: selection.finish,
        actualFinish: properties['–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è'],
        requestedColor: selection.color,
        actualColor: properties['Domeo_–¶–≤–µ—Ç'],
        requestedWidth: selection.width,
        actualWidth: properties['–®–∏—Ä–∏–Ω–∞/–º–º'],
        requestedHeight: selection.height,
        actualHeight: properties['–í—ã—Å–æ—Ç–∞/–º–º']
      });
      
      return finishMatch && colorMatch && typeMatch && widthMatch && heightMatch;
    });

    // –ï—Å–ª–∏ —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
    if (!product) {
      console.log('‚ùå –¢–æ—á–Ω—ã–π —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:', {
        style: selection.style,
        model: selection.model,
        finish: selection.finish,
        color: selection.color,
        width: selection.width,
        height: selection.height
      });
      
      return NextResponse.json(
        { error: "–¢–æ–≤–∞—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω" },
        { status: 404 }
      );
    }
    
    const finalProduct = product;

    // –ü–∞—Ä—Å–∏–º —Å–≤–æ–π—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
    const properties = finalProduct.properties_data ? 
      (typeof finalProduct.properties_data === 'string' ? JSON.parse(finalProduct.properties_data) : finalProduct.properties_data) : {};

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –∏–∑ —Ü–µ–Ω—ã –†–†–¶ —Ç–æ–≤–∞—Ä–∞
    const rrcPrice = parseFloat(properties['–¶–µ–Ω–∞ –†–†–¶']) || 0;
    const basePrice = finalProduct.base_price || 0;
    let doorPrice = rrcPrice || basePrice;
    
    console.log('üí∞ Price calculation:', {
      productId: finalProduct.id,
      rrcPrice,
      basePrice,
      finalDoorPrice: doorPrice,
      rrcPriceExists: !!properties['–¶–µ–Ω–∞ –†–†–¶']
    });
    
    let total = doorPrice;
    const breakdown = [
      { label: "–î–≤–µ—Ä—å", amount: doorPrice }
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–ª–µ–∫—Ç —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω
    if (selection.hardware_kit?.id) {
      console.log('üîß Hardware kit selected:', selection.hardware_kit.id);
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Ç—ã —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const hardwareKits = await prisma.product.findMany({
        where: {
          catalog_category: {
            name: "–ö–æ–º–ø–ª–µ–∫—Ç—ã —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã"
          }
        },
        select: {
          id: true,
          name: true,
          properties_data: true
        }
      });

      console.log('üîß Available hardware kits:', hardwareKits.length);
      const kit = hardwareKits.find(k => k.id === selection.hardware_kit.id);
      console.log('üîß Found kit:', kit ? 'Yes' : 'No');
      if (kit) {
        const kitProps = kit.properties_data ? 
          (typeof kit.properties_data === 'string' ? JSON.parse(kit.properties_data) : kit.properties_data) : {};
        
        const kitPrice = parseFloat(kitProps['–ì—Ä—É–ø–ø–∞_—Ü–µ–Ω–∞']) || 0;
        console.log('üîß Kit price:', kitPrice);
        total += kitPrice;
        breakdown.push({ 
          label: `–ö–æ–º–ø–ª–µ–∫—Ç: ${kitProps['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è Web'] || kit.name}`, 
          amount: kitPrice 
        });
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä—É—á–∫—É –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞
    if (selection.handle?.id) {
      console.log('üîß Handle selected:', selection.handle.id);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä—É—á–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const handles = await prisma.product.findMany({
        where: {
          catalog_category: {
            name: "–†—É—á–∫–∏"
          }
        },
        select: {
          id: true,
          name: true,
          properties_data: true
        }
      });

      console.log('üîß Available handles:', handles.length);
      const handle = handles.find(h => h.id === selection.handle.id);
      console.log('üîß Found handle:', handle ? 'Yes' : 'No');
      if (handle) {
        const handleProps = handle.properties_data ? 
          (typeof handle.properties_data === 'string' ? JSON.parse(handle.properties_data) : handle.properties_data) : {};
        
        const handlePrice = parseFloat(handleProps['Domeo_—Ü–µ–Ω–∞ –≥—Ä—É–ø–ø—ã Web']) || 0;
        console.log('üîß Handle price:', handlePrice);
        total += handlePrice;
        breakdown.push({ 
          label: `–†—É—á–∫–∞: ${handleProps['Domeo_–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä—É—á–∫–∏_1–°'] || handle.name}`, 
          amount: handlePrice 
        });
      }
    }

    const result = {
      ok: true,
      currency: "RUB",
      base: doorPrice,
      breakdown,
      total: Math.round(total),
      sku: finalProduct.sku
    };
    
    
    return new NextResponse(JSON.stringify(result), {
      status: 200,
      headers: {
        'Content-Type': 'application/json; charset=utf-8',
      },
    });
  } catch (error) {
    console.error('Error calculating door price:', error);
    return NextResponse.json(
      { error: "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã" },
      { status: 500 }
    );
  }
}
