import { NextRequest, NextResponse } from 'next/server';
import puppeteer from 'puppeteer';
import ExcelJS from 'exceljs';

// POST /api/test/export-performance - –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { itemCount = 5, format = 'pdf' } = body;

    console.log(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∞ ${itemCount} –ø–æ–∑–∏—Ü–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${format}`);

    const startTime = Date.now();

    if (format === 'pdf') {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é PDF –±–µ–∑ –ë–î
      const title = '–ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï';
      
      const htmlContent = `
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title>${title}</title>
  <style>
    @page { size: A4; margin: 20mm; }
    body { font-family: Arial, sans-serif; font-size: 12px; margin: 0; padding: 20mm; }
    .header { text-align: center; font-size: 18px; font-weight: bold; margin-bottom: 20px; }
    table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
    th, td { border: 1px solid #000; padding: 8px; text-align: left; }
    th { background-color: #e0e0e0; font-weight: bold; }
  </style>
</head>
<body>
  <div class="header">${title}</div>
  <table>
    <thead>
      <tr>
        <th>‚Ññ</th>
        <th>–ê—Ä—Ç–∏–∫—É–ª</th>
        <th>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ</th>
        <th>–¶–µ–Ω–∞ –∑–∞ –µ–¥.</th>
        <th>–ö–æ–ª-–≤–æ</th>
        <th>–°—É–º–º–∞</th>
      </tr>
    </thead>
    <tbody>
      ${Array.from({ length: itemCount }, (_, i) => `
        <tr>
          <td>${i + 1}</td>
          <td>SKU_${i}</td>
          <td>–¢–µ—Å—Ç–æ–≤–∞—è –¥–≤–µ—Ä—å ${i}</td>
          <td>${(45000 + i * 1000).toLocaleString('ru-RU')} ‚ÇΩ</td>
          <td>1</td>
          <td>${(45000 + i * 1000).toLocaleString('ru-RU')} ‚ÇΩ</td>
        </tr>
      `).join('')}
    </tbody>
  </table>
</body>
</html>`;

      // –ó–∞–ø—É—Å–∫–∞–µ–º Puppeteer —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è Windows
      const browser = await puppeteer.launch({
        headless: true,
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--disable-accelerated-2d-canvas',
          '--no-first-run',
          '--disable-gpu',
          '--disable-web-security',
          '--disable-features=VizDisplayCompositor',
          '--disable-background-timer-throttling',
          '--disable-backgrounding-occluded-windows',
          '--disable-renderer-backgrounding',
          '--disable-extensions',
          '--disable-plugins',
          '--disable-default-apps',
          '--disable-sync',
          '--disable-translate',
          '--hide-scrollbars',
          '--mute-audio',
          '--no-default-browser-check',
          '--no-pings',
          '--password-store=basic',
          '--use-mock-keychain'
        ],
        timeout: 30000
      });

      const page = await browser.newPage();
      await page.setContent(htmlContent, { 
        waitUntil: 'networkidle0',
        timeout: 30000 
      });

      const pdfBuffer = await page.pdf({
        format: 'A4',
        printBackground: true,
        margin: {
          top: '20mm',
          right: '20mm',
          bottom: '20mm',
          left: '20mm'
        },
        timeout: 30000
      });

      await browser.close();
      
      const endTime = Date.now();
      const duration = endTime - startTime;

      console.log(`‚ö° PDF —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ ${duration}ms`);

      return NextResponse.json({
        success: true,
        performance: {
          itemCount,
          format,
          duration,
          itemsPerSecond: Math.round((itemCount / duration) * 1000),
          averageTimePerItem: Math.round(duration / itemCount)
        },
        fileSize: pdfBuffer.length
      });
    } else if (format === 'excel') {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Excel –±–µ–∑ –ë–î
      const workbook = new ExcelJS.Workbook();
      const worksheet = workbook.addWorksheet('–¢–µ—Å—Ç');
      
      // –ó–∞–≥–æ–ª–æ–≤–∫–∏
      worksheet.getRow(1).values = ['‚Ññ', '–ê—Ä—Ç–∏–∫—É–ª', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–¶–µ–Ω–∞', '–°—É–º–º–∞'];
      worksheet.getRow(1).font = { bold: true };
      
      // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      for (let i = 0; i < itemCount; i++) {
        const row = worksheet.getRow(i + 2);
        row.values = [
          i + 1,
          `SKU_${i}`,
          `–¢–µ—Å—Ç–æ–≤–∞—è –¥–≤–µ—Ä—å ${i}`,
          1,
          45000 + (i * 1000),
          45000 + (i * 1000)
        ];
      }
      
      const buffer = await workbook.xlsx.writeBuffer() as Buffer;
      
      const endTime = Date.now();
      const duration = endTime - startTime;

      console.log(`‚ö° Excel —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ ${duration}ms`);

      return NextResponse.json({
        success: true,
        performance: {
          itemCount,
          format,
          duration,
          itemsPerSecond: Math.round((itemCount / duration) * 1000),
          averageTimePerItem: Math.round(duration / itemCount)
        },
        fileSize: buffer.length
      });
    }

    return NextResponse.json({
      success: false,
      error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–∞'
    });

  } catch (error) {
    console.error('‚ùå Performance test error:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏' },
      { status: 500 }
    );
  }
}