import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { canTransitionTo } from '@/lib/validation/status-transitions';
import { canUserChangeStatus } from '@/lib/auth/permissions';
import { sendStatusNotification } from '@/lib/notifications/status-notifications';
import jwt from 'jsonwebtoken';

// PATCH /api/documents/[id]/status - –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
export async function PATCH(req: NextRequest, { params }: { params: Promise<{ id: string }> }) {
  try {
    const { id } = await params;
    const { status } = await req.json();

    console.log(`üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${id} –Ω–∞ ${status}`);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
    const token = req.cookies.get('auth-token')?.value;
    if (!token) {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as any;
    const userId = decoded.userId;
    const userRole = decoded.role;

    // –ò—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    let document = null;
    let documentType = null;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ —Å—á–µ—Ç–æ–≤
    const invoice = await prisma.invoice.findUnique({
      where: { id }
    });

    if (invoice) {
      document = invoice;
      documentType = 'invoice';
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ –ö–ü
      const quote = await prisma.quote.findUnique({
        where: { id }
      });

      if (quote) {
        document = quote;
        documentType = 'quote';
      } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ –∑–∞–∫–∞–∑–æ–≤
        const order = await prisma.order.findUnique({
          where: { id }
        });

        if (order) {
          document = order;
          documentType = 'order';
        } else {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
          const supplierOrder = await prisma.supplierOrder.findUnique({
            where: { id }
          });

          if (supplierOrder) {
            document = supplierOrder;
            documentType = 'supplier_order';
          }
        }
      }
    }

    if (!document) {
      console.log(`‚ùå –î–æ–∫—É–º–µ–Ω—Ç —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return NextResponse.json(
        { error: '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    if (!canUserChangeStatus(userRole, documentType)) {
      return NextResponse.json(
        { error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞' },
        { status: 403 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
    if (!canTransitionTo(documentType, document.status, status)) {
      return NextResponse.json(
        { 
          error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–µ—Ä–µ—Ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞',
          details: {
            currentStatus: document.status,
            newStatus: status,
            documentType: documentType
          }
        },
        { status: 400 }
      );
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const oldStatus = document.status;

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    let updatedDocument;
    if (documentType === 'invoice') {
      updatedDocument = await prisma.invoice.update({
        where: { id },
        data: { 
          status,
          updated_at: new Date()
        }
      });
    } else if (documentType === 'quote') {
      updatedDocument = await prisma.quote.update({
        where: { id },
        data: { 
          status,
          updated_at: new Date()
        }
      });
    } else if (documentType === 'order') {
      updatedDocument = await prisma.order.update({
        where: { id },
        data: { 
          status,
          updated_at: new Date()
        }
      });
    } else if (documentType === 'supplier_order') {
      updatedDocument = await prisma.supplierOrder.update({
        where: { id },
        data: { 
          status,
          updated_at: new Date()
        }
      });
    }

    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${id} –∏–∑–º–µ–Ω–µ–Ω —Å ${oldStatus} –Ω–∞ ${status}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    try {
      await sendStatusNotification(
        id,
        documentType,
        document.number || document.id,
        oldStatus,
        status,
        document.client_id
      );
    } catch (notificationError) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', notificationError);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    }

    return NextResponse.json({
      success: true,
      document: updatedDocument
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞' },
      { status: 500 }
    );
  }
}