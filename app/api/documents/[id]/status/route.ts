import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

// PATCH /api/documents/[id]/status - –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
export async function PATCH(req: NextRequest, { params }: { params: Promise<{ id: string }> }) {
  try {
    const { id } = await params;
    const { status } = await req.json();

    console.log(`üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${id} –Ω–∞ ${status}`);

    // –ò—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ document
    const document = await prisma.document.findUnique({
      where: { id }
    });

    if (!document) {
      console.log(`‚ùå –î–æ–∫—É–º–µ–Ω—Ç —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return NextResponse.json(
        { error: '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    const updatedDocument = await prisma.document.update({
      where: { id },
      data: { 
        status,
        updated_at: new Date()
      }
    });

    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${status}`);

    // TODO: –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π
    // await addToHistory(id, documentType, 'status_changed', document.status, status);

    return NextResponse.json({
      success: true,
      document: updatedDocument
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞' },
      { status: 500 }
    );
  }
}
