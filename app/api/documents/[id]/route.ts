import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { canUserPerformAction, canDeleteDocument } from '@/lib/auth/permissions';
import jwt from 'jsonwebtoken';

// DELETE /api/documents/[id] - –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
export async function DELETE(req: NextRequest, { params }: { params: Promise<{ id: string }> }) {
  try {
    const { id } = await params;
    
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${id}`);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
    const token = req.cookies.get('auth-token')?.value;
    if (!token) {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as any;
    const userId = decoded.userId;
    const userRole = decoded.role;

    // –ò—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    let document = null;
    let documentType = null;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ —Å—á–µ—Ç–æ–≤
    const invoice = await prisma.invoice.findUnique({
      where: { id }
    });

    if (invoice) {
      document = invoice;
      documentType = 'invoice';
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ –ö–ü
      const quote = await prisma.quote.findUnique({
        where: { id }
      });

      if (quote) {
        document = quote;
        documentType = 'quote';
      } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ –∑–∞–∫–∞–∑–æ–≤
        const order = await prisma.order.findUnique({
          where: { id }
        });

        if (order) {
          document = order;
          documentType = 'order';
        } else {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
          const supplierOrder = await prisma.supplierOrder.findUnique({
            where: { id }
          });

          if (supplierOrder) {
            document = supplierOrder;
            documentType = 'supplier_order';
          }
        }
      }
    }

    if (!document) {
      console.log(`‚ùå –î–æ–∫—É–º–µ–Ω—Ç —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return NextResponse.json(
        { error: '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if (!canDeleteDocument(documentType, document.status)) {
      return NextResponse.json(
        { 
          error: '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ',
          details: {
            currentStatus: document.status,
            documentType: documentType
          }
        },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ (–≤–∫–ª—é—á–∞—è –∞–≤—Ç–æ—Ä—Å—Ç–≤–æ)
    if (!canUserPerformAction(userRole, 'DELETE', documentType, document.status, document.created_by, userId)) {
      return NextResponse.json(
        { error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞' },
        { status: 403 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—á–µ—Ä–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    let hasChildren = false;
    if (documentType === 'quote') {
      const childInvoices = await prisma.invoice.count({
        where: { parent_document_id: id }
      });
      hasChildren = childInvoices > 0;
    } else if (documentType === 'invoice') {
      const childOrders = await prisma.order.count({
        where: { parent_document_id: id }
      });
      hasChildren = childOrders > 0;
    } else if (documentType === 'order') {
      const childSupplierOrders = await prisma.supplierOrder.count({
        where: { parent_document_id: id }
      });
      hasChildren = childSupplierOrders > 0;
    }

    if (hasChildren) {
      return NextResponse.json(
        { error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å –¥–æ—á–µ—Ä–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã' },
        { status: 400 }
      );
    }

    // –£–¥–∞–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    let deletedDocument;
    if (documentType === 'invoice') {
      deletedDocument = await prisma.invoice.delete({
        where: { id }
      });
    } else if (documentType === 'quote') {
      deletedDocument = await prisma.quote.delete({
        where: { id }
      });
    } else if (documentType === 'order') {
      deletedDocument = await prisma.order.delete({
        where: { id }
      });
    } else if (documentType === 'supplier_order') {
      deletedDocument = await prisma.supplierOrder.delete({
        where: { id }
      });
    }

    console.log(`‚úÖ –î–æ–∫—É–º–µ–Ω—Ç ${id} —É–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}`);

    return NextResponse.json({
      success: true,
      message: '–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
      document: deletedDocument
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞' },
      { status: 500 }
    );
  }
}