import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

// GET /api/documents/[id]/chain - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
export async function GET(req: NextRequest, { params }: { params: Promise<{ id: string }> }) {
  try {
    const { id } = await params;

    console.log(`üîó –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Ü–µ–ø–æ—á–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è ${id}`);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏
    const allDocuments = await getAllClientDocuments(id);
    
    // –°—Ç—Ä–æ–∏–º —Ü–µ–ø–æ—á–∫—É —Å–≤—è–∑–µ–π
    const chain = buildDocumentChain(allDocuments, id);

    console.log(`‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∞ —Ü–µ–ø–æ—á–∫–∞ –∏–∑ ${chain.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`);

    return NextResponse.json({
      success: true,
      chain,
      total: chain.length
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ —Ü–µ–ø–æ—á–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤' },
      { status: 500 }
    );
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
async function getAllClientDocuments(documentId: string) {
  // –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É
  let clientId = null;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
  const invoice = await prisma.invoice.findUnique({
    where: { id: documentId },
    select: { client_id: true }
  });

  if (invoice) {
    clientId = invoice.client_id;
  } else {
    const quote = await prisma.quote.findUnique({
      where: { id: documentId },
      select: { client_id: true }
    });

    if (quote) {
      clientId = quote.client_id;
    } else {
      const order = await prisma.order.findUnique({
        where: { id: documentId },
        select: { client_id: true }
      });

      if (order) {
        clientId = order.client_id;
      } else {
        const supplierOrder = await prisma.supplierOrder.findUnique({
          where: { id: documentId },
          include: { order: { select: { client_id: true } } }
        });

        if (supplierOrder) {
          clientId = supplierOrder.order.client_id;
        }
      }
    }
  }

  if (!clientId) {
    return [];
  }

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞
  const [quotes, invoices, orders, supplierOrders] = await Promise.all([
    prisma.quote.findMany({
      where: { client_id: clientId },
      include: { client: { select: { firstName: true, lastName: true } } },
      orderBy: { created_at: 'asc' }
    }),
    prisma.invoice.findMany({
      where: { client_id: clientId },
      include: { client: { select: { firstName: true, lastName: true } } },
      orderBy: { created_at: 'asc' }
    }),
    prisma.order.findMany({
      where: { client_id: clientId },
      include: { client: { select: { firstName: true, lastName: true } } },
      orderBy: { created_at: 'asc' }
    }),
    prisma.supplierOrder.findMany({
      where: { order: { client_id: clientId } },
      include: { 
        order: { 
          include: { client: { select: { firstName: true, lastName: true } } } 
        } 
      },
      orderBy: { created_at: 'asc' }
    })
  ]);

  return [
    ...quotes.map(q => ({ ...q, documentType: 'quote' })),
    ...invoices.map(inv => ({ ...inv, documentType: 'invoice' })),
    ...orders.map(ord => ({ ...ord, documentType: 'order' })),
    ...supplierOrders.map(so => ({ ...so, documentType: 'supplier_order' }))
  ];
}

// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
function buildDocumentChain(allDocuments: any[], startDocumentId: string) {
  const chain = [];
  const visited = new Set();

  // –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
  const startDoc = allDocuments.find(doc => doc.id === startDocumentId);
  if (!startDoc) {
    return chain;
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
  chain.push({ ...startDoc, position: 0, level: 0 });
  visited.add(startDocumentId);

  // –°—Ç—Ä–æ–∏–º —Ü–µ–ø–æ—á–∫—É –≤–ø–µ—Ä–µ–¥ (–ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã)
  let currentDoc = startDoc;
  let position = 1;
  let level = 0;

  while (currentDoc) {
    let nextDoc = null;

    if (currentDoc.documentType === 'quote') {
      // –ö–ü ‚Üí –°—á–µ—Ç
      nextDoc = allDocuments.find(doc => 
        doc.documentType === 'invoice' && 
        doc.quote_id === currentDoc.id &&
        !visited.has(doc.id)
      );
    } else if (currentDoc.documentType === 'invoice') {
      // –°—á–µ—Ç ‚Üí –ó–∞–∫–∞–∑
      nextDoc = allDocuments.find(doc => 
        doc.documentType === 'order' && 
        doc.invoice_id === currentDoc.id &&
        !visited.has(doc.id)
      );
    } else if (currentDoc.documentType === 'order') {
      // –ó–∞–∫–∞–∑ ‚Üí –ó–∞–∫–∞–∑ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
      nextDoc = allDocuments.find(doc => 
        doc.documentType === 'supplier_order' && 
        doc.order_id === currentDoc.id &&
        !visited.has(doc.id)
      );
    }

    if (nextDoc) {
      chain.push({ ...nextDoc, position, level, parentId: currentDoc.id });
      visited.add(nextDoc.id);
      currentDoc = nextDoc;
      position++;
    } else {
      break;
    }
  }

  // –°—Ç—Ä–æ–∏–º —Ü–µ–ø–æ—á–∫—É –Ω–∞–∑–∞–¥ (–∏—Å—Ö–æ–¥–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã)
  currentDoc = startDoc;
  position = -1;
  level = 0;

  while (currentDoc) {
    let prevDoc = null;

    if (currentDoc.documentType === 'invoice' && currentDoc.quote_id) {
      // –°—á–µ—Ç ‚Üê –ö–ü
      prevDoc = allDocuments.find(doc => 
        doc.documentType === 'quote' && 
        doc.id === currentDoc.quote_id &&
        !visited.has(doc.id)
      );
    } else if (currentDoc.documentType === 'order' && currentDoc.invoice_id) {
      // –ó–∞–∫–∞–∑ ‚Üê –°—á–µ—Ç
      prevDoc = allDocuments.find(doc => 
        doc.documentType === 'invoice' && 
        doc.id === currentDoc.invoice_id &&
        !visited.has(doc.id)
      );
    } else if (currentDoc.documentType === 'supplier_order' && currentDoc.order_id) {
      // –ó–∞–∫–∞–∑ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ ‚Üê –ó–∞–∫–∞–∑
      prevDoc = allDocuments.find(doc => 
        doc.documentType === 'order' && 
        doc.id === currentDoc.order_id &&
        !visited.has(doc.id)
      );
    }

    if (prevDoc) {
      chain.unshift({ ...prevDoc, position, level, childId: currentDoc.id });
      visited.add(prevDoc.id);
      currentDoc = prevDoc;
      position--;
    } else {
      break;
    }
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏–∏
  return chain.sort((a, b) => a.position - b.position);
}
