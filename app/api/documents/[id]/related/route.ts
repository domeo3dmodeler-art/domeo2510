import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

// GET /api/documents/[id]/related - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
export async function GET(req: NextRequest, { params }: { params: Promise<{ id: string }> }) {
  try {
    const { id } = await params;
    const { searchParams } = new URL(req.url);
    const type = searchParams.get('type') || 'all';

    console.log(`üîç –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è ${id}, —Ç–∏–ø: ${type}`);

    // –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–µ–∫—É—â–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    let currentDoc = null;
    let currentType = null;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    const invoice = await prisma.invoice.findUnique({
      where: { id },
      select: { id: true, parent_document_id: true, client_id: true }
    });

    if (invoice) {
      currentDoc = invoice;
      currentType = 'invoice';
    } else {
      const quote = await prisma.quote.findUnique({
        where: { id },
        select: { id: true, parent_document_id: true, client_id: true }
      });

      if (quote) {
        currentDoc = quote;
        currentType = 'quote';
      } else {
        const order = await prisma.order.findUnique({
          where: { id },
          select: { id: true, parent_document_id: true, client_id: true }
        });

        if (order) {
          currentDoc = order;
          currentType = 'order';
        } else {
          const supplierOrder = await prisma.supplierOrder.findUnique({
            where: { id },
            select: { id: true, parent_document_id: true }
          });

          if (supplierOrder) {
            currentDoc = supplierOrder;
            currentType = 'supplier_order';
          }
        }
      }
    }

    if (!currentDoc) {
      console.log(`‚ùå –î–æ–∫—É–º–µ–Ω—Ç —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return NextResponse.json(
        { error: '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç —Ç–∏–ø–∞ ${currentType}`);

    const relatedDocs = [];

    // –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    if (currentType === 'quote') {
      // –î–ª—è –ö–ü –∏—â–µ–º —Å—á–µ—Ç–∞ –∏ –∑–∞–∫–∞–∑—ã
      const [invoices, orders] = await Promise.all([
        prisma.invoice.findMany({
          where: { parent_document_id: id },
          include: { client: { select: { firstName: true, lastName: true } } },
          orderBy: { created_at: 'desc' }
        }),
        prisma.order.findMany({
          where: { parent_document_id: id },
          include: { client: { select: { firstName: true, lastName: true } } },
          orderBy: { created_at: 'desc' }
        })
      ]);

      relatedDocs.push(
        ...invoices.map(inv => ({ ...inv, documentType: 'invoice', relation: 'child' })),
        ...orders.map(ord => ({ ...ord, documentType: 'order', relation: 'child' }))
      );
    }

    if (currentType === 'invoice') {
      // –î–ª—è —Å—á–µ—Ç–∞ –∏—â–µ–º –ö–ü (—Ä–æ–¥–∏—Ç–µ–ª—å) –∏ –∑–∞–∫–∞–∑—ã (–¥–µ—Ç–∏)
      const [quotes, orders] = await Promise.all([
        currentDoc.parent_document_id ? prisma.quote.findMany({
          where: { id: currentDoc.parent_document_id },
          include: { client: { select: { firstName: true, lastName: true } } }
        }) : [],
        prisma.order.findMany({
          where: { parent_document_id: id },
          include: { client: { select: { firstName: true, lastName: true } } },
          orderBy: { created_at: 'desc' }
        })
      ]);

      relatedDocs.push(
        ...quotes.map(q => ({ ...q, documentType: 'quote', relation: 'parent' })),
        ...orders.map(ord => ({ ...ord, documentType: 'order', relation: 'child' }))
      );
    }

    if (currentType === 'order') {
      // –î–ª—è –∑–∞–∫–∞–∑–∞ –∏—â–µ–º –ö–ü/—Å—á–µ—Ç (—Ä–æ–¥–∏—Ç–µ–ª–∏) –∏ –∑–∞–∫–∞–∑—ã —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–¥–µ—Ç–∏)
      const [quotes, invoices, supplierOrders] = await Promise.all([
        currentDoc.parent_document_id ? prisma.quote.findMany({
          where: { id: currentDoc.parent_document_id },
          include: { client: { select: { firstName: true, lastName: true } } }
        }) : [],
        currentDoc.parent_document_id ? prisma.invoice.findMany({
          where: { id: currentDoc.parent_document_id },
          include: { client: { select: { firstName: true, lastName: true } } }
        }) : [],
        prisma.supplierOrder.findMany({
          where: { parent_document_id: id },
          orderBy: { created_at: 'desc' }
        })
      ]);

      relatedDocs.push(
        ...quotes.map(q => ({ ...q, documentType: 'quote', relation: 'parent' })),
        ...invoices.map(inv => ({ ...inv, documentType: 'invoice', relation: 'parent' })),
        ...supplierOrders.map(so => ({ ...so, documentType: 'supplier_order', relation: 'child' }))
      );
    }

    if (currentType === 'supplier_order') {
      // –î–ª—è –∑–∞–∫–∞–∑–∞ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏—â–µ–º –∑–∞–∫–∞–∑/—Å—á–µ—Ç (—Ä–æ–¥–∏—Ç–µ–ª–∏)
      const [orders, invoices] = await Promise.all([
        currentDoc.parent_document_id ? prisma.order.findMany({
          where: { id: currentDoc.parent_document_id },
          include: { client: { select: { firstName: true, lastName: true } } }
        }) : [],
        currentDoc.parent_document_id ? prisma.invoice.findMany({
          where: { id: currentDoc.parent_document_id },
          include: { client: { select: { firstName: true, lastName: true } } }
        }) : []
      ]);

      relatedDocs.push(
        ...orders.map(ord => ({ ...ord, documentType: 'order', relation: 'parent' })),
        ...invoices.map(inv => ({ ...inv, documentType: 'invoice', relation: 'parent' }))
      );
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${relatedDocs.length} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`);

    return NextResponse.json({
      success: true,
      currentType,
      documents: relatedDocs,
      counts: {
        quotes: relatedDocs.filter(d => d.documentType === 'quote').length,
        invoices: relatedDocs.filter(d => d.documentType === 'invoice').length,
        orders: relatedDocs.filter(d => d.documentType === 'order').length,
        supplier_orders: relatedDocs.filter(d => d.documentType === 'supplier_order').length
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤' },
      { status: 500 }
    );
  }
}
