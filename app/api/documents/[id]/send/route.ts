import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

// POST /api/documents/[id]/send - –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É
export async function POST(req: NextRequest, { params }: { params: Promise<{ id: string }> }) {
  try {
    const { id } = await params;

    console.log(`üìß –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${id} –∫–ª–∏–µ–Ω—Ç—É`);

    // –ò—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ document
    const document = await prisma.document.findUnique({
      where: { id },
      include: { client: true }
    });

    if (!document) {
      console.log(`‚ùå –î–æ–∫—É–º–µ–Ω—Ç —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return NextResponse.json(
        { error: '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }

    if (!document.client?.email) {
      console.log(`‚ùå –£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç email –∞–¥—Ä–µ—Å–∞`);
      return NextResponse.json(
        { error: '–£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω email –∞–¥—Ä–µ—Å' },
        { status: 400 }
      );
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω"
    const updatedDocument = await prisma.document.update({
      where: { id },
      data: { 
        status: 'SENT',
        updated_at: new Date()
      }
    });

    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É email
    // await sendDocumentEmail(document.client.email, document);

    console.log(`‚úÖ –î–æ–∫—É–º–µ–Ω—Ç ${id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É ${document.client.email}`);

    return NextResponse.json({
      success: true,
      message: '–î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É',
      document: updatedDocument
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞' },
      { status: 500 }
    );
  }
}
