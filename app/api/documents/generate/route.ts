import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import puppeteer from 'puppeteer';
import ExcelJS from 'exceljs';

const prisma = new PrismaClient();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞
async function generatePDF(data: any): Promise<Buffer> {
  const browser = await puppeteer.launch({
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });
  
  const page = await browser.newPage();
  
  // HTML —à–∞–±–ª–æ–Ω –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
  const html = `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <style>
        body {
          font-family: 'Times New Roman', serif;
          font-size: 12px;
          margin: 20px;
          color: #000;
        }
        .header {
          text-align: center;
          font-size: 18px;
          font-weight: bold;
          margin-bottom: 30px;
        }
        .client-info {
          margin-bottom: 20px;
        }
        .client-info div {
          margin-bottom: 5px;
        }
        .document-info {
          margin-bottom: 30px;
        }
        .document-info div {
          margin-bottom: 5px;
        }
        table {
          width: 100%;
          border-collapse: collapse;
          margin-bottom: 20px;
        }
        th, td {
          border: 1px solid #000;
          padding: 8px;
          text-align: left;
        }
        th {
          background-color: #f0f0f0;
          font-weight: bold;
        }
        .number { width: 5%; text-align: center; }
        .sku { width: 15%; }
        .name { width: 40%; }
        .price { width: 15%; text-align: right; }
        .qty { width: 10%; text-align: center; }
        .total { width: 15%; text-align: right; }
        .total-sum {
          text-align: right;
          font-weight: bold;
          font-size: 14px;
          margin-top: 20px;
        }
      </style>
    </head>
    <body>
      <div class="header">
        ${data.type === 'quote' ? '–ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï' : '–°–ß–ï–¢'}
      </div>
      
      <div class="client-info">
        <div><strong>–ö–ª–∏–µ–Ω—Ç:</strong> ${data.client.firstName} ${data.client.lastName}</div>
        <div><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${data.client.phone}</div>
        <div><strong>–ê–¥—Ä–µ—Å:</strong> ${data.client.address}</div>
      </div>
      
      <div class="document-info">
        <div><strong>–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞:</strong> ${data.documentNumber}</div>
        <div><strong>–î–∞—Ç–∞:</strong> ${new Date().toLocaleDateString('ru-RU')}</div>
      </div>
      
      <table>
        <thead>
          <tr>
            <th class="number">‚Ññ</th>
            <th class="sku">–ê—Ä—Ç–∏–∫—É–ª</th>
            <th class="name">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ</th>
            <th class="price">–¶–µ–Ω–∞ –∑–∞ –µ–¥.</th>
            <th class="qty">–ö–æ–ª-–≤–æ</th>
            <th class="total">–°—É–º–º–∞</th>
          </tr>
        </thead>
        <tbody>
          ${data.items.map((item: any, index: number) => `
            <tr>
              <td class="number">${index + 1}</td>
              <td class="sku">${item.sku || 'N/A'}</td>
              <td class="name">${item.name}</td>
              <td class="price">${item.unitPrice.toLocaleString('ru-RU')} –†</td>
              <td class="qty">${item.quantity}</td>
              <td class="total">${item.total.toLocaleString('ru-RU')} –†</td>
            </tr>
          `).join('')}
        </tbody>
      </table>
      
      <div class="total-sum">
        –ò—Ç–æ–≥–æ: ${data.totalAmount.toLocaleString('ru-RU')} –†
      </div>
    </body>
    </html>
  `;
  
  await page.setContent(html, { waitUntil: 'networkidle0' });
  
  const pdf = await page.pdf({
    format: 'A4',
    printBackground: true,
    margin: {
      top: '20mm',
      right: '20mm',
      bottom: '20mm',
      left: '20mm'
    }
  });
  
  await browser.close();
  
  return Buffer.from(pdf);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–∞–∫–∞–∑–∞
async function generateExcel(data: any): Promise<Buffer> {
  const workbook = new ExcelJS.Workbook();
  const worksheet = workbook.addWorksheet('–ó–∞–∫–∞–∑');

  // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
  worksheet.mergeCells('A1:Z1');
  worksheet.getCell('A1').value = '–ó–ê–ö–ê–ó';
  worksheet.getCell('A1').font = { size: 16, bold: true };
  worksheet.getCell('A1').alignment = { horizontal: 'center' };

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
  worksheet.getCell('A3').value = '–ö–ª–∏–µ–Ω—Ç:';
  worksheet.getCell('B3').value = `${data.client.firstName} ${data.client.lastName}`;
  worksheet.getCell('A4').value = '–¢–µ–ª–µ—Ñ–æ–Ω:';
  worksheet.getCell('B4').value = data.client.phone;
  worksheet.getCell('A5').value = '–ê–¥—Ä–µ—Å:';
  worksheet.getCell('B5').value = data.client.address;

  // –ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
  worksheet.getCell('A7').value = '–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞:';
  worksheet.getCell('B7').value = data.documentNumber;
  worksheet.getCell('A8').value = '–î–∞—Ç–∞:';
  worksheet.getCell('B8').value = new Date().toLocaleDateString('ru-RU');

  // –°–æ–±–∏—Ä–∞–µ–º –í–°–ï —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ –ë–î –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
  const allProperties = new Set<string>();
  
  // –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
  data.items.forEach((item: any, index: number) => {
    console.log(`üìä Processing item ${index + 1}:`, {
      sku: item.sku,
      name: item.name,
      hasProperties: !!item.properties_data
    });
    
    if (item.properties_data) {
      try {
        const props = typeof item.properties_data === 'string' 
          ? JSON.parse(item.properties_data) 
          : item.properties_data;
        
        console.log(`üìã Item ${index + 1} properties:`, {
          totalCount: Object.keys(props).length,
          properties: Object.keys(props).slice(0, 20) // –ü–µ—Ä–≤—ã–µ 20 —Å–≤–æ–π—Å—Ç–≤
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï —Å–≤–æ–π—Å—Ç–≤–∞, –∫—Ä–æ–º–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö
        Object.keys(props).forEach(key => {
          // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
          if (!key.includes('_id') && 
              !key.includes('photo') && 
              !key.includes('url') &&
              !key.includes('path') &&
              !key.includes('image') &&
              key.length > 2) {
            allProperties.add(key);
          }
        });
      } catch (e) {
        console.warn('Failed to parse properties_data:', e);
      }
    } else {
      console.log(`‚ö†Ô∏è Item ${index + 1} has no properties_data`);
    }
  });
  
  console.log(`üìà Total unique properties collected: ${allProperties.size}`);

  // –ë–∞–∑–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
  const baseHeaders = [
    '‚Ññ', '–ê—Ä—Ç–∏–∫—É–ª', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–¶–µ–Ω–∞', '–°—É–º–º–∞', '–§—É—Ä–Ω–∏—Ç—É—Ä–∞'
  ];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ –ë–î
  const propertyHeaders = Array.from(allProperties).sort();
  const allHeaders = [...baseHeaders, ...propertyHeaders];
  
  worksheet.getRow(10).values = allHeaders;
  worksheet.getRow(10).font = { bold: true };
  worksheet.getRow(10).fill = {
    type: 'pattern',
    pattern: 'solid',
    fgColor: { argb: 'FFE0E0E0' }
  };

  // –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
  let rowIndex = 11;
  data.items.forEach((item: any, index: number) => {
    const row = worksheet.getRow(rowIndex);
    
    // –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
    row.getCell(1).value = index + 1; // ‚Ññ
    row.getCell(2).value = item.sku || 'N/A'; // –ê—Ä—Ç–∏–∫—É–ª
    row.getCell(3).value = item.name; // –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
    row.getCell(4).value = item.quantity; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
    row.getCell(5).value = item.unitPrice; // –¶–µ–Ω–∞
    row.getCell(6).value = item.total; // –°—É–º–º–∞
    row.getCell(7).value = item.hardwareKitName || '–ë–∞–∑–æ–≤—ã–π –∫–æ–º–ø–ª–µ–∫—Ç'; // –§—É—Ä–Ω–∏—Ç—É—Ä–∞
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
    row.getCell(5).numFmt = '#,##0.00';
    row.getCell(6).numFmt = '#,##0.00';
    
    // –í—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ –ë–î
    let colIndex = 8; // –ù–∞—á–∏–Ω–∞–µ–º —Å 8-–π –∫–æ–ª–æ–Ω–∫–∏ (–ø–æ—Å–ª–µ –±–∞–∑–æ–≤—ã—Ö + —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞)
    if (item.properties_data) {
      try {
        const props = typeof item.properties_data === 'string' 
          ? JSON.parse(item.properties_data) 
          : item.properties_data;
        
        propertyHeaders.forEach(propKey => {
          const value = props[propKey];
          // –ó–∞–ø–æ–ª–Ω—è–µ–º –í–°–ï —è—á–µ–π–∫–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ
          if (value !== undefined && value !== null) {
            row.getCell(colIndex).value = String(value);
          } else {
            row.getCell(colIndex).value = ''; // –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
          }
          colIndex++;
        });
      } catch (e) {
        console.warn('Failed to parse properties_data for item:', e);
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        propertyHeaders.forEach(() => {
          row.getCell(colIndex).value = '';
          colIndex++;
        });
      }
    } else {
      // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
      propertyHeaders.forEach(() => {
        row.getCell(colIndex).value = '';
        colIndex++;
      });
    }
    
    rowIndex++;
  });

  // –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
  worksheet.columns.forEach((column, index) => {
    if (index < 7) {
      // –ë–∞–∑–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (–≤–∫–ª—é—á–∞—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É)
      column.width = 15;
    } else {
      // –ö–æ–ª–æ–Ω–∫–∏ —Å–≤–æ–π—Å—Ç–≤
      column.width = 20;
    }
  });
  
  // –ò—Ç–æ–≥–æ
  const totalRow = worksheet.getRow(rowIndex + 1);
  totalRow.getCell(5).value = '–ò—Ç–æ–≥–æ:';
  totalRow.getCell(5).font = { bold: true };
  totalRow.getCell(6).value = data.totalAmount;
  totalRow.getCell(6).numFmt = '#,##0.00';
  totalRow.getCell(6).font = { bold: true };

  // –ì—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
  const lastCol = String.fromCharCode(65 + allHeaders.length - 1); // –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–ª–æ–Ω–∫–∞
  const range = `A10:${lastCol}${rowIndex}`;
  worksheet.getCell(range).border = {
    top: { style: 'thin' },
    left: { style: 'thin' },
    bottom: { style: 'thin' },
    right: { style: 'thin' }
  };

  const buffer = await workbook.xlsx.writeBuffer();
  return Buffer.from(buffer);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
function buildProductName(item: any): string {
  if (item.handleId) {
    // –î–ª—è —Ä—É—á–µ–∫ - –ø—Ä–æ—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ description
    return item.description || '–†—É—á–∫–∞';
  }
  
  // –î–ª—è –¥–≤–µ—Ä–µ–π - –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É: –î–≤–µ—Ä—å Model (finish, color, width √ó height –º–º, –§—É—Ä–Ω–∏—Ç—É—Ä–∞ - kit)
  const parts = [
    '–î–≤–µ—Ä—å',
    item.model || 'Unknown',
    `(${item.finish || 'Unknown'}, ${item.color || 'Unknown'}, ${item.width || 0} √ó ${item.height || 0} –º–º`
  ];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ—É—Ä–Ω–∏—Ç—É—Ä–µ –µ—Å–ª–∏ –µ—Å—Ç—å
  if (item.hardwareKitId) {
    parts[parts.length - 1] += `, –§—É—Ä–Ω–∏—Ç—É—Ä–∞ - ${item.hardwareKitName || '–ë–∞–∑–æ–≤—ã–π –∫–æ–º–ø–ª–µ–∫—Ç'}`;
  }
  
  parts[parts.length - 1] += ')';
  
  return parts.join(' ');
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { type, clientId, items, totalAmount } = body;
    
    console.log('üìÑ Document generation request:', { 
      type, 
      clientId, 
      itemsCount: items.length, 
      totalAmount,
      sampleItem: items[0] ? {
        model: items[0].model,
        finish: items[0].finish,
        color: items[0].color,
        style: items[0].style
      } : null
    });

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
    const client = await prisma.client.findUnique({
      where: { id: clientId }
    });

    if (!client) {
      return NextResponse.json({ error: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
    const documentNumber = `${type.toUpperCase()}-${Date.now()}`;

    if (type === 'quote') {
      // –°–æ–∑–¥–∞–µ–º –ö–ü
      const quote = await prisma.quote.create({
        data: {
          number: documentNumber,
          client_id: clientId,
          created_by: 'system', // TODO: –ü–æ–ª—É—á–∏—Ç—å –∏–∑ —Ç–æ–∫–µ–Ω–∞
          status: 'DRAFT',
          subtotal: totalAmount,
          total_amount: totalAmount,
          currency: 'RUB',
          notes: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞ –¥–≤–µ—Ä–µ–π'
        }
      });

      // –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ö–ü
      for (let i = 0; i < items.length; i++) {
        const item = items[i];
        const productName = buildProductName(item);
        
        await prisma.quoteItem.create({
          data: {
            quote_id: quote.id,
            product_id: item.id || `temp_${i}`,
            quantity: item.qty || item.quantity || 1,
            unit_price: item.unitPrice || 0,
            total_price: (item.qty || item.quantity || 1) * (item.unitPrice || 0),
            notes: `${productName} | –ê—Ä—Ç–∏–∫—É–ª: ${item.sku_1c || 'N/A'}`
          }
        });
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –¥–ª—è –ö–ü
      const pdfBuffer = await generatePDF({
        type: 'quote',
        documentNumber,
        client,
        items: items.map((item, i) => ({
          rowNumber: i + 1,
          sku: item.sku_1c || 'N/A',
          name: buildProductName(item),
          unitPrice: item.unitPrice || 0,
          quantity: item.qty || item.quantity || 1,
          total: (item.qty || item.quantity || 1) * (item.unitPrice || 0)
        })),
        totalAmount
      });

      return new NextResponse(pdfBuffer, {
        headers: {
          'Content-Type': 'application/pdf',
          'Content-Disposition': `attachment; filename="KP-${documentNumber}.pdf"`
        }
      });

    } else if (type === 'invoice') {
      // –°–æ–∑–¥–∞–µ–º –°—á–µ—Ç
      const invoice = await prisma.invoice.create({
        data: {
          number: documentNumber,
          client_id: clientId,
          created_by: 'system', // TODO: –ü–æ–ª—É—á–∏—Ç—å –∏–∑ —Ç–æ–∫–µ–Ω–∞
          status: 'DRAFT',
          subtotal: totalAmount,
          total_amount: totalAmount,
          currency: 'RUB',
          notes: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞ –¥–≤–µ—Ä–µ–π'
        }
      });

      // –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –°—á–µ—Ç–∞
      for (let i = 0; i < items.length; i++) {
        const item = items[i];
        const productName = buildProductName(item);
        
        await prisma.invoiceItem.create({
          data: {
            invoice_id: invoice.id,
            product_id: item.id || `temp_${i}`,
            quantity: item.qty || item.quantity || 1,
            unit_price: item.unitPrice || 0,
            total_price: (item.qty || item.quantity || 1) * (item.unitPrice || 0),
            notes: `${productName} | –ê—Ä—Ç–∏–∫—É–ª: ${item.sku_1c || 'N/A'}`
          }
        });
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –¥–ª—è –°—á–µ—Ç–∞
      const pdfBuffer = await generatePDF({
        type: 'invoice',
        documentNumber,
        client,
        items: items.map((item, i) => ({
          rowNumber: i + 1,
          sku: item.sku_1c || 'N/A',
          name: buildProductName(item),
          unitPrice: item.unitPrice || 0,
          quantity: item.qty || item.quantity || 1,
          total: (item.qty || item.quantity || 1) * (item.unitPrice || 0)
        })),
        totalAmount
      });

      return new NextResponse(pdfBuffer, {
      headers: {
          'Content-Type': 'application/pdf',
          'Content-Disposition': `attachment; filename="Invoice-${documentNumber}.pdf"`
        }
      });

    } else if (type === 'order') {
      // –°–æ–∑–¥–∞–µ–º –ó–∞–∫–∞–∑
      const order = await prisma.order.create({
        data: {
          number: documentNumber,
          client_id: clientId,
          created_by: 'system', // TODO: –ü–æ–ª—É—á–∏—Ç—å –∏–∑ —Ç–æ–∫–µ–Ω–∞
          status: 'PENDING',
          subtotal: totalAmount,
          total_amount: totalAmount,
          currency: 'RUB',
          notes: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞ –¥–≤–µ—Ä–µ–π'
        }
      });

      // –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ó–∞–∫–∞–∑–∞
      for (let i = 0; i < items.length; i++) {
        const item = items[i];
        const productName = buildProductName(item);
        
        await prisma.orderItem.create({
          data: {
            order_id: order.id,
            product_id: item.id || `temp_${i}`,
            quantity: item.qty || item.quantity || 1,
            unit_price: item.unitPrice || 0,
            total_price: (item.qty || item.quantity || 1) * (item.unitPrice || 0),
            notes: `${productName} | –ê—Ä—Ç–∏–∫—É–ª: ${item.sku_1c || 'N/A'}`
          }
        });
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î –ø–æ —Ç–æ—á–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      const enrichedItems = await Promise.all(items.map(async (item, i) => {
        // –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ –ë–î –ø–æ —Ç–æ—á–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (—Å—Ç–∏–ª—å, –º–æ–¥–µ–ª—å, –ø–æ–∫—Ä—ã—Ç–∏–µ, —Ü–≤–µ—Ç, —Ä–∞–∑–º–µ—Ä—ã)
        let productData = null;
        
        if (item.sku_1c) {
          // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ SKU
          productData = await prisma.product.findFirst({
            where: {
              sku: item.sku_1c
            },
            select: {
              properties_data: true,
              name: true,
              sku: true
            }
          });
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ SKU, –∏—â–µ–º –ø–æ —Ç–æ—á–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if (!productData) {
          console.log('üîç Searching for product by configuration:', {
            style: item.style,
            model: item.model,
            finish: item.finish,
            color: item.color,
            width: item.width,
            height: item.height
          });
          
          // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
          const allProducts = await prisma.product.findMany({
            where: {
              catalog_category: {
                name: "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
              }
            },
            select: {
              properties_data: true,
              name: true,
              sku: true
            }
          });
          
          console.log(`üì¶ Found ${allProducts.length} door products in DB`);
          
          // –ò—â–µ–º —Ç–æ–≤–∞—Ä —Å —Ç–æ—á–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
          for (const product of allProducts) {
            if (product.properties_data) {
              try {
                const props = typeof product.properties_data === 'string' 
                  ? JSON.parse(product.properties_data) 
                  : product.properties_data;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                const styleMatch = !item.style || props['Domeo_–°—Ç–∏–ª—å Web'] === item.style;
                const modelMatch = !item.model || props['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'] === item.model;
                const finishMatch = !item.finish || props['–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è'] === item.finish;
                const colorMatch = !item.color || props['–û–±—â–µ–µ_–¶–≤–µ—Ç'] === item.color;
                const widthMatch = !item.width || props['–û–±—â–µ–µ_–®–∏—Ä–∏–Ω–∞'] === item.width;
                const heightMatch = !item.height || props['–û–±—â–µ–µ_–í—ã—Å–æ—Ç–∞'] === item.height;
                
                // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if (allProducts.indexOf(product) < 3) {
                  console.log(`üîç Checking product ${product.sku}:`, {
                    style: props['Domeo_–°—Ç–∏–ª—å Web'],
                    model: props['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'],
                    finish: props['–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è'],
                    color: props['–û–±—â–µ–µ_–¶–≤–µ—Ç'],
                    width: props['–û–±—â–µ–µ_–®–∏—Ä–∏–Ω–∞'],
                    height: props['–û–±—â–µ–µ_–í—ã—Å–æ—Ç–∞'],
                    matches: { styleMatch, modelMatch, finishMatch, colorMatch, widthMatch, heightMatch }
                  });
                }
                
                if (styleMatch && modelMatch && finishMatch && colorMatch && widthMatch && heightMatch) {
                  productData = product;
                  console.log('‚úÖ Found matching product:', {
                    sku: product.sku,
                    name: product.name,
                    propertiesCount: Object.keys(props).length,
                    sampleProperties: Object.keys(props).slice(0, 10)
                  });
                  break;
                }
              } catch (e) {
                console.warn('Failed to parse properties_data:', e);
              }
            }
          }
          
          if (!productData) {
            console.log('‚ùå No exact matching product found, trying partial match...');
            
            // Fallback: –∏—â–µ–º —Ç–æ–≤–∞—Ä —Å —á–∞—Å—Ç–∏—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º
            for (const product of allProducts) {
              if (product.properties_data) {
                try {
                  const props = typeof product.properties_data === 'string' 
                    ? JSON.parse(product.properties_data) 
                    : product.properties_data;
                  
                  // –ò—â–µ–º –ø–æ —Å—Ç–∏–ª—é –∏ –º–æ–¥–µ–ª–∏
                  const styleMatch = !item.style || props['Domeo_–°—Ç–∏–ª—å Web'] === item.style;
                  const modelMatch = !item.model || props['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'] === item.model;
                  
                  if (styleMatch && modelMatch) {
                    productData = product;
                    console.log('üîç Found partial match:', {
                      sku: product.sku,
                      name: product.name,
                      style: props['Domeo_–°—Ç–∏–ª—å Web'],
                      model: props['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'],
                      propertiesCount: Object.keys(props).length
                    });
                    break;
                  }
                } catch (e) {
                  console.warn('Failed to parse properties_data:', e);
                }
              }
            }
            
            if (!productData) {
              console.log('‚ùå No partial match found either, using first available product');
              // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback: –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä
              if (allProducts.length > 0) {
                productData = allProducts[0];
                console.log('üîç Using first available product:', {
                  sku: productData.sku,
                  name: productData.name
                });
              }
            }
          }
        }
        
        return {
          rowNumber: i + 1,
          sku: item.sku_1c || 'N/A',
          name: buildProductName(item),
          finish: item.finish,
          color: item.color,
          width: item.width,
          height: item.height,
          quantity: item.qty || item.quantity || 1,
          hardwareKitName: item.hardwareKitName,
          unitPrice: item.unitPrice || 0,
          total: (item.qty || item.quantity || 1) * (item.unitPrice || 0),
          properties_data: productData?.properties_data || null,
          // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–≤–æ–π—Å—Ç–≤
          configuration: {
            style: item.style,
            model: item.model,
            finish: item.finish,
            color: item.color,
            width: item.width,
            height: item.height
          }
        };
      }));

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel –¥–ª—è –ó–∞–∫–∞–∑–∞
      const excelBuffer = await generateExcel({
        type: 'order',
        documentNumber,
        client,
        items: enrichedItems,
        totalAmount
      });

      return new NextResponse(excelBuffer, {
        headers: {
          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
          'Content-Disposition': `attachment; filename="Order-${documentNumber}.xlsx"`
        }
      });
    }

    return NextResponse.json({ error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞' }, { status: 400 });

  } catch (error) {
    console.error('Error generating document:', error);
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞' }, { status: 500 });
  }
}