import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { canUserCreateDocument } from '@/lib/auth/permissions';
import jwt from 'jsonwebtoken';

// POST /api/documents/create - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–≤—è–∑—è–º–∏
export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const {
      type, // 'quote', 'invoice', 'order', 'supplier_order'
      parent_document_id, // ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      cart_session_id, // ID —Å–µ—Å—Å–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      client_id,
      items,
      total_amount,
      subtotal = 0,
      tax_amount = 0,
      notes,
      prevent_duplicates = true,
      created_by = userId || 'system'
    } = body;

    console.log(`üÜï –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ç–∏–ø–∞ ${type}, —Ä–æ–¥–∏—Ç–µ–ª—å: ${parent_document_id || '–Ω–µ—Ç'}`);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
    const token = req.cookies.get('auth-token')?.value;
    if (!token) {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as any;
    const userId = decoded.userId;
    const userRole = decoded.role;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    if (!canUserCreateDocument(userRole, type)) {
      return NextResponse.json(
        { error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞' },
        { status: 403 }
      );
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!type || !client_id || !items || !Array.isArray(items)) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è: type, client_id, items' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç (–¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è)
    let existingDocument = null;
    if (prevent_duplicates) {
      existingDocument = await findExistingDocument(type, parent_document_id, cart_session_id, client_id, items, total_amount);
    }

    let documentNumber: string;
    let documentId: string | null = null;

    if (existingDocument) {
      documentNumber = existingDocument.number;
      documentId = existingDocument.id;
      console.log(`üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç: ${documentNumber} (ID: ${documentId})`);
    } else {
      const documentNumberPrefix = type === 'quote' ? '–ö–ü' : type === 'invoice' ? '–°—á–µ—Ç' : type === 'order' ? '–ó–∞–∫–∞–∑' : '–î–æ–∫—É–º–µ–Ω—Ç';
      documentNumber = `${documentNumberPrefix}-${Date.now()}`;
      console.log(`üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: ${documentNumber}`);
    }

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ë–î
    let dbResult;
    if (!existingDocument) {
      dbResult = await createDocumentRecord(type, {
        number: documentNumber,
        parent_document_id,
        cart_session_id: cart_session_id,
        client_id,
        items,
        total_amount,
        subtotal,
        tax_amount,
        notes,
        created_by
      });
      documentId = dbResult.id;
      console.log(`‚úÖ –ó–∞–ø–∏—Å—å –≤ –ë–î —Å–æ–∑–¥–∞–Ω–∞: ${type} #${dbResult.id}`);
    } else {
      console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ë–î: ${documentNumber}`);
      dbResult = { id: documentId, type: type };
    }

    return NextResponse.json({
      success: true,
      documentId: documentId,
      documentNumber: documentNumber,
      type: type,
      parent_document_id,
      isNew: !existingDocument,
      message: existingDocument ? '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç' : '–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞' },
      { status: 500 }
    );
  }
}

// –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
async function findExistingDocument(
  type: 'quote' | 'invoice' | 'order' | 'supplier_order',
  parentDocumentId: string | null,
  cartSessionId: string | null,
  clientId: string,
  items: any[],
  totalAmount: number
) {
  try {
    console.log(`üîç –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${type}, —Ä–æ–¥–∏—Ç–µ–ª—å: ${parentDocumentId || '–Ω–µ—Ç'}, –∫–æ—Ä–∑–∏–Ω–∞: ${cartSessionId || '–Ω–µ—Ç'}, –∫–ª–∏–µ–Ω—Ç: ${clientId}, —Å—É–º–º–∞: ${totalAmount}`);

    // –°–æ–∑–¥–∞–µ–º —Ö–µ—à —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const contentHash = createContentHash(clientId, items, totalAmount);

    if (type === 'quote') {
      // –°—Ç—Ä–æ–≥–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ö–ü - —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π
      const existingQuote = await prisma.quote.findFirst({
        where: {
          parent_document_id: parentDocumentId,
          cart_session_id: cartSessionId,
          client_id: clientId,
          total_amount: totalAmount
        } as any,
        orderBy: { created_at: 'desc' }
      });
      if (existingQuote) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ö–ü: ${existingQuote.number} (ID: ${existingQuote.id})`);
        return existingQuote;
      }
    } else if (type === 'invoice') {
      // –°—Ç—Ä–æ–≥–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—á–µ—Ç–∞ - —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π
      const existingInvoice = await prisma.invoice.findFirst({
        where: {
          parent_document_id: parentDocumentId,
          cart_session_id: cartSessionId,
          client_id: clientId,
          total_amount: totalAmount
        } as any,
        orderBy: { created_at: 'desc' }
      });
      if (existingInvoice) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—á–µ—Ç: ${existingInvoice.number} (ID: ${existingInvoice.id})`);
        return existingInvoice;
      }
    } else if (type === 'order') {
      // –°—Ç—Ä–æ–≥–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ - —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π
      const existingOrder = await prisma.order.findFirst({
        where: {
          parent_document_id: parentDocumentId,
          cart_session_id: cartSessionId,
          client_id: clientId,
          total_amount: totalAmount
        } as any,
        orderBy: { created_at: 'desc' }
      });
      if (existingOrder) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑: ${existingOrder.number} (ID: ${existingOrder.id})`);
        return existingOrder;
      }
    } else if (type === 'supplier_order') {
      const existingSupplierOrder = await prisma.supplierOrder.findFirst({
        where: {
          parent_document_id: parentDocumentId,
          cart_session_id: cartSessionId,
          cart_data: { contains: contentHash }
        } as any,
        orderBy: { created_at: 'desc' }
      });
      if (existingSupplierOrder) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: ${existingSupplierOrder.id}`);
        return existingSupplierOrder;
      }
    }

    console.log(`‚ùå –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return null;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
    return null;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –ë–î
async function createDocumentRecord(
  type: 'quote' | 'invoice' | 'order' | 'supplier_order',
  data: {
    number: string;
    parent_document_id: string | null;
    cart_session_id: string | null;
    client_id: string;
    items: any[];
    total_amount: number;
    subtotal: number;
    tax_amount: number;
    notes?: string;
    created_by: string;
  }
) {
  const cartData = JSON.stringify(data.items);
  const contentHash = createContentHash(data.client_id, data.items, data.total_amount);

  if (type === 'quote') {
    const quote = await prisma.quote.create({
      data: {
        number: data.number,
        parent_document_id: data.parent_document_id,
        cart_session_id: data.cart_session_id,
        client_id: data.client_id,
        created_by: data.created_by,
        subtotal: data.subtotal,
        tax_amount: data.tax_amount,
        total_amount: data.total_amount,
        notes: data.notes,
        cart_data: cartData
      }
    });

    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ö–ü
    for (const item of data.items) {
      await prisma.quoteItem.create({
        data: {
          quote_id: quote.id,
          product_id: item.product_id || 'unknown',
          quantity: item.quantity || 1,
          unit_price: item.price || 0,
          total_price: (item.price || 0) * (item.quantity || 1),
          notes: item.notes
        }
      });
    }

    return quote;
  } else if (type === 'invoice') {
    const invoice = await prisma.invoice.create({
      data: {
        number: data.number,
        parent_document_id: data.parent_document_id,
        cart_session_id: data.cart_session_id,
        client_id: data.client_id,
        created_by: data.created_by,
        subtotal: data.subtotal,
        tax_amount: data.tax_amount,
        total_amount: data.total_amount,
        notes: data.notes,
        cart_data: cartData
      }
    });

    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å—á–µ—Ç–∞
    for (const item of data.items) {
      await prisma.invoiceItem.create({
        data: {
          invoice_id: invoice.id,
          product_id: item.product_id || 'unknown',
          quantity: item.quantity || 1,
          unit_price: item.price || 0,
          total_price: (item.price || 0) * (item.quantity || 1),
          notes: item.notes
        }
      });
    }

    return invoice;
  } else if (type === 'order') {
    const order = await prisma.order.create({
      data: {
        number: data.number,
        parent_document_id: data.parent_document_id,
        cart_session_id: data.cart_session_id,
        client_id: data.client_id,
        created_by: data.created_by,
        subtotal: data.subtotal,
        tax_amount: data.tax_amount,
        total_amount: data.total_amount,
        notes: data.notes,
        cart_data: cartData
      }
    });

    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–∞
    for (const item of data.items) {
      await prisma.orderItem.create({
        data: {
          order_id: order.id,
          product_id: item.product_id || 'unknown',
          quantity: item.quantity || 1,
          unit_price: item.price || 0,
          total_price: (item.price || 0) * (item.quantity || 1),
          notes: item.notes
        }
      });
    }

    return order;
  } else if (type === 'supplier_order') {
    const supplierOrder = await prisma.supplierOrder.create({
      data: {
        parent_document_id: data.parent_document_id,
        cart_session_id: data.cart_session_id,
        executor_id: data.created_by,
        supplier_name: '–ü–æ—Å—Ç–∞–≤—â–∏–∫', // –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
        notes: data.notes,
        cart_data: cartData,
        total_amount: data.total_amount // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
      }
    });

    return supplierOrder;
  }

  throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${type}`);
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ö–µ—à–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
function createContentHash(clientId: string, items: any[], totalAmount: number): string {
  const content = {
    client_id: clientId,
    items: items.map(item => ({
      id: item.id,
      type: item.type,
      quantity: item.qty || item.quantity,
      unitPrice: item.unitPrice || item.price,
      name: item.name
    })),
    total_amount: totalAmount
  };
  
  // –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–π –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö–µ—à
  const contentString = JSON.stringify(content);
  const hash = Buffer.from(contentString).toString('base64');
  
  // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ª—É—á—à–µ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
  return hash.substring(0, 100);
}