import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

// GET /api/documents - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const orderId = searchParams.get('order_id');
    const quoteId = searchParams.get('quote_id');

    console.log('üîç –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã');

    let documents = [];

    if (orderId) {
      // –ü–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç–∞, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–∫–∞–∑–∞
      const invoices = await prisma.invoice.findMany({
        where: { parent_document_id: orderId },
        include: {
          client: {
            select: {
              id: true,
              firstName: true,
              lastName: true
            }
          }
        },
        orderBy: { created_at: 'desc' }
      });
      documents = invoices.map(inv => ({ ...inv, documentType: 'invoice' }));
    } else if (quoteId) {
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ö–ü
      const orders = await prisma.order.findMany({
        where: { quote_id: quoteId },
        include: {
          client: {
            select: {
              id: true,
              firstName: true,
              lastName: true
            }
          }
        },
        orderBy: { created_at: 'desc' }
      });
      documents = orders.map(ord => ({ ...ord, documentType: 'order' }));
    } else {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
      const [quotes, invoices, orders] = await Promise.all([
        prisma.quote.findMany({
          take: 5,
          include: {
            client: {
              select: {
                id: true,
                firstName: true,
                lastName: true
              }
            }
          },
          orderBy: { created_at: 'desc' }
        }),
        prisma.invoice.findMany({
          take: 5,
          include: {
            client: {
              select: {
                id: true,
                firstName: true,
                lastName: true
              }
            }
          },
          orderBy: { created_at: 'desc' }
        }),
        prisma.order.findMany({
          take: 5,
          include: {
            client: {
              select: {
                id: true,
                firstName: true,
                lastName: true
              }
            }
          },
          orderBy: { created_at: 'desc' }
        })
      ]);

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–∏–ø–∞
      documents = [
        ...quotes.map(doc => ({ ...doc, documentType: 'quote' })),
        ...invoices.map(doc => ({ ...doc, documentType: 'invoice' })),
        ...orders.map(doc => ({ ...doc, documentType: 'order' }))
      ].sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime());
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${documents.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`);

    return NextResponse.json({
      success: true,
      documents,
      counts: {
        quotes: documents.filter(d => d.documentType === 'quote').length,
        invoices: documents.filter(d => d.documentType === 'invoice').length,
        orders: documents.filter(d => d.documentType === 'order').length
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤' },
      { status: 500 }
    );
  }
}
