import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

// GET /api/documents - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export async function GET(req: NextRequest) {
  try {
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤');

    // –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    const [quotes, invoices, orders] = await Promise.all([
      prisma.quote.findMany({
        take: 5,
        include: {
          client: {
            select: {
              id: true,
              firstName: true,
              lastName: true
            }
          }
        },
        orderBy: { created_at: 'desc' }
      }),
      prisma.invoice.findMany({
        take: 5,
        include: {
          client: {
            select: {
              id: true,
              firstName: true,
              lastName: true
            }
          }
        },
        orderBy: { created_at: 'desc' }
      }),
      prisma.order.findMany({
        take: 5,
        include: {
          client: {
            select: {
              id: true,
              firstName: true,
              lastName: true
            }
          }
        },
        orderBy: { created_at: 'desc' }
      })
    ]);

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–∏–ø–∞
    const allDocuments = [
      ...quotes.map(doc => ({ ...doc, documentType: 'quote' })),
      ...invoices.map(doc => ({ ...doc, documentType: 'invoice' })),
      ...orders.map(doc => ({ ...doc, documentType: 'order' }))
    ].sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime());

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${allDocuments.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`);

    return NextResponse.json({
      success: true,
      documents: allDocuments,
      counts: {
        quotes: quotes.length,
        invoices: invoices.length,
        orders: orders.length
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤' },
      { status: 500 }
    );
  }
}
