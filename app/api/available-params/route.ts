import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export async function GET(req: NextRequest) {
  return NextResponse.json({ message: 'API available-params is working' });
}

export async function POST(req: NextRequest) {
  console.log('üîç POST /api/available-params called');
  try {
    const body = await req.json();
    console.log('üì• Request body:', body);
    console.log('üì• Raw style:', JSON.stringify(body.style));
    console.log('üì• Raw model:', JSON.stringify(body.model));
    const { style, model, color } = body;
    
    if (!style || !model) {
      console.log('‚ùå Missing style or model:', { style, model });
      return NextResponse.json(
        { error: 'Style and model are required' },
        { 
          status: 400,
          headers: {
            'Content-Type': 'application/json; charset=utf-8'
          }
        }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    const products = await prisma.product.findMany({
      where: {
        is_active: true
      },
      select: {
        properties_data: true
      }
    });

    console.log('üì¶ Total products loaded:', products.length);

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç–∏–ª—é, –º–æ–¥–µ–ª–∏ –∏ —Ü–≤–µ—Ç—É (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω) –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    const filteredProducts = products.filter(product => {
      try {
        const props = product.properties_data ? 
          (typeof product.properties_data === 'string' ? JSON.parse(product.properties_data) : product.properties_data) : {};
        const styleMatch = props?.['Domeo_–°—Ç–∏–ª—å Web'] === style;
        const modelMatch = props?.['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web']?.includes(model);
        const colorMatch = !color || props?.['Domeo_–¶–≤–µ—Ç'] === color; // –ï—Å–ª–∏ —Ü–≤–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (Math.random() < 0.01) { // 1% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
          console.log('üîç Product check:', {
            style: props?.['Domeo_–°—Ç–∏–ª—å Web'],
            model: props?.['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'],
            color: props?.['Domeo_–¶–≤–µ—Ç'],
            styleMatch,
            modelMatch,
            colorMatch,
            requestedStyle: style,
            requestedModel: model,
            requestedColor: color
          });
        }
        return styleMatch && modelMatch && colorMatch;
      } catch (error) {
        console.error('‚ùå Error parsing product properties:', error);
        return false;
      }
    });

    console.log('üì¶ Filtered products:', filteredProducts.length);

    if (filteredProducts.length === 0) {
      console.log('‚ùå No products found for style:', style, 'model:', model);
      return NextResponse.json({ error: 'No products found' }, { 
        status: 404,
        headers: {
          'Content-Type': 'application/json; charset=utf-8'
        }
      });
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    const availableParams = {
      finishes: new Set<string>(),
      colors: new Set<string>(),
      widths: new Set<number>(),
      heights: new Set<number>(),
      hardwareKits: new Set<string>()
    };

    filteredProducts.forEach(product => {
      const props = product.properties_data ? 
        (typeof product.properties_data === 'string' ? JSON.parse(product.properties_data) : product.properties_data) : {};
      
      if (props?.['–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è']) {
        availableParams.finishes.add(props['–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è']);
      }
      if (props?.['Domeo_–¶–≤–µ—Ç']) {
        availableParams.colors.add(props['Domeo_–¶–≤–µ—Ç']);
      }
      if (props?.['–®–∏—Ä–∏–Ω–∞/–º–º']) {
        availableParams.widths.add(Number(props['–®–∏—Ä–∏–Ω–∞/–º–º']));
      }
      if (props?.['–í—ã—Å–æ—Ç–∞/–º–º']) {
        availableParams.heights.add(Number(props['–í—ã—Å–æ—Ç–∞/–º–º']));
      }
    });

    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Ç—ã —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã
    const hardwareKits = await prisma.product.findMany({
      where: {
        is_active: true,
        catalog_category: {
          name: '–ö–æ–º–ø–ª–µ–∫—Ç—ã —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã'
        }
      },
      select: {
        id: true,
        name: true,
        properties_data: true
      }
    });

    console.log('üîß Hardware kits found:', hardwareKits.length);
    console.log('üîß First few kits:', hardwareKits.slice(0, 3).map(kit => ({
      id: kit.id,
      name: kit.name,
      props: kit.properties_data ? (typeof kit.properties_data === 'string' ? JSON.parse(kit.properties_data) : kit.properties_data) : {}
    })));

    const hardwareKitOptions: Array<{id: string, name: string}> = [];
    hardwareKits.forEach(kit => {
      const props = kit.properties_data ? 
        (typeof kit.properties_data === 'string' ? JSON.parse(kit.properties_data) : kit.properties_data) : {};
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
      const groupName = props?.['–ì—Ä—É–ø–ø–∞'] || props?.['–¶–µ–Ω–æ–≤–∞—è –≥—Ä—É–ø–ø–∞'] || props?.['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è Web'] || kit.name;
      
      if (groupName) {
        hardwareKitOptions.push({
          id: kit.id,
          name: groupName
        });
      }
    });

    console.log('üîß Hardware kit options:', hardwareKitOptions.length, hardwareKitOptions);

    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä—É—á–∫–∏
    const handles = await prisma.product.findMany({
      where: {
        is_active: true,
        catalog_category: {
          name: '–†—É—á–∫–∏'
        }
      },
      select: {
        id: true,
        name: true,
        properties_data: true
      }
    });

    const handleOptions: Array<{id: string, name: string, group: string}> = [];
    handles.forEach(handle => {
      const props = handle.properties_data ? 
        (typeof handle.properties_data === 'string' ? JSON.parse(handle.properties_data) : handle.properties_data) : {};
      if (props?.['Domeo_–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä—É—á–∫–∏_1–°'] || props?.['Domeo_–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è Web']) {
        handleOptions.push({
          id: handle.id,
          name: props['Domeo_–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä—É—á–∫–∏_1–°'] || props['Domeo_–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è Web'] || handle.name,
          group: props['–ì—Ä—É–ø–ø–∞'] || '–ë–µ–∑ –≥—Ä—É–ø–ø—ã'
        });
      }
    });

    console.log('‚úÖ Available params:', {
      finishes: Array.from(availableParams.finishes).length,
      colors: Array.from(availableParams.colors).length,
      widths: Array.from(availableParams.widths).length,
      heights: Array.from(availableParams.heights).length,
      hardwareKits: hardwareKitOptions.length,
      handles: handleOptions.length
    });

    return NextResponse.json({
      success: true,
      params: {
        finishes: Array.from(availableParams.finishes).sort(),
        colors: Array.from(availableParams.colors).sort(),
        widths: Array.from(availableParams.widths).sort((a, b) => a - b),
        heights: Array.from(availableParams.heights).sort((a, b) => a - b),
        hardwareKits: hardwareKitOptions,
        handles: handleOptions
      }
    }, {
      headers: {
        'Content-Type': 'application/json; charset=utf-8'
      }
    });

  } catch (error) {
    console.error('‚ùå Error fetching available parameters:', error);
    console.error('‚ùå Error stack:', error.stack);
    return NextResponse.json(
      { error: 'Failed to fetch available parameters', details: error.message },
      { 
        status: 500,
        headers: {
          'Content-Type': 'application/json; charset=utf-8'
        }
      }
    );
  }
}
