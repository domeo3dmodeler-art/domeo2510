import { NextRequest, NextResponse } from 'next/server';

// Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
const mockCategories = {
  'doors': {
    id: 'doors',
    name: '–î–≤–µ—Ä–∏',
    description: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –∏ –≤—Ö–æ–¥–Ω—ã–µ –¥–≤–µ—Ä–∏',
    icon: 'üö™',
    properties: [
      { key: 'material', name: '–ú–∞—Ç–µ—Ä–∏–∞–ª', type: 'select', required: true },
      { key: 'color', name: '–¶–≤–µ—Ç', type: 'select', required: true },
      { key: 'size', name: '–†–∞–∑–º–µ—Ä', type: 'text', required: true },
      { key: 'price', name: '–¶–µ–Ω–∞', type: 'number', required: true }
    ],
    import_mapping: {
      'Material': 'material',
      'Color': 'color',
      'Size': 'size',
      'Price': 'price'
    },
    is_main: true,
    parent_id: null,
    subcategories: [
      {
        id: 'door-handles',
        name: '–†—É—á–∫–∏',
        description: '–†—É—á–∫–∏ –¥–ª—è –¥–≤–µ—Ä–µ–π',
        icon: 'üîò',
        properties: [],
        import_mapping: {},
        is_main: false,
        parent_id: 'doors'
      },
      {
        id: 'door-kits',
        name: '–ö–æ–º–ø–ª–µ–∫—Ç—ã —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã',
        description: '–ö–æ–º–ø–ª–µ–∫—Ç—ã —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã –¥–ª—è –¥–≤–µ—Ä–µ–π',
        icon: 'üîß',
        properties: [],
        import_mapping: {},
        is_main: false,
        parent_id: 'doors'
      }
    ]
  }
};

const mockPhotos = {
  'doors': [
    {
      id: '1',
      url: '/assets/doors/door_base_1.jpg',
      alt: '–î–≤–µ—Ä—å PO Base 1/1',
      category_id: 'doors'
    }
  ]
};

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const categoryId = params.id;
    const category = mockCategories[categoryId as keyof typeof mockCategories];

    if (!category) {
      return NextResponse.json({ error: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }, { status: 404 });
    }

    return NextResponse.json(category);
  } catch (error) {
    console.error('Error fetching category:', error);
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 });
  }
}

export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const categoryId = params.id;
    const data = await request.json();

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('Updating category:', categoryId, data);

    // –û–±–Ω–æ–≤–ª—è–µ–º mock –¥–∞–Ω–Ω—ã–µ
    if (mockCategories[categoryId as keyof typeof mockCategories]) {
      mockCategories[categoryId as keyof typeof mockCategories] = {
        ...mockCategories[categoryId as keyof typeof mockCategories],
        ...data
      };
    }

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Error updating category:', error);
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 });
  }
}
