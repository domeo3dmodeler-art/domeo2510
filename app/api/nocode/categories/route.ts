import { NextRequest, NextResponse } from 'next/server';

// ===================== API –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —à–∞–±–ª–æ–Ω–∞–º–∏ =====================

// GET /api/nocode/categories - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∏—Ö —à–∞–±–ª–æ–Ω–∞–º–∏
export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const includeTemplates = searchParams.get('includeTemplates') === 'true';
    
    const categories = [
      {
        id: 'doors',
        name: '–î–≤–µ—Ä–∏',
        description: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –∏ –≤—Ö–æ–¥–Ω—ã–µ –¥–≤–µ—Ä–∏',
        icon: 'üö™',
        active_template: 'doors-template',
        properties: [
          { key: 'style', name: '–°—Ç–∏–ª—å', type: 'select', required: true, options: ['–°–∫—Ä—ã—Ç–∞—è', '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è', '–ù–µ–æ–∫–ª–∞—Å—Å–∏–∫–∞', '–ö–ª–∞—Å—Å–∏–∫–∞'] },
          { key: 'model', name: '–ú–æ–¥–µ–ª—å', type: 'select', required: true },
          { key: 'finish', name: '–ü–æ–∫—Ä—ã—Ç–∏–µ', type: 'select', required: true },
          { key: 'color', name: '–¶–≤–µ—Ç', type: 'select', required: true },
          { key: 'type', name: '–¢–∏–ø', type: 'select', required: true },
          { key: 'width', name: '–®–∏—Ä–∏–Ω–∞', type: 'number', required: true },
          { key: 'height', name: '–í—ã—Å–æ—Ç–∞', type: 'number', required: true },
          { key: 'edge', name: '–ö—Ä–æ–º–∫–∞', type: 'select', required: false, options: ['–¥–∞', '–Ω–µ—Ç'] }
        ],
        subcategories: [
          {
            id: 'door-handles',
            name: '–†—É—á–∫–∏',
            description: '–†—É—á–∫–∏ –¥–ª—è –º–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã—Ö –¥–≤–µ—Ä–µ–π',
            properties: [
              { key: 'name', name: '–ù–∞–∑–≤–∞–Ω–∏–µ', type: 'text', required: true },
              { key: 'supplier_name', name: '–ü–æ—Å—Ç–∞–≤—â–∏–∫', type: 'text', required: true },
              { key: 'price_opt', name: '–¶–µ–Ω–∞ –æ–ø—Ç–æ–≤–∞—è', type: 'number', required: true }
            ]
          },
          {
            id: 'door-kits',
            name: '–ö–æ–º–ø–ª–µ–∫—Ç—ã —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã',
            description: '–ö–æ–º–ø–ª–µ–∫—Ç—ã —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã –¥–ª—è –¥–≤–µ—Ä–µ–π',
            properties: [
              { key: 'name', name: '–ù–∞–∑–≤–∞–Ω–∏–µ', type: 'text', required: true },
              { key: 'group', name: '–ì—Ä—É–ø–ø–∞', type: 'number', required: false },
              { key: 'price_rrc', name: '–¶–µ–Ω–∞ –†–†–¶', type: 'number', required: true }
            ]
          }
        ],
        templates: includeTemplates ? [
          {
            id: 'doors-template',
            name: '–®–∞–±–ª–æ–Ω –¥–ª—è –¥–≤–µ—Ä–µ–π',
            description: '–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä –¥–≤–µ—Ä–µ–π',
            layout: { type: 'grid', columns: 3, gap: 8, responsive: true },
            components: [
              {
                id: 'style-selector',
                type: 'selector',
                position: { row: 1, col: 1 },
                config: {
                  title: '–ü–æ–ª–æ—Ç–Ω–æ',
                  type: 'style-tiles',
                  options: ['–°–∫—Ä—ã—Ç–∞—è', '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è', '–ù–µ–æ–∫–ª–∞—Å—Å–∏–∫–∞', '–ö–ª–∞—Å—Å–∏–∫–∞']
                },
                title: '–í—ã–±–æ—Ä —Å—Ç–∏–ª—è',
                visible: true
              },
              {
                id: 'model-selector',
                type: 'selector',
                position: { row: 2, col: 1 },
                config: {
                  title: '–ú–æ–¥–µ–ª–∏',
                  type: 'model-cards',
                  dependsOn: 'style'
                },
                title: '–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏',
                visible: true
              },
              {
                id: 'preview-panel',
                type: 'preview',
                position: { row: 1, col: 2 },
                config: { showPrice: true },
                title: '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä',
                visible: true
              },
              {
                id: 'cart-panel',
                type: 'cart',
                position: { row: 1, col: 3 },
                config: { exportOptions: ['kp', 'invoice', 'factory'] },
                title: '–ö–æ—Ä–∑–∏–Ω–∞',
                visible: true
              }
            ]
          }
        ] : []
      },
      {
        id: 'flooring',
        name: '–ù–∞–ø–æ–ª—å–Ω—ã–µ –ø–æ–∫—Ä—ã—Ç–∏—è',
        description: '–õ–∞–º–∏–Ω–∞—Ç, –ø–∞—Ä–∫–µ—Ç, –ª–∏–Ω–æ–ª–µ—É–º',
        icon: 'üè†',
        active_template: 'flooring-template',
        properties: [
          { key: 'material', name: '–ú–∞—Ç–µ—Ä–∏–∞–ª', type: 'select', required: true, options: ['–õ–∞–º–∏–Ω–∞—Ç', '–ü–∞—Ä–∫–µ—Ç', '–õ–∏–Ω–æ–ª–µ—É–º', '–ü–ª–∏—Ç–∫–∞'] },
          { key: 'collection', name: '–ö–æ–ª–ª–µ–∫—Ü–∏—è', type: 'select', required: true },
          { key: 'color', name: '–¶–≤–µ—Ç', type: 'select', required: true },
          { key: 'pattern', name: '–†–∏—Å—É–Ω–æ–∫', type: 'select', required: false },
          { key: 'width', name: '–®–∏—Ä–∏–Ω–∞', type: 'number', required: true },
          { key: 'length', name: '–î–ª–∏–Ω–∞', type: 'number', required: true },
          { key: 'thickness', name: '–¢–æ–ª—â–∏–Ω–∞', type: 'select', required: true }
        ],
        subcategories: [],
        templates: includeTemplates ? [
          {
            id: 'flooring-template',
            name: '–®–∞–±–ª–æ–Ω –¥–ª—è –Ω–∞–ø–æ–ª—å–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π',
            description: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä –Ω–∞–ø–æ–ª—å–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π',
            layout: { type: 'grid', columns: 2, gap: 6, responsive: true },
            components: [
              {
                id: 'material-selector',
                type: 'selector',
                position: { row: 1, col: 1 },
                config: {
                  title: '–ú–∞—Ç–µ—Ä–∏–∞–ª',
                  type: 'material-cards',
                  options: ['–õ–∞–º–∏–Ω–∞—Ç', '–ü–∞—Ä–∫–µ—Ç', '–õ–∏–Ω–æ–ª–µ—É–º', '–ü–ª–∏—Ç–∫–∞']
                },
                title: '–í—ã–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞',
                visible: true
              },
              {
                id: 'preview-panel',
                type: 'preview',
                position: { row: 1, col: 2 },
                config: { showPrice: true },
                title: '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä',
                visible: true
              }
            ]
          }
        ] : []
      },
      {
        id: 'kitchens',
        name: '–ö—É—Ö–Ω–∏',
        description: '–ö—É—Ö–æ–Ω–Ω—ã–µ –≥–∞—Ä–Ω–∏—Ç—É—Ä—ã –Ω–∞ –∑–∞–∫–∞–∑',
        icon: 'üç≥',
        active_template: 'kitchens-template',
        properties: [
          { key: 'style', name: '–°—Ç–∏–ª—å', type: 'select', required: true, options: ['–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è', '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è', '–°–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∞—è', '–õ–æ—Ñ—Ç'] },
          { key: 'layout', name: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∫–∞', type: 'select', required: true },
          { key: 'facade', name: '–§–∞—Å–∞–¥', type: 'select', required: true },
          { key: 'color', name: '–¶–≤–µ—Ç', type: 'select', required: true },
          { key: 'width', name: '–®–∏—Ä–∏–Ω–∞', type: 'number', required: true },
          { key: 'height', name: '–í—ã—Å–æ—Ç–∞', type: 'number', required: true }
        ],
        subcategories: [],
        templates: includeTemplates ? [
          {
            id: 'kitchens-template',
            name: '–®–∞–±–ª–æ–Ω –¥–ª—è –∫—É—Ö–æ–Ω—å',
            description: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä –∫—É—Ö–æ–Ω–Ω—ã—Ö –≥–∞—Ä–Ω–∏—Ç—É—Ä–æ–≤',
            layout: { type: 'grid', columns: 3, gap: 8, responsive: true },
            components: [
              {
                id: 'style-selector',
                type: 'selector',
                position: { row: 1, col: 1 },
                config: {
                  title: '–°—Ç–∏–ª—å –∫—É—Ö–Ω–∏',
                  type: 'style-showcase',
                  options: ['–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è', '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è', '–°–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∞—è', '–õ–æ—Ñ—Ç']
                },
                title: '–í—ã–±–æ—Ä —Å—Ç–∏–ª—è',
                visible: true
              },
              {
                id: 'preview-panel',
                type: 'preview',
                position: { row: 1, col: 2 },
                config: { showPrice: true },
                title: '3D –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä',
                visible: true
              },
              {
                id: 'cart-panel',
                type: 'cart',
                position: { row: 1, col: 3 },
                config: { exportOptions: ['kp', 'invoice', 'factory'] },
                title: '–ö–æ—Ä–∑–∏–Ω–∞',
                visible: true
              }
            ]
          }
        ] : []
      },
      {
        id: 'tiles',
        name: '–ü–ª–∏—Ç–∫–∞',
        description: '–ö–µ—Ä–∞–º–∏—á–µ—Å–∫–∞—è –ø–ª–∏—Ç–∫–∞ –∏ –º–æ–∑–∞–∏–∫–∞',
        icon: 'üî≤',
        active_template: 'tiles-template',
        properties: [
          { key: 'collection', name: '–ö–æ–ª–ª–µ–∫—Ü–∏—è', type: 'select', required: true, options: ['–ö–ª–∞—Å—Å–∏–∫–∞', '–ú–æ–¥–µ—Ä–Ω', '–ú—Ä–∞–º–æ—Ä', '–î–µ—Ä–µ–≤–æ'] },
          { key: 'color', name: '–¶–≤–µ—Ç', type: 'select', required: true },
          { key: 'size', name: '–†–∞–∑–º–µ—Ä', type: 'select', required: true },
          { key: 'finish', name: '–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å', type: 'select', required: true },
          { key: 'thickness', name: '–¢–æ–ª—â–∏–Ω–∞', type: 'select', required: true },
          { key: 'area', name: '–ü–ª–æ—â–∞–¥—å', type: 'number', required: true }
        ],
        subcategories: [],
        templates: includeTemplates ? [
          {
            id: 'tiles-template',
            name: '–®–∞–±–ª–æ–Ω –¥–ª—è –ø–ª–∏—Ç–∫–∏',
            description: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–æ–π –ø–ª–∏—Ç–∫–∏',
            layout: { type: 'grid', columns: 2, gap: 6, responsive: true },
            components: [
              {
                id: 'collection-selector',
                type: 'selector',
                position: { row: 1, col: 1 },
                config: {
                  title: '–ö–æ–ª–ª–µ–∫—Ü–∏—è –ø–ª–∏—Ç–∫–∏',
                  type: 'collection-mosaic',
                  options: ['–ö–ª–∞—Å—Å–∏–∫–∞', '–ú–æ–¥–µ—Ä–Ω', '–ú—Ä–∞–º–æ—Ä', '–î–µ—Ä–µ–≤–æ']
                },
                title: '–í—ã–±–æ—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–∏',
                visible: true
              },
              {
                id: 'preview-panel',
                type: 'preview',
                position: { row: 1, col: 2 },
                config: { showPrice: true },
                title: '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä',
                visible: true
              }
            ]
          }
        ] : []
      }
    ];
    
    return NextResponse.json({
      success: true,
      data: categories,
      count: categories.length
    });
  } catch (error) {
    return NextResponse.json(
      { success: false, error: 'Failed to fetch categories' },
      { status: 500 }
    );
  }
}

// POST /api/nocode/categories - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    
    const newCategory = {
      id: `category-${Date.now()}`,
      name: body.name || '–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
      description: body.description || '',
      icon: body.icon || 'üì¶',
      active_template: body.active_template || null,
      properties: body.properties || [],
      subcategories: body.subcategories || [],
      templates: body.templates || []
    };
    
    return NextResponse.json({
      success: true,
      data: newCategory
    });
  } catch (error) {
    return NextResponse.json(
      { success: false, error: 'Failed to create category' },
      { status: 500 }
    );
  }
}

// PUT /api/nocode/categories/[id] - –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
export async function PUT(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const categoryId = searchParams.get('id');
    
    if (!categoryId) {
      return NextResponse.json(
        { success: false, error: 'Category ID is required' },
        { status: 400 }
      );
    }
    
    const body = await req.json();
    
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const updatedCategory = {
      id: categoryId,
      ...body,
      updated_at: new Date().toISOString()
    };
    
    return NextResponse.json({
      success: true,
      data: updatedCategory
    });
  } catch (error) {
    return NextResponse.json(
      { success: false, error: 'Failed to update category' },
      { status: 500 }
    );
  }
}
