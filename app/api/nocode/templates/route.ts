import { NextRequest, NextResponse } from 'next/server';

// ===================== –¢–∏–ø—ã –¥–ª—è API =====================

interface PageTemplate {
  id: string;
  name: string;
  description: string;
  category: string;
  layout: {
    type: 'grid' | 'flex' | 'custom';
    columns: number;
    gap: number;
    responsive: boolean;
  };
  components: ComponentConfig[];
  created_at: string;
  updated_at: string;
}

interface ComponentConfig {
  id: string;
  type: 'selector' | 'preview' | 'cart' | 'parameters' | 'custom';
  position: { row: number; col: number; span?: number };
  config: any;
  title?: string;
  visible: boolean;
}

interface CategoryConfig {
  id: string;
  name: string;
  description: string;
  icon: string;
  properties: PropertyConfig[];
  subcategories: SubcategoryConfig[];
  active_template?: string;
}

interface PropertyConfig {
  key: string;
  name: string;
  type: 'select' | 'text' | 'number' | 'boolean' | 'multiselect';
  required: boolean;
  options?: string[];
  validation?: any;
}

interface SubcategoryConfig {
  id: string;
  name: string;
  description: string;
  properties: PropertyConfig[];
}

// ===================== Mock –¥–∞–Ω–Ω—ã–µ =====================

const mockTemplates: PageTemplate[] = [
  {
    id: 'doors-template',
    name: '–®–∞–±–ª–æ–Ω –¥–ª—è –¥–≤–µ—Ä–µ–π',
    description: '–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä –¥–≤–µ—Ä–µ–π —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç–∏–ª—è, –º–æ–¥–µ–ª–∏, –ø–æ–∫—Ä—ã—Ç–∏—è –∏ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã',
    category: 'doors',
    layout: { type: 'grid', columns: 3, gap: 8, responsive: true },
    components: [
      {
        id: 'style-selector',
        type: 'selector',
        position: { row: 1, col: 1, span: 1 },
        config: {
          title: '–ü–æ–ª–æ—Ç–Ω–æ',
          type: 'style-tiles',
          options: ['–°–∫—Ä—ã—Ç–∞—è', '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è', '–ù–µ–æ–∫–ª–∞—Å—Å–∏–∫–∞', '–ö–ª–∞—Å—Å–∏–∫–∞']
        },
        title: '–í—ã–±–æ—Ä —Å—Ç–∏–ª—è',
        visible: true
      },
      {
        id: 'model-selector',
        type: 'selector',
        position: { row: 2, col: 1, span: 1 },
        config: {
          title: '–ü–æ–∫—Ä—ã—Ç–∏–µ –∏ —Ü–≤–µ—Ç ‚Äî –ú–æ–¥–µ–ª–∏',
          type: 'model-cards',
          dependsOn: 'style'
        },
        title: '–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏',
        visible: true
      },
      {
        id: 'parameters-form',
        type: 'parameters',
        position: { row: 3, col: 1, span: 1 },
        config: {
          fields: [
            { key: 'finish', label: '–ü–æ–∫—Ä—ã—Ç–∏–µ', type: 'select' },
            { key: 'color', label: '–¶–≤–µ—Ç', type: 'select' },
            { key: 'type', label: '–¢–∏–ø', type: 'select' },
            { key: 'width', label: '–®–∏—Ä–∏–Ω–∞', type: 'select' },
            { key: 'height', label: '–í—ã—Å–æ—Ç–∞', type: 'select' },
            { key: 'edge', label: '–ö—Ä–æ–º–∫–∞', type: 'select', options: ['–¥–∞', '–Ω–µ—Ç'] }
          ]
        },
        title: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã',
        visible: true
      },
      {
        id: 'preview-panel',
        type: 'preview',
        position: { row: 1, col: 2, span: 1 },
        config: {
          showImage: true,
          showPrice: true,
          showSku: true
        },
        title: '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä',
        visible: true
      },
      {
        id: 'cart-panel',
        type: 'cart',
        position: { row: 1, col: 3, span: 1 },
        config: {
          showTotal: true,
          allowEdit: true,
          exportOptions: ['kp', 'invoice', 'factory']
        },
        title: '–ö–æ—Ä–∑–∏–Ω–∞',
        visible: true
      }
    ],
    created_at: '2025-01-15T10:00:00Z',
    updated_at: '2025-01-15T10:00:00Z'
  },
  {
    id: 'flooring-template',
    name: '–®–∞–±–ª–æ–Ω –¥–ª—è –Ω–∞–ø–æ–ª—å–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π',
    description: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä –Ω–∞–ø–æ–ª—å–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π —Å –≤—ã–±–æ—Ä–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞, —Ü–≤–µ—Ç–∞ –∏ —Ä–∞–∑–º–µ—Ä–æ–≤',
    category: 'flooring',
    layout: { type: 'grid', columns: 2, gap: 6, responsive: true },
    components: [
      {
        id: 'material-selector',
        type: 'selector',
        position: { row: 1, col: 1, span: 1 },
        config: {
          title: '–ú–∞—Ç–µ—Ä–∏–∞–ª',
          type: 'material-cards',
          options: ['–õ–∞–º–∏–Ω–∞—Ç', '–ü–∞—Ä–∫–µ—Ç', '–õ–∏–Ω–æ–ª–µ—É–º', '–ü–ª–∏—Ç–∫–∞']
        },
        title: '–í—ã–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞',
        visible: true
      },
      {
        id: 'collection-selector',
        type: 'selector',
        position: { row: 2, col: 1, span: 1 },
        config: {
          title: '–ö–æ–ª–ª–µ–∫—Ü–∏—è',
          type: 'collection-grid',
          dependsOn: 'material'
        },
        title: '–í—ã–±–æ—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–∏',
        visible: true
      },
      {
        id: 'parameters-form',
        type: 'parameters',
        position: { row: 3, col: 1, span: 1 },
        config: {
          fields: [
            { key: 'color', label: '–¶–≤–µ—Ç', type: 'select' },
            { key: 'pattern', label: '–†–∏—Å—É–Ω–æ–∫', type: 'select' },
            { key: 'width', label: '–®–∏—Ä–∏–Ω–∞', type: 'number' },
            { key: 'length', label: '–î–ª–∏–Ω–∞', type: 'number' },
            { key: 'thickness', label: '–¢–æ–ª—â–∏–Ω–∞', type: 'select' }
          ]
        },
        title: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã',
        visible: true
      },
      {
        id: 'preview-panel',
        type: 'preview',
        position: { row: 1, col: 2, span: 1 },
        config: {
          showImage: true,
          showPrice: true,
          showSpecs: true
        },
        title: '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä',
        visible: true
      },
      {
        id: 'cart-panel',
        type: 'cart',
        position: { row: 2, col: 2, span: 1 },
        config: {
          showTotal: true,
          allowEdit: true,
          exportOptions: ['kp', 'invoice']
        },
        title: '–ö–æ—Ä–∑–∏–Ω–∞',
        visible: true
      }
    ],
    created_at: '2025-01-15T10:00:00Z',
    updated_at: '2025-01-15T10:00:00Z'
  }
];

const mockCategories: CategoryConfig[] = [
  {
    id: 'doors',
    name: '–î–≤–µ—Ä–∏',
    description: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –∏ –≤—Ö–æ–¥–Ω—ã–µ –¥–≤–µ—Ä–∏',
    icon: 'üö™',
    active_template: 'doors-template',
    properties: [
      { key: 'style', name: '–°—Ç–∏–ª—å', type: 'select', required: true, options: ['–°–∫—Ä—ã—Ç–∞—è', '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è', '–ù–µ–æ–∫–ª–∞—Å—Å–∏–∫–∞', '–ö–ª–∞—Å—Å–∏–∫–∞'] },
      { key: 'model', name: '–ú–æ–¥–µ–ª—å', type: 'select', required: true },
      { key: 'finish', name: '–ü–æ–∫—Ä—ã—Ç–∏–µ', type: 'select', required: true },
      { key: 'color', name: '–¶–≤–µ—Ç', type: 'select', required: true },
      { key: 'type', name: '–¢–∏–ø', type: 'select', required: true },
      { key: 'width', name: '–®–∏—Ä–∏–Ω–∞', type: 'number', required: true },
      { key: 'height', name: '–í—ã—Å–æ—Ç–∞', type: 'number', required: true },
      { key: 'edge', name: '–ö—Ä–æ–º–∫–∞', type: 'select', required: false, options: ['–¥–∞', '–Ω–µ—Ç'] }
    ],
    subcategories: [
      {
        id: 'door-handles',
        name: '–†—É—á–∫–∏',
        description: '–†—É—á–∫–∏ –¥–ª—è –º–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã—Ö –¥–≤–µ—Ä–µ–π',
        properties: [
          { key: 'name', name: '–ù–∞–∑–≤–∞–Ω–∏–µ', type: 'text', required: true },
          { key: 'supplier_name', name: '–ü–æ—Å—Ç–∞–≤—â–∏–∫', type: 'text', required: true },
          { key: 'price_opt', name: '–¶–µ–Ω–∞ –æ–ø—Ç–æ–≤–∞—è', type: 'number', required: true }
        ]
      },
      {
        id: 'door-kits',
        name: '–ö–æ–º–ø–ª–µ–∫—Ç—ã —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã',
        description: '–ö–æ–º–ø–ª–µ–∫—Ç—ã —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã –¥–ª—è –¥–≤–µ—Ä–µ–π',
        properties: [
          { key: 'name', name: '–ù–∞–∑–≤–∞–Ω–∏–µ', type: 'text', required: true },
          { key: 'group', name: '–ì—Ä—É–ø–ø–∞', type: 'number', required: false },
          { key: 'price_rrc', name: '–¶–µ–Ω–∞ –†–†–¶', type: 'number', required: true }
        ]
      }
    ]
  },
  {
    id: 'flooring',
    name: '–ù–∞–ø–æ–ª—å–Ω—ã–µ –ø–æ–∫—Ä—ã—Ç–∏—è',
    description: '–õ–∞–º–∏–Ω–∞—Ç, –ø–∞—Ä–∫–µ—Ç, –ª–∏–Ω–æ–ª–µ—É–º',
    icon: 'üè†',
    active_template: 'flooring-template',
    properties: [
      { key: 'material', name: '–ú–∞—Ç–µ—Ä–∏–∞–ª', type: 'select', required: true, options: ['–õ–∞–º–∏–Ω–∞—Ç', '–ü–∞—Ä–∫–µ—Ç', '–õ–∏–Ω–æ–ª–µ—É–º', '–ü–ª–∏—Ç–∫–∞'] },
      { key: 'collection', name: '–ö–æ–ª–ª–µ–∫—Ü–∏—è', type: 'select', required: true },
      { key: 'color', name: '–¶–≤–µ—Ç', type: 'select', required: true },
      { key: 'pattern', name: '–†–∏—Å—É–Ω–æ–∫', type: 'select', required: false },
      { key: 'width', name: '–®–∏—Ä–∏–Ω–∞', type: 'number', required: true },
      { key: 'length', name: '–î–ª–∏–Ω–∞', type: 'number', required: true },
      { key: 'thickness', name: '–¢–æ–ª—â–∏–Ω–∞', type: 'select', required: true }
    ],
    subcategories: []
  }
];

// ===================== API Routes =====================

// GET /api/nocode/templates - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const category = searchParams.get('category');
    
    let templates = mockTemplates;
    
    if (category) {
      templates = templates.filter(t => t.category === category);
    }
    
    return NextResponse.json({
      success: true,
      data: templates,
      count: templates.length
    });
  } catch (error) {
    return NextResponse.json(
      { success: false, error: 'Failed to fetch templates' },
      { status: 500 }
    );
  }
}

// POST /api/nocode/templates - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω
export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    
    const newTemplate: PageTemplate = {
      id: `template-${Date.now()}`,
      name: body.name || '–ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω',
      description: body.description || '',
      category: body.category || 'doors',
      layout: body.layout || { type: 'grid', columns: 2, gap: 6, responsive: true },
      components: body.components || [],
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };
    
    mockTemplates.push(newTemplate);
    
    return NextResponse.json({
      success: true,
      data: newTemplate
    });
  } catch (error) {
    return NextResponse.json(
      { success: false, error: 'Failed to create template' },
      { status: 500 }
    );
  }
}

// PUT /api/nocode/templates/[id] - –û–±–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω
export async function PUT(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const templateId = searchParams.get('id');
    
    if (!templateId) {
      return NextResponse.json(
        { success: false, error: 'Template ID is required' },
        { status: 400 }
      );
    }
    
    const body = await req.json();
    const templateIndex = mockTemplates.findIndex(t => t.id === templateId);
    
    if (templateIndex === -1) {
      return NextResponse.json(
        { success: false, error: 'Template not found' },
        { status: 404 }
      );
    }
    
    mockTemplates[templateIndex] = {
      ...mockTemplates[templateIndex],
      ...body,
      updated_at: new Date().toISOString()
    };
    
    return NextResponse.json({
      success: true,
      data: mockTemplates[templateIndex]
    });
  } catch (error) {
    return NextResponse.json(
      { success: false, error: 'Failed to update template' },
      { status: 500 }
    );
  }
}

// DELETE /api/nocode/templates/[id] - –£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω
export async function DELETE(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const templateId = searchParams.get('id');
    
    if (!templateId) {
      return NextResponse.json(
        { success: false, error: 'Template ID is required' },
        { status: 400 }
      );
    }
    
    const templateIndex = mockTemplates.findIndex(t => t.id === templateId);
    
    if (templateIndex === -1) {
      return NextResponse.json(
        { success: false, error: 'Template not found' },
        { status: 404 }
      );
    }
    
    mockTemplates.splice(templateIndex, 1);
    
    return NextResponse.json({
      success: true,
      message: 'Template deleted successfully'
    });
  } catch (error) {
    return NextResponse.json(
      { success: false, error: 'Failed to delete template' },
      { status: 500 }
    );
  }
}
