import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import ExcelJS from 'exceljs';

// –ü–æ–∏—Å–∫ —Ä—É—á–∫–∏ –≤ –ë–î –ø–æ ID
async function findHandleById(handleId: string) {
  console.log('üîß –ò—â–µ–º —Ä—É—á–∫—É –ø–æ ID:', handleId);
  
  const handle = await prisma.product.findFirst({
    where: {
      id: handleId,
      catalog_category: { name: "–†—É—á–∫–∏" }
    },
    select: { id: true, properties_data: true, name: true, sku: true }
  });

  if (handle) {
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ä—É—á–∫–∞:', handle.sku);
    return [handle];
  } else {
    console.log('‚ùå –†—É—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î');
    return [];
  }
}

export async function GET(req: NextRequest, { params }: { params: Promise<{ id: string }> }) {
  try {
    const { id } = await params;

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    const supplierOrder = await prisma.supplierOrder.findUnique({
      where: { id },
      select: {
        id: true,
        order_id: true,
        supplier_name: true,
        supplier_email: true,
        supplier_phone: true,
        expected_date: true,
        notes: true,
        cart_data: true
      }
    });

    if (!supplierOrder) {
      return NextResponse.json({ error: 'Supplier order not found' }, { status: 404 });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –∏ –∫–ª–∏–µ–Ω—Ç–∞
    const order = await prisma.order.findUnique({
      where: { id: supplierOrder.order_id },
      select: {
        id: true,
        client: {
          select: {
            id: true,
            firstName: true,
            lastName: true,
            middleName: true,
            phone: true,
            address: true
          }
        }
      }
    });

    if (!order) {
      return NextResponse.json({ error: 'Related order not found' }, { status: 404 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã
    let cartData = null;
    if (supplierOrder.cart_data) {
      try {
        const parsedData = JSON.parse(supplierOrder.cart_data);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º —Å items
        if (Array.isArray(parsedData)) {
          // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –æ–±—ä–µ–∫—Ç —Å items
          cartData = { items: parsedData };
        } else if (parsedData.items) {
          // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –æ–±—ä–µ–∫—Ç —Å items, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
          cartData = parsedData;
        } else {
          // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç –±–µ–∑ items, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ items
          cartData = { items: [parsedData] };
        }
      } catch (error) {
        console.error('Error parsing cart_data:', error);
      }
    }

    if (!cartData || !cartData.items || cartData.items.length === 0) {
      return NextResponse.json({ error: 'No cart data found for this supplier order' }, { status: 400 });
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel
    const excelData = {
      items: cartData.items.map((item: any) => ({
        sku: item.id || 'N/A',
        name: item.type === 'handle' 
          ? (item.handleName || item.name || '–†—É—á–∫–∞')
          : (item.name || `–î–≤–µ—Ä—å ${item.model?.replace(/DomeoDoors_/g, 'DomeoDoors ').replace(/_/g, ' ')} (${item.finish}, ${item.color}, ${item.width} √ó ${item.height} –º–º, –ö–æ–º–ø–ª–µ–∫—Ç —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã - ${(item.hardwareKitName || item.hardware || '–ë–∞–∑–æ–≤—ã–π').replace(/^–ö–æ–º–ø–ª–µ–∫—Ç —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã ‚Äî /, '')})` || '–¢–æ–≤–∞—Ä'),
        quantity: item.quantity || item.qty || 1,
        unitPrice: item.unitPrice || 0,
        total: (item.quantity || item.qty || 1) * (item.unitPrice || 0),
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ë–î
        model: item.model,
        finish: item.finish,
        color: item.color,
        width: item.width,
        height: item.height,
        // –ö–†–ò–¢–ò–ß–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏
        type: item.type,
        handleId: item.handleId,
        handleName: item.handleName,
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–ª–µ–∫—Ç–µ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã
        hardwareKitName: item.hardwareKitName,
        hardware: item.hardware
      }))
    };

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    const buffer = await generateExcel({
      ...excelData,
      client: order.client,
      supplier: {
        name: supplierOrder.supplier_name,
        email: supplierOrder.supplier_email,
        phone: supplierOrder.supplier_phone
      },
      supplierOrderId: supplierOrder.id,
      orderDate: supplierOrder.created_at || new Date(),
      expectedDate: supplierOrder.expected_date,
      notes: supplierOrder.notes
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏–º–µ–Ω–µ–º
    const safeFilename = `Supplier_Order_${supplierOrder.id.slice(-6)}.xlsx`;
    
    return new NextResponse(buffer, {
      headers: {
        'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'Content-Disposition': `attachment; filename="${safeFilename}"`,
        'Content-Length': buffer.length.toString(),
      },
    });

  } catch (error) {
    console.error('Error generating Excel for supplier order:', error);
    return NextResponse.json(
      { error: 'Failed to generate Excel file' },
      { status: 500 }
    );
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel —Ñ–∞–π–ª–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async function generateExcel(data: any): Promise<Buffer> {
  const startTime = Date.now();
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Excel –∑–∞–∫–∞–∑–∞ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å –ø–æ–ª–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏...');

  try {
    // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è –¥–≤–µ—Ä–µ–π
    const template = await getDoorTemplate();
    console.log('üìã –ü–æ–ª—è —à–∞–±–ª–æ–Ω–∞:', template.exportFields.length);

    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet('–ó–∞–∫–∞–∑ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞');
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–æ–±—ä–µ–¥–∏–Ω—è–µ–º —è—á–µ–π–∫–∏ A1:Z1)
    worksheet.mergeCells('A1:Z1');
    worksheet.getCell('A1').value = '–ó–ê–ö–ê–ó –£ –ü–û–°–¢–ê–í–©–ò–ö–ê';
    worksheet.getCell('A1').font = { size: 16, bold: true };
    worksheet.getCell('A1').alignment = { horizontal: 'center' };

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
    worksheet.getCell('A3').value = '–ö–ª–∏–µ–Ω—Ç:';
    worksheet.getCell('B3').value = `${data.client.lastName} ${data.client.firstName} ${data.client.middleName || ''}`.trim();
    worksheet.getCell('A4').value = '–¢–µ–ª–µ—Ñ–æ–Ω:';
    worksheet.getCell('B4').value = data.client.phone || 'N/A';
    worksheet.getCell('A5').value = '–ê–¥—Ä–µ—Å:';
    worksheet.getCell('B5').value = data.client.address || 'N/A';

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ
    worksheet.getCell('A7').value = '–ü–æ—Å—Ç–∞–≤—â–∏–∫:';
    worksheet.getCell('B7').value = data.supplier.name || 'N/A';
    worksheet.getCell('A8').value = 'Email:';
    worksheet.getCell('B8').value = data.supplier.email || 'N/A';
    worksheet.getCell('A9').value = '–¢–µ–ª–µ—Ñ–æ–Ω:';
    worksheet.getCell('B9').value = data.supplier.phone || 'N/A';

    // –ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –¥–∞—Ç–∞
    worksheet.getCell('A11').value = '–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞:';
    worksheet.getCell('B11').value = `SUPPLIER-ORDER-${data.supplierOrderId?.slice(-6) || 'UNKNOWN'}`;
    worksheet.getCell('A12').value = '–î–∞—Ç–∞:';
    worksheet.getCell('B12').value = new Date().toLocaleDateString('ru-RU');

    // –ë–∞–∑–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ + –ø–æ–ª—è –∏–∑ –ë–î –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    const baseHeaders = ['‚Ññ', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–¶–µ–Ω–∞', '–°—É–º–º–∞'];
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –∏–∑ –ë–î –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
    const dbFields = [
      '–¶–µ–Ω–∞ –æ–ø—Ç',
      '–¶–µ–Ω–∞ –†–†–¶', 
      '–ü–æ—Å—Ç–∞–≤—â–∏–∫',
      '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
      '–ú–∞—Ç–µ—Ä–∏–∞–ª/–ü–æ–∫—Ä—ã—Ç–∏–µ',
      '–†–∞–∑–º–µ—Ä 1',
      '–†–∞–∑–º–µ—Ä 2', 
      '–†–∞–∑–º–µ—Ä 3',
      '–¶–≤–µ—Ç/–û—Ç–¥–µ–ª–∫–∞',
      'SKU –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ',
      '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'
    ];
    
    const allHeaders = [...baseHeaders, ...dbFields];
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (—Å—Ç—Ä–æ–∫–∞ 10, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ!)
    worksheet.getRow(10).values = allHeaders;
    worksheet.getRow(10).font = { bold: true };
    
    // –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞: –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã - –≥–æ–ª—É–±–æ–π, –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î - –±–µ–∂–µ–≤—ã–π (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ!)
    const cartHeadersCount = baseHeaders.length;
    const dbHeadersCount = dbFields.length;
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã (–≥–æ–ª—É–±–æ–π —Ñ–æ–Ω)
    for (let i = 1; i <= cartHeadersCount; i++) {
      const cell = worksheet.getCell(10, i);
      cell.fill = {
        type: 'pattern',
        pattern: 'solid',
        fgColor: { argb: 'FFE6F3FF' } // –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π
      };
    }
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –ë–î (–±–µ–∂–µ–≤—ã–π —Ñ–æ–Ω)
    for (let i = cartHeadersCount + 1; i <= cartHeadersCount + dbHeadersCount; i++) {
      const cell = worksheet.getCell(10, i);
      cell.fill = {
        type: 'pattern',
        pattern: 'solid',
        fgColor: { argb: 'FFF5F5DC' } // –ë–µ–∂–µ–≤—ã–π
      };
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ!)
    // –ü–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ - –ø–æ–ª–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
    const firstHeaderCell = worksheet.getCell(10, 1);
    firstHeaderCell.border = {
      top: { style: 'thin', color: { argb: 'FF000000' } },
      left: { style: 'thin', color: { argb: 'FF000000' } },
      bottom: { style: 'thin', color: { argb: 'FF000000' } },
      right: { style: 'thin', color: { argb: 'FF000000' } }
    };
    
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ —è—á–µ–π–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ - —Ç–æ–ª—å–∫–æ –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
    for (let col = 2; col <= allHeaders.length; col++) {
      const headerCell = worksheet.getCell(10, col);
      headerCell.border = {
        bottom: { style: 'thin', color: { argb: 'FF000000' } }
      };
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã (–Ω–∞—á–∏–Ω–∞–µ–º —Å–æ —Å—Ç—Ä–æ–∫–∏ 11!)
    let rowIndex = 11;
    let globalRowNumber = 1;
    
    for (let i = 0; i < data.items.length; i++) {
      const item = data.items[i];
      console.log(`üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä ${i + 1} –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã:`, item.name);

      // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–æ–≤–∞—Ä—ã –≤ –ë–î
      let matchingProducts: any[] = [];
      if (item.type === 'handle' && item.handleId) {
        // –î–ª—è —Ä—É—á–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        matchingProducts = await findHandleById(item.handleId);
      } else {
        // –î–ª—è –¥–≤–µ—Ä–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        const result = await findAllProductsByConfiguration(item);
        matchingProducts = result || [];
      }
      console.log(`üîç –î–ª—è —Ç–æ–≤–∞—Ä–∞ "${item.name}" –Ω–∞–π–¥–µ–Ω–æ ${matchingProducts.length} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î`);
      
      if (matchingProducts.length === 0) {
        console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤, —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã');
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤, —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        const row = worksheet.getRow(rowIndex);
        
        // –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
        row.getCell(1).value = globalRowNumber++; // ‚Ññ
        row.getCell(2).value = item.name; // –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        row.getCell(3).value = item.quantity || item.qty || 1; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        row.getCell(4).value = item.unitPrice || 0; // –¶–µ–Ω–∞
        row.getCell(5).value = (item.quantity || item.qty || 1) * (item.unitPrice || 0); // –°—É–º–º–∞
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª (–±–µ–∑ .00 –∏ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ –≥—Ä—É–ø–ø —Ä–∞–∑—Ä—è–¥–æ–≤)
        row.getCell(4).numFmt = '#,##0';
        row.getCell(5).numFmt = '#,##0';
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è –ø–æ–ª–µ–π –∏–∑ –ë–î
        let colIndex = 6;
        dbFields.forEach(() => {
          row.getCell(colIndex).value = '';
          colIndex++;
        });
        
        // –¶–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ: —Å—Ç—Ä–æ–∫–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã - –±–µ–ª—ã–π —Ñ–æ–Ω
        for (let col = 1; col <= worksheet.columnCount; col++) {
          row.getCell(col).fill = {
            type: 'pattern',
            pattern: 'solid',
            fgColor: { argb: 'FFFFFFFF' } // –ë–µ–ª—ã–π —Ñ–æ–Ω –¥–ª—è —Å—Ç—Ä–æ–∫–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
          };
          // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É
          row.getCell(col).alignment = { 
            vertical: 'middle', 
            horizontal: 'center' 
          };
          
          // –ì—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≤—Å–µ—Ö —è—á–µ–µ–∫ (–≤–∫–ª—é—á–∞—è –¥–∞–Ω–Ω—ã–µ –∏–∑ —à–∞–±–ª–æ–Ω–∞!)
          row.getCell(col).border = {
            bottom: { style: 'thin', color: { argb: 'FF000000' } }
          };
        }
        
        rowIndex++;
      } else {
        // –°–æ–∑–¥–∞–µ–º –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –∫–æ—Ä–∑–∏–Ω—ã —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º–∏ —è—á–µ–π–∫–∞–º–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ!)
        console.log(`üìù –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã —Å ${matchingProducts.length} –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∏–∑ –ë–î`);
        
        const row = worksheet.getRow(rowIndex);
        
        // –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è (–∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
        row.getCell(1).value = globalRowNumber++; // ‚Ññ
        row.getCell(2).value = item.name; // –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        row.getCell(3).value = item.quantity || item.qty || 1; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        row.getCell(4).value = item.unitPrice || 0; // –¶–µ–Ω–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        row.getCell(5).value = (item.quantity || item.qty || 1) * (item.unitPrice || 0); // –°—É–º–º–∞
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª (–±–µ–∑ .00 –∏ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ –≥—Ä—É–ø–ø —Ä–∞–∑—Ä—è–¥–æ–≤)
        row.getCell(4).numFmt = '#,##0';
        row.getCell(5).numFmt = '#,##0';
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —è—á–µ–π–∫–∏ –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –ø–æ–ª–µ–π (–µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î)
        if (matchingProducts.length > 1) {
          // –û–±—ä–µ–¥–∏–Ω—è–µ–º —è—á–µ–π–∫–∏ –±–∞–∑–æ–≤—ã—Ö –ø–æ–ª–µ–π –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
          for (let col = 1; col <= 5; col++) {
            const startRow = rowIndex;
            const endRow = rowIndex + matchingProducts.length - 1;
            if (startRow !== endRow) {
              worksheet.mergeCells(startRow, col, endRow, col);
              // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫
              row.getCell(col).alignment = { 
                vertical: 'middle', 
                horizontal: 'center' 
              };
            }
          }
        }
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –∏–∑ –ë–î –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        let currentRowIndex = rowIndex;
        
        for (let productIndex = 0; productIndex < matchingProducts.length; productIndex++) {
          const productData = matchingProducts[productIndex];
          console.log(`üìù –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –∏–∑ –ë–î –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${productData.sku} (${productIndex + 1}/${matchingProducts.length})`);
          
          const currentRow = worksheet.getRow(currentRowIndex);
          let colIndex = 6; // –ù–∞—á–∏–Ω–∞–µ–º —Å 6-–π –∫–æ–ª–æ–Ω–∫–∏ (–ø–æ—Å–ª–µ –±–∞–∑–æ–≤—ã—Ö)
          
          if (productData.properties_data) {
            try {
              const props = typeof productData.properties_data === 'string' 
                ? JSON.parse(productData.properties_data) 
                : productData.properties_data;
              
              // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
              console.log(`üîç –¢–∏–ø —Ç–æ–≤–∞—Ä–∞: "${item.type}", –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –¥–ª—è ${productData.sku}`);
              console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º item.type === 'handle': ${item.type === 'handle'}`);
              dbFields.forEach(fieldName => {
                let value = '';
                
                // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–∫–∞–∫ –≤ puppeteer-generator.ts)
                if (fieldName === '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞') {
                  // –î–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è
                  value = props['–§–∞–±—Ä–∏–∫–∞_–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'] || props['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–≤–µ—Ä–∏ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'] || props['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'] || props['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'] || '';
                  console.log(`üîç –ü–æ–ª–µ "${fieldName}" –∑–∞–ø–æ–ª–Ω—è–µ–º: ${value}`);
                } else if (fieldName === '–ú–∞—Ç–µ—Ä–∏–∞–ª/–ü–æ–∫—Ä—ã—Ç–∏–µ') {
                  // –î–ª—è –¥–≤–µ—Ä–µ–π: –ú–∞—Ç–µ—Ä–∏–∞–ª/–ü–æ–∫—Ä—ã—Ç–∏–µ, –¥–ª—è —Ä—É—á–µ–∫: –ø—É—Å—Ç–æ–µ
                  if (item.type === 'handle') {
                    value = ''; // –†—É—á–∫–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω—è—é—Ç –º–∞—Ç–µ—Ä–∏–∞–ª
                    console.log(`üîç –†—É—á–∫–∞ - –ø–æ–ª–µ "${fieldName}" –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º`);
                  } else {
                    value = props['–ú–∞—Ç–µ—Ä–∏–∞–ª/–ü–æ–∫—Ä—ã—Ç–∏–µ'] || props['–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è'] || '';
                    console.log(`üîç –î–≤–µ—Ä—å - –ø–æ–ª–µ "${fieldName}" –∑–∞–ø–æ–ª–Ω—è–µ–º: ${value}`);
                  }
                } else if (fieldName === '–†–∞–∑–º–µ—Ä 1') {
                  // –î–ª—è –¥–≤–µ—Ä–µ–π: –®–∏—Ä–∏–Ω–∞/–º–º, –¥–ª—è —Ä—É—á–µ–∫: –ø—É—Å—Ç–æ–µ
                  if (item.type === 'handle') {
                    value = ''; // –†—É—á–∫–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω—è—é—Ç —Ä–∞–∑–º–µ—Ä—ã
                    console.log(`üîç –†—É—á–∫–∞ - –ø–æ–ª–µ "${fieldName}" –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º`);
                  } else {
                    value = props['–®–∏—Ä–∏–Ω–∞/–º–º'] || '';
                    console.log(`üîç –î–≤–µ—Ä—å - –ø–æ–ª–µ "${fieldName}" –∑–∞–ø–æ–ª–Ω—è–µ–º: ${value}`);
                  }
                } else if (fieldName === '–†–∞–∑–º–µ—Ä 2') {
                  // –î–ª—è –¥–≤–µ—Ä–µ–π: –í—ã—Å–æ—Ç–∞/–º–º, –¥–ª—è —Ä—É—á–µ–∫: –ø—É—Å—Ç–æ–µ
                  if (item.type === 'handle') {
                    value = ''; // –†—É—á–∫–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω—è—é—Ç —Ä–∞–∑–º–µ—Ä—ã
                    console.log(`üîç –†—É—á–∫–∞ - –ø–æ–ª–µ "${fieldName}" –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º`);
                  } else {
                    value = props['–í—ã—Å–æ—Ç–∞/–º–º'] || '';
                    console.log(`üîç –î–≤–µ—Ä—å - –ø–æ–ª–µ "${fieldName}" –∑–∞–ø–æ–ª–Ω—è–µ–º: ${value}`);
                  }
                } else if (fieldName === '–†–∞–∑–º–µ—Ä 3') {
                  // –î–ª—è –¥–≤–µ—Ä–µ–π: –¢–æ–ª—â–∏–Ω–∞/–º–º, –¥–ª—è —Ä—É—á–µ–∫: –ø—É—Å—Ç–æ–µ
                  if (item.type === 'handle') {
                    value = ''; // –†—É—á–∫–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω—è—é—Ç —Ä–∞–∑–º–µ—Ä—ã
                    console.log(`üîç –†—É—á–∫–∞ - –ø–æ–ª–µ "${fieldName}" –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º`);
                  } else {
                    value = props['–¢–æ–ª—â–∏–Ω–∞/–º–º'] || '';
                    console.log(`üîç –î–≤–µ—Ä—å - –ø–æ–ª–µ "${fieldName}" –∑–∞–ø–æ–ª–Ω—è–µ–º: ${value}`);
                  }
                } else if (fieldName === '–¶–≤–µ—Ç/–û—Ç–¥–µ–ª–∫–∞') {
                  // –î–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¶–≤–µ—Ç/–û—Ç–¥–µ–ª–∫–∞
                  value = props['–¶–≤–µ—Ç/–û—Ç–¥–µ–ª–∫–∞'] || props['Domeo_–¶–≤–µ—Ç'] || '';
                } else {
                  // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
                  if (item.type === 'handle') {
                    // –î–ª—è —Ä—É—á–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª–µ–π
                    if (fieldName === '–¶–µ–Ω–∞ –†–†–¶') {
                      value = props['–¶–µ–Ω–∞ —Ä–æ–∑–Ω–∏—Ü–∞'] || props['–¶–µ–Ω–∞ –†–†–¶'] || '';
                    } else if (fieldName === '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞') {
                      value = props['–§–∞–±—Ä–∏–∫–∞_–∞—Ä—Ç–∏–∫—É–ª'] || props['–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'] || '';
                    } else {
                      value = props[fieldName] || '';
                    }
                    console.log(`üîç –†—É—á–∫–∞ - –ø–æ–ª–µ "${fieldName}" –∑–∞–ø–æ–ª–Ω—è–µ–º: ${value}`);
                  } else {
                    // –î–ª—è –¥–≤–µ—Ä–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É
                    value = props[fieldName] || '';
                    console.log(`üîç –î–≤–µ—Ä—å - –ø–æ–ª–µ "${fieldName}" –∑–∞–ø–æ–ª–Ω—è–µ–º: ${value}`);
                  }
                }
                
                if (value !== undefined && value !== null && value !== '') {
                  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ü–µ–Ω
                  if (fieldName === '–¶–µ–Ω–∞ –æ–ø—Ç' || fieldName === '–¶–µ–Ω–∞ –†–†–¶') {
                    const numValue = parseFloat(String(value));
                    if (!isNaN(numValue)) {
                      currentRow.getCell(colIndex).value = numValue;
                      currentRow.getCell(colIndex).numFmt = '#,##0';
                    } else {
                      currentRow.getCell(colIndex).value = '';
                    }
                  } else {
                    currentRow.getCell(colIndex).value = String(value);
                  }
                  console.log(`‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –ø–æ–ª–µ "${fieldName}": ${value}`);
                } else {
                  currentRow.getCell(colIndex).value = '';
                  console.log(`‚ùå –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ "${fieldName}"`);
                }
                colIndex++;
              });
            } catch (e) {
              console.warn('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ properties_data –¥–ª—è —Ç–æ–≤–∞—Ä–∞:', e);
              // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
              dbFields.forEach(() => {
                currentRow.getCell(colIndex).value = '';
                colIndex++;
              });
            }
          } else {
            console.log('‚ùå –ù–µ—Ç properties_data –¥–ª—è —Ç–æ–≤–∞—Ä–∞');
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            dbFields.forEach(() => {
              currentRow.getCell(colIndex).value = '';
              colIndex++;
            });
          }
          
          // –¶–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ: —Å—Ç—Ä–æ–∫–∞ –∏–∑ –ë–î - —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ!)
          for (let col = 1; col <= worksheet.columnCount; col++) {
            currentRow.getCell(col).fill = {
              type: 'pattern',
              pattern: 'solid',
              fgColor: { argb: 'FFF0F0F0' } // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω –¥–ª—è —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ë–î
            };
            // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É
            currentRow.getCell(col).alignment = { 
              vertical: 'middle', 
              horizontal: 'center' 
            };
            
            // –ì—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≤—Å–µ—Ö —è—á–µ–µ–∫ (–≤–∫–ª—é—á–∞—è –¥–∞–Ω–Ω—ã–µ –∏–∑ —à–∞–±–ª–æ–Ω–∞!)
            currentRow.getCell(col).border = {
              bottom: { style: 'thin', color: { argb: 'FF000000' } }
            };
          }
          
          currentRowIndex++;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º rowIndex –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        rowIndex = currentRowIndex;
      }
    }

    // –ò—Ç–æ–≥–æ
    const totalRow = worksheet.getRow(rowIndex + 1);
    totalRow.getCell(4).value = '–ò—Ç–æ–≥–æ:';
    totalRow.getCell(4).font = { bold: true };
    totalRow.getCell(4).alignment = { horizontal: 'right' };
    totalRow.getCell(5).value = data.items.reduce((sum: number, item: any) => sum + (item.total || 0), 0);
    totalRow.getCell(5).numFmt = '#,##0';
    totalRow.getCell(5).font = { bold: true };

    // –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
    worksheet.columns.forEach((column, index) => {
      if (index < 6) {
        // –ë–∞–∑–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        column.width = 15;
      } else {
        // –ö–æ–ª–æ–Ω–∫–∏ —Å–≤–æ–π—Å—Ç–≤
        column.width = 20;
      }
    });

    const buffer = await workbook.xlsx.writeBuffer() as Buffer;
    
    const endTime = Date.now();
    console.log(`‚ö° Excel –∑–∞–∫–∞–∑–∞ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ ${endTime - startTime}ms`);
    
    return buffer;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel –∑–∞–∫–∞–∑–∞ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:', error);
    throw error;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–≤–µ—Ä–µ–π
async function getDoorTemplate() {
  const category = await prisma.catalogCategory.findFirst({
    where: { name: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏' }
  });

  if (!category) {
    throw new Error('–ö–∞—Ç–µ–≥–æ—Ä–∏—è "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }

  const template = await prisma.importTemplate.findUnique({
    where: { catalog_category_id: category.id }
  });

  if (!template) {
    throw new Error('–®–∞–±–ª–æ–Ω –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–≤–µ—Ä–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }

  return {
    requiredFields: JSON.parse(template.required_fields || '[]'),
    calculatorFields: JSON.parse(template.calculator_fields || '[]'),
    exportFields: JSON.parse(template.export_fields || '[]')
  };
}

// –ü–æ–∏—Å–∫ –í–°–ï–• —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î –ø–æ —Ç–æ—á–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
async function findAllProductsByConfiguration(item: any) {
  console.log('üîç –ò—â–µ–º –í–°–ï —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:');
  console.log('üì¶ –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã:', JSON.stringify(item, null, 2));
  console.log('üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:', {
    model: item.model,
    finish: item.finish,
    color: item.color,
    width: item.width,
    height: item.height
  });

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–≤–µ—Ä–µ–π
  const allProducts = await prisma.product.findMany({
    where: {
      catalog_category: { name: "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏" }
    },
    select: { properties_data: true, name: true, sku: true }
  });

  console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${allProducts.length} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞`);

  const matchingProducts = [];

  for (const product of allProducts) {
    if (product.properties_data) {
      try {
        const props = typeof product.properties_data === 'string' 
          ? JSON.parse(product.properties_data) 
          : product.properties_data;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –≥–∏–±–∫–∏–º –ø–æ–∏—Å–∫–æ–º
        const modelMatch = !item.model || 
          props['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'] === item.model ||
          props['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web']?.includes(item.model) ||
          item.model?.includes(props['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web']);
        const finishMatch = !item.finish || 
          props['–ú–∞—Ç–µ—Ä–∏–∞–ª/–ü–æ–∫—Ä—ã—Ç–∏–µ'] === item.finish ||
          props['–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è'] === item.finish;
        const colorMatch = !item.color || 
          props['–¶–≤–µ—Ç/–û—Ç–¥–µ–ª–∫–∞'] === item.color ||
          props['Domeo_–¶–≤–µ—Ç'] === item.color;
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ - –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        const widthMatch = !item.width || 
          String(props['–®–∏—Ä–∏–Ω–∞/–º–º']) === String(item.width) ||
          String(props['–†–∞–∑–º–µ—Ä 1']) === String(item.width);
        const heightMatch = !item.height || 
          String(props['–í—ã—Å–æ—Ç–∞/–º–º']) === String(item.height) ||
          String(props['–†–∞–∑–º–µ—Ä 2']) === String(item.height);
        
        if (modelMatch && finishMatch && colorMatch && widthMatch && heightMatch) {
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–æ–≤–∞—Ä:', product.sku);
          console.log('   –°–æ–≤–ø–∞–¥–µ–Ω–∏—è:', { modelMatch, finishMatch, colorMatch, widthMatch, heightMatch });
          matchingProducts.push({
            ...product,
            properties_data: props
          });
        } else {
          // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
          if (matchingProducts.length < 3) {
            console.log('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç:', product.sku, {
              modelMatch, finishMatch, colorMatch, widthMatch, heightMatch,
              itemModel: item.model, itemFinish: item.finish, itemColor: item.color,
              itemWidth: item.width, itemHeight: item.height,
              dbModel: props['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'],
              dbFinish: props['–ú–∞—Ç–µ—Ä–∏–∞–ª/–ü–æ–∫—Ä—ã—Ç–∏–µ'],
              dbColor: props['–¶–≤–µ—Ç/–û—Ç–¥–µ–ª–∫–∞'],
              dbWidth: props['–†–∞–∑–º–µ—Ä 1'],
              dbHeight: props['–†–∞–∑–º–µ—Ä 2'],
              // –î–û–ë–ê–í–õ–Ø–ï–ú –í–°–ï –î–û–°–¢–£–ü–ù–´–ï –ü–û–õ–Ø –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò
              allProps: Object.keys(props).slice(0, 10) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∫–ª—é—á–µ–π
            });
          }
        }
      } catch (e) {
        console.warn('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ properties_data:', e);
      }
    }
  }

  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${matchingProducts.length} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤`);
  return matchingProducts;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è –∏–∑ properties_data
function getFieldValue(propertiesData: any, fieldName: string): string {
  if (!propertiesData || typeof propertiesData !== 'object') {
    return '';
  }
  
  return propertiesData[fieldName] || '';
}
