import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

const VALID_STATUSES = ['PENDING', 'ORDERED', 'IN_PRODUCTION', 'READY', 'COMPLETED', 'CANCELLED'];

export async function PUT(req: NextRequest, { params }: { params: Promise<{ id: string }> }) {
  try {
    const { id } = await params;
    const body = await req.json();
    const { status, notes } = body;
    
    console.log('üîÑ API: Updating supplier order status:', { id, status, body });

    if (!status || !VALID_STATUSES.includes(status)) {
      return NextResponse.json({ 
        error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å', 
        details: { 
          validStatuses: VALID_STATUSES, 
          providedStatus: status 
        } 
      }, { status: 400 });
    }

    const existingSupplierOrder = await prisma.supplierOrder.findUnique({
      where: { id },
      select: { id: true, status: true }
    });
    
    console.log('üîç API: Found supplier order:', existingSupplierOrder);

    if (!existingSupplierOrder) {
      console.log('‚ùå API: Supplier order not found:', id);
      return NextResponse.json({ error: '–ó–∞–∫–∞–∑ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }

    const updateData: any = { status };
    if (notes !== undefined) {
      updateData.notes = notes;
    }
    
    console.log('üíæ API: Updating supplier order with data:', updateData);

    const updatedSupplierOrder = await prisma.supplierOrder.update({
      where: { id },
      data: updateData
    });
    
    console.log('‚úÖ API: Supplier order updated successfully:', updatedSupplierOrder);

    // –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    let parentUser = null;
    if (updatedSupplierOrder.parent_document_id) {
      // –ò—â–µ–º –∑–∞–∫–∞–∑ –Ω–∞–ø—Ä—è–º—É—é –ø–æ parent_document_id
      const order = await prisma.order.findUnique({
        where: { id: updatedSupplierOrder.parent_document_id },
        include: { client: true }
      });
      
      if (order) {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ created_by
        parentUser = await prisma.user.findUnique({
          where: { id: order.created_by }
        });
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, "system"), –∏—â–µ–º –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ç–æ—Ä–∞
        if (!parentUser) {
          parentUser = await prisma.user.findFirst({
            where: { role: 'COMPLECTATOR' }
          });
        }
      } else {
        // –ï—Å–ª–∏ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç, –∏—â–µ–º —Å—á–µ—Ç
        const invoice = await prisma.invoice.findFirst({
          where: { parent_document_id: updatedSupplierOrder.parent_document_id }
        });
        
        if (invoice) {
          // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ created_by
          parentUser = await prisma.user.findUnique({
            where: { id: invoice.created_by }
          });
        }
      }
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ç–æ—Ä—É
    if (parentUser) {
      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        const invoiceStatusMap: Record<string, string> = {
          'ORDERED': 'ORDERED',
          'READY': 'READY', 
          'COMPLETED': 'COMPLETED'
        };
        
        const invoiceStatus = invoiceStatusMap[status];
        if (invoiceStatus) {
          await prisma.invoice.updateMany({
            where: { 
              parent_document_id: updatedSupplierOrder.parent_document_id 
            },
            data: { status: invoiceStatus }
          });
          
          console.log('‚úÖ API: Invoice status synchronized:', invoiceStatus);
        }

        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ç–æ—Ä–∞
        const statusLabels: Record<string, string> = {
          'ORDERED': '–ó–∞–∫–∞–∑ —Ä–∞–∑–º–µ—â–µ–Ω',
          'READY': '–ü–æ–ª—É—á–µ–Ω –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
          'COMPLETED': '–ò—Å–ø–æ–ª–Ω–µ–Ω'
        };

        const statusLabel = statusLabels[status] || status;
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const order = await prisma.order.findUnique({
          where: { id: updatedSupplierOrder.parent_document_id },
          include: { client: true }
        });
        
        if (order && order.client) {
          // –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å—á–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
          let invoiceInfo = '';
          if (order.parent_document_id) {
            const invoice = await prisma.invoice.findUnique({
              where: { id: order.parent_document_id },
              select: { number: true, status: true }
            });
            
            if (invoice) {
              // –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ —Å—á–µ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
              const invoiceStatusLabels: Record<string, string> = {
                'DRAFT': '–ß–µ—Ä–Ω–æ–≤–∏–∫',
                'SENT': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
                'PAID': '–û–ø–ª–∞—á–µ–Ω',
                'ORDERED': '–ó–∞–∫–∞–∑ —Ä–∞–∑–º–µ—â–µ–Ω',
                'READY': '–ü–æ–ª—É—á–µ–Ω –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
                'COMPLETED': '–ò—Å–ø–æ–ª–Ω–µ–Ω',
                'CANCELLED': '–û—Ç–º–µ–Ω–µ–Ω'
              };
              
              const invoiceStatusLabel = invoiceStatusLabels[invoice.status] || invoice.status;
              invoiceInfo = `–°—á–µ—Ç ${invoice.number} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å "${invoiceStatusLabel}"`;
            }
          }
          
          await prisma.notification.create({
            data: {
              user_id: parentUser.id,
              client_id: order.client.id,
              document_id: order.parent_document_id, // –ü–µ—Ä–µ–¥–∞–µ–º ID —Å—á–µ—Ç–∞, –∞ –Ω–µ –∑–∞–∫–∞–∑–∞
              type: 'STATUS_CHANGE',
              title: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞',
              message: invoiceInfo,
              is_read: false
            }
          });
          
          console.log('‚úÖ API: Notification sent to complettator');
        } else {
          console.log('‚ö†Ô∏è API: Could not find order or client for notification');
        }
      } catch (notificationError) {
        console.error('‚ö†Ô∏è API: Error sending notification:', notificationError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
      }
    }

    return NextResponse.json({
      success: true,
      message: `–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${status}"`,
      supplierOrder: {
        id: updatedSupplierOrder.id,
        status: updatedSupplierOrder.status
      }
    });
  } catch (error: any) {
    console.error('‚ùå API: Error updating supplier order status:', error);
    console.error('‚ùå API: Error details:', { 
      message: error.message, 
      stack: error.stack, 
      name: error.name 
    });
    return NextResponse.json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞' 
    }, { status: 500 });
  }
}

export async function GET(req: NextRequest, { params }: { params: Promise<{ id: string }> }) {
  try {
    const { id } = await params;
    
    const supplierOrder = await prisma.supplierOrder.findUnique({
      where: { id },
      select: { 
        id: true, 
        status: true, 
        supplier_name: true, 
        updated_at: true 
      }
    });
    
    if (!supplierOrder) {
      return NextResponse.json({ error: '–ó–∞–∫–∞–∑ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }
    
    return NextResponse.json({
      id: supplierOrder.id,
      supplier_name: supplierOrder.supplier_name,
      status: supplierOrder.status,
      updated_at: supplierOrder.updated_at
    });
  } catch (error: any) {
    console.error('‚ùå API: Error fetching supplier order status:', error);
    return NextResponse.json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞' 
    }, { status: 500 });
  }
}
