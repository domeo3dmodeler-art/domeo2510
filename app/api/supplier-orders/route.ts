import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { generateCartSessionId } from '@/lib/utils/cart-session';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { orderId, supplierName, supplierEmail, supplierPhone, expectedDate, notes, cartData } = body;
    
    console.log('üöÄ Creating supplier order:', { orderId, supplierName, supplierEmail, supplierPhone, expectedDate, notes });

    if (!orderId) {
      return NextResponse.json({ error: 'orderId is required' }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å—á–µ—Ç
    const order = await prisma.order.findUnique({
      where: { id: orderId },
      select: { 
        id: true, 
        client_id: true, 
        cart_session_id: true,
        number: true // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
      }
    });

    if (!order) {
      return NextResponse.json({ error: 'Order not found' }, { status: 404 });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º cart_session_id –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    const cartSessionId = order.cart_session_id || generateCartSessionId();
    
    // –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å—á–µ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–≥–æ –Ω–æ–º–µ—Ä–∞
    let invoiceNumber = null;
    const relatedInvoice = await prisma.invoice.findFirst({
      where: { 
        parent_document_id: orderId // –°–≤—è–∑—å —á–µ—Ä–µ–∑ parent_document_id
      },
      select: { number: true },
      orderBy: { created_at: 'desc' }
    });
    
    if (relatedInvoice) {
      invoiceNumber = relatedInvoice.number;
      console.log(`üìÑ –ù–∞–π–¥–µ–Ω —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å—á–µ—Ç: ${invoiceNumber}`);
    } else {
      console.log(`‚ö†Ô∏è –°–≤—è–∑–∞–Ω–Ω—ã–π —Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞: ${orderId}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–∫–∞–∑ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
    const existingSupplierOrder = await prisma.supplierOrder.findFirst({
      where: {
        parent_document_id: orderId,
        cart_session_id: cartSessionId
      },
      orderBy: { created_at: 'desc' }
    });

    let supplierOrder;
    
    if (existingSupplierOrder) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
      console.log(`üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: ${existingSupplierOrder.id}`);
      supplierOrder = existingSupplierOrder;
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
      console.log(`üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞: ${orderId}`);
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–º–µ—Ä–∞ —Å—á–µ—Ç–∞
      const supplierOrderNumber = invoiceNumber || `SUPPLIER-${Date.now()}`;
      
      // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω—ã
      let totalAmount = 0;
      if (cartData && cartData.items) {
        totalAmount = cartData.items.reduce((sum: number, item: any) => {
          const quantity = item.quantity || item.qty || 1;
          const price = item.unitPrice || item.price || 0;
          return sum + (quantity * price);
        }, 0);
      }

      supplierOrder = await prisma.supplierOrder.create({
        data: {
          number: supplierOrderNumber, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
          parent_document_id: orderId,
          cart_session_id: cartSessionId,
          executor_id: order.client_id, // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º client_id –∫–∞–∫ executor_id
          supplier_name: supplierName || '–ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω',
          supplier_email: supplierEmail || '',
          supplier_phone: supplierPhone || '',
          status: 'PENDING',
          order_date: new Date(),
          expected_date: expectedDate ? new Date(expectedDate) : null,
          notes: notes || '',
          cart_data: cartData ? JSON.stringify(cartData) : null, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã
          total_amount: totalAmount // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
        }
      });
    }

    console.log('‚úÖ Supplier order created:', supplierOrder);

    return NextResponse.json({
      success: true,
      supplierOrder
    });

  } catch (error) {
    console.error('‚ùå Error creating supplier order:', error);
    return NextResponse.json(
      { error: 'Failed to create supplier order' },
      { status: 500 }
    );
  }
}

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const orderId = searchParams.get('orderId');
    
    if (!orderId) {
      return NextResponse.json({ error: 'orderId is required' }, { status: 400 });
    }

    const supplierOrders = await prisma.supplierOrder.findMany({
      where: { parent_document_id: orderId },
      orderBy: { created_at: 'desc' }
    });

    return NextResponse.json({
      success: true,
      supplierOrders
    });

  } catch (error) {
    console.error('Error fetching supplier orders:', error);
    return NextResponse.json(
      { error: 'Failed to fetch supplier orders' },
      { status: 500 }
    );
  }
}
