import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { generateCartSessionId } from '@/lib/utils/cart-session';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { invoiceId, orderId, supplierName, supplierEmail, supplierPhone, expectedDate, notes, cartData } = body;
    
    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ invoiceId, —Ç–∞–∫ –∏ orderId –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const finalInvoiceId = invoiceId || orderId;
    
    console.log('üöÄ Creating supplier order:', { invoiceId: finalInvoiceId, orderId, supplierName, supplierEmail, supplierPhone, expectedDate, notes });
    console.log('üì¶ Received cartData:', cartData);
    console.log('üì¶ Received cartData type:', typeof cartData);
    console.log('üì¶ Received cartData items:', cartData?.items);
    console.log('üì¶ Received cartData items count:', cartData?.items?.length);

    if (!finalInvoiceId) {
      console.error('‚ùå Missing invoiceId or orderId in request body:', body);
      return NextResponse.json({ error: 'invoiceId or orderId is required' }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—á–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const invoice = await prisma.invoice.findUnique({
      where: { id: finalInvoiceId },
      select: { 
        id: true, 
        client_id: true, 
        cart_session_id: true,
        number: true,
        total_amount: true
      }
    });

    if (!invoice) {
      return NextResponse.json({ error: 'Invoice not found' }, { status: 404 });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º cart_session_id –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    const cartSessionId = invoice.cart_session_id || generateCartSessionId();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–∫–∞–∑ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å—á–µ—Ç–∞
    const existingSupplierOrder = await prisma.supplierOrder.findFirst({
      where: {
        parent_document_id: finalInvoiceId,
        cart_session_id: cartSessionId
      },
      orderBy: { created_at: 'desc' }
    });

    let supplierOrder;
    
    if (existingSupplierOrder) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
      console.log(`üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: ${existingSupplierOrder.id}`);
      supplierOrder = existingSupplierOrder;
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
      console.log(`üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è —Å—á–µ—Ç–∞: ${finalInvoiceId}`);
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–º–µ—Ä–∞ —Å—á–µ—Ç–∞
      const supplierOrderNumber = `SUPPLIER-${invoice.number}`;
      
      // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É–º–º—É —Å—á–µ—Ç–∞
      let totalAmount = 0;
      if (cartData && cartData.items && cartData.items.length > 0) {
        totalAmount = cartData.items.reduce((sum: number, item: any) => {
          const quantity = item.quantity || item.qty || 1;
          const price = item.unitPrice || item.price || 0;
          return sum + (quantity * price);
        }, 0);
      }
      
      // –ï—Å–ª–∏ —Å—É–º–º–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã —Ä–∞–≤–Ω–∞ 0 –∏–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É–º–º—É —Å—á–µ—Ç–∞
      if (totalAmount === 0 && invoice.total_amount > 0) {
        totalAmount = invoice.total_amount;
        console.log(`üí∞ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É–º–º—É —Å—á–µ—Ç–∞: ${totalAmount}`);
      } else if (totalAmount > 0) {
        console.log(`üí∞ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É–º–º—É –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: ${totalAmount}`);
      } else {
        console.log(`‚ö†Ô∏è –°—É–º–º–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞: –∫–æ—Ä–∑–∏–Ω–∞=${cartData?.items?.length || 0}, —Å—á–µ—Ç=${invoice.total_amount}`);
      }

      supplierOrder = await prisma.supplierOrder.create({
        data: {
          number: supplierOrderNumber,
          parent_document_id: finalInvoiceId,
          cart_session_id: cartSessionId,
          executor_id: invoice.client_id,
          supplier_name: supplierName || '–ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω',
          supplier_email: supplierEmail || '',
          supplier_phone: supplierPhone || '',
          status: 'PENDING',
          order_date: new Date(),
          expected_date: expectedDate ? new Date(expectedDate) : null,
          notes: notes || '',
          cart_data: cartData ? JSON.stringify(cartData) : null,
          total_amount: totalAmount
        }
      });
      
      console.log('üíæ Saved supplier order with cart_data:', supplierOrder.cart_data);
    }

    console.log('‚úÖ Supplier order created:', supplierOrder);

    return NextResponse.json({
      success: true,
      supplierOrder
    });

  } catch (error) {
    console.error('‚ùå Error creating supplier order:', error);
    return NextResponse.json(
      { error: 'Failed to create supplier order' },
      { status: 500 }
    );
  }
}

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const invoiceId = searchParams.get('invoiceId');
    
    if (!invoiceId) {
      return NextResponse.json({ error: 'invoiceId is required' }, { status: 400 });
    }

    const supplierOrders = await prisma.supplierOrder.findMany({
      where: { parent_document_id: invoiceId },
      orderBy: { created_at: 'desc' }
    });

    return NextResponse.json({
      success: true,
      supplierOrders
    });

  } catch (error) {
    console.error('Error fetching supplier orders:', error);
    return NextResponse.json(
      { error: 'Failed to fetch supplier orders' },
      { status: 500 }
    );
  }
}
