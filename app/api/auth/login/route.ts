import { NextRequest, NextResponse } from 'next/server';
import { SignJWT } from 'jose';
import bcrypt from 'bcryptjs';
import { prisma } from '@/lib/prisma';
import { authRateLimiter, getClientIP, createRateLimitResponse } from '../../../../lib/security/rate-limiter';

export async function POST(req: NextRequest) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º JWT_SECRET –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ production)
    const JWT_SECRET = process.env.JWT_SECRET;
    
    if (!JWT_SECRET) {
      console.error('‚ùå JWT_SECRET is not set! This is required for production.');
      if (process.env.NODE_ENV === 'production') {
        return NextResponse.json(
          { error: 'Server configuration error' },
          { status: 500 }
        );
      }
      return NextResponse.json(
        { error: 'JWT_SECRET must be set in environment variables' },
        { status: 500 }
      );
    }
    
    if (JWT_SECRET.length < 32) {
      console.error('‚ùå JWT_SECRET is too short! Minimum length is 32 characters.');
      return NextResponse.json(
        { error: 'JWT_SECRET must be at least 32 characters long' },
        { status: 500 }
      );
    }
    
    // Rate limiting
    const clientIP = getClientIP(req);
    if (!authRateLimiter.isAllowed(clientIP)) {
      return createRateLimitResponse(authRateLimiter, clientIP);
    }

    const { email, password } = await req.json();

    if (!email || !password) {
      return NextResponse.json(
        { error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      );
    }

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const user = await prisma.user.findUnique({
      where: { email },
      select: {
        id: true,
        email: true,
        password_hash: true,
        first_name: true,
        last_name: true,
        middle_name: true,
        role: true,
        is_active: true,
        last_login: true
      }
    });

    if (!user) {
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' },
        { status: 401 }
      );
    }

    if (!user.is_active) {
      return NextResponse.json(
        { error: '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' },
        { status: 401 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const isPasswordValid = await bcrypt.compare(password, user.password_hash);
    if (!isPasswordValid) {
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' },
        { status: 401 }
      );
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    await prisma.user.update({
      where: { id: user.id },
      data: { last_login: new Date() }
    });

    // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    const secret = new TextEncoder().encode(JWT_SECRET);
    const token = await new SignJWT({ 
      userId: user.id, 
      email: user.email, 
      role: user.role.toLowerCase() // –ü—Ä–∏–≤–æ–¥–∏–º —Ä–æ–ª—å –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    })
      .setProtectedHeader({ alg: 'HS256' })
      .setExpirationTime('24h')
      .setIssuedAt()
      .sign(secret);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –ø–∞—Ä–æ–ª—è)
    const userData = {
      id: user.id,
      email: user.email,
      firstName: user.first_name,
      lastName: user.last_name,
      middleName: user.middle_name,
      role: user.role.toLowerCase(), // –ü—Ä–∏–≤–æ–¥–∏–º —Ä–æ–ª—å –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
      lastLogin: user.last_login
    };

    const response = NextResponse.json({
      success: true,
      token,
      user: userData
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        response.cookies.set('auth-token', token, {
          httpOnly: false, // –ü–æ–∑–≤–æ–ª—è–µ–º –¥–æ—Å—Ç—É–ø –∏–∑ JavaScript
          secure: false,   // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
          sameSite: 'lax',
          maxAge: 86400,   // 24 —á–∞—Å–∞
          path: '/',
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Yandex –±—Ä–∞—É–∑–µ—Ä–∞
          domain: undefined, // –Ø–≤–Ω–æ —É–±–∏—Ä–∞–µ–º domain
          partitioned: false // –û—Ç–∫–ª—é—á–∞–µ–º partitioned cookies
        });
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ development
    if (process.env.NODE_ENV === 'development') {
      console.log('üç™ Server cookie set for user:', userData.email);
    }

    return response;

  } catch (error) {
    console.error('Login error:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}
