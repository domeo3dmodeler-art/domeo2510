import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// –ö—ç—à –¥–ª—è –æ–ø—Ü–∏–π –¥–≤–µ—Ä–µ–π
const optionsCache = new Map<string, { data: any, timestamp: number }>();
const CACHE_TTL = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç

export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const style = searchParams.get('style');
    const model = searchParams.get('model');
    const finish = searchParams.get('finish');
    const color = searchParams.get('color');
    const type = searchParams.get('type');
    const width = searchParams.get('width');
    const height = searchParams.get('height');

    // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    // const cacheKey = `options_${style || 'all'}_${model || 'all'}_${finish || 'all'}_${color || 'all'}_${type || 'all'}_${width || 'all'}_${height || 'all'}`;
    // const cached = optionsCache.get(cacheKey);
    // if (cached && Date.now() - cached.timestamp < CACHE_TTL) {
    //   return NextResponse.json({
    //     ...cached.data,
    //     cached: true
    //   });
    // }

    console.log('üîç API options - –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–Ω–µ –∏–∑ –∫—ç—à–∞)');

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    const products = await prisma.product.findMany({
      where: {
        catalog_category: {
          name: "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
        }
      },
      select: {
        properties_data: true
      }
    });

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ properties_data
    const distinctStyles = new Set<string>();
    const distinctModels = new Set<string>();
    const distinctFinishes = new Set<string>();
    const distinctColors = new Set<string>();
    const distinctTypes = new Set<string>();
    const distinctWidths = new Set<number>();
    const distinctHeights = new Set<number>();

    products.forEach(product => {
      const properties = product.properties_data ?
        (typeof product.properties_data === 'string' ? JSON.parse(product.properties_data) : product.properties_data) : {};

      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç–∏–ª—é –∏ –º–æ–¥–µ–ª–∏ –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
      if (style && properties['Domeo_–°—Ç–∏–ª—å Web'] !== style) return;
      if (model && !properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web']?.includes(model)) return;

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ properties_data —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
      if (properties['Domeo_–°—Ç–∏–ª—å Web']) distinctStyles.add(properties['Domeo_–°—Ç–∏–ª—å Web']);
      if (properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web']) distinctModels.add(properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web']);
      if (properties['–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è']) distinctFinishes.add(properties['–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è']);
      if (properties['Domeo_–¶–≤–µ—Ç']) distinctColors.add(properties['Domeo_–¶–≤–µ—Ç']);
      if (properties['–¢–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏']) distinctTypes.add(properties['–¢–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏']);
      if (properties['–®–∏—Ä–∏–Ω–∞/–º–º']) distinctWidths.add(Number(properties['–®–∏—Ä–∏–Ω–∞/–º–º']));
      if (properties['–í—ã—Å–æ—Ç–∞/–º–º']) distinctHeights.add(Number(properties['–í—ã—Å–æ—Ç–∞/–º–º']));
    });

    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤ –∏ —Ä—É—á–µ–∫
    const kits = [
      { id: "KIT_STD", name: "–ë–∞–∑–æ–≤—ã–π –∫–æ–º–ø–ª–µ–∫—Ç", group: 1, price_rrc: 5000 },
      { id: "KIT_SOFT", name: "SoftClose", group: 2, price_rrc: 2400 },
    ];

    const handles = [
      {
        id: "HNDL_PRO",
        name: "Pro",
        supplier_name: "HandleCo",
        supplier_sku: "H-PRO",
        price_opt: 900,
        price_rrc: 1200,
        price_group_multiplier: 1.15,
      },
      {
        id: "HNDL_SIL",
        name: "Silver",
        supplier_name: "HandleCo",
        supplier_sku: "H-SIL",
        price_opt: 1100,
        price_rrc: 1400,
        price_group_multiplier: 1.15,
      },
    ];

    const responseData = {
      ok: true,
      domain: {
        style: Array.from(distinctStyles).sort(),
        model: Array.from(distinctModels).sort(),
        finish: Array.from(distinctFinishes).sort(),
        color: Array.from(distinctColors).sort(),
        type: Array.from(distinctTypes).sort(),
        width: Array.from(distinctWidths).sort((a, b) => a - b),
        height: Array.from(distinctHeights).sort((a, b) => a - b),
        kits,
        handles
      },
      cached: false
    };

    // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
    // optionsCache.set(cacheKey, {
    //   data: responseData,
    //   timestamp: Date.now()
    // });

    console.log('‚úÖ API options - –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à');

    return NextResponse.json(responseData, {
      headers: {
        'Content-Type': 'application/json; charset=utf-8'
      }
    });
  } catch (error) {
    console.error('Error fetching door options:', error);
    return NextResponse.json(
      { error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ü–∏–π" },
      { status: 500 }
    );
  }
}