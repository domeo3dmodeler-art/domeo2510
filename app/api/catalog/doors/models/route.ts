import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// –ö—ç—à –¥–ª—è –º–æ–¥–µ–ª–µ–π
const modelsCache = new Map<string, { models: any[], timestamp: number }>();
const CACHE_TTL = 15 * 60 * 1000; // 15 –º–∏–Ω—É—Ç

// –ö—ç—à –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ (—á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –∫–∞–∂–¥—ã–π —Ä–∞–∑)
let allProductsCache: any[] | null = null;
let allProductsCacheTimestamp = 0;
const ALL_PRODUCTS_CACHE_TTL = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç

export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const style = searchParams.get('style');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cacheKey = style || 'all';
    const cached = modelsCache.get(cacheKey);
    if (cached && Date.now() - cached.timestamp < CACHE_TTL) {
      return NextResponse.json({
        ok: true,
        models: cached.models,
        cached: true
      });
    }

    console.log('üîç API models - –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Å—Ç–∏–ª—è:', style || '–≤—Å–µ');

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –∏–∑ –ë–î
    let products;
    if (allProductsCache && Date.now() - allProductsCacheTimestamp < ALL_PRODUCTS_CACHE_TTL) {
      console.log('üì¶ API models - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à —Ç–æ–≤–∞—Ä–æ–≤');
      products = allProductsCache;
    } else {
      console.log('üì¶ API models - –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –ë–î');
      products = await prisma.product.findMany({
        where: {
          catalog_category: {
            name: "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
          }
        },
        select: {
          properties_data: true
        }
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      allProductsCache = products;
      allProductsCacheTimestamp = Date.now();
      console.log('üì¶ API models - —Ç–æ–≤–∞—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à');
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏ —Å—Ç–∏–ª–∏ –∏–∑ properties_data
    const modelStyleMap = new Map<string, string>();

    products.forEach(product => {
      const properties = product.properties_data ?
        (typeof product.properties_data === 'string' ? JSON.parse(product.properties_data) : product.properties_data) : {};

      const model = properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'];
      const productStyle = properties['Domeo_–°—Ç–∏–ª—å Web'];

      if (model && productStyle) {
        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Å—Ç–∏–ª—å, —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ —ç—Ç–æ–º—É —Å—Ç–∏–ª—é
        if (!style || productStyle === style) {
          modelStyleMap.set(model, productStyle);
        }
      }
    });

    const models = Array.from(modelStyleMap.entries()).map(([model, style]) => ({
      model,
      style
    })).sort((a, b) => a.model.localeCompare(b.model));

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    modelsCache.set(cacheKey, {
      models,
      timestamp: Date.now()
    });

    console.log(`‚úÖ API models - –Ω–∞–π–¥–µ–Ω–æ ${models.length} –º–æ–¥–µ–ª–µ–π –¥–ª—è —Å—Ç–∏–ª—è ${style || '–≤—Å–µ'}`);

    return NextResponse.json({
      ok: true,
      models: models,
      cached: false
    });
  } catch (error) {
    console.error('Error fetching door models:', error);
    return NextResponse.json(
      { error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π" },
      { status: 500 }
    );
  }
}