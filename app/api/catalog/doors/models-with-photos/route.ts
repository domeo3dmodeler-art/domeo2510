import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// –ö—ç—à –¥–ª—è –º–æ–¥–µ–ª–µ–π —Å —Ñ–æ—Ç–æ
const modelsWithPhotosCache = new Map<string, { data: any, timestamp: number }>();
const CACHE_TTL = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è

export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const style = searchParams.get('style');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cacheKey = style || 'all';
    const cached = modelsWithPhotosCache.get(cacheKey);
    if (cached && Date.now() - cached.timestamp < CACHE_TTL) {
      console.log('‚úÖ API models-with-photos - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à');
      return NextResponse.json({
        ok: true,
        models: cached.data,
        cached: true
      });
    }

    console.log('üîç API models-with-photos - –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π —Å —Ñ–æ—Ç–æ –¥–ª—è —Å—Ç–∏–ª—è:', style || '–≤—Å–µ');

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –Ω–∞ —É—Ä–æ–≤–Ω–µ –ë–î
    const products = await prisma.product.findMany({
      where: {
        catalog_category: {
          name: "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
        },
        is_active: true // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
      },
      select: {
        properties_data: true
      },
      orderBy: {
        created_at: 'desc' // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
      }
    });

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –º–æ–¥–µ–ª–µ–π —Å —Ñ–æ—Ç–æ
    const modelPhotoMap = new Map<string, { model: string, style: string, photo: string | null }>();

    products.forEach(product => {
      const properties = product.properties_data ?
        (typeof product.properties_data === 'string' ? JSON.parse(product.properties_data) : product.properties_data) : {};

      const model = properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'];
      const productStyle = properties['Domeo_–°—Ç–∏–ª—å Web'];
      const productArticle = properties['–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'];
      const productPhotos = properties.photos || [];

      if (model && productStyle) {
        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Å—Ç–∏–ª—å, —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ —ç—Ç–æ–º—É —Å—Ç–∏–ª—é
        if (!style || productStyle === style) {
          // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –º–æ–¥–µ–ª–∏
          const photo = productPhotos.length > 0 ? productPhotos[0] : null;
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Ñ–æ—Ç–æ
          if (!modelPhotoMap.has(model) || photo) {
            modelPhotoMap.set(model, {
              model,
              style: productStyle,
              photo
            });
          }
        }
      }
    });

    const models = Array.from(modelPhotoMap.values())
      .sort((a, b) => a.model.localeCompare(b.model));

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    modelsWithPhotosCache.set(cacheKey, {
      data: models,
      timestamp: Date.now()
    });

    console.log(`‚úÖ API models-with-photos - –Ω–∞–π–¥–µ–Ω–æ ${models.length} –º–æ–¥–µ–ª–µ–π —Å —Ñ–æ—Ç–æ –¥–ª—è —Å—Ç–∏–ª—è ${style || '–≤—Å–µ'}`);

    return NextResponse.json({
      ok: true,
      models: models,
      cached: false
    });
  } catch (error) {
    console.error('Error fetching door models with photos:', error);
    return NextResponse.json(
      { error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π —Å —Ñ–æ—Ç–æ" },
      { status: 500 }
    );
  }
}
