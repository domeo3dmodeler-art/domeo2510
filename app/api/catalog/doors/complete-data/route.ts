import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from '@prisma/client';
import { getPropertyPhotos, structurePropertyPhotos } from '../../../../../lib/property-photos';
const prisma = new PrismaClient();

// –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
const completeDataCache = new Map<string, { data: any, timestamp: number }>();
const CACHE_TTL = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç

// DELETE - –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
export async function DELETE() {
  try {
    completeDataCache.clear();
    console.log('üßπ –ö—ç—à complete-data –æ—á–∏—â–µ–Ω');
    return NextResponse.json({ success: true, message: '–ö—ç—à –æ—á–∏—â–µ–Ω' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞' },
      { status: 500 }
    );
  }
}

export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const style = searchParams.get('style');

    const cacheKey = style || 'all';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cached = completeDataCache.get(cacheKey);
    if (cached && Date.now() - cached.timestamp < CACHE_TTL) {
      console.log('‚úÖ API complete-data - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à');
      return NextResponse.json({
        ok: true,
        ...cached.data,
        cached: true
      });
    }

    console.log('üîç API complete-data - –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∏–ª—è:', style || '–≤—Å–µ');

        // –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
        const products = await prisma.product.findMany({
          where: {
            catalog_category: {
              name: "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
            },
            is_active: true
          },
          select: {
            id: true,
            sku: true,
            properties_data: true
          }
          // –£–±–∏—Ä–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
        });

    console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î`);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    const models: any[] = [];
    const styles = new Set<string>();

    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –º–æ–¥–µ–ª—è–º
    const modelMap = new Map<string, any>();

    products.forEach(product => {
      try {
        const properties = product.properties_data ?
          (typeof product.properties_data === 'string' ? JSON.parse(product.properties_data) : product.properties_data) : {};

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º "–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞" –∫–∞–∫ –∫–ª—é—á –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏, –Ω–æ "Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web" –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
            const supplierSku = properties['–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'];
            const modelName = properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'];
            const productStyle = properties['Domeo_–°—Ç–∏–ª—å Web'] || '–ö–ª–∞—Å—Å–∏–∫–∞'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–ö–ª–∞—Å—Å–∏–∫–∞"

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ supplierSku —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π
            const modelKey = typeof supplierSku === 'string' ? supplierSku : String(supplierSku || '');
            const displayName = typeof modelName === 'string' ? modelName : modelKey; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–ª–∏ fallback –∫ –∫–ª—é—á—É
            const styleString = typeof productStyle === 'string' ? productStyle : String(productStyle || '–ö–ª–∞—Å—Å–∏–∫–∞');

            if (modelKey && modelKey.trim() !== '') {
          // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç–∏–ª—é –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
              if (style && styleString !== style) {
            return;
          }

              styles.add(styleString);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –º–æ–¥–µ–ª—å
              if (!modelMap.has(modelKey)) {
                modelMap.set(modelKey, {
                  model: displayName, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                  modelKey: modelKey, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ç–æ
                  style: styleString,
                  products: []
                });
              }

              // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –∫ –º–æ–¥–µ–ª–∏
              const modelData = modelMap.get(modelKey);
              modelData.products.push({
                sku: product.sku,
                properties: properties
              });
            }
          } catch (error) {
            console.warn(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ ${product.sku}:`, error);
          }
        });

        // –¢–µ–ø–µ—Ä—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º —Ñ–æ—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É property_photos
        const modelPromises = Array.from(modelMap.entries()).map(async ([modelKey, modelData]) => {
          console.log(`üîç –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –¥–ª—è –º–æ–¥–µ–ª–∏: ${modelData.model} (–∫–ª—é—á: ${modelKey})`);
          
          // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ "Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web" –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –º–æ–¥–µ–ª–∏
          const firstProduct = modelData.products[0];
          const fullModelName = firstProduct?.properties?.['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'] || modelKey;
          
          console.log(`üîç –ò—â–µ–º —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è: ${fullModelName}`);
          
          // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ –∏–∑ property_photos
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º "Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web" –∫–∞–∫ —Å–≤–æ–π—Å—Ç–≤–æ, –∞ –ø–æ–ª–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ
          const modelPhotos = await getPropertyPhotos(
            'cmg50xcgs001cv7mn0tdyk1wo', // ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
            'Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web',        // –°–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞
            fullModelName                     // –ó–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ (–ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏)
          );

          console.log(`üì∏ –ù–∞–π–¥–µ–Ω–æ ${modelPhotos.length} —Ñ–æ—Ç–æ –¥–ª—è ${modelData.model}`);
          console.log(`üì∏ –î–µ—Ç–∞–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è ${modelData.model}:`, modelPhotos.map(p => ({ 
            photoType: p.photoType, 
            photoPath: p.photoPath,
            propertyValue: p.propertyValue 
          })));

          const photoStructure = structurePropertyPhotos(modelPhotos);
          const hasGallery = photoStructure.gallery.length > 0;

          console.log(`üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–æ—Ç–æ –¥–ª—è ${modelData.model}: –æ–±–ª–æ–∂–∫–∞=${photoStructure.cover ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}, –≥–∞–ª–µ—Ä–µ—è=${photoStructure.gallery.length}`);
          console.log(`üìã –î–µ—Ç–∞–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–æ—Ç–æ –¥–ª—è ${modelData.model}:`, photoStructure);

          const result = {
            model: modelData.model,
            modelKey: modelData.modelKey, // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ç–æ
            style: modelData.style,
            photo: photoStructure.cover, // –¢–æ–ª—å–∫–æ –æ–±–ª–æ–∂–∫–∞ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
            photos: photoStructure,      // –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            hasGallery: hasGallery,      // –§–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è –≥–∞–ª–µ—Ä–µ–∏
            products: modelData.products, // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤
              options: {
                finishes: [],
                colors: [],
                types: [],
                widths: [],
                heights: []
              }
          };
          
          console.log(`üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${modelData.model}:`, {
            model: result.model,
            modelKey: result.modelKey,
            photo: result.photo,
            photos: result.photos,
            hasGallery: result.hasGallery
          });
          
          return result;
        });

        const modelResults = await Promise.all(modelPromises);
        models.push(...modelResults);

    const result = {
      models: models.sort((a, b) => {
        const modelA = a.model || '';
        const modelB = b.model || '';
        return modelA.localeCompare(modelB);
      }),
      totalModels: models.length,
      styles: Array.from(styles),
      timestamp: Date.now()
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    completeDataCache.set(cacheKey, {
      data: result,
      timestamp: Date.now()
    });

    console.log(`‚úÖ API complete-data - –Ω–∞–π–¥–µ–Ω–æ ${models.length} –º–æ–¥–µ–ª–µ–π`);

    return NextResponse.json({
      ok: true,
      ...result
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API complete-data:', error);
    return NextResponse.json(
      { error: 'Failed to fetch complete data', details: (error as Error).message },
      { status: 500 }
    );
  }
}
