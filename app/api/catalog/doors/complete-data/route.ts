import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
const completeDataCache = new Map<string, { data: any, timestamp: number }>();
const CACHE_TTL = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç

// DELETE - –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
export async function DELETE() {
  try {
    completeDataCache.clear();
    console.log('üßπ –ö—ç—à complete-data –æ—á–∏—â–µ–Ω');
    return NextResponse.json({ success: true, message: '–ö—ç—à –æ—á–∏—â–µ–Ω' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞' },
      { status: 500 }
    );
  }
}

export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const style = searchParams.get('style');

    const cacheKey = style || 'all';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cached = completeDataCache.get(cacheKey);
    if (cached && Date.now() - cached.timestamp < CACHE_TTL) {
      console.log('‚úÖ API complete-data - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à');
      return NextResponse.json({
        ok: true,
        ...cached.data,
        cached: true
      });
    }

    console.log('üîç API complete-data - –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∏–ª—è:', style || '–≤—Å–µ');

        // –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
        const products = await prisma.product.findMany({
          where: {
            catalog_category: {
              name: "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
            },
            is_active: true
          },
          select: {
            id: true,
            sku: true,
            properties_data: true
          }
          // –£–±–∏—Ä–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
        });

    console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î`);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    const models: any[] = [];
    const styles = new Set<string>();

    products.forEach(product => {
      try {
        const properties = product.properties_data ?
          (typeof product.properties_data === 'string' ? JSON.parse(product.properties_data) : product.properties_data) : {};

        const model = properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'];
        const productStyle = properties['Domeo_–°—Ç–∏–ª—å Web'];
        const productPhotos = properties.photos || [];

        if (model && productStyle) {
          // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç–∏–ª—é –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
          if (style && productStyle !== style) {
            return;
          }

          styles.add(productStyle);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –º–æ–¥–µ–ª—å
          const existingModel = models.find(m => m.model === model);
          if (!existingModel) {
            models.push({
              model,
              style: productStyle,
              photo: productPhotos.length > 0 ? productPhotos[0] : null,
              options: {
                finishes: [],
                colors: [],
                types: [],
                widths: [],
                heights: []
              }
            });
          }
        }
      } catch (error) {
        console.warn(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ ${product.sku}:`, error);
      }
    });

    const result = {
      models: models.sort((a, b) => a.model.localeCompare(b.model)),
      totalModels: models.length,
      styles: Array.from(styles),
      timestamp: Date.now()
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    completeDataCache.set(cacheKey, {
      data: result,
      timestamp: Date.now()
    });

    console.log(`‚úÖ API complete-data - –Ω–∞–π–¥–µ–Ω–æ ${models.length} –º–æ–¥–µ–ª–µ–π`);

    return NextResponse.json({
      ok: true,
      ...result
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API complete-data:', error);
    return NextResponse.json(
      { error: 'Failed to fetch complete data', details: (error as Error).message },
      { status: 500 }
    );
  }
}
