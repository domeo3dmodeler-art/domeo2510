import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from '@prisma/client';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
function structurePhotos(photos: string[]) {
  if (photos.length === 0) {
    return { cover: null, gallery: [] };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ _N (–≥–∞–ª–µ—Ä–µ—è)
  const hasGalleryPhotos = photos.some(photo => {
    const fileName = photo.split('/').pop() || photo;
    const nameWithoutExt = fileName.replace(/\.[^/.]+$/, "");
    const parts = nameWithoutExt.split('_');
    const lastPart = parts[parts.length - 1];
    return /^\d+$/.test(lastPart); // –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - —ç—Ç–æ —á–∏—Å–ª–æ
  });
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ _N, —ç—Ç–æ –≥–∞–ª–µ—Ä–µ—è - –ù–ï —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  if (hasGalleryPhotos) {
    // –ù–∞—Ö–æ–¥–∏–º –±–∞–∑–æ–≤–æ–µ –∏–º—è –¥–ª—è —Ñ–æ—Ç–æ —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ _N
    const galleryBaseNames = new Set();
    photos.forEach(photo => {
      const fileName = photo.split('/').pop() || photo;
      const nameWithoutExt = fileName.replace(/\.[^/.]+$/, "");
      const parts = nameWithoutExt.split('_');
      const lastPart = parts[parts.length - 1];
      
      if (/^\d+$/.test(lastPart)) {
        // –≠—Ç–æ —Ñ–æ—Ç–æ —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º _N, –∏–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–º—è (–ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å –ø–µ—Ä–µ–¥ _N)
        const baseName = parts[parts.length - 2];
        galleryBaseNames.add(baseName);
      }
    });
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ–±–ª–æ–∂–∫—É –∏ –≥–∞–ª–µ—Ä–µ—é
    const coverPhotos = photos.filter(photo => {
      const fileName = photo.split('/').pop() || photo;
      const nameWithoutExt = fileName.replace(/\.[^/.]+$/, "");
      const parts = nameWithoutExt.split('_');
      const lastPart = parts[parts.length - 1];
      
      // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º _N, –Ω–µ –≤–∫–ª—é—á–∞–µ–º –≤ –æ–±–ª–æ–∂–∫—É
      if (/^\d+$/.test(lastPart)) {
        return false;
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–ª—è –Ω–µ–≥–æ –≥–∞–ª–µ—Ä–µ—è
      const baseName = parts[parts.length - 1]; // –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å
      return !galleryBaseNames.has(baseName);
    });
    
    const galleryPhotos = photos.filter(photo => {
      const fileName = photo.split('/').pop() || photo;
      const nameWithoutExt = fileName.replace(/\.[^/.]+$/, "");
      const parts = nameWithoutExt.split('_');
      const lastPart = parts[parts.length - 1];
      
      // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º _N, –≤–∫–ª—é—á–∞–µ–º –≤ –≥–∞–ª–µ—Ä–µ—é
      if (/^\d+$/.test(lastPart)) {
        return true;
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞, –Ω–æ –µ—Å—Ç—å –≥–∞–ª–µ—Ä–µ—è —Å —Ç–∞–∫–∏–º –∂–µ –±–∞–∑–æ–≤—ã–º –∏–º–µ–Ω–µ–º, –≤–∫–ª—é—á–∞–µ–º –≤ –≥–∞–ª–µ—Ä–µ—é
      const baseName = parts[parts.length - 1]; // –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å
      return galleryBaseNames.has(baseName);
    });
    
    return {
      cover: galleryPhotos[0] || null, // –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –æ–±–ª–æ–∂–∫–æ–π
      gallery: galleryPhotos.slice(1) // –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ —É–∂–µ –æ–±–ª–æ–∂–∫–∞
    };
  }
  
  // –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ _N, —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
  const uniquePhotos = [...new Set(photos)];
  const baseNames = new Set();
  uniquePhotos.forEach(photo => {
    const fileName = photo.split('/').pop() || photo;
    const nameWithoutExt = fileName.replace(/\.[^/.]+$/, "");
    const parts = nameWithoutExt.split('_');
    const baseName = parts[parts.length - 1]; // –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å
    baseNames.add(baseName);
  });
  
  // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ (–ø–æ –±–∞–∑–æ–≤–æ–º—É –∏–º–µ–Ω–∏)
  if (baseNames.size === 1) {
    return { cover: uniquePhotos[0], gallery: [] };
  }
  
  // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–∞–ª–µ—Ä–µ—é
  return {
    cover: uniquePhotos[0],
    gallery: uniquePhotos.slice(1)
  };
}

function parsePhotoFileName(fileName: string) {
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏
  const fileNameOnly = fileName.split('/').pop() || fileName;
  const nameWithoutExt = fileNameOnly.replace(/\.[^/.]+$/, "");
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–º–µ—Ä –≤ –∫–æ–Ω—Ü–µ (_1, _2, etc.)
  const match = nameWithoutExt.match(/^(.+)_(\d+)$/);
  
  if (match) {
    return {
      fileName,
      isCover: false,
      number: parseInt(match[2]),
      baseName: match[1]
    };
  } else {
    return {
      fileName,
      isCover: true,
      number: null,
      baseName: nameWithoutExt
    };
  }
}

function getCoverPhoto(photoStructure: { cover: string | null; gallery: string[] }) {
  return photoStructure.cover;
}

const prisma = new PrismaClient();

// –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
const completeDataCache = new Map<string, { data: any, timestamp: number }>();
const CACHE_TTL = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç

// DELETE - –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
export async function DELETE() {
  try {
    completeDataCache.clear();
    console.log('üßπ –ö—ç—à complete-data –æ—á–∏—â–µ–Ω');
    return NextResponse.json({ success: true, message: '–ö—ç—à –æ—á–∏—â–µ–Ω' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞' },
      { status: 500 }
    );
  }
}

export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const style = searchParams.get('style');

    const cacheKey = style || 'all';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cached = completeDataCache.get(cacheKey);
    if (cached && Date.now() - cached.timestamp < CACHE_TTL) {
      console.log('‚úÖ API complete-data - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à');
      return NextResponse.json({
        ok: true,
        ...cached.data,
        cached: true
      });
    }

    console.log('üîç API complete-data - –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∏–ª—è:', style || '–≤—Å–µ');

        // –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
        const products = await prisma.product.findMany({
          where: {
            catalog_category: {
              name: "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
            },
            is_active: true
          },
          select: {
            id: true,
            sku: true,
            properties_data: true
          }
          // –£–±–∏—Ä–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
        });

    console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î`);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    const models: any[] = [];
    const styles = new Set<string>();

    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –º–æ–¥–µ–ª—è–º
    const modelMap = new Map<string, any>();
    
    products.forEach(product => {
      try {
        const properties = product.properties_data ?
          (typeof product.properties_data === 'string' ? JSON.parse(product.properties_data) : product.properties_data) : {};

        const model = properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'];
        const productStyle = properties['Domeo_–°—Ç–∏–ª—å Web'];
        const productPhotos = properties.photos || [];

        if (model && productStyle) {
          // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç–∏–ª—é –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
          if (style && productStyle !== style) {
            return;
          }

          styles.add(productStyle);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –º–æ–¥–µ–ª—å
          if (!modelMap.has(model)) {
            modelMap.set(model, {
              model,
              style: productStyle,
              photos: productPhotos, // –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Ç–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –º–æ–¥–µ–ª–∏
              products: []
            });
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –∫ –º–æ–¥–µ–ª–∏ (—Ñ–æ—Ç–æ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞)
          const modelData = modelMap.get(model);
          modelData.products.push({
            sku: product.sku,
            properties: properties
          });
        }
      } catch (error) {
        console.warn(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ ${product.sku}:`, error);
      }
    });

    // –¢–µ–ø–µ—Ä—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º —Ñ–æ—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
    modelMap.forEach((modelData) => {
      // –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–ª–æ–∂–∫–∏ –∏ –≥–∞–ª–µ—Ä–µ–∏
      const photoStructure = structurePhotos(modelData.photos);
      const coverPhoto = getCoverPhoto(photoStructure);

      models.push({
        model: modelData.model,
        style: modelData.style,
        photo: coverPhoto, // –¢–æ–ª—å–∫–æ –æ–±–ª–æ–∂–∫–∞ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
        photos: photoStructure, // –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        hasGallery: photoStructure.gallery.length > 0, // –§–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è –≥–∞–ª–µ—Ä–µ–∏
        products: modelData.products, // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤
        options: {
          finishes: [],
          colors: [],
          types: [],
          widths: [],
          heights: []
        }
      });
    });

    const result = {
      models: models.sort((a, b) => a.model.localeCompare(b.model)),
      totalModels: models.length,
      styles: Array.from(styles),
      timestamp: Date.now()
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    completeDataCache.set(cacheKey, {
      data: result,
      timestamp: Date.now()
    });

    console.log(`‚úÖ API complete-data - –Ω–∞–π–¥–µ–Ω–æ ${models.length} –º–æ–¥–µ–ª–µ–π`);

    return NextResponse.json({
      ok: true,
      ...result
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API complete-data:', error);
    return NextResponse.json(
      { error: 'Failed to fetch complete data', details: (error as Error).message },
      { status: 500 }
    );
  }
}
