import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from '@prisma/client';
import { getPropertyPhotos, structurePropertyPhotos } from '@/lib/property-photos';

const prisma = new PrismaClient();

// –ö—ç—à –¥–ª—è —Ñ–æ—Ç–æ
const photoCache = new Map<string, { data: any; timestamp: number }>();
const PHOTO_CACHE_TTL = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç –¥–ª—è —Ñ–æ—Ç–æ

export async function POST(req: NextRequest) {
  try {
    const { models } = await req.json();
    
    if (!models || !Array.isArray(models)) {
      return NextResponse.json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞" }, { status: 400 });
    }

    console.log('üì∏ Batch –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –º–æ–¥–µ–ª–µ–π:', models.length);

    const results: Record<string, any> = {};
    const uncachedModels: string[] = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
    for (const model of models) {
      const cacheKey = `photo_${model}`;
      const cached = photoCache.get(cacheKey);
      
      if (cached && (Date.now() - cached.timestamp) < PHOTO_CACHE_TTL) {
        results[model] = cached.data;
      } else {
        uncachedModels.push(model);
      }
    }

    console.log(`‚ö° –ò–∑ –∫—ç—à–∞: ${models.length - uncachedModels.length}, –∑–∞–≥—Ä—É–∂–∞–µ–º: ${uncachedModels.length}`);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
    if (uncachedModels.length > 0) {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
      const products = await prisma.product.findMany({
        where: {
          catalog_category: {
            name: "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
          }
        },
        select: {
          properties_data: true
        }
      });

      // –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –º–æ–¥–µ–ª—å -> —Å–∞–º–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ç–æ —Å–≤–æ–π—Å—Ç–≤)
      const modelToValue = new Map<string, string>();
      
      for (const product of products) {
        try {
          let properties: any = {};
          
          if (product.properties_data) {
            if (typeof product.properties_data === 'string') {
              try {
                properties = JSON.parse(product.properties_data);
              } catch (parseError) {
                console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError, '–î–∞–Ω–Ω—ã–µ:', product.properties_data.substring(0, 100));
                continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä
              }
            } else if (typeof product.properties_data === 'object') {
              properties = product.properties_data;
            } else {
              continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            }
          }
          
          const modelName = properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'];
          
          if (modelName && uncachedModels.includes(modelName)) {
            modelToValue.set(modelName, modelName);
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞:', error);
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ PropertyPhoto –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
      const photosByModel = new Map<string, any>();
      
      for (const [modelName, propertyValue] of modelToValue.entries()) {
        // –ü—Ä–∏–≤–æ–¥–∏–º propertyValue –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞
        const normalizedPropertyValue = propertyValue.toLowerCase();
        
        // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ –∏–∑ PropertyPhoto
        const propertyPhotos = await getPropertyPhotos(
          'cmg50xcgs001cv7mn0tdyk1wo', // ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
          'Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web',
          normalizedPropertyValue
        );

        // –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –æ–±–ª–æ–∂–∫—É –∏ –≥–∞–ª–µ—Ä–µ—é
        const photoStructure = structurePropertyPhotos(propertyPhotos);
        
        photosByModel.set(modelName, {
          modelKey: modelName, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ç–æ
          photo: photoStructure.cover ? `/uploads/${photoStructure.cover}` : null,
          photos: {
            cover: photoStructure.cover ? `/uploads/${photoStructure.cover}` : null,
            gallery: photoStructure.gallery.map(p => `/uploads/${p}`)
          },
          hasGallery: photoStructure.gallery.length > 0
        });
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      for (const model of uncachedModels) {
        const modelData = photosByModel.get(model);
        const result = {
          model,
          modelKey: modelData?.modelKey || '',
          photo: modelData?.photo || null,
          photos: modelData?.photos || { cover: null, gallery: [] },
          hasGallery: modelData?.hasGallery || false
        };
        
        results[model] = result;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        const cacheKey = `photo_${model}`;
        photoCache.set(cacheKey, { data: result, timestamp: Date.now() });
      }
    }

    console.log('‚úÖ Batch –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

    return NextResponse.json({
      ok: true,
      photos: results
    }, {
      headers: {
        'Content-Type': 'application/json; charset=utf-8',
        'Cache-Control': 'public, max-age=1800' // 30 –º–∏–Ω—É—Ç –∫—ç—à –≤ –±—Ä–∞—É–∑–µ—Ä–µ
      }
    });

  } catch (error) {
    console.error('Error in batch photo loading:', error);
    return NextResponse.json(
      { error: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ" },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}
