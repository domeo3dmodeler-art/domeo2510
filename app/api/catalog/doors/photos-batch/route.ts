import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// –ö—ç—à –¥–ª—è —Ñ–æ—Ç–æ
const photoCache = new Map<string, { data: any; timestamp: number }>();
const PHOTO_CACHE_TTL = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç –¥–ª—è —Ñ–æ—Ç–æ

export async function POST(req: NextRequest) {
  try {
    const { models } = await req.json();
    
    if (!models || !Array.isArray(models)) {
      return NextResponse.json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞" }, { status: 400 });
    }

    console.log('üì∏ Batch –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –º–æ–¥–µ–ª–µ–π:', models.length);

    const results: Record<string, any> = {};
    const uncachedModels: string[] = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
    for (const model of models) {
      const cacheKey = `photo_${model}`;
      const cached = photoCache.get(cacheKey);
      
      if (cached && (Date.now() - cached.timestamp) < PHOTO_CACHE_TTL) {
        results[model] = cached.data;
      } else {
        uncachedModels.push(model);
      }
    }

    console.log(`‚ö° –ò–∑ –∫—ç—à–∞: ${models.length - uncachedModels.length}, –∑–∞–≥—Ä—É–∂–∞–µ–º: ${uncachedModels.length}`);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
    if (uncachedModels.length > 0) {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤ –∫–æ–¥–µ, —Ç–∞–∫ –∫–∞–∫ Prisma –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç path –¥–ª—è JSON
      const products = await prisma.product.findMany({
        where: {
          catalog_category: {
            name: "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
          }
        },
        select: {
          properties_data: true
        }
      });

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–æ—Ç–æ –ø–æ –º–æ–¥–µ–ª—è–º
      const photosByModel = new Map<string, any[]>();
      
      products.forEach(product => {
        const properties = product.properties_data ?
          (typeof product.properties_data === 'string' ? JSON.parse(product.properties_data) : product.properties_data) : {};
        
        const modelName = properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'];
        const supplierSku = properties['–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'];
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –º–æ–¥–µ–ª–∏
        if (modelName && supplierSku && uncachedModels.includes(modelName)) {
          if (!photosByModel.has(modelName)) {
            photosByModel.set(modelName, []);
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
          photosByModel.get(modelName)!.push({
            photoType: 'cover',
            photoPath: `/uploads/products/cmg50xcgs001cv7mn0tdyk1wo/1760819074001_0ws9nv_${supplierSku}.png`, // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø—É—Ç—å
            propertyValue: supplierSku
          });
        }
      });

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      for (const model of uncachedModels) {
        const photos = photosByModel.get(model) || [];
        const result = {
          model,
          modelKey: photos[0]?.propertyValue || '',
          photo: photos[0]?.photoPath || null,
          photos: {
            cover: photos[0]?.photoPath || null,
            gallery: photos.slice(1).map(p => p.photoPath)
          },
          hasGallery: photos.length > 1
        };
        
        results[model] = result;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        const cacheKey = `photo_${model}`;
        photoCache.set(cacheKey, { data: result, timestamp: Date.now() });
      }
    }

    console.log('‚úÖ Batch –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

    return NextResponse.json({
      ok: true,
      photos: results
    }, {
      headers: {
        'Content-Type': 'application/json; charset=utf-8',
        'Cache-Control': 'public, max-age=1800' // 30 –º–∏–Ω—É—Ç –∫—ç—à –≤ –±—Ä–∞—É–∑–µ—Ä–µ
      }
    });

  } catch (error) {
    console.error('Error in batch photo loading:', error);
    return NextResponse.json(
      { error: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ" },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}
