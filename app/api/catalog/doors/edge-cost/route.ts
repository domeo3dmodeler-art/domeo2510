import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const style = searchParams.get('style');
    const model = searchParams.get('model');
    const finish = searchParams.get('finish');
    const color = searchParams.get('color');
    const type = searchParams.get('type');
    const width = searchParams.get('width');
    const height = searchParams.get('height');

    console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫—Ä–æ–º–∫–∏:', { style, model, finish, color, type, width, height });

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–≤–µ—Ä–∏
    const products = await prisma.product.findMany({
      where: {
        catalog_category: {
          name: "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
        }
      },
      select: {
        properties_data: true
      }
    });

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
    const filteredProducts = products.filter(product => {
      const properties = product.properties_data ?
        (typeof product.properties_data === 'string' ? JSON.parse(product.properties_data) : product.properties_data) : {};

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
      if (style && properties['Domeo_–°—Ç–∏–ª—å Web'] !== style) return false;
      if (model && !properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web']?.includes(model)) return false;
      if (finish && properties['–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è'] !== finish) return false;
      if (color && properties['Domeo_–¶–≤–µ—Ç'] !== color) return false;
      if (type && properties['–¢–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏'] !== type) return false;
      if (width && properties['–®–∏—Ä–∏–Ω–∞/–º–º'] !== width) return false;
      if (height && properties['–í—ã—Å–æ—Ç–∞/–º–º'] !== height) return false;

      return true;
    });

    console.log(`üì¶ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${filteredProducts.length} –∏–∑ ${products.length}`);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—Ä–æ–º–∫—É –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
    const costValues = new Set<string>();
    let sampleProduct = null;
    let hasNoEdgeWithoutCost = 0;  // –ö—Ä–æ–º–∫–∞ "–Ω–µ—Ç" –±–µ–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    let hasNoEdgeWithCost = 0;     // –ö—Ä–æ–º–∫–∞ "–Ω–µ—Ç" —Å–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
    let hasSpecificEdgeProducts = 0;

    filteredProducts.forEach(product => {
      const properties = product.properties_data ?
        (typeof product.properties_data === 'string' ? JSON.parse(product.properties_data) : product.properties_data) : {};

      const edgeValue = properties['–ö—Ä–æ–º–∫–∞'];
      const costValue = properties['–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–¥–±–∞–≤–∫–∏ –∑–∞ –∫—Ä–æ–º–∫—É'];
      
      if (!edgeValue || edgeValue === '-' || edgeValue === '' || 
          edgeValue.toLowerCase() === '–Ω–µ—Ç' || edgeValue.toLowerCase() === 'no') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–∞–¥–±–∞–≤–∫–∏
        if (costValue && costValue !== '-' && costValue !== '' && costValue !== null) {
          hasNoEdgeWithCost++;
          costValues.add(costValue);
          if (!sampleProduct) {
            sampleProduct = {
              cost: costValue,
              edge: edgeValue,
              style: properties['Domeo_–°—Ç–∏–ª—å Web'],
              model: properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'],
              finish: properties['–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è'],
              color: properties['Domeo_–¶–≤–µ—Ç']
            };
          }
        } else {
          hasNoEdgeWithoutCost++;
        }
      } else {
        hasSpecificEdgeProducts++;
      }
    });

    const responseData = {
      ok: true,
      filteredCount: filteredProducts.length,
      costValues: Array.from(costValues).sort(),
      sampleProduct,
      hasCost: costValues.size > 0,
      hasNoEdgeWithoutCost,
      hasNoEdgeWithCost,
      hasSpecificEdgeProducts,
      isEdgeUnavailable: hasNoEdgeWithoutCost > 0 && hasNoEdgeWithCost === 0 && hasSpecificEdgeProducts === 0
    };

    console.log('‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫—Ä–æ–º–∫–∏:', responseData);

    return NextResponse.json(responseData, {
      headers: {
        'Content-Type': 'application/json; charset=utf-8'
      }
    });
  } catch (error) {
    console.error('Error in edge cost:', error);
    return NextResponse.json(
      { error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫—Ä–æ–º–∫–∏" },
      { status: 500 }
    );
  }
}
