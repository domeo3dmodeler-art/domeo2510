import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const style = searchParams.get('style');
    const model = searchParams.get('model');
    const finish = searchParams.get('finish');
    const color = searchParams.get('color');
    const type = searchParams.get('type');
    const width = searchParams.get('width');
    const height = searchParams.get('height');
    const edge = searchParams.get('edge');

    console.log('üîç –ö–∞—Å–∫–∞–¥–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è:', { style, model, finish, color, type, width, height, edge });

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–≤–µ—Ä–∏
    const products = await prisma.product.findMany({
      where: {
        catalog_category: {
          name: "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
        }
      },
      select: {
        properties_data: true
      }
    });

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
    const filteredProducts = products.filter(product => {
      const properties = product.properties_data ?
        (typeof product.properties_data === 'string' ? JSON.parse(product.properties_data) : product.properties_data) : {};

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
      if (style && properties['Domeo_–°—Ç–∏–ª—å Web'] !== style) return false;
      if (model && !properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web']?.includes(model)) return false;
      if (finish && properties['–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è'] !== finish) return false;
      if (color && properties['Domeo_–¶–≤–µ—Ç'] !== color) return false;
      if (type && properties['–¢–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏'] !== type) return false;
      if (width && properties['–®–∏—Ä–∏–Ω–∞/–º–º'] !== width) return false;
      if (height && properties['–í—ã—Å–æ—Ç–∞/–º–º'] !== height) return false;
      
            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫—Ä–æ–º–∫–µ —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
            if (edge) {
              const edgeValue = properties['–ö—Ä–æ–º–∫–∞'];
              
              let hasMatchingEdge = false;
              
              if (edge === '–ù–µ—Ç') {
                // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–ù–µ—Ç", —Ç–æ —Ç–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –Ω–µ –∏–º–µ—Ç—å –∫—Ä–æ–º–∫–∏ –∏–ª–∏ –∏–º–µ—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ "–Ω–µ—Ç"
                hasMatchingEdge = !edgeValue || edgeValue === '-' || edgeValue === '' || 
                  edgeValue.toLowerCase() === '–Ω–µ—Ç' || edgeValue.toLowerCase() === 'no';
              } else if (edge === '–î–∞') {
                // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–î–∞", —Ç–æ —Ç–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∫—Ä–æ–º–∫—É (–ª—é–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫—Ä–æ–º–µ –ø—É—Å—Ç–æ–≥–æ/–Ω–µ—Ç)
                hasMatchingEdge = edgeValue && edgeValue !== '-' && edgeValue !== '' && 
                  edgeValue.toLowerCase() !== '–Ω–µ—Ç' && edgeValue.toLowerCase() !== 'no';
              } else {
                // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫—Ä–æ–º–∫–∏, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø–æ–ª–µ–º "–ö—Ä–æ–º–∫–∞"
                hasMatchingEdge = edgeValue === edge;
              }
              
              if (!hasMatchingEdge) return false;
            }

      return true;
    });

    console.log(`üì¶ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${filteredProducts.length} –∏–∑ ${products.length}`);

    // –°–æ–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    const availableOptions = {
      finish: new Set<string>(),
      color: new Set<string>(),
      type: new Set<string>(),
      width: new Set<number>(),
      height: new Set<number>(),
      edge: new Set<string>()
    };

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—Ä–æ–º–∫—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏
    let hasNoEdgeWithoutCost = 0;  // –ö—Ä–æ–º–∫–∞ "–Ω–µ—Ç" –±–µ–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    let hasNoEdgeWithCost = 0;     // –ö—Ä–æ–º–∫–∞ "–Ω–µ—Ç" —Å–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
    let hasSpecificEdgeProducts = 0;
    const specificEdgeValues = new Set<string>();

    filteredProducts.forEach(product => {
      const properties = product.properties_data ?
        (typeof product.properties_data === 'string' ? JSON.parse(product.properties_data) : product.properties_data) : {};

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, –ò–õ–ò —É–∂–µ –≤—ã–±—Ä–∞–Ω—ã (—á—Ç–æ–±—ã –æ–Ω–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∏—Å—å –≤ —Å–µ–ª–µ–∫—Ç–µ)
      if (properties['–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è']) availableOptions.finish.add(properties['–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è']);
      if (properties['Domeo_–¶–≤–µ—Ç']) availableOptions.color.add(properties['Domeo_–¶–≤–µ—Ç']);
      if (properties['–¢–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏']) availableOptions.type.add(properties['–¢–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏']);
      if (properties['–®–∏—Ä–∏–Ω–∞/–º–º']) availableOptions.width.add(Number(properties['–®–∏—Ä–∏–Ω–∞/–º–º']));
      if (properties['–í—ã—Å–æ—Ç–∞/–º–º']) availableOptions.height.add(Number(properties['–í—ã—Å–æ—Ç–∞/–º–º']));
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—Ä–æ–º–∫—É
      const edgeValue = properties['–ö—Ä–æ–º–∫–∞'];
      const costValue = properties['–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–¥–±–∞–≤–∫–∏ –∑–∞ –∫—Ä–æ–º–∫—É'];
      
      if (!edgeValue || edgeValue === '-' || edgeValue === '' || 
          edgeValue.toLowerCase() === '–Ω–µ—Ç' || edgeValue.toLowerCase() === 'no') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–∞–¥–±–∞–≤–∫–∏
        if (costValue && costValue !== '-' && costValue !== '' && costValue !== null) {
          hasNoEdgeWithCost++;
        } else {
          hasNoEdgeWithoutCost++;
        }
      } else {
        hasSpecificEdgeProducts++;
        specificEdgeValues.add(edgeValue);
      }
    });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–≥–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—Ä–æ–º–∫–∏
    if (hasNoEdgeWithoutCost > 0 && hasNoEdgeWithCost === 0 && hasSpecificEdgeProducts === 0) {
      // –¢–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –∫—Ä–æ–º–∫–∏ –∏ –±–µ–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞"
      availableOptions.edge.add('–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞');
    } else if (hasNoEdgeWithCost > 0) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã —Å–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –∫—Ä–æ–º–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –î–∞/–ù–µ—Ç
      availableOptions.edge.add('–ù–µ—Ç');
      availableOptions.edge.add('–î–∞');
    } else if (hasSpecificEdgeProducts > 0 && hasNoEdgeWithCost === 0 && hasNoEdgeWithoutCost === 0) {
      // –¢–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫—Ä–æ–º–∫–æ–π –∏ –±–µ–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è
      specificEdgeValues.forEach(value => availableOptions.edge.add(value));
    } else {
      // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ "–ù–µ—Ç"
      availableOptions.edge.add('–ù–µ—Ç');
    }

    const responseData = {
      ok: true,
      filteredCount: filteredProducts.length,
      availableOptions: {
        finish: Array.from(availableOptions.finish).sort(),
        color: Array.from(availableOptions.color).sort(),
        type: Array.from(availableOptions.type).sort(),
        width: Array.from(availableOptions.width).sort((a, b) => a - b),
        height: Array.from(availableOptions.height).sort((a, b) => a - b),
        edge: Array.from(availableOptions.edge).sort()
      }
    };

    console.log('‚úÖ –ö–∞—Å–∫–∞–¥–Ω—ã–µ –æ–ø—Ü–∏–∏:', responseData.availableOptions);

    return NextResponse.json(responseData, {
      headers: {
        'Content-Type': 'application/json; charset=utf-8'
      }
    });
  } catch (error) {
    console.error('Error in cascade filtering:', error);
    return NextResponse.json(
      { error: "–û—à–∏–±–∫–∞ –∫–∞—Å–∫–∞–¥–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏" },
      { status: 500 }
    );
  }
}
