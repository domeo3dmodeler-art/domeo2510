import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const model = searchParams.get('model');

    if (!model) {
      return NextResponse.json(
        { error: "–ù–µ —É–∫–∞–∑–∞–Ω–∞ –º–æ–¥–µ–ª—å" },
        { status: 400 }
      );
    }

    console.log('üîç API photos-simple - –ø–æ–∏—Å–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –º–æ–¥–µ–ª–∏:', model);

    // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î
    const products = await prisma.product.findMany({
      where: {
        catalog_category: {
          name: "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
        },
        is_active: true
      },
      select: {
        id: true,
        sku: true,
        properties_data: true
      },
      take: 100 // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    });

    console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î`);

    // –ò—â–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–∏
    const photos: string[] = [];

    for (const product of products) {
      try {
        const properties = product.properties_data ?
          (typeof product.properties_data === 'string' ? JSON.parse(product.properties_data) : product.properties_data) : {};

        const productModel = properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'];
        const productPhotos = properties.photos || [];

        // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        if (productModel === model && productPhotos.length > 0) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –º–æ–¥–µ–ª—å ${model} —Å ${productPhotos.length} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏`);
          photos.push(...productPhotos);
          break; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
        }
      } catch (error) {
        console.warn(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ ${product.sku}:`, error);
      }
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ
    if (photos.length === 0) {
      for (const product of products) {
        try {
          const properties = product.properties_data ?
            (typeof product.properties_data === 'string' ? JSON.parse(product.properties_data) : product.properties_data) : {};

          const productModel = properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'];
          const productPhotos = properties.photos || [];

          // –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
          if (productModel && productModel.includes(model) && productPhotos.length > 0) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –º–æ–¥–µ–ª—å ${model} (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ) —Å ${productPhotos.length} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏`);
            photos.push(...productPhotos);
            break;
          }
        } catch (error) {
          console.warn(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ ${product.sku}:`, error);
        }
      }
    }

    // –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    if (photos.length === 0) {
      if (model.includes('Moonstone')) {
        const moonstoneNumber = model.match(/\d+/)?.[0] || '1';
        photos.push(`/uploads/products/moonstone/moonstone_${moonstoneNumber}.png`);
        console.log(`üñºÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è ${model}: /uploads/products/moonstone/moonstone_${moonstoneNumber}.png`);
      } else if (model.includes('Ledoux')) {
        const ledouxNumber = model.match(/\d+/)?.[0] || '2';
        photos.push(`/uploads/products/ledoux/ledoux_${ledouxNumber}.png`);
        console.log(`üñºÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è ${model}: /uploads/products/ledoux/ledoux_${ledouxNumber}.png`);
      }
    }

    return NextResponse.json({
      ok: true,
      model,
      photos,
      count: photos.length,
      cached: false
    });

  } catch (error) {
    console.error('‚ùå API photos-simple - –û–®–ò–ë–ö–ê:', error);
    return NextResponse.json(
      { error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π", details: (error as Error).message },
      { status: 500 }
    );
  }
}
