import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const categoryIds = searchParams.get('categoryIds');
    const propertyName = searchParams.get('propertyName');

    if (!categoryIds || !propertyName) {
      return NextResponse.json(
        { success: false, message: '–ù–µ —É–∫–∞–∑–∞–Ω—ã categoryIds –∏–ª–∏ propertyName' },
        { status: 400 }
      );
    }

    const categoryIdsArray = categoryIds.split(',');

    console.log(`üöÄ Batch loading property values with images for "${propertyName}" from categories:`, categoryIdsArray);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const products = await prisma.product.findMany({
      where: {
        catalog_category_id: {
          in: categoryIdsArray
        },
        is_active: true
      },
      select: {
        id: true,
        properties_data: true
      }
    });

    console.log(`üöÄ Found ${products.length} products`);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞
    const uniqueValues = new Set<string>();
    products.forEach(product => {
      try {
        let propertiesData = product.properties_data;
        
        // –ï—Å–ª–∏ properties_data - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º –µ—ë –∫–∞–∫ JSON
        if (typeof propertiesData === 'string') {
          propertiesData = JSON.parse(propertiesData);
        }
        
        if (propertiesData && typeof propertiesData === 'object') {
          const propertyValue = (propertiesData as any)[propertyName];
          if (propertyValue && typeof propertyValue === 'string') {
            uniqueValues.add(propertyValue);
          }
        }
      } catch (error) {
        console.warn(`üöÄ Error parsing properties_data for product ${product.id}:`, error);
      }
    });

    const propertyValues = Array.from(uniqueValues);
    console.log(`üöÄ Found ${propertyValues.length} unique values for property "${propertyName}"`);

    // –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å—Ä–∞–∑—É
    const productImages = await prisma.productImage.findMany({
      where: {
        product_id: {
          in: products.map(p => p.id)
        },
        is_primary: true
      },
      select: {
        id: true,
        url: true,
        alt_text: true,
        product_id: true
      }
    });

    console.log(`üöÄ Found ${productImages.length} product images`);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ product_id
    const imagesByProductId = new Map<string, any>();
    productImages.forEach(image => {
      imagesByProductId.set(image.product_id, image);
    });

    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø–æ–¥—Å—á–µ—Ç–æ–º —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤–∞
    const result = propertyValues.map(propertyValue => {
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å —ç—Ç–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º —Å–≤–æ–π—Å—Ç–≤–∞
      const productsWithValue = products.filter(product => {
        try {
          let propertiesData = product.properties_data;
          
          // –ï—Å–ª–∏ properties_data - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º –µ—ë –∫–∞–∫ JSON
          if (typeof propertiesData === 'string') {
            propertiesData = JSON.parse(propertiesData);
          }
          
          if (propertiesData && typeof propertiesData === 'object') {
            const value = (propertiesData as any)[propertyName];
            return value === propertyValue;
          }
          return false;
        } catch (error) {
          console.warn(`üöÄ Error parsing properties_data for product ${product.id}:`, error);
          return false;
        }
      });

      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ —Å —ç—Ç–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
      const firstProduct = productsWithValue.find(product => 
        imagesByProductId.has(product.id)
      );
      
      const image = firstProduct ? imagesByProductId.get(firstProduct.id) : null;

      return {
        value: propertyValue,
        count: productsWithValue.length,
        image: image ? {
          url: image.url,
          alt_text: image.alt_text
        } : null
      };
    });

    console.log(`üöÄ Batch API returning ${result.length} property values with images`);

    return NextResponse.json({
      success: true,
      data: result
    });

  } catch (error) {
    console.error('Error in batch property values with images API:', error);
    return NextResponse.json(
      { success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö' },
      { status: 500 }
    );
  }
}
