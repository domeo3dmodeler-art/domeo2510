import { NextRequest, NextResponse } from 'next/server';
import { exportDocumentWithPDF } from '@/lib/export/puppeteer-generator';
import { prisma } from '@/lib/prisma';
import { generateCartSessionId } from '@/lib/utils/cart-session';

// –£–ª—É—á—à–µ–Ω–Ω—ã–π API –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç
export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const { 
      cart, 
      documentType, 
      format = 'pdf',
      clientId,
      sourceDocumentId, // ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–µ—Å–ª–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ)
      sourceDocumentType, // –¢–∏–ø –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
      userId = 'system',
      additionalData = {}
    } = body;

    console.log('üîÑ Cart export request:', { 
      documentType, 
      format, 
      clientId, 
      sourceDocumentId, 
      sourceDocumentType,
      itemsCount: cart?.items?.length 
    });

    if (!cart || !cart.items || cart.items.length === 0) {
      return NextResponse.json(
        { error: "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞" },
        { status: 400 }
      );
    }

    if (!clientId) {
      return NextResponse.json(
        { error: "ID –∫–ª–∏–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" },
        { status: 400 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
    const client = await prisma.client.findUnique({
      where: { id: clientId },
      select: { id: true, firstName: true, lastName: true, middleName: true, phone: true, address: true }
    });

    if (!client) {
      return NextResponse.json(
        { error: "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" },
        { status: 404 }
      );
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
    const totalAmount = cart.items.reduce((sum: number, item: any) => 
      sum + (item.unitPrice || 0) * (item.qty || item.quantity || 1), 0
    );

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π cart_session_id –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã
    const cartSessionId = generateCartSessionId();
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º—ã
    const exportResult = await exportDocumentWithPDF(
      documentType as 'quote' | 'invoice' | 'order',
      format as 'pdf' | 'excel' | 'csv',
      clientId,
      cart.items,
      totalAmount,
      cartSessionId
    );

    console.log('‚úÖ Document generated:', {
      documentId: exportResult.documentId,
      documentType: exportResult.documentType,
      documentNumber: exportResult.documentNumber
    });

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç, —Å–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å
    if (sourceDocumentId && sourceDocumentType) {
      await createDocumentRelationship(
        sourceDocumentType,
        sourceDocumentId,
        exportResult.documentType!,
        exportResult.documentId!,
        userId
      );
    }

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    await prisma.documentHistory.create({
      data: {
        document_type: exportResult.documentType!,
        document_id: exportResult.documentId!,
        action: sourceDocumentId ? 'created_from_cart' : 'created_from_cart',
        new_value: JSON.stringify({
          sourceDocumentId,
          sourceDocumentType,
          cartItemsCount: cart.items.length,
          totalAmount,
          format
        }),
        user_id: userId,
        notes: sourceDocumentId 
          ? `–°–æ–∑–¥–∞–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ ${sourceDocumentType} ${sourceDocumentId}`
          : '–°–æ–∑–¥–∞–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã'
      }
    });

    return NextResponse.json({
      success: true,
      document: {
        id: exportResult.documentId,
        type: exportResult.documentType,
        number: exportResult.documentNumber,
        totalAmount,
        clientId,
        sourceDocumentId,
        sourceDocumentType
      },
      file: {
        buffer: exportResult.buffer.toString('base64'),
        filename: exportResult.filename,
        mimeType: exportResult.mimeType
      },
      message: `${documentType} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã`
    });

  } catch (error) {
    console.error('‚ùå Error in cart export:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã' },
      { status: 500 }
    );
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
async function createDocumentRelationship(
  sourceType: string,
  sourceId: string,
  targetType: string,
  targetId: string,
  userId: string
) {
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    if (sourceType === 'quote' && targetType === 'order') {
      await prisma.order.update({
        where: { id: targetId },
        data: { quote_id: sourceId }
      });
    } else if (sourceType === 'quote' && targetType === 'invoice') {
      await prisma.invoice.update({
        where: { id: targetId },
        data: { quote_id: sourceId }
      });
    } else if (sourceType === 'order' && targetType === 'invoice') {
      await prisma.invoice.update({
        where: { id: targetId },
        data: { order_id: sourceId }
      });
    } else if (sourceType === 'order' && targetType === 'supplier_order') {
      await prisma.supplierOrder.update({
        where: { id: targetId },
        data: { order_id: sourceId }
      });
    }

    console.log('‚úÖ Document relationship created:', { sourceType, sourceId, targetType, targetId });
  } catch (error) {
    console.error('‚ùå Error creating document relationship:', error);
    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–≤—è–∑—å
  }
}

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞
export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const documentType = searchParams.get('documentType');

    const availableFormats = {
      quote: ['pdf', 'excel', 'csv'],
      invoice: ['pdf', 'excel', 'csv'],
      order: ['pdf', 'excel', 'csv'],
      supplier_order: ['pdf', 'excel']
    };

    const formats = documentType 
      ? availableFormats[documentType as keyof typeof availableFormats] || []
      : Object.keys(availableFormats);

    return NextResponse.json({
      success: true,
      formats,
      documentTypes: Object.keys(availableFormats)
    });

  } catch (error) {
    console.error('‚ùå Error fetching export formats:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞' },
      { status: 500 }
    );
  }
}
