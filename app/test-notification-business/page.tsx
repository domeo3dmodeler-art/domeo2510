'use client';

import { useState } from 'react';

export default function TestNotificationBusinessLogic() {
  const [result, setResult] = useState('');
  const [testInvoiceId, setTestInvoiceId] = useState('');

  const createTestInvoice = async () => {
    try {
      // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
      const clientResponse = await fetch('/api/clients', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json; charset=utf-8'
        },
        body: JSON.stringify({
          firstName: '–¢–µ—Å—Ç–æ–≤—ã–π',
          lastName: '–ö–ª–∏–µ–Ω—Ç',
          middleName: '–î–ª—è',
          phone: '+7 (999) 123-45-67',
          address: '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
          objectId: 'test-object-' + Date.now()
        })
      });
      
      const clientData = await clientResponse.json();
      if (!clientData.client) {
        setResult(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: ${JSON.stringify(clientData)}`);
        return;
      }
      
      const clientId = clientData.client.id;
      setResult(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: ${clientData.client.lastName} ${clientData.client.firstName} (ID: ${clientId})`);
      
      // –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º —Å—á–µ—Ç
      const invoiceResponse = await fetch('/api/invoices', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json; charset=utf-8'
        },
        body: JSON.stringify({
          client_id: clientId,
          status: 'SENT',
          total_amount: 1000,
          subtotal: 1000,
          tax_amount: 0,
          currency: 'RUB',
          notes: '–¢–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
        })
      });
      
      const invoiceData = await invoiceResponse.json();
      if (invoiceData.success && invoiceData.invoice) {
        setTestInvoiceId(invoiceData.invoice.id);
        setResult(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç —Å–æ–∑–¥–∞–Ω: ${invoiceData.invoice.number} (ID: ${invoiceData.invoice.id})`);
      } else {
        setResult(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞: ${JSON.stringify(invoiceData)}`);
      }
    } catch (error) {
      setResult('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
    }
  };

  const changeInvoiceStatus = async (status: string) => {
    if (!testInvoiceId) {
      setResult('‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç');
      return;
    }

    try {
      const response = await fetch(`/api/invoices/${testInvoiceId}/status`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json; charset=utf-8'
        },
        body: JSON.stringify({ status })
      });
      
      const data = await response.json();
      if (data.success) {
        setResult(`‚úÖ –°—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${status}". –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!`);
      } else {
        setResult(`‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${JSON.stringify(data)}`);
      }
    } catch (error) {
      setResult('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
    }
  };

  const getNotifications = async () => {
    try {
      const response = await fetch('/api/notifications');
      const data = await response.json();
      setResult(`üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n${JSON.stringify(data, null, 2)}`);
    } catch (error) {
      setResult('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ' + error.message);
    }
  };

  return (
    <div className="p-8">
      <h1 className="text-2xl font-bold mb-4">–¢–µ—Å—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h1>
      
      <div className="space-y-4 mb-4">
        <button 
          onClick={createTestInvoice}
          className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç
        </button>
        
        <div className="space-x-2">
          <button 
            onClick={() => changeInvoiceStatus('PAID')}
            className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600"
            disabled={!testInvoiceId}
          >
            –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ "–û–ø–ª–∞—á–µ–Ω" (—É–≤–µ–¥–æ–º–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π)
          </button>
          
          <button 
            onClick={() => changeInvoiceStatus('IN_PRODUCTION')}
            className="px-4 py-2 bg-yellow-500 text-white rounded hover:bg-yellow-600"
            disabled={!testInvoiceId}
          >
            –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ "–ó–∞–∫–∞–∑ —Ä–∞–∑–º–µ—â–µ–Ω" (—É–≤–µ–¥–æ–º–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ç–æ—Ä–∞)
          </button>
        </div>
        
        <button 
          onClick={getNotifications}
          className="px-4 py-2 bg-purple-500 text-white rounded hover:bg-purple-600"
        >
          –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        </button>
      </div>
      
      <div className="bg-gray-100 p-4 rounded">
        <pre className="whitespace-pre-wrap">{result}</pre>
      </div>
    </div>
  );
}
