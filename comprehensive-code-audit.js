const fs = require('fs');
const path = require('path');

async function comprehensiveCodeAudit() {
  console.log('üîç –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞—É–¥–∏—Ç –∫–æ–¥–∞, –ª–æ–≥–æ–≤ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
  
  const issues = {
    performance: [],
    codeQuality: [],
    security: [],
    logs: [],
    dependencies: [],
    recommendations: []
  };
  
  // 1. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  console.log('\n‚ö° –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
  const largeFiles = [];
  const slowQueries = [];
  
  function scanForLargeFiles(dir, maxSize = 100 * 1024) { // 100KB
    try {
      const items = fs.readdirSync(dir);
      for (const item of items) {
        const fullPath = path.join(dir, item);
        const stats = fs.statSync(fullPath);
        
        if (stats.isDirectory() && !['node_modules', '.git', '.next'].includes(item)) {
          scanForLargeFiles(fullPath, maxSize);
        } else if (stats.isFile() && stats.size > maxSize) {
          largeFiles.push({
            path: path.relative(__dirname, fullPath),
            size: stats.size,
            sizeKB: (stats.size / 1024).toFixed(1)
          });
        }
      }
    } catch (error) {
      console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ${dir}: ${error.message}`);
    }
  }
  
  scanForLargeFiles(__dirname);
  
  if (largeFiles.length > 0) {
    console.log(`   üìä –ù–∞–π–¥–µ–Ω–æ ${largeFiles.length} –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤:`);
    largeFiles.slice(0, 10).forEach(file => {
      console.log(`     - ${file.path} (${file.sizeKB} KB)`);
      issues.performance.push(`–ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª: ${file.path} (${file.sizeKB} KB)`);
    });
  }
  
  // 2. –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
  console.log('\nüìù –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ console.log –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
  const consoleLogs = [];
  const todoComments = [];
  const deprecatedPatterns = [];
  
  function scanCodeQuality(dir) {
    try {
      const items = fs.readdirSync(dir);
      for (const item of items) {
        const fullPath = path.join(dir, item);
        const stats = fs.statSync(fullPath);
        
        if (stats.isDirectory() && !['node_modules', '.git', '.next'].includes(item)) {
          scanCodeQuality(fullPath);
        } else if (stats.isFile() && /\.(ts|tsx|js|jsx)$/.test(item)) {
          try {
            const content = fs.readFileSync(fullPath, 'utf8');
            const lines = content.split('\n');
            
            lines.forEach((line, index) => {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º console.log
              if (line.includes('console.log') && !line.includes('// TODO: remove')) {
                consoleLogs.push({
                  file: path.relative(__dirname, fullPath),
                  line: index + 1,
                  content: line.trim()
                });
              }
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
              if (line.includes('TODO') || line.includes('FIXME') || line.includes('HACK')) {
                todoComments.push({
                  file: path.relative(__dirname, fullPath),
                  line: index + 1,
                  content: line.trim()
                });
              }
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
              if (line.includes('componentWillMount') || 
                  line.includes('componentWillReceiveProps') ||
                  line.includes('UNSAFE_')) {
                deprecatedPatterns.push({
                  file: path.relative(__dirname, fullPath),
                  line: index + 1,
                  content: line.trim()
                });
              }
            });
          } catch (error) {
            console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${fullPath}: ${error.message}`);
          }
        }
      }
    } catch (error) {
      console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ${dir}: ${error.message}`);
    }
  }
  
  scanCodeQuality(__dirname);
  
  if (consoleLogs.length > 0) {
    console.log(`   üêõ –ù–∞–π–¥–µ–Ω–æ ${consoleLogs.length} console.log:`);
    consoleLogs.slice(0, 5).forEach(log => {
      console.log(`     - ${log.file}:${log.line} - ${log.content}`);
      issues.codeQuality.push(`Console.log –≤ ${log.file}:${log.line}`);
    });
  }
  
  if (todoComments.length > 0) {
    console.log(`   üìù –ù–∞–π–¥–µ–Ω–æ ${todoComments.length} TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:`);
    todoComments.slice(0, 5).forEach(todo => {
      console.log(`     - ${todo.file}:${todo.line} - ${todo.content}`);
      issues.codeQuality.push(`TODO –≤ ${todo.file}:${todo.line}`);
    });
  }
  
  if (deprecatedPatterns.length > 0) {
    console.log(`   ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${deprecatedPatterns.length} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:`);
    deprecatedPatterns.slice(0, 5).forEach(dep => {
      console.log(`     - ${dep.file}:${dep.line} - ${dep.content}`);
      issues.codeQuality.push(`–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω –≤ ${dep.file}:${dep.line}`);
    });
  }
  
  // 3. –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  console.log('\nüîí –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
  try {
    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    const dependencies = { ...packageJson.dependencies, ...packageJson.devDependencies };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    const problematicPackages = [
      'lodash', 'moment', 'jquery', 'express', 'mongoose'
    ];
    
    problematicPackages.forEach(pkg => {
      if (dependencies[pkg]) {
        issues.security.push(`–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –ø–∞–∫–µ—Ç: ${pkg}`);
      }
    });
    
    console.log(`   üì¶ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${Object.keys(dependencies).length} –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π`);
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ package.json: ${error.message}`);
  }
  
  // 4. –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤
  console.log('\nüìã –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–≥–æ–≤
  const logFiles = [];
  function findLogFiles(dir) {
    try {
      const items = fs.readdirSync(dir);
      for (const item of items) {
        const fullPath = path.join(dir, item);
        const stats = fs.statSync(fullPath);
        
        if (stats.isDirectory() && !['node_modules', '.git'].includes(item)) {
          findLogFiles(fullPath);
        } else if (stats.isFile() && /\.(log|txt)$/.test(item)) {
          logFiles.push({
            path: path.relative(__dirname, fullPath),
            size: stats.size
          });
        }
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
    }
  }
  
  findLogFiles(__dirname);
  
  if (logFiles.length > 0) {
    console.log(`   üìÑ –ù–∞–π–¥–µ–Ω–æ ${logFiles.length} –ª–æ–≥ —Ñ–∞–π–ª–æ–≤:`);
    logFiles.forEach(log => {
      console.log(`     - ${log.path} (${(log.size / 1024).toFixed(1)} KB)`);
    });
  } else {
    console.log(`   ‚úÖ –õ–æ–≥ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (—Ö–æ—Ä–æ—à–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)`);
  }
  
  // 5. –ê–Ω–∞–ª–∏–∑ API endpoints
  console.log('\nüåê –ê–Ω–∞–ª–∏–∑ API endpoints...');
  
  const apiFiles = [];
  function findApiFiles(dir) {
    try {
      const items = fs.readdirSync(dir);
      for (const item of items) {
        const fullPath = path.join(dir, item);
        const stats = fs.statSync(fullPath);
        
        if (stats.isDirectory() && item === 'api') {
          findApiFiles(fullPath);
        } else if (stats.isFile() && item === 'route.ts') {
          apiFiles.push(path.relative(__dirname, fullPath));
        }
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
    }
  }
  
  findApiFiles(path.join(__dirname, 'app'));
  
  console.log(`   üîó –ù–∞–π–¥–µ–Ω–æ ${apiFiles.length} API endpoints`);
  
  // 6. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  console.log('\nüóÑÔ∏è –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ë–î...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Prisma —Å—Ö–µ–º—É
  try {
    const schemaContent = fs.readFileSync('prisma/schema.prisma', 'utf8');
    const modelCount = (schemaContent.match(/^model\s+\w+/gm) || []).length;
    const relationCount = (schemaContent.match(/@relation/g) || []).length;
    
    console.log(`   üìä –ú–æ–¥–µ–ª–µ–π: ${modelCount}, –°–≤—è–∑–µ–π: ${relationCount}`);
    
    if (modelCount > 20) {
      issues.performance.push(`–ú–Ω–æ–≥–æ –º–æ–¥–µ–ª–µ–π –≤ –ë–î: ${modelCount}`);
    }
    
    if (relationCount > 50) {
      issues.performance.push(`–ú–Ω–æ–≥–æ —Å–≤—è–∑–µ–π –≤ –ë–î: ${relationCount}`);
    }
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Prisma —Å—Ö–µ–º—ã: ${error.message}`);
  }
  
  // 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  console.log('\nüí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...');
  
  if (issues.performance.length > 0) {
    issues.recommendations.push('–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:');
    issues.performance.forEach(issue => {
      issues.recommendations.push(`  - ${issue}`);
    });
  }
  
  if (issues.codeQuality.length > 0) {
    issues.recommendations.push('–£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞:');
    issues.codeQuality.forEach(issue => {
      issues.recommendations.push(`  - ${issue}`);
    });
  }
  
  if (issues.security.length > 0) {
    issues.recommendations.push('–£—Å–∏–ª–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:');
    issues.security.forEach(issue => {
      issues.recommendations.push(`  - ${issue}`);
    });
  }
  
  // 8. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');
  console.log(`   ‚ö° –ü—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${issues.performance.length}`);
  console.log(`   üìù –ü—Ä–æ–±–ª–µ–º—ã –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞: ${issues.codeQuality.length}`);
  console.log(`   üîí –ü—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${issues.security.length}`);
  console.log(`   üìã –ü—Ä–æ–±–ª–µ–º—ã –ª–æ–≥–æ–≤: ${issues.logs.length}`);
  console.log(`   üì¶ –ü—Ä–æ–±–ª–µ–º—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: ${issues.dependencies.length}`);
  
  if (issues.recommendations.length > 0) {
    console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    issues.recommendations.forEach(rec => {
      console.log(`   ${rec}`);
    });
  }
  
  // 9. –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞
  const reportContent = {
    timestamp: new Date().toISOString(),
    summary: {
      performanceIssues: issues.performance.length,
      codeQualityIssues: issues.codeQuality.length,
      securityIssues: issues.security.length,
      logIssues: issues.logs.length,
      dependencyIssues: issues.dependencies.length
    },
    details: issues,
    recommendations: issues.recommendations
  };
  
  try {
    fs.writeFileSync('code-audit-report.json', JSON.stringify(reportContent, null, 2));
    console.log('\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ code-audit-report.json');
  } catch (error) {
    console.log(`\n‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: ${error.message}`);
  }
  
  console.log('\n‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
}

comprehensiveCodeAudit();
