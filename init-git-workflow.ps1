# üåø –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ workflow (PowerShell)
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .\init-git-workflow.ps1

Write-Host "üåø –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Git workflow..." -ForegroundColor Green

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if (-not (Test-Path "package.json")) {
    Write-Host "‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞" -ForegroundColor Red
    exit 1
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Git –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
if (-not (Test-Path ".git")) {
    Write-Host "üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π..." -ForegroundColor Yellow
    git init
    git add .
    git commit -m "Initial commit: Domeo project setup"
}

# –°–æ–∑–¥–∞–µ–º –≤–µ—Ç–∫—É develop –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
try {
    git show-ref --verify --quiet refs/heads/develop
    $developExists = $true
} catch {
    $developExists = $false
}

if (-not $developExists) {
    Write-Host "üåø –°–æ–∑–¥–∞–µ–º –≤–µ—Ç–∫—É develop..." -ForegroundColor Yellow
    git checkout -b develop
    git push -u origin develop
}

# –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ develop
git checkout develop

# –°–æ–∑–¥–∞–µ–º .gitignore –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if (-not (Test-Path ".gitignore")) {
    Write-Host "üìù –°–æ–∑–¥–∞–µ–º .gitignore..." -ForegroundColor Yellow
    @"
# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Next.js
.next/
out/
build/

# Environment variables
.env.local
.env.development.local
.env.test.local
.env.production.local

# Database
*.db
*.sqlite
*.sqlite3

# Logs
logs/
*.log

# Runtime data
pids/
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/

# nyc test coverage
.nyc_output

# Dependency directories
node_modules/
jspm_packages/

# Optional npm cache directory
.npm

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# next.js build output
.next

# nuxt.js build output
.nuxt

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Backup files
*.backup.*
*.bak
*.tar.gz

# SSH keys
*.pem
*.key
staging_key
production_key

# Temporary files
tmp/
temp/
"@ | Out-File -FilePath ".gitignore" -Encoding UTF8
}

# –î–æ–±–∞–≤–ª—è–µ–º .gitignore
git add .gitignore
git commit -m "Add .gitignore" -ErrorAction SilentlyContinue

# –°–æ–∑–¥–∞–µ–º README –¥–ª—è workflow
if (-not (Test-Path "README.md")) {
    Write-Host "üìñ –°–æ–∑–¥–∞–µ–º README.md..." -ForegroundColor Yellow
    @"
# üè† Domeo - –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–≤–µ—Ä–µ–π

## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

### –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞:
``````bash
# Windows
.\dev-safe.ps1

# Linux/Mac
./dev-safe.sh
``````

### –î–µ–ø–ª–æ–π –Ω–∞ staging:
``````bash
./deploy-staging-safe.sh
``````

### –î–µ–ø–ª–æ–π –Ω–∞ production:
``````bash
./deploy-production-safe.sh
``````

## üìã Workflow

1. **–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞** - —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ feature –≤–µ—Ç–∫–∏ –æ—Ç `develop`
2. **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ** - –º–µ—Ä–∂–∏—Ç–µ –≤ `develop` –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ staging
3. **Production** - –º–µ—Ä–∂–∏—Ç–µ `develop` –≤ `main` –∏ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ç–µ–≥–∏

## üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

- –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∫–æ–º–º–∏—Ç—å—Ç–µ –Ω–∞–ø—Ä—è–º—É—é –≤ `main`
- –í—Å–µ–≥–¥–∞ —Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ staging –ø–µ—Ä–µ–¥ production
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–≥–∏ –¥–ª—è production —Ä–µ–ª–∏–∑–æ–≤

## üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

- [–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π Workflow](SAFE_WORKFLOW.md)
- [GitHub Workflow](GITHUB_WORKFLOW.md)
"@ | Out-File -FilePath "README.md" -Encoding UTF8
}

# –î–æ–±–∞–≤–ª—è–µ–º README
git add README.md
git commit -m "Add README with workflow documentation" -ErrorAction SilentlyContinue

Write-Host "‚úÖ Git workflow –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!" -ForegroundColor Green
Write-Host ""
Write-Host "üåø –í–µ—Ç–∫–∏:" -ForegroundColor Cyan
Write-Host "  - main (production)" -ForegroundColor White
Write-Host "  - develop (staging)" -ForegroundColor White
Write-Host ""
Write-Host "üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:" -ForegroundColor Cyan
Write-Host "  1. git remote add origin <your-github-repo-url>" -ForegroundColor White
Write-Host "  2. git push -u origin main" -ForegroundColor White
Write-Host "  3. git push -u origin develop" -ForegroundColor White
Write-Host "  4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ GitHub Actions secrets:" -ForegroundColor White
Write-Host "     - STAGING_HOST" -ForegroundColor Gray
Write-Host "     - STAGING_SSH_KEY" -ForegroundColor Gray
Write-Host "     - PROD_HOST" -ForegroundColor Gray
Write-Host "     - PROD_SSH_KEY" -ForegroundColor Gray
Write-Host ""
Write-Host "üìã –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å feature –≤–µ—Ç–∫–∏:" -ForegroundColor Cyan
Write-Host "  git checkout -b feature/new-feature" -ForegroundColor White
