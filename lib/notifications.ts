import { prisma } from '@/lib/prisma';

export interface NotificationData {
  userId: string;
  clientId?: string;
  documentId?: string;
  type: string;
  title: string;
  message: string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
export async function createNotification(data: NotificationData) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ: –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ç–∞–∫–æ–µ –∂–µ —É–∂–µ –µ—Å—Ç—å
    // –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ —É—á–∏—Ç—ã–≤–∞–µ–º title –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–∞
    const whereClause: any = {
      user_id: data.userId,
      document_id: data.documentId || null,
      type: data.type,
      is_read: false,
      created_at: {
        gte: new Date(Date.now() - 5 * 60 * 1000) // –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
      }
    };
    
    // –ï—Å–ª–∏ type —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞—Ç—É—Å (—Ñ–æ—Ä–º–∞—Ç "documentType:status"), –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–∫–∂–µ title –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    if (data.type.includes(':')) {
      whereClause.title = data.title;
    }
    
    const existingNotification = await prisma.notification.findFirst({
      where: whereClause
    });

    if (existingNotification) {
      console.log('‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ:', {
        userId: data.userId,
        documentId: data.documentId,
        type: data.type
      });
      return existingNotification;
    }

    const notification = await prisma.notification.create({
      data: {
        user_id: data.userId,
        client_id: data.clientId || null,
        document_id: data.documentId || null,
        type: data.type,
        title: data.title,
        message: data.message,
        created_at: new Date()
      }
    });

    console.log('üì¢ Notification created:', notification);
    return notification;
  } catch (error) {
    console.error('Error creating notification:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ä–æ–ª—å—é
export async function notifyUsersByRole(role: string, data: Omit<NotificationData, 'userId'>) {
  try {
    const roleUpperCase = role.toUpperCase();
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º case-insensitive –ø–æ–∏—Å–∫: –ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏, –ø–æ—Ç–æ–º —Å—Ç—Ä–æ—á–Ω—ã–º–∏
    let users = await prisma.user.findMany({
      where: { 
        role: roleUpperCase,
        is_active: true
      },
      select: { 
        id: true,
        email: true 
      }
    });

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –∏—Å–∫–∞—Ç—å —Å—Ç—Ä–æ—á–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏
    if (users.length === 0 && roleUpperCase !== role.toLowerCase()) {
      users = await prisma.user.findMany({
        where: { 
          role: role.toLowerCase(),
          is_active: true
        },
        select: { 
          id: true,
          email: true 
        }
      });
    }

    console.log(`üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ ${roleUpperCase}: –Ω–∞–π–¥–µ–Ω–æ ${users.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    if (users.length === 0) {
      console.warn(`‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é ${roleUpperCase} (–ø—Ä–æ–±–æ–≤–∞–ª–∏ —Ç–∞–∫–∂–µ ${role.toLowerCase()}). –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.`);
      return [];
    }

    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è "${data.title}" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:`, users.map(u => u.email).join(', '));

    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const notifications = await Promise.all(
      users.map(user => 
        createNotification({
          ...data,
          userId: user.id
        })
      )
    );

    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ ${notifications.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ä–æ–ª–∏ ${roleUpperCase}`);
    return notifications;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–æ–ª–∏:', role, error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
export async function notifyUser(userId: string, data: Omit<NotificationData, 'userId'>) {
  return createNotification({
    ...data,
    userId
  });
}
