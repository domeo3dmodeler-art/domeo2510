import { PrismaClient } from '@prisma/client';
import { 
  CANONICAL_PROPERTIES, 
  normalizeProperties, 
  normalizePropertyName,
  PartialUpdateOptions,
  UPDATE_MODES,
  CanonicalPropertyValue 
} from './canonical-properties';

const prisma = new PrismaClient();

export interface ProductUpdateResult {
  success: boolean;
  updated: number;
  errors: string[];
  warnings: string[];
  details: {
    productId: string;
    sku: string;
    updatedProperties: string[];
    skippedProperties: string[];
  }[];
}

export class ProductPartialUpdateService {
  
  /**
   * –ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–∞
   * @param fileBuffer - Buffer Excel —Ñ–∞–π–ª–∞
   * @param options - –û–ø—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  async updateFromExcel(
    fileBuffer: Buffer,
    options: PartialUpdateOptions = {
      updateMode: UPDATE_MODES.MERGE,
      skipEmptyValues: true,
      validateBeforeUpdate: true
    }
  ): Promise<ProductUpdateResult> {
    try {
      const XLSX = require('xlsx');
      
      // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
      const workbook = XLSX.read(fileBuffer, { type: 'buffer' });
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
      
      if (jsonData.length === 0) {
        return {
          success: false,
          updated: 0,
          errors: ['–§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö'],
          warnings: [],
          details: []
        };
      }
      
      // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏
      const headers = jsonData[0] as string[];
      const rows = jsonData.slice(1) as any[][];
      
      console.log('üìä –ó–∞–≥–æ–ª–æ–≤–∫–∏ Excel:', headers);
      console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫:', rows.length);
      
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
      const normalizedHeaders = headers.map(header => ({
        original: header,
        canonical: normalizePropertyName(header),
        index: headers.indexOf(header)
      }));
      
      console.log('üîß –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏:', normalizedHeaders);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
      const skuIndex = normalizedHeaders.findIndex(h => 
        h.canonical === CANONICAL_PROPERTIES.SKU || 
        h.canonical === CANONICAL_PROPERTIES.SUPPLIER_SKU
      );
      
      if (skuIndex === -1) {
        return {
          success: false,
          updated: 0,
          errors: ['–ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º —Ç–æ–≤–∞—Ä–∞ (SKU –∏–ª–∏ –ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞)'],
          warnings: [],
          details: []
        };
      }
      
      const results: ProductUpdateResult = {
        success: true,
        updated: 0,
        errors: [],
        warnings: [],
        details: []
      };
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
      for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {
        const row = rows[rowIndex];
        
        if (!row || row.length === 0) continue;
        
        try {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º SKU –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞
          const skuValue = row[skuIndex];
          if (!skuValue) {
            results.warnings.push(`–°—Ç—Ä–æ–∫–∞ ${rowIndex + 2}: –ü—É—Å—Ç–æ–π SKU, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            continue;
          }
          
          const sku = skuValue.toString().trim();
          console.log(`\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞ —Å SKU: ${sku}`);
          
          // –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ –ë–î
          const product = await prisma.product.findFirst({
            where: {
              OR: [
                { sku: sku },
                { 
                  properties_data: {
                    path: ['supplier_sku'],
                    equals: sku
                  }
                },
                {
                  properties_data: {
                    path: ['–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'],
                    equals: sku
                  }
                }
              ]
            }
          });
          
          if (!product) {
            results.warnings.push(`–¢–æ–≤–∞—Ä —Å SKU "${sku}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î`);
            continue;
          }
          
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: ${product.name} (ID: ${product.id})`);
          
          // –°–æ–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          const updates: Record<string, any> = {};
          const updatedProperties: string[] = [];
          const skippedProperties: string[] = [];
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–æ–ª–æ–Ω–∫—É
          for (const headerInfo of normalizedHeaders) {
            if (!headerInfo.canonical) {
              skippedProperties.push(headerInfo.original);
              continue;
            }
            
            const value = row[headerInfo.index];
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –≤ –æ–ø—Ü–∏—è—Ö
            if (options.skipEmptyValues && (!value || value === '')) {
              skippedProperties.push(headerInfo.original);
              continue;
            }
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–ª—è
            if (this.isSystemField(headerInfo.canonical)) {
              skippedProperties.push(headerInfo.original);
              continue;
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            const processedValue = this.processValue(value, headerInfo.canonical);
            updates[headerInfo.canonical] = processedValue;
            updatedProperties.push(headerInfo.original);
          }
          
          console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è ${sku}:`, updates);
          console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–≤–æ–π—Å—Ç–≤: ${updatedProperties.length}`);
          console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–≤–æ–π—Å—Ç–≤: ${skippedProperties.length}`);
          
          // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
          let finalPropertiesData = product.properties_data;
          
          if (typeof finalPropertiesData === 'string') {
            try {
              finalPropertiesData = JSON.parse(finalPropertiesData);
            } catch (e) {
              finalPropertiesData = {};
            }
          }
          
          switch (options.updateMode) {
            case UPDATE_MODES.REPLACE:
              finalPropertiesData = updates;
              break;
              
            case UPDATE_MODES.MERGE:
              finalPropertiesData = { ...finalPropertiesData, ...updates };
              break;
              
            case UPDATE_MODES.SELECTIVE:
              if (options.selectedProperties) {
                const selectiveUpdates: Record<string, any> = {};
                options.selectedProperties.forEach(prop => {
                  if (updates[prop] !== undefined) {
                    selectiveUpdates[prop] = updates[prop];
                  }
                });
                finalPropertiesData = { ...finalPropertiesData, ...selectiveUpdates };
              } else {
                finalPropertiesData = { ...finalPropertiesData, ...updates };
              }
              break;
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –ë–î
          await prisma.product.update({
            where: { id: product.id },
            data: {
              properties_data: JSON.stringify(finalPropertiesData),
              updated_at: new Date()
            }
          });
          
          results.updated++;
          results.details.push({
            productId: product.id,
            sku: sku,
            updatedProperties: updatedProperties,
            skippedProperties: skippedProperties
          });
          
          console.log(`‚úÖ –¢–æ–≤–∞—Ä ${sku} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`);
          
        } catch (error) {
          const errorMsg = `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ ${rowIndex + 2}: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
          results.errors.push(errorMsg);
          console.error(errorMsg);
        }
      }
      
      console.log(`\nüìä –ò–¢–û–ì–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø:`);
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${results.updated}`);
      console.log(`‚ùå –û—à–∏–±–æ–∫: ${results.errors.length}`);
      console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${results.warnings.length}`);
      
      return results;
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
      return {
        success: false,
        updated: 0,
        errors: [error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'],
        warnings: [],
        details: []
      };
    }
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª–µ —Å–∏—Å—Ç–µ–º–Ω—ã–º
   */
  private isSystemField(canonicalName: CanonicalPropertyValue): boolean {
    const systemFields = [
      CANONICAL_PROPERTIES.CREATED_AT,
      CANONICAL_PROPERTIES.UPDATED_AT,
      CANONICAL_PROPERTIES.IS_ACTIVE
    ];
    
    return systemFields.includes(canonicalName);
  }
  
  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–ª—è
   */
  private processValue(value: any, canonicalName: CanonicalPropertyValue): any {
    if (value === null || value === undefined) {
      return null;
    }
    
    const stringValue = value.toString().trim();
    
    // –ß–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
    const numericFields = [
      CANONICAL_PROPERTIES.BASE_PRICE,
      CANONICAL_PROPERTIES.RETAIL_PRICE,
      CANONICAL_PROPERTIES.WHOLESALE_PRICE,
      CANONICAL_PROPERTIES.STOCK_QUANTITY,
      CANONICAL_PROPERTIES.WIDTH,
      CANONICAL_PROPERTIES.HEIGHT,
      CANONICAL_PROPERTIES.THICKNESS,
      CANONICAL_PROPERTIES.WEIGHT,
      CANONICAL_PROPERTIES.DEPTH
    ];
    
    if (numericFields.includes(canonicalName)) {
      const numValue = parseFloat(stringValue.replace(/[^\d.,]/g, '').replace(',', '.'));
      return isNaN(numValue) ? 0 : numValue;
    }
    
    // –ë—É–ª–µ–≤—ã –ø–æ–ª—è
    const booleanFields = [
      CANONICAL_PROPERTIES.IS_ACTIVE,
      CANONICAL_PROPERTIES.GLASS,
      CANONICAL_PROPERTIES.EDGE,
      CANONICAL_PROPERTIES.MOLDING
    ];
    
    if (booleanFields.includes(canonicalName)) {
      const lowerValue = stringValue.toLowerCase();
      return lowerValue === '–¥–∞' || lowerValue === 'yes' || lowerValue === 'true' || lowerValue === '1';
    }
    
    // –ü–æ–ª—è —Å –¥–∞—Ç–∞–º–∏
    const dateFields = [
      CANONICAL_PROPERTIES.VALID_FROM,
      CANONICAL_PROPERTIES.VALID_TO,
      CANONICAL_PROPERTIES.CREATED_AT,
      CANONICAL_PROPERTIES.UPDATED_AT
    ];
    
    if (dateFields.includes(canonicalName)) {
      try {
        return new Date(stringValue).toISOString();
      } catch {
        return stringValue;
      }
    }
    
    // –ú–∞—Å—Å–∏–≤—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–æ—Ç–æ)
    if (canonicalName === CANONICAL_PROPERTIES.PHOTOS) {
      if (typeof stringValue === 'string' && stringValue.includes(',')) {
        return stringValue.split(',').map((url: string) => url.trim()).filter(Boolean);
      }
      return [stringValue];
    }
    
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
    return stringValue;
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω Excel –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  async createUpdateTemplate(
    categoryId: string,
    selectedProperties: CanonicalPropertyValue[] = []
  ): Promise<Buffer> {
    try {
      const XLSX = require('xlsx');
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
      const products = await prisma.product.findMany({
        where: {
          catalog_category_id: categoryId,
          is_active: true
        },
        take: 5,
        select: {
          sku: true,
          properties_data: true
        }
      });
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
      const templateProperties = selectedProperties.length > 0 
        ? selectedProperties 
        : [
            CANONICAL_PROPERTIES.SKU,
            CANONICAL_PROPERTIES.SUPPLIER_SKU,
            CANONICAL_PROPERTIES.BASE_PRICE,
            CANONICAL_PROPERTIES.RETAIL_PRICE,
            CANONICAL_PROPERTIES.STOCK_QUANTITY,
            CANONICAL_PROPERTIES.STYLE,
            CANONICAL_PROPERTIES.COATING_TYPE,
            CANONICAL_PROPERTIES.COATING_COLOR,
            CANONICAL_PROPERTIES.WIDTH,
            CANONICAL_PROPERTIES.HEIGHT
          ];
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
      const headers = templateProperties.map(prop => {
        const displayName = this.getDisplayName(prop);
        return `${displayName} (${prop})`;
      });
      
      // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
      const data = [headers];
      
      products.forEach(product => {
        const properties = typeof product.properties_data === 'string' 
          ? JSON.parse(product.properties_data) 
          : product.properties_data;
        
        const row = templateProperties.map(prop => {
          return properties[prop] || '';
        });
        
        data.push(row);
      });
      
      // –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
      const worksheet = XLSX.utils.aoa_to_sheet(data);
      const workbook = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(workbook, worksheet, '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤');
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Buffer
      const buffer = XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' });
      
      return buffer;
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞:', error);
      throw error;
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
   */
  private getDisplayName(canonicalName: CanonicalPropertyValue): string {
    const displayNames: Record<CanonicalPropertyValue, string> = {
      [CANONICAL_PROPERTIES.SKU]: '–ê—Ä—Ç–∏–∫—É–ª',
      [CANONICAL_PROPERTIES.SUPPLIER_SKU]: '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
      [CANONICAL_PROPERTIES.BASE_PRICE]: '–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞',
      [CANONICAL_PROPERTIES.RETAIL_PRICE]: '–†–æ–∑–Ω–∏—á–Ω–∞—è —Ü–µ–Ω–∞',
      [CANONICAL_PROPERTIES.STOCK_QUANTITY]: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ',
      [CANONICAL_PROPERTIES.STYLE]: '–°—Ç–∏–ª—å',
      [CANONICAL_PROPERTIES.COATING_TYPE]: '–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è',
      [CANONICAL_PROPERTIES.COATING_COLOR]: '–¶–≤–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏—è',
      [CANONICAL_PROPERTIES.WIDTH]: '–®–∏—Ä–∏–Ω–∞ (–º–º)',
      [CANONICAL_PROPERTIES.HEIGHT]: '–í—ã—Å–æ—Ç–∞ (–º–º)'
    };
    
    return displayNames[canonicalName] || canonicalName;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const productPartialUpdateService = new ProductPartialUpdateService();
