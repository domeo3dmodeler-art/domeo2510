// –°–∏—Å—Ç–µ–º–∞ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤ –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è DOMEO
// –ö–∞–∂–¥—ã–π —à–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏–º–ø–æ—Ä—Ç–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é

export interface CanonicalTemplateField {
  canonicalName: string;        // –ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "supplier_sku")
  displayName: string;          // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
  dataType: 'string' | 'number' | 'boolean' | 'date' | 'array';
  isRequired: boolean;          // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
  isUnique: boolean;           // –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ (–¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤)
  validationRules?: {
    minLength?: number;
    maxLength?: number;
    minValue?: number;
    maxValue?: number;
    pattern?: string;
    allowedValues?: string[];
  };
  unit?: string;               // –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è (–º–º, —Ä—É–±, –∫–≥)
  description?: string;        // –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—è
}

export interface CanonicalImportTemplate {
  id: string;
  catalogCategoryId: string;
  name: string;
  description?: string;
  fields: CanonicalTemplateField[];
  updateMode: 'replace' | 'merge' | 'add_new';  // –†–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  createdAt: Date;
  updatedAt: Date;
  createdBy: string;           // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ —à–∞–±–ª–æ–Ω
}

export interface ImportResult {
  success: boolean;
  imported: number;
  updated: number;
  errors: string[];
  warnings: string[];
  details: {
    productId: string;
    sku: string;
    action: 'created' | 'updated' | 'skipped';
    errors?: string[];
  }[];
}

export class CanonicalImportService {
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π —à–∞–±–ª–æ–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏–º–ø–æ—Ä—Ç–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
   */
  async createTemplateFromExcel(
    fileBuffer: Buffer,
    catalogCategoryId: string,
    userId: string,
    templateName: string
  ): Promise<{ template: CanonicalImportTemplate; analysis: any }> {
    try {
      const XLSX = require('xlsx');
      
      // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
      const workbook = XLSX.read(fileBuffer, { type: 'buffer' });
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
      
      if (jsonData.length === 0) {
        throw new Error('–§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö');
      }
      
      // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏
      const headers = jsonData[0] as string[];
      const rows = jsonData.slice(1) as any[][];
      
      console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∏–∑ Excel:');
      console.log('–ó–∞–≥–æ–ª–æ–≤–∫–∏:', headers);
      console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫:', rows.length);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–æ–ª–æ–Ω–∫—É
      const fieldAnalysis = headers.map((header, index) => {
        const columnData = rows.map(row => row[index]).filter(val => val !== undefined && val !== '');
        const nonEmptyCount = columnData.length;
        const fillRate = nonEmptyCount / rows.length;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
        const dataType = this.detectDataType(columnData);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º (–¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤)
        const uniqueValues = new Set(columnData.map(val => val.toString().trim()));
        const isUnique = uniqueValues.size === nonEmptyCount && fillRate > 0.8;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º
        const isRequired = fillRate > 0.9; // –ï—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤ 90%+ —Å—Ç—Ä–æ–∫
        
        return {
          header,
          index,
          dataType,
          fillRate,
          isRequired,
          isUnique,
          sampleValues: columnData.slice(0, 5),
          nonEmptyCount,
          totalRows: rows.length
        };
      });
      
      console.log('üîç –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π:', fieldAnalysis);
      
      // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
      const canonicalFields: CanonicalTemplateField[] = fieldAnalysis.map((analysis, index) => {
        const canonicalName = this.generateCanonicalName(analysis.header, index);
        
        return {
          canonicalName,
          displayName: analysis.header,
          dataType: analysis.dataType,
          isRequired: analysis.isRequired,
          isUnique: analysis.isUnique,
          validationRules: this.generateValidationRules(analysis),
          unit: this.detectUnit(analysis.header),
          description: this.generateDescription(analysis)
        };
      });
      
      // –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω
      const template: CanonicalImportTemplate = {
        id: `template_${catalogCategoryId}_${Date.now()}`,
        catalogCategoryId,
        name: templateName,
        description: `–®–∞–±–ª–æ–Ω –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${catalogCategoryId}`,
        fields: canonicalFields,
        updateMode: 'merge',
        createdAt: new Date(),
        updatedAt: new Date(),
        createdBy: userId
      };
      
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π —à–∞–±–ª–æ–Ω:', template);
      
      return {
        template,
        analysis: {
          totalFields: canonicalFields.length,
          requiredFields: canonicalFields.filter(f => f.isRequired).length,
          uniqueFields: canonicalFields.filter(f => f.isUnique).length,
          fieldAnalysis
        }
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞:', error);
      throw error;
    }
  }
  
  /**
   * –ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–º—É —à–∞–±–ª–æ–Ω—É
   */
  async importWithTemplate(
    fileBuffer: Buffer,
    template: CanonicalImportTemplate,
    updateMode: 'replace' | 'merge' | 'add_new' = 'merge'
  ): Promise<ImportResult> {
    try {
      const XLSX = require('xlsx');
      
      // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
      const workbook = XLSX.read(fileBuffer, { type: 'buffer' });
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
      
      if (jsonData.length === 0) {
        return {
          success: false,
          imported: 0,
          updated: 0,
          errors: ['–§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö'],
          warnings: [],
          details: []
        };
      }
      
      // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏
      const headers = jsonData[0] as string[];
      const rows = jsonData.slice(1) as any[][];
      
      console.log('üìä –ò–º–ø–æ—Ä—Ç –ø–æ —à–∞–±–ª–æ–Ω—É:');
      console.log('–ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ñ–∞–π–ª–∞:', headers);
      console.log('–ü–æ–ª—è —à–∞–±–ª–æ–Ω–∞:', template.fields.map(f => f.displayName));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —à–∞–±–ª–æ–Ω—É
      const validationResult = this.validateHeadersAgainstTemplate(headers, template);
      if (!validationResult.isValid) {
        return {
          success: false,
          imported: 0,
          updated: 0,
          errors: validationResult.errors,
          warnings: validationResult.warnings,
          details: []
        };
      }
      
      // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫ –Ω–∞ –ø–æ–ª—è —à–∞–±–ª–æ–Ω–∞
      const columnMapping = this.createColumnMapping(headers, template);
      
      console.log('üîó –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫:', columnMapping);
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–æ–±—ã—á–Ω–æ SKU)
      const searchField = template.fields.find(f => f.isUnique);
      if (!searchField) {
        return {
          success: false,
          imported: 0,
          updated: 0,
          errors: ['–í —à–∞–±–ª–æ–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤'],
          warnings: [],
          details: []
        };
      }
      
      const searchColumnIndex = columnMapping[searchField.canonicalName];
      if (searchColumnIndex === undefined) {
        return {
          success: false,
          imported: 0,
          updated: 0,
          errors: [`–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è –ø–æ–ª—è "${searchField.displayName}"`],
          warnings: [],
          details: []
        };
      }
      
      const results: ImportResult = {
        success: true,
        imported: 0,
        updated: 0,
        errors: [],
        warnings: [],
        details: []
      };
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
      for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {
        const row = rows[rowIndex];
        
        if (!row || row.length === 0) continue;
        
        try {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞
          const searchValue = row[searchColumnIndex];
          if (!searchValue) {
            results.warnings.push(`–°—Ç—Ä–æ–∫–∞ ${rowIndex + 2}: –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            continue;
          }
          
          const searchValueStr = searchValue.toString().trim();
          console.log(`\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞: ${searchValueStr}`);
          
          // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ —à–∞–±–ª–æ–Ω—É
          const productData: Record<string, any> = {};
          const validationErrors: string[] = [];
          
          for (const field of template.fields) {
            const columnIndex = columnMapping[field.canonicalName];
            if (columnIndex === undefined) {
              if (field.isRequired) {
                validationErrors.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ "${field.displayName}"`);
              }
              continue;
            }
            
            const value = row[columnIndex];
            
            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            const validationResult = this.validateFieldValue(value, field);
            if (!validationResult.isValid) {
              validationErrors.push(...validationResult.errors);
              if (field.isRequired) {
                continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ
              }
            }
            
            productData[field.canonicalName] = validationResult.processedValue;
          }
          
          if (validationErrors.length > 0) {
            results.warnings.push(`–°—Ç—Ä–æ–∫–∞ ${rowIndex + 2}: ${validationErrors.join(', ')}`);
            if (validationErrors.some(err => err.includes('–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ'))) {
              continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ—à–∏–±–∫–∞–º–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            }
          }
          
          // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä
          const existingProduct = await this.findProductBySearchField(
            searchValueStr, 
            searchField.canonicalName,
            template.catalogCategoryId
          );
          
          if (existingProduct) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä
            const updateResult = await this.updateExistingProduct(
              existingProduct.id,
              productData,
              updateMode
            );
            
            results.updated++;
            results.details.push({
              productId: existingProduct.id,
              sku: searchValueStr,
              action: 'updated',
              errors: updateResult.errors
            });
            
            console.log(`‚úÖ –¢–æ–≤–∞—Ä ${searchValueStr} –æ–±–Ω–æ–≤–ª–µ–Ω`);
            
          } else if (updateMode !== 'replace') {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
            const createResult = await this.createNewProduct(
              productData,
              template.catalogCategoryId
            );
            
            results.imported++;
            results.details.push({
              productId: createResult.id,
              sku: searchValueStr,
              action: 'created',
              errors: createResult.errors
            });
            
            console.log(`‚úÖ –¢–æ–≤–∞—Ä ${searchValueStr} —Å–æ–∑–¥–∞–Ω`);
            
          } else {
            results.warnings.push(`–°—Ç—Ä–æ–∫–∞ ${rowIndex + 2}: –¢–æ–≤–∞—Ä "${searchValueStr}" –Ω–µ –Ω–∞–π–¥–µ–Ω (—Ä–µ–∂–∏–º –∑–∞–º–µ–Ω—ã)`);
          }
          
        } catch (error) {
          const errorMsg = `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ ${rowIndex + 2}: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
          results.errors.push(errorMsg);
          console.error(errorMsg);
        }
      }
      
      console.log(`\nüìä –ò–¢–û–ì–ò –ò–ú–ü–û–†–¢–ê:`);
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${results.imported}`);
      console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${results.updated}`);
      console.log(`‚ùå –û—à–∏–±–æ–∫: ${results.errors.length}`);
      console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${results.warnings.length}`);
      
      return results;
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:', error);
      return {
        success: false,
        imported: 0,
        updated: 0,
        errors: [error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'],
        warnings: [],
        details: []
      };
    }
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
   */
  private generateCanonicalName(displayName: string, index: number): string {
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    let canonical = displayName
      .toLowerCase()
      .replace(/[^a-z–∞-—è0-9\s]/g, '') // –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
      .replace(/\s+/g, '_')           // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
      .replace(/[–∞-—è]/g, (char) => {  // –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        const map: Record<string, string> = {
          '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
          '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
          '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
          '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
          '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
        };
        return map[char] || char;
      });
    
    // –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—É—Å—Ç—ã–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å
    if (!canonical) {
      canonical = `field_${index + 1}`;
    }
    
    return canonical;
  }
  
  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º
   */
  private detectDataType(values: any[]): 'string' | 'number' | 'boolean' | 'date' | 'array' {
    if (values.length === 0) return 'string';
    
    const sampleValues = values.slice(0, 10);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —á–∏—Å–ª–∞
    const numericCount = sampleValues.filter(val => {
      const str = val.toString().trim();
      return !isNaN(parseFloat(str)) && isFinite(parseFloat(str));
    }).length;
    
    if (numericCount / sampleValues.length > 0.8) {
      return 'number';
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–∞—Ç—ã
    const dateCount = sampleValues.filter(val => {
      const date = new Date(val);
      return !isNaN(date.getTime());
    }).length;
    
    if (dateCount / sampleValues.length > 0.8) {
      return 'date';
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±—É–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è
    const booleanCount = sampleValues.filter(val => {
      const str = val.toString().toLowerCase().trim();
      return ['–¥–∞', '–Ω–µ—Ç', 'yes', 'no', 'true', 'false', '1', '0'].includes(str);
    }).length;
    
    if (booleanCount / sampleValues.length > 0.8) {
      return 'boolean';
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–∞—Å—Å–∏–≤—ã
    const arrayCount = sampleValues.filter(val => {
      return Array.isArray(val) || (typeof val === 'string' && val.includes(','));
    }).length;
    
    if (arrayCount / sampleValues.length > 0.8) {
      return 'array';
    }
    
    return 'string';
  }
  
  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–æ–ª—è
   */
  private detectUnit(header: string): string | undefined {
    const lowerHeader = header.toLowerCase();
    
    if (lowerHeader.includes('—Ü–µ–Ω–∞') || lowerHeader.includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å')) {
      return '—Ä—É–±';
    }
    if (lowerHeader.includes('—à–∏—Ä–∏–Ω–∞') || lowerHeader.includes('–≤—ã—Å–æ—Ç–∞') || 
        lowerHeader.includes('—Ç–æ–ª—â–∏–Ω–∞') || lowerHeader.includes('/–º–º')) {
      return '–º–º';
    }
    if (lowerHeader.includes('–≤–µ—Å') || lowerHeader.includes('–º–∞—Å—Å–∞')) {
      return '–∫–≥';
    }
    if (lowerHeader.includes('–æ–±—ä–µ–º') || lowerHeader.includes('–ª–∏—Ç—Ä')) {
      return '–ª';
    }
    
    return undefined;
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—è
   */
  private generateValidationRules(analysis: any): any {
    const rules: any = {};
    
    if (analysis.dataType === 'string') {
      const maxLength = Math.max(...analysis.sampleValues.map((v: any) => v.toString().length));
      rules.maxLength = Math.min(maxLength * 2, 1000); // –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤
    }
    
    if (analysis.dataType === 'number') {
      const values = analysis.sampleValues.map((v: any) => parseFloat(v.toString()));
      const minValue = Math.min(...values);
      const maxValue = Math.max(...values);
      
      if (minValue >= 0) {
        rules.minValue = 0;
      }
      rules.maxValue = maxValue * 2; // –î–æ–ø—É—Å–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ
    }
    
    return rules;
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—è
   */
  private generateDescription(analysis: any): string {
    const dataType = analysis.dataType;
    const fillRate = Math.round(analysis.fillRate * 100);
    
    return `${dataType} –ø–æ–ª–µ, –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤ ${fillRate}% —Å—Ç—Ä–æ–∫`;
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ñ–∞–π–ª–∞ —à–∞–±–ª–æ–Ω—É
   */
  private validateHeadersAgainstTemplate(
    headers: string[], 
    template: CanonicalImportTemplate
  ): { isValid: boolean; errors: string[]; warnings: string[] } {
    const errors: string[] = [];
    const warnings: string[] = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    for (const field of template.fields) {
      if (field.isRequired) {
        const found = headers.some(header => 
          header.trim().toLowerCase() === field.displayName.trim().toLowerCase()
        );
        
        if (!found) {
          errors.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ "${field.displayName}"`);
        }
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è (–Ω–µ –∏–∑ —à–∞–±–ª–æ–Ω–∞)
    for (const header of headers) {
      const found = template.fields.some(field => 
        field.displayName.trim().toLowerCase() === header.trim().toLowerCase()
      );
      
      if (!found) {
        warnings.push(`–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ–µ –ø–æ–ª–µ "${header}", –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —à–∞–±–ª–æ–Ω`);
      }
    }
    
    return {
      isValid: errors.length === 0,
      errors,
      warnings
    };
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫ –Ω–∞ –ø–æ–ª—è —à–∞–±–ª–æ–Ω–∞
   */
  private createColumnMapping(headers: string[], template: CanonicalImportTemplate): Record<string, number> {
    const mapping: Record<string, number> = {};
    
    for (const field of template.fields) {
      const index = headers.findIndex(header => 
        header.trim().toLowerCase() === field.displayName.trim().toLowerCase()
      );
      
      if (index !== -1) {
        mapping[field.canonicalName] = index;
      }
    }
    
    return mapping;
  }
  
  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è
   */
  private validateFieldValue(value: any, field: CanonicalTemplateField): {
    isValid: boolean;
    errors: string[];
    processedValue: any;
  } {
    const errors: string[] = [];
    let processedValue = value;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (field.isRequired && (value === undefined || value === null || value === '')) {
      errors.push(`–ü–æ–ª–µ "${field.displayName}" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è`);
      return { isValid: false, errors, processedValue: null };
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    switch (field.dataType) {
      case 'number':
        const numValue = parseFloat(value.toString().replace(',', '.'));
        if (isNaN(numValue)) {
          errors.push(`–ü–æ–ª–µ "${field.displayName}" –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —á–∏—Å–ª–æ`);
        } else {
          processedValue = numValue;
          
          if (field.validationRules?.minValue !== undefined && numValue < field.validationRules.minValue) {
            errors.push(`–ü–æ–ª–µ "${field.displayName}" –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ ${field.validationRules.minValue}`);
          }
          
          if (field.validationRules?.maxValue !== undefined && numValue > field.validationRules.maxValue) {
            errors.push(`–ü–æ–ª–µ "${field.displayName}" –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ ${field.validationRules.maxValue}`);
          }
        }
        break;
        
      case 'boolean':
        const strValue = value.toString().toLowerCase().trim();
        if (['–¥–∞', 'yes', 'true', '1'].includes(strValue)) {
          processedValue = true;
        } else if (['–Ω–µ—Ç', 'no', 'false', '0'].includes(strValue)) {
          processedValue = false;
        } else {
          errors.push(`–ü–æ–ª–µ "${field.displayName}" –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞/–Ω–µ—Ç –∏–ª–∏ true/false`);
        }
        break;
        
      case 'date':
        const dateValue = new Date(value);
        if (isNaN(dateValue.getTime())) {
          errors.push(`–ü–æ–ª–µ "${field.displayName}" –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É`);
        } else {
          processedValue = dateValue.toISOString();
        }
        break;
        
      case 'array':
        if (typeof value === 'string' && value.includes(',')) {
          processedValue = value.split(',').map((item: string) => item.trim()).filter(Boolean);
        } else if (Array.isArray(value)) {
          processedValue = value;
        } else {
          processedValue = [value.toString()];
        }
        break;
        
      default: // string
        processedValue = value.toString().trim();
        
        if (field.validationRules?.minLength && processedValue.length < field.validationRules.minLength) {
          errors.push(`–ü–æ–ª–µ "${field.displayName}" –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ ${field.validationRules.minLength} —Å–∏–º–≤–æ–ª–æ–≤`);
        }
        
        if (field.validationRules?.maxLength && processedValue.length > field.validationRules.maxLength) {
          errors.push(`–ü–æ–ª–µ "${field.displayName}" –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ ${field.validationRules.maxLength} —Å–∏–º–≤–æ–ª–æ–≤`);
        }
        
        if (field.validationRules?.pattern && !new RegExp(field.validationRules.pattern).test(processedValue)) {
          errors.push(`–ü–æ–ª–µ "${field.displayName}" –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±—É–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É`);
        }
        
        if (field.validationRules?.allowedValues && !field.validationRules.allowedValues.includes(processedValue)) {
          errors.push(`–ü–æ–ª–µ "${field.displayName}" –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π: ${field.validationRules.allowedValues.join(', ')}`);
        }
        break;
    }
    
    return {
      isValid: errors.length === 0,
      errors,
      processedValue
    };
  }
  
  /**
   * –ò—â–µ—Ç —Ç–æ–≤–∞—Ä –ø–æ –ø–æ–ª—é –ø–æ–∏—Å–∫–∞
   */
  private async findProductBySearchField(
    searchValue: string,
    searchFieldName: string,
    categoryId: string
  ): Promise<any> {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –ë–î
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    return null;
  }
  
  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä
   */
  private async updateExistingProduct(
    productId: string,
    productData: Record<string, any>,
    updateMode: 'replace' | 'merge' | 'add_new'
  ): Promise<{ errors: string[] }> {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ë–î
    return { errors: [] };
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
   */
  private async createNewProduct(
    productData: Record<string, any>,
    categoryId: string
  ): Promise<{ id: string; errors: string[] }> {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤ –ë–î
    return { id: `product_${Date.now()}`, errors: [] };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const canonicalImportService = new CanonicalImportService();
