import { PrismaClient } from '@prisma/client';
import * as XLSX from 'xlsx';

const prisma = new PrismaClient();

export interface SimpleImportResult {
  success: boolean;
  imported: number;
  updated: number;
  errors: string[];
  warnings: string[];
}

export interface SimpleImportOptions {
  skipEmptyValues: boolean;
  validateRequiredFields: boolean;
  updateExisting: boolean;
}

export class SimpleImportService {
  
  /**
   * –ü—Ä–æ—Å—Ç–æ–π –∏–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –º–∞–ø–ø–∏–Ω–≥–∞
   * –ü–æ–ª—è –≤ Excel —Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω—ã —Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –ø–æ–ª—è–º–∏ —à–∞–±–ª–æ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  async importProducts(
    fileBuffer: Buffer,
    catalogCategoryId: string,
    options: SimpleImportOptions = {
      skipEmptyValues: true,
      validateRequiredFields: true,
      updateExisting: true
    }
  ): Promise<SimpleImportResult> {
    
    try {
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∏–º–ø–æ—Ä—Ç –±–µ–∑ –º–∞–ø–ø–∏–Ω–≥–∞');
      
      // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
      const workbook = XLSX.read(fileBuffer, { type: 'buffer' });
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
      
      if (jsonData.length < 2) {
        return {
          success: false,
          imported: 0,
          updated: 0,
          errors: ['–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö'],
          warnings: []
        };
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ
      const headers = jsonData[0] as string[];
      const rows = jsonData.slice(1) as any[][];
      
      console.log('üìä –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ñ–∞–π–ª–∞:', headers);
      console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫:', rows.length);
      
      // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const template = await prisma.importTemplate.findUnique({
        where: { catalog_category_id: catalogCategoryId }
      });
      
      if (!template) {
        return {
          success: false,
          imported: 0,
          updated: 0,
          errors: [`–®–∞–±–ª–æ–Ω –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${catalogCategoryId}`],
          warnings: []
        };
      }
      
      // –ü–∞—Ä—Å–∏–º –ø–æ–ª—è —à–∞–±–ª–æ–Ω–∞
      const requiredFields = JSON.parse(template.required_fields || '[]');
      const calculatorFields = JSON.parse(template.calculator_fields || '[]');
      const exportFields = JSON.parse(template.export_fields || '[]');
      
      console.log('üìã –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:', requiredFields);
      console.log('üìã –ü–æ–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:', calculatorFields);
      console.log('üìã –ü–æ–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:', exportFields);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —à–∞–±–ª–æ–Ω—É
      const missingRequiredFields = requiredFields.filter((field: string) => 
        !headers.includes(field)
      );
      
      if (missingRequiredFields.length > 0) {
        return {
          success: false,
          imported: 0,
          updated: 0,
          errors: [
            `–í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingRequiredFields.join(', ')}`,
            `–ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω—ã —Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –ø–æ–ª—è–º–∏ —à–∞–±–ª–æ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏`
          ],
          warnings: []
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—à–Ω–∏–µ –ø–æ–ª—è
      const extraFields = headers.filter(header => 
        !requiredFields.includes(header) && 
        !calculatorFields.includes(header) && 
        !exportFields.includes(header)
      );
      
      if (extraFields.length > 0) {
        console.log('‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ª–∏—à–Ω–∏–µ –ø–æ–ª—è:', extraFields);
      }
      
      const result: SimpleImportResult = {
        success: true,
        imported: 0,
        updated: 0,
        errors: [],
        warnings: []
      };
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
      for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {
        const row = rows[rowIndex];
        
        try {
          // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏
          const productData: any = {};
          const propertiesData: any = {};
          
          // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
          headers.forEach((header, headerIndex) => {
            const value = row[headerIndex];
            
            if (value !== undefined && value !== null && value !== '') {
              // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è —Ç–æ–≤–∞—Ä–∞
              if (header === '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞' || header === 'SKU') {
                productData.sku = String(value);
              } else if (header === '–ù–∞–∑–≤–∞–Ω–∏–µ' || header === '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ') {
                productData.name = String(value);
              } else if (header === '–¶–µ–Ω–∞' || header === '–¶–µ–Ω–∞ —Ä—Ä—Ü') {
                productData.base_price = parseFloat(String(value)) || 0;
              } else if (header === '–í–∞–ª—é—Ç–∞') {
                productData.currency = String(value) || 'RUB';
              } else if (header === '–ù–∞–ª–∏—á–∏–µ' || header === '–°–∫–ª–∞–¥/–∑–∞–∫–∞–∑') {
                productData.stock_quantity = parseInt(String(value)) || 0;
              } else {
                // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–¥—É—Ç –≤ properties_data
                propertiesData[header] = value;
              }
            }
          });
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
          if (!productData.sku) {
            result.errors.push(`–°—Ç—Ä–æ–∫–∞ ${rowIndex + 2}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—Ä—Ç–∏–∫—É–ª`);
            continue;
          }
          
          if (!productData.name) {
            result.errors.push(`–°—Ç—Ä–æ–∫–∞ ${rowIndex + 2}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ`);
            continue;
          }
          
          if (!productData.base_price || productData.base_price <= 0) {
            result.errors.push(`–°—Ç—Ä–æ–∫–∞ ${rowIndex + 2}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞`);
            continue;
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä
          const existingProduct = await prisma.product.findUnique({
            where: { sku: productData.sku }
          });
          
          if (existingProduct) {
            if (options.updateExisting) {
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä
              await prisma.product.update({
                where: { sku: productData.sku },
                data: {
                  name: productData.name,
                  catalog_category_id: catalogCategoryId,
                  properties_data: JSON.stringify(propertiesData),
                  base_price: productData.base_price,
                  currency: productData.currency,
                  stock_quantity: productData.stock_quantity,
                  updated_at: new Date()
                }
              });
              
              result.updated++;
              result.warnings.push(`–¢–æ–≤–∞—Ä "${productData.sku}" –æ–±–Ω–æ–≤–ª–µ–Ω`);
            } else {
              result.warnings.push(`–¢–æ–≤–∞—Ä "${productData.sku}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—â–µ–Ω`);
            }
          } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
            await prisma.product.create({
              data: {
                sku: productData.sku,
                name: productData.name,
                catalog_category_id: catalogCategoryId,
                properties_data: JSON.stringify(propertiesData),
                base_price: productData.base_price,
                currency: productData.currency,
                stock_quantity: productData.stock_quantity,
                is_active: true
              }
            });
            
            result.imported++;
          }
          
        } catch (error) {
          const errorMsg = `–°—Ç—Ä–æ–∫–∞ ${rowIndex + 2}: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
          result.errors.push(errorMsg);
          console.error(errorMsg, error);
        }
      }
      
      console.log('‚úÖ –ü—Ä–æ—Å—Ç–æ–π –∏–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:', result);
      return result;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞:', error);
      return {
        success: false,
        imported: 0,
        updated: 0,
        errors: [`–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`],
        warnings: []
      };
    }
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω Excel —Ñ–∞–π–ª–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  async createTemplateFile(catalogCategoryId: string): Promise<Buffer> {
    
    const template = await prisma.importTemplate.findUnique({
      where: { catalog_category_id: catalogCategoryId }
    });
    
    if (!template) {
      throw new Error('–®–∞–±–ª–æ–Ω –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    const requiredFields = JSON.parse(template.required_fields || '[]');
    const calculatorFields = JSON.parse(template.calculator_fields || '[]');
    const exportFields = JSON.parse(template.export_fields || '[]');
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø–æ–ª—è
    const allFields = [...requiredFields, ...calculatorFields, ...exportFields];
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = allFields;
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    const exampleData = allFields.map(field => {
      if (field === '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞' || field === 'SKU') return 'EXAMPLE-SKU-001';
      if (field === '–ù–∞–∑–≤–∞–Ω–∏–µ' || field === '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ') return '–ü—Ä–∏–º–µ—Ä —Ç–æ–≤–∞—Ä–∞';
      if (field === '–¶–µ–Ω–∞' || field === '–¶–µ–Ω–∞ —Ä—Ä—Ü') return '1000';
      if (field === '–í–∞–ª—é—Ç–∞') return 'RUB';
      if (field === '–ù–∞–ª–∏—á–∏–µ' || field === '–°–∫–ª–∞–¥/–∑–∞–∫–∞–∑') return '10';
      return '–ü—Ä–∏–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏—è';
    });
    
    // –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
    const worksheet = XLSX.utils.aoa_to_sheet([headers, exampleData]);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, '–¢–æ–≤–∞—Ä—ã');
    
    return XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' });
  }
}

export const simpleImportService = new SimpleImportService();
