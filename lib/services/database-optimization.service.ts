import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

/**
 * –°–µ—Ä–≤–∏—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –í–∫–ª—é—á–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤
 */
export class DatabaseOptimizationService {
  private static instance: DatabaseOptimizationService;
  private queryCache = new Map<string, { data: any; expires: number }>();
  private slowQueryThreshold = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞

  static getInstance(): DatabaseOptimizationService {
    if (!DatabaseOptimizationService.instance) {
      DatabaseOptimizationService.instance = new DatabaseOptimizationService();
    }
    return DatabaseOptimizationService.instance;
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ SQLite –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  async optimizeSQLiteSettings(): Promise<void> {
    try {
      console.log('üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ SQLite...');
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      await prisma.$executeRaw`PRAGMA journal_mode = WAL`;
      await prisma.$executeRaw`PRAGMA synchronous = NORMAL`;
      await prisma.$executeRaw`PRAGMA cache_size = 10000`;
      await prisma.$executeRaw`PRAGMA temp_store = MEMORY`;
      await prisma.$executeRaw`PRAGMA mmap_size = 268435456`;
      await prisma.$executeRaw`PRAGMA optimize`;
      
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SQLite –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ SQLite:', error);
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è JSON –ø–æ–ª–µ–π
   */
  async createVirtualColumns(): Promise<void> {
    try {
      console.log('üîß –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è JSON –ø–æ–ª–µ–π...');
      
      // –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö JSON –ø–æ–ª–µ–π
      const virtualColumns = [
        {
          name: 'style_extracted',
          expression: "json_extract(properties_data, '$.Domeo_–°—Ç–∏–ª—å Web')"
        },
        {
          name: 'model_extracted',
          expression: "json_extract(properties_data, '$.Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web')"
        },
        {
          name: 'color_extracted',
          expression: "json_extract(properties_data, '$.Domeo_–¶–≤–µ—Ç')"
        },
        {
          name: 'finish_extracted',
          expression: "json_extract(properties_data, '$.–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è')"
        },
        {
          name: 'width_extracted',
          expression: "json_extract(properties_data, '$.–®–∏—Ä–∏–Ω–∞/–º–º')"
        },
        {
          name: 'height_extracted',
          expression: "json_extract(properties_data, '$.–í—ã—Å–æ—Ç–∞/–º–º')"
        }
      ];

      for (const column of virtualColumns) {
        try {
          await prisma.$executeRawUnsafe(
            `ALTER TABLE products ADD COLUMN ${column.name} TEXT GENERATED ALWAYS AS (${column.expression}) VIRTUAL`
          );
          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞: ${column.name}`);
        } catch (error) {
          // –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          console.log(`‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ ${column.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        }
      }

      // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
      const indexes = [
        'CREATE INDEX IF NOT EXISTS idx_products_style_virtual ON products(style_extracted)',
        'CREATE INDEX IF NOT EXISTS idx_products_model_virtual ON products(model_extracted)',
        'CREATE INDEX IF NOT EXISTS idx_products_color_virtual ON products(color_extracted)',
        'CREATE INDEX IF NOT EXISTS idx_products_finish_virtual ON products(finish_extracted)',
        'CREATE INDEX IF NOT EXISTS idx_products_width_virtual ON products(width_extracted)',
        'CREATE INDEX IF NOT EXISTS idx_products_height_virtual ON products(height_extracted)'
      ];

      for (const indexQuery of indexes) {
        await prisma.$executeRawUnsafe(indexQuery);
      }

      console.log('‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∏ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫:', error);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫—ç—à–µ
   */
  async updateProductStatsCache(): Promise<void> {
    try {
      console.log('üìä –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤...');
      
      const categories = await prisma.catalogCategory.findMany({
        select: { id: true, name: true }
      });

      for (const category of categories) {
        const stats = await prisma.product.aggregate({
          where: { catalog_category_id: category.id },
          _count: { id: true },
          _min: { base_price: true },
          _max: { base_price: true },
          _avg: { base_price: true }
        });

        const activeStats = await prisma.product.aggregate({
          where: { 
            catalog_category_id: category.id,
            is_active: true 
          },
          _count: { id: true }
        });

        const featuredStats = await prisma.product.aggregate({
          where: { 
            catalog_category_id: category.id,
            is_featured: true,
            is_active: true 
          },
          _count: { id: true }
        });

        await prisma.productStatsCache.upsert({
          where: { id: category.id },
          update: {
            total_products: stats._count.id,
            active_products: activeStats._count.id,
            featured_products: featuredStats._count.id,
            price_min: stats._min.base_price || 0,
            price_max: stats._max.base_price || 0,
            avg_price: stats._avg.base_price || 0,
            last_updated: new Date()
          },
          create: {
            id: category.id,
            catalog_category_id: category.id,
            total_products: stats._count.id,
            active_products: activeStats._count.id,
            featured_products: featuredStats._count.id,
            price_min: stats._min.base_price || 0,
            price_max: stats._max.base_price || 0,
            avg_price: stats._avg.base_price || 0
          }
        });
      }

      console.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç JSON —Å–≤–æ–π—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
   */
  async normalizeProductProperties(): Promise<void> {
    try {
      console.log('üîÑ –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤...');
      
      const products = await prisma.product.findMany({
        select: {
          id: true,
          properties_data: true
        }
      });

      let processedCount = 0;
      for (const product of products) {
        if (!product.properties_data) continue;

        try {
          const properties = typeof product.properties_data === 'string' 
            ? JSON.parse(product.properties_data) 
            : product.properties_data;

          // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
          await prisma.productPropertyValue.deleteMany({
            where: { product_id: product.id }
          });

          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
          const propertyValues = Object.entries(properties).map(([name, value]) => ({
            product_id: product.id,
            property_name: name,
            property_value: String(value),
            property_type: this.detectPropertyType(value)
          }));

          if (propertyValues.length > 0) {
            await prisma.productPropertyValue.createMany({
              data: propertyValues
            });
            processedCount++;
          }
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞ ${product.id}:`, error);
        }
      }

      console.log(`‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ ${processedCount} —Ç–æ–≤–∞—Ä–æ–≤`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–≤–æ–π—Å—Ç–≤:', error);
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–≤–æ–π—Å—Ç–≤–∞ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
   */
  private detectPropertyType(value: any): string {
    if (typeof value === 'number') return 'number';
    if (typeof value === 'boolean') return 'boolean';
    if (value instanceof Date) return 'date';
    return 'string';
  }

  /**
   * –ö—ç—à–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
   */
  async cacheQuery<T>(
    cacheKey: string, 
    queryFn: () => Promise<T>, 
    ttlMinutes: number = 30
  ): Promise<T> {
    const now = Date.now();
    const cached = this.queryCache.get(cacheKey);

    if (cached && cached.expires > now) {
      console.log(`üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –¥–ª—è –∫–ª—é—á–∞: ${cacheKey}`);
      return cached.data;
    }

    console.log(`üîç –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–ª—é—á–∞: ${cacheKey}`);
    const startTime = Date.now();
    
    try {
      const result = await queryFn();
      const executionTime = Date.now() - startTime;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      this.queryCache.set(cacheKey, {
        data: result,
        expires: now + (ttlMinutes * 60 * 1000)
      });

      // –õ–æ–≥–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      if (executionTime > this.slowQueryThreshold) {
        await this.logSlowQuery(cacheKey, executionTime);
      }

      return result;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ ${cacheKey}:`, error);
      throw error;
    }
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
   */
  private async logSlowQuery(queryKey: string, executionTime: number): Promise<void> {
    try {
      await prisma.slowQueryLog.create({
        data: {
          query_text: queryKey,
          execution_time_ms: executionTime,
          rows_affected: 0, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
          created_at: new Date()
        }
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', error);
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à
   */
  async cleanupExpiredCache(): Promise<void> {
    try {
      const now = Date.now();
      let cleanedCount = 0;

      for (const [key, value] of this.queryCache.entries()) {
        if (value.expires <= now) {
          this.queryCache.delete(key);
          cleanedCount++;
        }
      }

      // –û—á–∏—â–∞–µ–º –∫—ç—à –≤ –ë–î
      await prisma.queryCache.deleteMany({
        where: {
          expires_at: {
            lt: new Date()
          }
        }
      });

      console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${cleanedCount} –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  async getPerformanceStats(): Promise<any> {
    try {
      const slowQueries = await prisma.slowQueryLog.findMany({
        orderBy: { execution_time_ms: 'desc' },
        take: 10
      });

      const performanceStats = await prisma.performanceStats.groupBy({
        by: ['table_name', 'operation_type'],
        _avg: { execution_time_ms: true },
        _count: { id: true },
        orderBy: { _avg: { execution_time_ms: 'desc' } }
      });

      const cacheStats = await prisma.queryCache.aggregate({
        _count: { id: true },
        _sum: { hit_count: true }
      });

      return {
        slowQueries,
        performanceStats,
        cacheStats: {
          totalCachedQueries: cacheStats._count.id,
          totalHits: cacheStats._sum.hit_count || 0
        },
        memoryCache: {
          size: this.queryCache.size
        }
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return null;
    }
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∏–Ω–¥–µ–∫—Å—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async optimizeIndexes(): Promise<void> {
    try {
      console.log('üîß –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å—ã...');
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
      await prisma.$executeRaw`ANALYZE`;
      
      // –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      await prisma.$executeRaw`REINDEX`;
      
      console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤:', error);
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async performFullOptimization(): Promise<void> {
    try {
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      
      // 1. –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SQLite
      await this.optimizeSQLiteSettings();
      
      // 2. –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
      await this.createVirtualColumns();
      
      // 3. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
      await this.normalizeProductProperties();
      
      // 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await this.updateProductStatsCache();
      
      // 5. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å—ã
      await this.optimizeIndexes();
      
      // 6. –û—á–∏—â–∞–µ–º –∫—ç—à
      await this.cleanupExpiredCache();
      
      console.log('‚úÖ –ü–æ–ª–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  async getOptimizationRecommendations(): Promise<string[]> {
    const recommendations: string[] = [];
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      const slowQueriesCount = await prisma.slowQueryLog.count({
        where: {
          execution_time_ms: { gt: 2000 } // –ë–æ–ª–µ–µ 2 —Å–µ–∫—É–Ω–¥
        }
      });

      if (slowQueriesCount > 0) {
        recommendations.push(`–ù–∞–π–¥–µ–Ω–æ ${slowQueriesCount} –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (>2—Å). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã.`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
      const cacheSize = this.queryCache.size;
      if (cacheSize > 1000) {
        recommendations.push(`–ö—ç—à —Å–æ–¥–µ—Ä–∂–∏—Ç ${cacheSize} –∑–∞–ø–∏—Å–µ–π. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞.`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–≤–∞—Ä–æ–≤
      const outdatedStats = await prisma.productStatsCache.count({
        where: {
          last_updated: {
            lt: new Date(Date.now() - 24 * 60 * 60 * 1000) // –°—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
          }
        }
      });

      if (outdatedStats > 0) {
        recommendations.push(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ${outdatedStats} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å—Ç–∞—Ä–µ–ª–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é —Å–≤–æ–π—Å—Ç–≤
      const productsWithoutNormalizedProps = await prisma.product.count({
        where: {
          property_values: {
            none: {}
          }
        }
      });

      if (productsWithoutNormalizedProps > 0) {
        recommendations.push(`${productsWithoutNormalizedProps} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –∏–º–µ—é—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤.`);
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
    }

    return recommendations;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const dbOptimizationService = DatabaseOptimizationService.getInstance();
