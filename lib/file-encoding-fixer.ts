import * as XLSX from 'xlsx';
import { fixFieldsEncoding } from './encoding-utils';

export interface EncodingCheckResult {
  hasEncodingIssues: boolean;
  fixedHeaders: string[];
  originalHeaders: string[];
  encodingIssues: string[];
  needsReencoding: boolean;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö
 */
export async function checkAndFixFileEncoding(file: File): Promise<{
  fixedFile: File;
  result: EncodingCheckResult;
}> {
  try {
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    const buffer = await file.arrayBuffer();
    const workbook = XLSX.read(buffer, { type: 'array' });
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = XLSX.utils.sheet_to_json(worksheet, { 
      header: 1, 
      defval: '' 
    })[0] as string[];
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–∞:', {
      filename: file.name,
      originalHeaders: headers.slice(0, 5) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    });
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const fixedHeaders = fixFieldsEncoding(headers);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
    const encodingIssues: string[] = [];
    let hasEncodingIssues = false;
    
    headers.forEach((originalHeader, index) => {
      const fixedHeader = fixedHeaders[index];
      if (originalHeader !== fixedHeader) {
        hasEncodingIssues = true;
        encodingIssues.push(`"${originalHeader}" ‚Üí "${fixedHeader}"`);
      }
    });
    
    console.log('üîß –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏:', {
      hasEncodingIssues,
      issuesCount: encodingIssues.length,
      sampleIssues: encodingIssues.slice(0, 3)
    });
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π, —Å–æ–∑–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    let fixedFile = file;
    
    if (hasEncodingIssues) {
      console.log('üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...');
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π workbook —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
      const fixedWorkbook = XLSX.utils.book_new();
      const fixedWorksheet = XLSX.utils.aoa_to_sheet([
        fixedHeaders, // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        ...XLSX.utils.sheet_to_json(worksheet, { 
          header: 1, 
          defval: '' 
        }).slice(1) // –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      ]);
      
      XLSX.utils.book_append_sheet(fixedWorkbook, fixedWorksheet, sheetName);
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä
      const fixedBuffer = XLSX.write(fixedWorkbook, { 
        type: 'array', 
        bookType: 'xlsx' 
      });
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const fixedBlob = new Blob([fixedBuffer], { 
        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' 
      });
      
      fixedFile = new File([fixedBlob], file.name, {
        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
      });
      
      console.log('‚úÖ –§–∞–π–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω:', {
        originalSize: file.size,
        fixedSize: fixedFile.size,
        filename: fixedFile.name
      });
    }
    
    const result: EncodingCheckResult = {
      hasEncodingIssues,
      fixedHeaders,
      originalHeaders: headers,
      encodingIssues,
      needsReencoding: hasEncodingIssues
    };
    
    return { fixedFile, result };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–∞:', error);
    throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–¥–∏—Ä–æ–≤–∫—É –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
 */
export async function checkFileEncoding(file: File): Promise<EncodingCheckResult> {
  try {
    const buffer = await file.arrayBuffer();
    const workbook = XLSX.read(buffer, { type: 'array' });
    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    
    const headers = XLSX.utils.sheet_to_json(worksheet, { 
      header: 1, 
      defval: '' 
    })[0] as string[];
    
    const fixedHeaders = fixFieldsEncoding(headers);
    
    const encodingIssues: string[] = [];
    let hasEncodingIssues = false;
    
    headers.forEach((originalHeader, index) => {
      const fixedHeader = fixedHeaders[index];
      if (originalHeader !== fixedHeader) {
        hasEncodingIssues = true;
        encodingIssues.push(`"${originalHeader}" ‚Üí "${fixedHeader}"`);
      }
    });
    
    return {
      hasEncodingIssues,
      fixedHeaders,
      originalHeaders: headers,
      encodingIssues,
      needsReencoding: hasEncodingIssues
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏:', error);
    throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
  }
}
