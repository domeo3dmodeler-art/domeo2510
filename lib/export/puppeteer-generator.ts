import { prisma } from '@/lib/prisma';
import ExcelJS from 'exceljs';
import puppeteer from 'puppeteer';

// –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
let cachedBrowser: puppeteer.Browser | null = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
export async function cleanupBrowserCache() {
  if (cachedBrowser && cachedBrowser.isConnected()) {
    console.log('üßπ –û—á–∏—â–∞–µ–º –∫—ç—à –±—Ä–∞—É–∑–µ—Ä–∞...');
    await cachedBrowser.close();
    cachedBrowser = null;
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF —Å Puppeteer
export async function generatePDFWithPuppeteer(data: any): Promise<Buffer> {
  const startTime = Date.now();
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é PDF —Å Puppeteer...');

  try {
    const title = data.type === 'quote' ? '–ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï' :
                  data.type === 'invoice' ? '–°–ß–ï–¢' : '–ó–ê–ö–ê–ó';

    console.log('üìÑ –°–æ–∑–¥–∞–µ–º HTML –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è PDF...');

    // –°–æ–∑–¥–∞–µ–º HTML –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
    const htmlContent = `
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title>${title}</title>
  <style>
    @page {
      size: A4;
      margin: 20mm;
    }
    body { 
      font-family: 'Arial', 'Helvetica', sans-serif; 
      font-size: 12px; 
      margin: 0;
      padding: 0;
      line-height: 1.4;
      color: #000;
    }
    .header { 
      text-align: center; 
      font-size: 18px; 
      font-weight: bold; 
      margin-bottom: 20px;
      border-bottom: 2px solid #000;
      padding-bottom: 10px;
    }
    .info { 
      margin-bottom: 20px; 
      line-height: 1.6;
      background-color: #f9f9f9;
      padding: 15px;
      border-radius: 5px;
    }
    .info div { margin-bottom: 5px; }
    .info strong { font-weight: bold; }
    table { 
      width: 100%; 
      border-collapse: collapse; 
      margin-bottom: 20px;
      font-size: 11px;
    }
    th, td { 
      border: 1px solid #000; 
      padding: 8px; 
      text-align: left;
      vertical-align: top;
    }
    th { 
      background-color: #e0e0e0; 
      font-weight: bold;
      text-align: center;
    }
    .number { text-align: center; width: 5%; }
    .sku { width: 15%; }
    .name { width: 40%; }
    .price { text-align: right; width: 15%; }
    .qty { text-align: center; width: 10%; }
    .total { text-align: right; width: 15%; }
    .total-row { 
      text-align: right; 
      font-size: 14px; 
      font-weight: bold; 
      margin-top: 20px;
      border-top: 2px solid #000;
      padding-top: 10px;
    }
    .footer { 
      font-size: 10px; 
      margin-top: 30px; 
      text-align: center; 
      color: #666;
    }
  </style>
</head>
<body>
  <div class="header">${title}</div>
  
  <div class="info">
    <div><strong>–ö–ª–∏–µ–Ω—Ç:</strong> ${data.client.name || 'N/A'}</div>
    <div><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${data.client.phone || 'N/A'}</div>
    <div><strong>–ê–¥—Ä–µ—Å:</strong> ${data.client.address || 'N/A'}</div>
    <div><strong>–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞:</strong> ${data.documentNumber}</div>
    <div><strong>–î–∞—Ç–∞:</strong> ${new Date().toLocaleDateString('ru-RU')}</div>
  </div>
  
  <table>
    <thead>
      <tr>
        <th class="number">‚Ññ</th>
        <th class="sku">–ê—Ä—Ç–∏–∫—É–ª</th>
        <th class="name">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ</th>
        <th class="price">–¶–µ–Ω–∞ –∑–∞ –µ–¥.</th>
        <th class="qty">–ö–æ–ª-–≤–æ</th>
        <th class="total">–°—É–º–º–∞</th>
      </tr>
    </thead>
    <tbody>
      ${data.items.map((item: any, index: number) => `
        <tr>
          <td class="number">${index + 1}</td>
          <td class="sku">${item.sku || 'N/A'}</td>
          <td class="name">${item.name}</td>
          <td class="price">${item.unitPrice.toLocaleString('ru-RU')} ‚ÇΩ</td>
          <td class="qty">${item.quantity}</td>
          <td class="total">${item.total.toLocaleString('ru-RU')} ‚ÇΩ</td>
        </tr>
      `).join('')}
    </tbody>
  </table>
  
  <div class="total-row">–ò—Ç–æ–≥–æ: ${data.totalAmount.toLocaleString('ru-RU')} ‚ÇΩ</div>
  
  <div class="footer">–î–æ–∫—É–º–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π Domeo</div>
</body>
</html>`;

    console.log('üåê –ó–∞–ø—É—Å–∫–∞–µ–º Puppeteer –±—Ä–∞—É–∑–µ—Ä...');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    console.log('üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±—Ä–∞—É–∑–µ—Ä (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏)...');
    const browser = await puppeteer.launch({
      headless: true,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-gpu',
        '--disable-web-security'
      ],
      timeout: 30000 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    });

    console.log('üìÑ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
    const page = await browser.newPage();
    
    console.log('üìù –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTML –∫–æ–Ω—Ç–µ–Ω—Ç...');
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –Ω–∞–¥–µ–∂–Ω—ã–º –æ–∂–∏–¥–∞–Ω–∏–µ–º
    await page.setContent(htmlContent, { 
      waitUntil: 'networkidle0', // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–¥–µ–∂–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
      timeout: 30000 
    });

    console.log('üñ®Ô∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF...');
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
    const pdfBuffer = await page.pdf({
      format: 'A4',
      printBackground: true,
      margin: {
        top: '20mm',
        right: '20mm',
        bottom: '20mm',
        left: '20mm'
      },
      timeout: 30000 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    });

    console.log('üîí –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...');
    await browser.close();

    const endTime = Date.now();
    console.log(`‚ö° PDF —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ ${endTime - startTime}ms`);

    return Buffer.from(pdfBuffer);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF:', error);
    throw new Error(`PDF generation failed: ${error.message}`); 
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–≤–µ—Ä–µ–π
async function getDoorTemplate() {
  const category = await prisma.catalogCategory.findFirst({
    where: { name: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏' }
  });

  if (!category) {
    throw new Error('–ö–∞—Ç–µ–≥–æ—Ä–∏—è "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }

  const template = await prisma.importTemplate.findUnique({
    where: { catalog_category_id: category.id }
  });

  if (!template) {
    throw new Error('–®–∞–±–ª–æ–Ω –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–≤–µ—Ä–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }

  return {
    requiredFields: JSON.parse(template.required_fields || '[]'),
    calculatorFields: JSON.parse(template.calculator_fields || '[]'),
    exportFields: JSON.parse(template.export_fields || '[]')
  };
}

// –ü–æ–∏—Å–∫ –í–°–ï–• —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î –ø–æ —Ç–æ—á–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
async function findAllProductsByConfiguration(item: any) {
  console.log('üîç –ò—â–µ–º –í–°–ï —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:');
  console.log('üì¶ –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã:', JSON.stringify(item, null, 2));
  console.log('üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:', {
    model: item.model,
    finish: item.finish,
    color: item.color,
    width: item.width,
    height: item.height
  });

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–≤–µ—Ä–µ–π
  const allProducts = await prisma.product.findMany({
    where: {
      catalog_category: { name: "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏" }
    },
    select: { properties_data: true, name: true, sku: true }
  });

  console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${allProducts.length} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞`);

  const matchingProducts = [];

  for (const product of allProducts) {
    if (product.properties_data) {
      try {
        const props = typeof product.properties_data === 'string' 
          ? JSON.parse(product.properties_data) 
          : product.properties_data;
        
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¢–û–ß–ù–û–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            const modelMatch = !item.model || props['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'] === item.model;
            const finishMatch = !item.finish || props['–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è'] === item.finish;
            const colorMatch = !item.color || props['Domeo_–¶–≤–µ—Ç'] === item.color;
            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ - –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            const widthMatch = !item.width || String(props['–®–∏—Ä–∏–Ω–∞/–º–º']) === String(item.width);
            const heightMatch = !item.height || String(props['–í—ã—Å–æ—Ç–∞/–º–º']) === String(item.height);
        
        if (modelMatch && finishMatch && colorMatch && widthMatch && heightMatch) {
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–æ–≤–∞—Ä:', product.sku);
          console.log('   –°–æ–≤–ø–∞–¥–µ–Ω–∏—è:', { modelMatch, finishMatch, colorMatch, widthMatch, heightMatch });
          matchingProducts.push(product);
        } else {
          // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
          if (matchingProducts.length < 3) {
            console.log('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç:', product.sku, {
              modelMatch, finishMatch, colorMatch, widthMatch, heightMatch,
              itemModel: item.model, itemFinish: item.finish, itemColor: item.color,
              itemWidth: item.width, itemHeight: item.height,
              dbModel: props['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'],
              dbFinish: props['–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è'],
              dbColor: props['Domeo_–¶–≤–µ—Ç'],
              dbWidth: props['–®–∏—Ä–∏–Ω–∞/–º–º'],
              dbHeight: props['–í—ã—Å–æ—Ç–∞/–º–º']
            });
          }
        }
      } catch (e) {
        console.warn('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ properties_data:', e);
      }
    }
  }

  console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ ${matchingProducts.length} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤`);
  return matchingProducts;
}

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è Excel –¥–ª—è –∑–∞–∫–∞–∑–∞
export async function generateExcelOrder(data: any): Promise<Buffer> {
  const startTime = Date.now();
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Excel –∑–∞–∫–∞–∑–∞ —Å –ø–æ–ª–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏...');

  try {
    // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è –¥–≤–µ—Ä–µ–π
    const template = await getDoorTemplate();
    console.log('üìã –ü–æ–ª—è —à–∞–±–ª–æ–Ω–∞:', template.exportFields.length);

    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet('–ó–∞–∫–∞–∑');
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    worksheet.mergeCells('A1:Z1');
    worksheet.getCell('A1').value = '–ó–ê–ö–ê–ó';
    worksheet.getCell('A1').font = { size: 16, bold: true };
    worksheet.getCell('A1').alignment = { horizontal: 'center' };

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
    worksheet.getCell('A3').value = '–ö–ª–∏–µ–Ω—Ç:';
    worksheet.getCell('B3').value = data.client.name || 'N/A';
    worksheet.getCell('A4').value = '–¢–µ–ª–µ—Ñ–æ–Ω:';
    worksheet.getCell('B4').value = data.client.phone || 'N/A';
    worksheet.getCell('A5').value = '–ê–¥—Ä–µ—Å:';
    worksheet.getCell('B5').value = data.client.address || 'N/A';

    // –ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
    worksheet.getCell('A7').value = '–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞:';
    worksheet.getCell('B7').value = data.documentNumber;
    worksheet.getCell('A8').value = '–î–∞—Ç–∞:';
    worksheet.getCell('B8').value = new Date().toLocaleDateString('ru-RU');

    // –ë–∞–∑–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ + –ø–æ–ª—è –∏–∑ –ë–î –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    const baseHeaders = ['‚Ññ', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–¶–µ–Ω–∞', '–°—É–º–º–∞'];
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –∏–∑ –ë–î –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    const dbFields = [
      '–¶–µ–Ω–∞ –æ–ø—Ç',
      '–¶–µ–Ω–∞ –†–†–¶', 
      '–ü–æ—Å—Ç–∞–≤—â–∏–∫',
      '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–≤–µ—Ä–∏ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
      '–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è',
      '–®–∏—Ä–∏–Ω–∞/–º–º',
      '–í—ã—Å–æ—Ç–∞/–º–º', 
      '–¢–æ–ª—â–∏–Ω–∞/–º–º',
      '–§–∞–±—Ä–∏–∫–∞_–¶–≤–µ—Ç/–û—Ç–¥–µ–ª–∫–∞',
      'SKU –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ',
      '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'
    ];
    
    const allHeaders = [...baseHeaders, ...dbFields];
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    worksheet.getRow(10).values = allHeaders;
    worksheet.getRow(10).font = { bold: true };
    
    // –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞: –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã - –≥–æ–ª—É–±–æ–π, –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î - –±–µ–∂–µ–≤—ã–π
    const cartHeadersCount = baseHeaders.length;
    const dbHeadersCount = dbFields.length;
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã (–≥–æ–ª—É–±–æ–π —Ñ–æ–Ω)
    for (let i = 1; i <= cartHeadersCount; i++) {
      const cell = worksheet.getCell(10, i);
      cell.fill = {
        type: 'pattern',
        pattern: 'solid',
        fgColor: { argb: 'FFE6F3FF' } // –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π
      };
    }
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –ë–î (–±–µ–∂–µ–≤—ã–π —Ñ–æ–Ω)
    for (let i = cartHeadersCount + 1; i <= cartHeadersCount + dbHeadersCount; i++) {
      const cell = worksheet.getCell(10, i);
      cell.fill = {
        type: 'pattern',
        pattern: 'solid',
        fgColor: { argb: 'FFF5F5DC' } // –ë–µ–∂–µ–≤—ã–π
      };
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    for (let col = 1; col <= allHeaders.length; col++) {
      const headerCell = worksheet.getCell(10, col);
      if (!headerCell.border) headerCell.border = {};
      headerCell.border.bottom = { style: 'thin', color: { argb: 'FF000000' } };
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    let rowIndex = 11;
    let globalRowNumber = 1;
    
    for (let i = 0; i < data.items.length; i++) {
      const item = data.items[i];
      console.log(`üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä ${i + 1} –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã:`, item.model);

      // –ò—â–µ–º –í–°–ï –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–æ–≤–∞—Ä—ã –≤ –ë–î
      const matchingProducts = await findAllProductsByConfiguration(item);
      console.log(`üîç –î–ª—è —Ç–æ–≤–∞—Ä–∞ "${item.name}" –Ω–∞–π–¥–µ–Ω–æ ${matchingProducts.length} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î`);
      
      if (matchingProducts.length === 0) {
        console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤, —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã');
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤, —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        const row = worksheet.getRow(rowIndex);
        
        // –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
        row.getCell(1).value = globalRowNumber++; // ‚Ññ
        row.getCell(2).value = item.name; // –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        row.getCell(3).value = item.qty || item.quantity || 1; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        row.getCell(4).value = item.unitPrice || 0; // –¶–µ–Ω–∞
        row.getCell(5).value = (item.qty || item.quantity || 1) * (item.unitPrice || 0); // –°—É–º–º–∞
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª (–±–µ–∑ .00 –∏ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ –≥—Ä—É–ø–ø —Ä–∞–∑—Ä—è–¥–æ–≤)
        row.getCell(4).numFmt = '#,##0';
        row.getCell(5).numFmt = '#,##0';
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è –ø–æ–ª–µ–π –∏–∑ –ë–î
        let colIndex = 6;
        dbFields.forEach(() => {
          row.getCell(colIndex).value = '';
          colIndex++;
        });
        
        // –¶–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ: —Å—Ç—Ä–æ–∫–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã - –±–µ–ª—ã–π —Ñ–æ–Ω
        for (let col = 1; col <= allHeaders.length; col++) {
          row.getCell(col).fill = {
            type: 'pattern',
            pattern: 'solid',
            fgColor: { argb: 'FFFFFFFF' } // –ë–µ–ª—ã–π —Ñ–æ–Ω –¥–ª—è —Å—Ç—Ä–æ–∫–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
          };
          // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É
          row.getCell(col).alignment = { 
            vertical: 'middle', 
            horizontal: 'center' 
          };
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π)
        if (i < data.items.length - 1) {
          for (let col = 1; col <= allHeaders.length; col++) {
            const cell = worksheet.getCell(rowIndex - 1, col);
            if (!cell.border) cell.border = {};
            cell.border.bottom = { style: 'thin', color: { argb: 'FF000000' } };
          }
        }
        
        rowIndex++;
      } else {
        // –°–æ–∑–¥–∞–µ–º –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –∫–æ—Ä–∑–∏–Ω—ã —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º–∏ —è—á–µ–π–∫–∞–º–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
        console.log(`üìù –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã —Å ${matchingProducts.length} –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∏–∑ –ë–î`);
        
        const row = worksheet.getRow(rowIndex);
        
        // –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è (–∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
        row.getCell(1).value = globalRowNumber++; // ‚Ññ
        row.getCell(2).value = item.name; // –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        row.getCell(3).value = item.qty || item.quantity || 1; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        row.getCell(4).value = item.unitPrice || 0; // –¶–µ–Ω–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        row.getCell(5).value = (item.qty || item.quantity || 1) * (item.unitPrice || 0); // –°—É–º–º–∞
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª (–±–µ–∑ .00 –∏ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ –≥—Ä—É–ø–ø —Ä–∞–∑—Ä—è–¥–æ–≤)
        row.getCell(4).numFmt = '#,##0';
        row.getCell(5).numFmt = '#,##0';
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —è—á–µ–π–∫–∏ –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –ø–æ–ª–µ–π (–µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î)
        if (matchingProducts.length > 1) {
          // –û–±—ä–µ–¥–∏–Ω—è–µ–º —è—á–µ–π–∫–∏ –±–∞–∑–æ–≤—ã—Ö –ø–æ–ª–µ–π –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
          for (let col = 1; col <= 5; col++) {
            const startRow = rowIndex;
            const endRow = rowIndex + matchingProducts.length - 1;
            if (startRow !== endRow) {
              worksheet.mergeCells(startRow, col, endRow, col);
              // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫
              row.getCell(col).alignment = { 
                vertical: 'middle', 
                horizontal: 'center' 
              };
            }
          }
        }
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –∏–∑ –ë–î –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        let currentRowIndex = rowIndex;
        
        for (let productIndex = 0; productIndex < matchingProducts.length; productIndex++) {
          const productData = matchingProducts[productIndex];
          console.log(`üìù –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –∏–∑ –ë–î –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${productData.sku} (${productIndex + 1}/${matchingProducts.length})`);
          
          const currentRow = worksheet.getRow(currentRowIndex);
          let colIndex = 6; // –ù–∞—á–∏–Ω–∞–µ–º —Å 6-–π –∫–æ–ª–æ–Ω–∫–∏ (–ø–æ—Å–ª–µ –±–∞–∑–æ–≤—ã—Ö)
          
          if (productData.properties_data) {
            try {
              const props = typeof productData.properties_data === 'string' 
                ? JSON.parse(productData.properties_data) 
                : productData.properties_data;
              
              // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
              dbFields.forEach(fieldName => {
                const value = props[fieldName];
                if (value !== undefined && value !== null) {
                  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ü–µ–Ω
                  if (fieldName === '–¶–µ–Ω–∞ –æ–ø—Ç' || fieldName === '–¶–µ–Ω–∞ –†–†–¶') {
                    const numValue = parseFloat(String(value));
                    if (!isNaN(numValue)) {
                      currentRow.getCell(colIndex).value = numValue;
                      currentRow.getCell(colIndex).numFmt = '#,##0';
                    } else {
                      currentRow.getCell(colIndex).value = '';
                    }
                  } else {
                    currentRow.getCell(colIndex).value = String(value);
                  }
                  console.log(`‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –ø–æ–ª–µ "${fieldName}": ${value}`);
                } else {
                  currentRow.getCell(colIndex).value = '';
                  console.log(`‚ùå –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ "${fieldName}"`);
                }
                colIndex++;
              });
            } catch (e) {
              console.warn('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ properties_data –¥–ª—è —Ç–æ–≤–∞—Ä–∞:', e);
              // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
              dbFields.forEach(() => {
                currentRow.getCell(colIndex).value = '';
                colIndex++;
              });
            }
          } else {
            console.log('‚ùå –ù–µ—Ç properties_data –¥–ª—è —Ç–æ–≤–∞—Ä–∞');
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            dbFields.forEach(() => {
              currentRow.getCell(colIndex).value = '';
              colIndex++;
            });
          }
          
          // –¶–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ: —Å—Ç—Ä–æ–∫–∞ –∏–∑ –ë–î - —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
          for (let col = 1; col <= allHeaders.length; col++) {
            currentRow.getCell(col).fill = {
              type: 'pattern',
              pattern: 'solid',
              fgColor: { argb: 'FFF0F0F0' } // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω –¥–ª—è —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ë–î
            };
            // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É
            currentRow.getCell(col).alignment = { 
              vertical: 'middle', 
              horizontal: 'center' 
            };
          }
          
          currentRowIndex++;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –≥—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤ (–µ—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–≤–∞—Ä)
        if (i < data.items.length - 1) {
          for (let col = 1; col <= allHeaders.length; col++) {
            const cell = worksheet.getCell(currentRowIndex - 1, col);
            if (!cell.border) cell.border = {};
            cell.border.bottom = { style: 'thin', color: { argb: 'FF000000' } };
          }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º rowIndex –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        rowIndex = currentRowIndex;
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤
    for (let col = 1; col <= allHeaders.length; col++) {
      const lastDataCell = worksheet.getCell(rowIndex - 1, col);
      if (!lastDataCell.border) lastDataCell.border = {};
      lastDataCell.border.bottom = { style: 'thin', color: { argb: 'FF000000' } };
    }

    // –ò—Ç–æ–≥–æ
    const totalRow = worksheet.getRow(rowIndex + 1);
    totalRow.getCell(4).value = '–ò—Ç–æ–≥–æ:';
    totalRow.getCell(4).font = { bold: true };
    totalRow.getCell(4).alignment = { horizontal: 'right' };
    totalRow.getCell(5).value = data.totalAmount;
    totalRow.getCell(5).numFmt = '#,##0';
    totalRow.getCell(5).font = { bold: true };

    // –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
    worksheet.columns.forEach((column, index) => {
      if (index < 6) {
        // –ë–∞–∑–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        column.width = 15;
      } else {
        // –ö–æ–ª–æ–Ω–∫–∏ —Å–≤–æ–π—Å—Ç–≤
        column.width = 20;
      }
    });

    // –ì—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    const lastCol = String.fromCharCode(65 + allHeaders.length - 1);
    const range = `A10:${lastCol}${rowIndex}`;
    worksheet.getCell(range).border = {
      top: { style: 'thin' },
      left: { style: 'thin' },
      bottom: { style: 'thin' },
      right: { style: 'thin' }
    };

    const buffer = await workbook.xlsx.writeBuffer() as Buffer;
    
    const endTime = Date.now();
    console.log(`‚ö° Excel –∑–∞–∫–∞–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ ${endTime - startTime}ms`);
    
    return buffer;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel –∑–∞–∫–∞–∑–∞:', error);
    throw new Error(`Excel order generation failed: ${error.message}`);
  }
}

// –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è Excel (–¥–ª—è –ö–ü –∏ –°—á–µ—Ç–∞)
export async function generateExcelFast(data: any): Promise<Buffer> {
  const startTime = Date.now();
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Excel...');

  const workbook = new ExcelJS.Workbook();
  const worksheet = workbook.addWorksheet('–î–æ–∫—É–º–µ–Ω—Ç');
  
  // –ó–∞–≥–æ–ª–æ–≤–∫–∏
  worksheet.getRow(1).values = ['‚Ññ', '–ê—Ä—Ç–∏–∫—É–ª', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–¶–µ–Ω–∞', '–°—É–º–º–∞'];
  worksheet.getRow(1).font = { bold: true };
  
  // –î–∞–Ω–Ω—ã–µ
  data.items.forEach((item: any, index: number) => {
    const row = worksheet.getRow(index + 2);
    row.values = [
      index + 1,
      item.sku || 'N/A',
      item.name,
      item.quantity,
      item.unitPrice,
      item.total
    ];
  });
  
  // –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
  worksheet.columns.forEach(column => {
    column.width = 15;
  });
  
  const buffer = await workbook.xlsx.writeBuffer() as Buffer;
  
  const endTime = Date.now();
  console.log(`‚ö° Excel —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ ${endTime - startTime}ms`);
  
  return buffer;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞
export async function exportDocumentWithPDF(
  type: 'quote' | 'invoice' | 'order',
  format: 'pdf' | 'excel' | 'csv',
  clientId: string,
  items: any[],
  totalAmount: number
) {
  const startTime = Date.now();
  console.log(`üöÄ –≠–∫—Å–ø–æ—Ä—Ç ${type} –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${format} –¥–ª—è ${items.length} –ø–æ–∑–∏—Ü–∏–π`);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
  const documentNumber = `${type.toUpperCase()}-${Date.now()}`;

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
  let client = await prisma.client.findUnique({
    where: { id: clientId }
  });

  if (!client) {
    console.log('‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞');
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    client = {
      id: clientId,
      name: '–¢–µ—Å—Ç–æ–≤—ã–π –ö–ª–∏–µ–Ω—Ç',
      phone: '+7 (999) 123-45-67',
      address: '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å',
      email: 'test@example.com'
    };
  }

  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
  const exportData = {
    type,
    documentNumber,
    client,
    items: items.map((item, i) => {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
      let name = '';
      
      if (item.type === 'handle') {
        // –≠—Ç–æ —Ä—É—á–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä—É—á–∫–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
        const handleName = item.handleName || item.handleId || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä—É—á–∫–∞';
        name = `–†—É—á–∫–∞ ${handleName}`;
      } else if (item.model && item.model.includes('DomeoDoors')) {
        // –≠—Ç–æ –¥–≤–µ—Ä—å - —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        const finish = item.finish || '';
        const color = item.color || '';
        const dimensions = item.width && item.height ? `${item.width} √ó ${item.height} –º–º` : '';
        const hardware = item.hardwareKitName || item.hardware || '–ë–∞–∑–æ–≤—ã–π';
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "–ö–æ–º–ø–ª–µ–∫—Ç —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã ‚Äî " –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        const cleanHardware = hardware.replace(/^–ö–æ–º–ø–ª–µ–∫—Ç —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã ‚Äî /, '');
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        const modelName = item.model.replace(/DomeoDoors_/g, '').replace(/_/g, ' ');
        
        if (type === 'order') {
          name = `–î–≤–µ—Ä—å DomeoDoors ${modelName} (${finish}, ${color}, ${dimensions}, –ö–æ–º–ø–ª–µ–∫—Ç —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã -${cleanHardware})`;
        } else {
          // –î–ª—è –ö–ü –∏ –°—á–µ—Ç–∞ - –¥–≤–µ—Ä—å —Å –ø–æ–ª–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
          name = `–î–≤–µ—Ä—å DomeoDoors ${modelName} (${finish}, ${color}, ${dimensions}, –ö–æ–º–ø–ª–µ–∫—Ç —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã -${cleanHardware})`;
        }
      } else {
        // –î—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        name = item.name || `${item.model || '–¢–æ–≤–∞—Ä'} ${item.finish || ''} ${item.color || ''}`.trim();
      }
      
      return {
        rowNumber: i + 1,
        sku: item.sku_1c || 'N/A',
        name: name,
        unitPrice: item.unitPrice || 0,
        quantity: item.qty || item.quantity || 1,
        total: (item.qty || item.quantity || 1) * (item.unitPrice || 0),
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ë–î (–¥–ª—è –∑–∞–∫–∞–∑–æ–≤)
        model: item.model,
        finish: item.finish,
        color: item.color,
        width: item.width,
        height: item.height,
        style: item.style,
        hardware: item.hardware,
        sku_1c: item.sku_1c
      };
    }),
    totalAmount
  };

  let buffer: Buffer;
  let filename: string;
  let mimeType: string;

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
  switch (format) {
    case 'pdf':
      buffer = await generatePDFWithPuppeteer(exportData);
      filename = `${type}-${documentNumber}.pdf`;
      mimeType = 'application/pdf';
      break;
    
    case 'excel':
      if (type === 'order') {
        // –î–ª—è –∑–∞–∫–∞–∑–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–æ–ª–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
        buffer = await generateExcelOrder(exportData);
      } else {
        // –î–ª—è –ö–ü –∏ –°—á–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é
        buffer = await generateExcelFast(exportData);
      }
      filename = `${type}-${documentNumber}.xlsx`;
      mimeType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
      break;
    
    case 'csv':
      const csvContent = generateCSVSimple(exportData);
      buffer = Buffer.from(csvContent, 'utf-8');
      filename = `${type}-${documentNumber}.csv`;
      mimeType = 'text/csv';
      break;
    
    default:
      throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞');
  }

  // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –ë–î
  let dbResult = null;
  try {
    dbResult = await createDocumentRecordsSimple(type, clientId, items, totalAmount, documentNumber);
    console.log(`‚úÖ –ó–∞–ø–∏—Å–∏ –≤ –ë–î —Å–æ–∑–¥–∞–Ω—ã: ${dbResult.type} #${dbResult.id}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –≤ –ë–î:', error);
  }

  const endTime = Date.now();
  console.log(`‚ö° –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${endTime - startTime}ms`);

  return {
    buffer,
    filename,
    mimeType,
    documentNumber,
    documentId: dbResult?.id,
    documentType: dbResult?.type
  };
}

// –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è CSV
function generateCSVSimple(data: any): string {
  const headers = ['‚Ññ', '–ê—Ä—Ç–∏–∫—É–ª', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–¶–µ–Ω–∞', '–°—É–º–º–∞'];
  const rows = data.items.map((item: any, index: number) => [
    index + 1,
    item.sku || 'N/A',
    `"${item.name}"`,
    item.quantity,
    item.unitPrice,
    item.total
  ]);
  
  return [headers.join(','), ...rows.map(row => row.join(','))].join('\n');
}

// –ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î
async function createDocumentRecordsSimple(
  type: 'quote' | 'invoice' | 'order',
  clientId: string,
  items: any[],
  totalAmount: number,
  documentNumber: string
) {
  const client = await prisma.client.findUnique({
    where: { id: clientId }
  });

  if (!client) {
    throw new Error('–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }

  if (type === 'quote') {
    const quote = await prisma.quote.create({
      data: {
        number: documentNumber,
        client_id: clientId,
        created_by: 'system',
        status: 'DRAFT',
        subtotal: totalAmount,
        total_amount: totalAmount,
        currency: 'RUB',
        notes: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞ –¥–≤–µ—Ä–µ–π',
        cart_data: JSON.stringify(items) // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã
      }
    });

    const quoteItems = items.map((item, i) => {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –ö–ü
      let name = '';
      
      if (item.type === 'handle') {
        // –≠—Ç–æ —Ä—É—á–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä—É—á–∫–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
        const handleName = item.handleName || item.handleId || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä—É—á–∫–∞';
        name = `–†—É—á–∫–∞ ${handleName}`;
      } else if (item.model && item.model.includes('DomeoDoors')) {
        // –≠—Ç–æ –¥–≤–µ—Ä—å - —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        const finish = item.finish || '';
        const color = item.color || '';
        const dimensions = item.width && item.height ? `${item.width} √ó ${item.height} –º–º` : '';
        const hardware = item.hardwareKitName || item.hardware || '–ë–∞–∑–æ–≤—ã–π';
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "–ö–æ–º–ø–ª–µ–∫—Ç —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã ‚Äî " –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        const cleanHardware = hardware.replace(/^–ö–æ–º–ø–ª–µ–∫—Ç —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã ‚Äî /, '');
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        const modelName = item.model.replace(/DomeoDoors_/g, '').replace(/_/g, ' ');
        
        name = `–î–≤–µ—Ä—å DomeoDoors ${modelName} (${finish}, ${color}, ${dimensions}, –ö–æ–º–ø–ª–µ–∫—Ç —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã -${cleanHardware})`;
      } else {
        // –î—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã
        name = item.name || `${item.model || '–¢–æ–≤–∞—Ä'} ${item.finish || ''} ${item.color || ''}`.trim();
      }
      
      return {
        quote_id: quote.id,
        product_id: item.id || `temp_${i}`,
        quantity: item.qty || item.quantity || 1,
        unit_price: item.unitPrice || 0,
        total_price: (item.qty || item.quantity || 1) * (item.unitPrice || 0),
        notes: `${name} | –ê—Ä—Ç–∏–∫—É–ª: ${item.sku_1c || 'N/A'}`
      };
    });

    await prisma.quoteItem.createMany({
      data: quoteItems
    });

    return { id: quote.id, type: 'quote' };

  } else if (type === 'invoice') {
    const invoice = await prisma.invoice.create({
      data: {
        number: documentNumber,
        client_id: clientId,
        created_by: 'system',
        status: 'DRAFT',
        subtotal: totalAmount,
        total_amount: totalAmount,
        currency: 'RUB',
        notes: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞ –¥–≤–µ—Ä–µ–π',
        cart_data: JSON.stringify(items) // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã
      }
    });

    const invoiceItems = items.map((item, i) => {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –°—á–µ—Ç–∞
      let name = '';
      
      if (item.type === 'handle') {
        // –≠—Ç–æ —Ä—É—á–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä—É—á–∫–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
        const handleName = item.handleName || item.handleId || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä—É—á–∫–∞';
        name = `–†—É—á–∫–∞ ${handleName}`;
      } else if (item.model && item.model.includes('DomeoDoors')) {
        // –≠—Ç–æ –¥–≤–µ—Ä—å - —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        const finish = item.finish || '';
        const color = item.color || '';
        const dimensions = item.width && item.height ? `${item.width} √ó ${item.height} –º–º` : '';
        const hardware = item.hardwareKitName || item.hardware || '–ë–∞–∑–æ–≤—ã–π';
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "–ö–æ–º–ø–ª–µ–∫—Ç —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã ‚Äî " –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        const cleanHardware = hardware.replace(/^–ö–æ–º–ø–ª–µ–∫—Ç —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã ‚Äî /, '');
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        const modelName = item.model.replace(/DomeoDoors_/g, '').replace(/_/g, ' ');
        
        name = `–î–≤–µ—Ä—å DomeoDoors ${modelName} (${finish}, ${color}, ${dimensions}, –ö–æ–º–ø–ª–µ–∫—Ç —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã -${cleanHardware})`;
      } else {
        // –î—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã
        name = item.name || `${item.model || '–¢–æ–≤–∞—Ä'} ${item.finish || ''} ${item.color || ''}`.trim();
      }
      
      return {
        invoice_id: invoice.id,
        product_id: item.id || `temp_${i}`,
        quantity: item.qty || item.quantity || 1,
        unit_price: item.unitPrice || 0,
        total_price: (item.qty || item.quantity || 1) * (item.unitPrice || 0),
        notes: `${name} | –ê—Ä—Ç–∏–∫—É–ª: ${item.sku_1c || 'N/A'}`
      };
    });

    await prisma.invoiceItem.createMany({
      data: invoiceItems
    });

    return { id: invoice.id, type: 'invoice' };

  } else if (type === 'order') {
    const order = await prisma.order.create({
      data: {
        number: documentNumber,
        client_id: clientId,
        created_by: 'system',
        status: 'PENDING',
        subtotal: totalAmount,
        total_amount: totalAmount,
        currency: 'RUB',
        notes: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞ –¥–≤–µ—Ä–µ–π',
        cart_data: JSON.stringify(items) // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã
      }
    });

    const orderItems = items.map((item, i) => {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –ó–∞–∫–∞–∑–∞
      let name = '';
      
      if (item.type === 'handle') {
        // –≠—Ç–æ —Ä—É—á–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä—É—á–∫–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
        const handleName = item.handleName || item.handleId || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä—É—á–∫–∞';
        name = `–†—É—á–∫–∞ ${handleName}`;
      } else if (item.model && item.model.includes('DomeoDoors')) {
        // –≠—Ç–æ –¥–≤–µ—Ä—å - —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        const finish = item.finish || '';
        const color = item.color || '';
        const dimensions = item.width && item.height ? `${item.width} √ó ${item.height} –º–º` : '';
        const hardware = item.hardwareKitName || item.hardware || '–ë–∞–∑–æ–≤—ã–π';
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "–ö–æ–º–ø–ª–µ–∫—Ç —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã ‚Äî " –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        const cleanHardware = hardware.replace(/^–ö–æ–º–ø–ª–µ–∫—Ç —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã ‚Äî /, '');
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        const modelName = item.model.replace(/DomeoDoors_/g, '').replace(/_/g, ' ');
        
        name = `–î–≤–µ—Ä—å DomeoDoors ${modelName} (${finish}, ${color}, ${dimensions}, –ö–æ–º–ø–ª–µ–∫—Ç —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã -${cleanHardware})`;
      } else {
        // –î—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã
        name = item.name || `${item.model || '–¢–æ–≤–∞—Ä'} ${item.finish || ''} ${item.color || ''}`.trim();
      }
      
      return {
        order_id: order.id,
        product_id: item.id || `temp_${i}`,
        quantity: item.qty || item.quantity || 1,
        unit_price: item.unitPrice || 0,
        total_price: (item.qty || item.quantity || 1) * (item.unitPrice || 0),
        notes: `${name} | –ê—Ä—Ç–∏–∫—É–ª: ${item.sku_1c || 'N/A'}`
      };
    });

    await prisma.orderItem.createMany({
      data: orderItems
    });

    return { id: order.id, type: 'order' };
  }

  throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞');
}

// –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
export async function cleanupExportResources() {
  // Puppeteer –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä—ã
}