// lib/validation/status-blocking.ts
import { prisma } from '@/lib/prisma';
import { getStatusLabel } from '@/lib/utils/status-labels';

// –°—Ç–∞—Ç—É—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –±–ª–æ–∫–∏—Ä—É—é—Ç —Ä—É—á–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
const BLOCKED_STATUSES = ['ORDERED', 'RECEIVED_FROM_SUPPLIER', 'COMPLETED'];

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ —Å—Ç–∞—Ç—É—Å –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
 * @param documentId ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
 * @param documentType –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ ('invoice' | 'quote')
 * @returns true –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, false –µ—Å–ª–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
 */
export async function isStatusBlocked(documentId: string, documentType: 'invoice' | 'quote'): Promise<boolean> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    let document = null;
    if (documentType === 'invoice') {
      document = await prisma.invoice.findUnique({
        where: { id: documentId },
        select: { id: true, status: true, parent_document_id: true, cart_session_id: true }
      });
    } else if (documentType === 'quote') {
      document = await prisma.quote.findUnique({
        where: { id: documentId },
        select: { id: true, status: true, parent_document_id: true, cart_session_id: true }
      });
    }

    if (!document) {
      return false; // –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑—Ä–µ—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    }

    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö, —Ä–∞–∑—Ä–µ—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    if (!BLOCKED_STATUSES.includes(document.status)) {
      return false;
    }

    // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    // –°—Ç–∞—Ç—É—Å—ã ORDERED, RECEIVED_FROM_SUPPLIER, COMPLETED –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    console.log(`üîí –°—Ç–∞—Ç—É—Å ${document.status} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è`);
    return true;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
    return false; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
 */
async function checkSupplierOrders(document: any, documentType: 'invoice' | 'quote'): Promise<boolean> {
  try {
    // –ò—â–µ–º –∑–∞–∫–∞–∑—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
    const orders = await prisma.order.findMany({
      where: {
        OR: [
          { parent_document_id: document.id },
          { cart_session_id: document.cart_session_id }
        ]
      },
      select: { id: true }
    });

    if (orders.length === 0) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–∫–∞–∑—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫—É –¥–ª—è —ç—Ç–∏—Ö –∑–∞–∫–∞–∑–æ–≤
    const orderIds = orders.map(order => order.id);
    const supplierOrders = await prisma.supplierOrder.findMany({
      where: {
        parent_document_id: { in: orderIds }
      },
      select: { id: true, status: true }
    });

    return supplierOrders.length > 0;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É:', error);
    return false;
  }
}

