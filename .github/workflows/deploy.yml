name: Deploy to Yandex Cloud

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: cr.yandex/your-registry
  IMAGE_NAME: domeo

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test

      - name: Build application
        run: npm run build

      - name: Run type check
        run: npm run type-check

  deploy-staging:
    if: github.ref == 'refs/heads/develop'
    needs: test
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-${{ github.sha }} .
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-latest

      - name: Login to Yandex Container Registry
        run: |
          echo ${{ secrets.YC_SERVICE_ACCOUNT_KEY }} | docker login --username json_key --password-stdin cr.yandex

      - name: Push Docker image
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-latest

      - name: Deploy to staging
        run: |
          echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
          # Update deployment
          kubectl set image deployment/domeo-app domeo-app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-${{ github.sha }} -n domeo-staging
          
          # Wait for rollout
          kubectl rollout status deployment/domeo-app -n domeo-staging
          
          # Health check
          kubectl get pods -n domeo-staging -l app=domeo-app

  deploy-production:
    if: github.ref == 'refs/heads/main'
    needs: test
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:production-${{ github.sha }} .
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:production-${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:production-latest

      - name: Login to Yandex Container Registry
        run: |
          echo ${{ secrets.YC_SERVICE_ACCOUNT_KEY }} | docker login --username json_key --password-stdin cr.yandex

      - name: Push Docker image
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:production-${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:production-latest

      - name: Deploy to production
        run: |
          echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
          # Update deployment
          kubectl set image deployment/domeo-app domeo-app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:production-${{ github.sha }} -n domeo-production
          
          # Wait for rollout
          kubectl rollout status deployment/domeo-app -n domeo-production
          
          # Health check
          kubectl get pods -n domeo-production -l app=domeo-app

  notify:
    if: always()
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-staging.result }}" == "success" ] || [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
          fi