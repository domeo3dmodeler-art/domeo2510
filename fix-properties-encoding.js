const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function fixPropertiesEncoding() {
  console.log('üîç –ü–æ–∏—Å–∫ —Å–≤–æ–π—Å—Ç–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏...');
  
  try {
    const properties = await prisma.productProperty.findMany();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å–≤–æ–π—Å—Ç–≤: ${properties.length}`);

    let fixedCount = 0;
    let problematicCount = 0;

    for (const property of properties) {
      let needsUpdate = false;
      let newName = property.name;
      let newDescription = property.description;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∞–∫–æ–∑—è–±—Ä
      if (property.name && /[^\x00-\x7F]/.test(property.name) && property.name.includes('?')) {
        console.log(`‚ùå –ü—Ä–æ–±–ª–µ–º–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: "${property.name}"`);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–ª—É—á–∞–∏
        if (property.name.includes('????? ???????? ????????')) {
          newName = '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ —Å–ø–∏—Å–∫–∞';
          needsUpdate = true;
        } else if (property.name.includes('???????? ???????? 2')) {
          newName = '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ 2';
          needsUpdate = true;
        } else {
          // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω–∏–º –Ω–∞ —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
          newName = `–°–≤–æ–π—Å—Ç–≤–æ ${property.id.slice(-4)}`;
          needsUpdate = true;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
      if (property.description && /[^\x00-\x7F]/.test(property.description) && property.description.includes('?')) {
        console.log(`‚ùå –ü—Ä–æ–±–ª–µ–º–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: "${property.description}"`);
        
        if (property.description.includes('???????? ??? ????????? ????????')) {
          newDescription = '–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞ —Å–ø–∏—Å–∫–∞';
          needsUpdate = true;
        } else if (property.description.includes('????????')) {
          newDescription = '–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞';
          needsUpdate = true;
        } else {
          newDescription = `–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–≤–æ–π—Å—Ç–≤–∞ ${property.id.slice(-4)}`;
          needsUpdate = true;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è select –ø–æ–ª–µ–π
      if (property.options && typeof property.options === 'string') {
        try {
          const options = JSON.parse(property.options);
          if (Array.isArray(options)) {
            let hasProblematicOptions = false;
            const fixedOptions = options.map(option => {
              if (typeof option === 'string' && option.includes('?')) {
                hasProblematicOptions = true;
                if (option.includes('????? 1')) return '–í–∞—Ä–∏–∞–Ω—Ç 1';
                if (option.includes('????? 2')) return '–í–∞—Ä–∏–∞–Ω—Ç 2';
                if (option.includes('????? 3')) return '–í–∞—Ä–∏–∞–Ω—Ç 3';
                return `–í–∞—Ä–∏–∞–Ω—Ç ${Math.random().toString(36).substr(2, 4)}`;
              }
              return option;
            });
            
            if (hasProblematicOptions) {
              console.log(`‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ–ø—Ü–∏–∏: ${JSON.stringify(options)}`);
              await prisma.productProperty.update({
                where: { id: property.id },
                data: { options: JSON.stringify(fixedOptions) }
              });
              console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–ø—Ü–∏–∏ –¥–ª—è —Å–≤–æ–π—Å—Ç–≤–∞: ${property.id}`);
              fixedCount++;
            }
          }
        } catch (e) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–ø—Ü–∏–π –¥–ª—è ${property.id}: ${e.message}`);
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (needsUpdate) {
        await prisma.productProperty.update({
          where: { id: property.id },
          data: {
            name: newName,
            description: newDescription,
          },
        });
        console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ: ${property.id} -> "${newName}"`);
        fixedCount++;
      } else {
        problematicCount++;
      }
    }

    console.log(`üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–≤–æ–π—Å—Ç–≤: ${fixedCount}`);
    console.log(`üìã –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤: ${problematicCount - fixedCount}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixPropertiesEncoding();
