const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkModelD5AvailableOptions() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–´–• –û–ü–¶–ò–ô –î–õ–Ø –ú–û–î–ï–õ–ò d5');
  console.log('='.repeat(60));
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –º–æ–¥–µ–ª–∏ d5
  const allProducts = await prisma.product.findMany({
    where: {
      catalog_category: {
        name: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏'
      }
    },
    select: {
      id: true,
      sku: true,
      name: true,
      properties_data: true
    }
  });
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –º–æ–¥–µ–ª–∏ d5
  const products = allProducts.filter(product => {
    const properties = product.properties_data ?
      (typeof product.properties_data === 'string' ? JSON.parse(product.properties_data) : product.properties_data) : {};
    return properties['–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'] === 'd5';
  });
  
  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –º–æ–¥–µ–ª–∏ d5: ${products.length}`);
  
  if (products.length === 0) {
    console.log('‚ùå –¢–æ–≤–∞—Ä—ã –º–æ–¥–µ–ª–∏ d5 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
    await prisma.$disconnect();
    return;
  }
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏
  const availableFinishes = new Set();
  const availableColors = new Set();
  const availableSizes = new Set();
  
  products.forEach(product => {
    const properties = product.properties_data ?
      (typeof product.properties_data === 'string' ? JSON.parse(product.properties_data) : product.properties_data) : {};
    
    if (properties['–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è']) availableFinishes.add(properties['–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è']);
    if (properties['Domeo_–¶–≤–µ—Ç']) availableColors.add(properties['Domeo_–¶–≤–µ—Ç']);
    if (properties['–®–∏—Ä–∏–Ω–∞/–º–º'] && properties['–í—ã—Å–æ—Ç–∞/–º–º']) {
      availableSizes.add(`${properties['–®–∏—Ä–∏–Ω–∞/–º–º']}√ó${properties['–í—ã—Å–æ—Ç–∞/–º–º']}`);
    }
  });
  
  console.log('\nüìã –î–û–°–¢–£–ü–ù–´–ï –û–ü–¶–ò–ò –î–õ–Ø –ú–û–î–ï–õ–ò d5:');
  console.log('-'.repeat(50));
  console.log(`–ü–æ–∫—Ä—ã—Ç–∏—è: ${Array.from(availableFinishes).sort().join(', ')}`);
  console.log(`–¶–≤–µ—Ç–∞: ${Array.from(availableColors).sort().join(', ')}`);
  console.log(`–†–∞–∑–º–µ—Ä—ã: ${Array.from(availableSizes).sort().join(', ')}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
  console.log('\nüéØ –ü–†–û–í–ï–†–ö–ê –ö–û–ù–ö–†–ï–¢–ù–û–ô –ö–û–ú–ë–ò–ù–ê–¶–ò–ò:');
  console.log('-'.repeat(50));
  console.log('–ò—Å–∫–æ–º–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: –ü–≠–¢ + –ë–µ–∂–µ–≤—ã–π + 700√ó2100');
  
  const hasPET = availableFinishes.has('–ü–≠–¢');
  const hasBeige = availableColors.has('–ë–µ–∂–µ–≤—ã–π');
  const has700x2100 = availableSizes.has('700√ó2100');
  
  console.log(`–ü–æ–∫—Ä—ã—Ç–∏–µ –ü–≠–¢: ${hasPET ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç'}`);
  console.log(`–¶–≤–µ—Ç –ë–µ–∂–µ–≤—ã–π: ${hasBeige ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç'}`);
  console.log(`–†–∞–∑–º–µ—Ä 700√ó2100: ${has700x2100 ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç'}`);
  
  if (!hasPET || !hasBeige || !has700x2100) {
    console.log('\n‚ùå –ü–†–û–ë–õ–ï–ú–ê: –î–ª—è –º–æ–¥–µ–ª–∏ d5 –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç:');
    if (!hasPET) console.log('   - –ü–æ–∫—Ä—ã—Ç–∏–µ –ü–≠–¢');
    if (!hasBeige) console.log('   - –¶–≤–µ—Ç –ë–µ–∂–µ–≤—ã–π');
    if (!has700x2100) console.log('   - –†–∞–∑–º–µ—Ä 700√ó2100');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ü–≠–¢ + –ë–µ–∂–µ–≤—ã–π –≤ –ª—é–±—ã—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö
  console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –ö–û–ú–ë–ò–ù–ê–¶–ò–ò –ü–≠–¢ + –ë–ï–ñ–ï–í–´–ô:');
  console.log('-'.repeat(50));
  
  const petBeigeProducts = products.filter(product => {
    const properties = product.properties_data ?
      (typeof product.properties_data === 'string' ? JSON.parse(product.properties_data) : product.properties_data) : {};
    
    return properties['–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è'] === '–ü–≠–¢' && properties['Domeo_–¶–≤–µ—Ç'] === '–ë–µ–∂–µ–≤—ã–π';
  });
  
  if (petBeigeProducts.length > 0) {
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${petBeigeProducts.length} —Ç–æ–≤–∞—Ä–æ–≤ —Å –ü–≠–¢ + –ë–µ–∂–µ–≤—ã–π:`);
    petBeigeProducts.forEach(product => {
      const properties = product.properties_data ?
        (typeof product.properties_data === 'string' ? JSON.parse(product.properties_data) : product.properties_data) : {};
      
      console.log(`   ${properties['–®–∏—Ä–∏–Ω–∞/–º–º']}√ó${properties['–í—ã—Å–æ—Ç–∞/–º–º']} - ${product.sku}`);
    });
  } else {
    console.log('‚ùå –¢–æ–≤–∞—Ä–æ–≤ —Å –ü–≠–¢ + –ë–µ–∂–µ–≤—ã–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
  }
  
  await prisma.$disconnect();
}

checkModelD5AvailableOptions().catch(console.error);
