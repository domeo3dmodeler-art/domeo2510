const { PrismaClient } = require('@prisma/client');
const fs = require('fs');

async function checkBackupDatabase() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é temp_dev.db...\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    const stats = fs.statSync('temp_dev.db');
    console.log(`üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(stats.size / 1024 / 1024).toFixed(2)} MB`);
    console.log(`üìÖ –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: ${stats.mtime}\n`);
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    const backupPrisma = new PrismaClient({
      datasources: {
        db: {
          url: "file:./temp_dev.db?mode=rwc&cache=shared&_pragma=foreign_keys(1)&_pragma=journal_mode(WAL)&_pragma=synchronous(NORMAL)&_pragma=cache_size(1000)&_pragma=temp_store(MEMORY)&_pragma=mmap_size(268435456)&_pragma=encoding(UTF8)"
        }
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const products = await backupPrisma.product.count();
    const categories = await backupPrisma.catalogCategory.count();
    const frontendCategories = await backupPrisma.frontendCategory.count();
    const users = await backupPrisma.user.count();
    
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:');
    console.log(`  –¢–æ–≤–∞—Ä—ã: ${products}`);
    console.log(`  –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: ${categories}`);
    console.log(`  –§—Ä–æ–Ω—Ç–µ–Ω–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${frontendCategories}`);
    console.log(`  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${users}\n`);
    
    if (products > 0) {
      console.log('‚úÖ –í —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã!');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
      const sampleProducts = await backupPrisma.product.findMany({
        take: 5,
        select: {
          sku: true,
          name: true,
          base_price: true,
          catalog_category_id: true
        }
      });
      
      console.log('\nüì¶ –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤:');
      sampleProducts.forEach(product => {
        console.log(`  - ${product.sku}: ${product.name} (${product.base_price} —Ä—É–±)`);
      });
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const sampleCategories = await backupPrisma.catalogCategory.findMany({
        take: 5,
        select: {
          name: true,
          level: true,
          products_count: true
        }
      });
      
      console.log('\nüìÅ –ü—Ä–∏–º–µ—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π:');
      sampleCategories.forEach(category => {
        console.log(`  - ${category.name} (—É—Ä–æ–≤–µ–Ω—å ${category.level}, —Ç–æ–≤–∞—Ä–æ–≤: ${category.products_count})`);
      });
      
    } else {
      console.log('‚ùå –í —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ç–æ–∂–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤!');
    }
    
    await backupPrisma.$disconnect();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
  }
}

checkBackupDatabase();
