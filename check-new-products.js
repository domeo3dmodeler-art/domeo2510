const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkProductsWithNewColumns() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã —Å –Ω–æ–≤—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏...');
    
    // –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–î–≤–µ—Ä–∏"
    const products = await prisma.product.findMany({
      where: {
        catalog_category_id: 'cmg50xcgs001cv7mn0tdyk1wo'
      },
      select: {
        id: true,
        sku: true,
        properties_data: true
      },
      take: 10
    });
    
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤:`);
    
    products.forEach((product, index) => {
      try {
        const properties = JSON.parse(product.properties_data || '{}');
        const articleNumber = properties['–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–æ–≤'];
        const modelName = properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'];
        
        console.log(`\n${index + 1}. –¢–æ–≤–∞—Ä: ${product.sku}`);
        console.log(`   –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–æ–≤: ${articleNumber || '–ù–ï–¢'}`);
        console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: ${modelName || '–ù–ï–¢'}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        const availableProperties = Object.keys(properties);
        console.log(`   –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞: ${availableProperties.slice(0, 5).join(', ')}${availableProperties.length > 5 ? '...' : ''}`);
        
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ ${product.sku}:`, error.message);
      }
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º
    const articleStats = new Map();
    products.forEach(product => {
      try {
        const properties = JSON.parse(product.properties_data || '{}');
        const articleNumber = properties['–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–æ–≤'];
        if (articleNumber) {
          articleStats.set(articleNumber, (articleStats.get(articleNumber) || 0) + 1);
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
      }
    });
    
    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º (—Ç–æ–ø-10):`);
    const sortedStats = Array.from(articleStats.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10);
    
    sortedStats.forEach(([article, count]) => {
      console.log(`   ${article}: ${count} —Ç–æ–≤–∞—Ä–æ–≤`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkProductsWithNewColumns();
