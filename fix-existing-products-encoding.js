// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –ø–æ–ª–µ–π –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–∞—Ö
const { PrismaClient } = require('@prisma/client');
const { fixFieldsEncoding } = require('./lib/encoding-utils');

const prisma = new PrismaClient();

async function fixExistingProductsEncoding() {
  try {
    console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–∞—Ö...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å properties_data
    const products = await prisma.product.findMany({
      where: {
        properties_data: {
          not: null
        }
      },
      select: {
        id: true,
        sku: true,
        name: true,
        properties_data: true
      }
    });
    
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);
    
    let fixedCount = 0;
    let totalFixedFields = 0;
    
    for (const product of products) {
      try {
        const properties = typeof product.properties_data === 'string' 
          ? JSON.parse(product.properties_data) 
          : product.properties_data;
        
        if (!properties || typeof properties !== 'object') {
          continue;
        }
        
        const originalKeys = Object.keys(properties);
        const fixedKeys = fixFieldsEncoding(originalKeys);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–ª—é—á–∞—Ö
        const hasChanges = originalKeys.some((key, index) => key !== fixedKeys[index]);
        
        if (hasChanges) {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
          const fixedProperties = {};
          originalKeys.forEach((originalKey, index) => {
            const fixedKey = fixedKeys[index];
            fixedProperties[fixedKey] = properties[originalKey];
          });
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          await prisma.product.update({
            where: { id: product.id },
            data: {
              properties_data: JSON.stringify(fixedProperties),
              specifications: JSON.stringify(fixedProperties)
            }
          });
          
          const changedFields = originalKeys.filter((key, index) => key !== fixedKeys[index]);
          console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä ${product.sku}: ${changedFields.length} –ø–æ–ª–µ–π`);
          console.log(`   –ò–∑–º–µ–Ω–µ–Ω–∏—è: ${changedFields.map((key, index) => `"${key}" ‚Üí "${fixedKeys[originalKeys.indexOf(key)]}"`).join(', ')}`);
          
          fixedCount++;
          totalFixedFields += changedFields.length;
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞ ${product.sku}:`, error);
      }
    }
    
    console.log(`\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   - –¢–æ–≤–∞—Ä–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${fixedCount}`);
    console.log(`   - –ü–æ–ª–µ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${totalFixedFields}`);
    console.log(`   - –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${products.length}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
fixExistingProductsEncoding();
