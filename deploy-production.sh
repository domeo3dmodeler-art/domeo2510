#!/bin/bash

# üöÄ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π Production –î–µ–ø–ª–æ–π –¥–ª—è Yandex Cloud
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./deploy-production.sh

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_environment() {
    log "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    if [ ! -f ".env.production" ]; then
        error "–§–∞–π–ª .env.production –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–∫–æ–ø–∏—Ä—É–π—Ç–µ env.production.template –≤ .env.production –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    source .env.production
    
    required_vars=(
        "POSTGRES_PASSWORD"
        "REDIS_PASSWORD" 
        "NEXTAUTH_SECRET"
        "JWT_SECRET"
        "YANDEX_STORAGE_ACCESS_KEY_ID"
        "YANDEX_STORAGE_SECRET_ACCESS_KEY"
        "YANDEX_STORAGE_BUCKET_NAME"
        "GRAFANA_PASSWORD"
    )
    
    for var in "${required_vars[@]}"; do
        if [ -z "${!var}" ] || [[ "${!var}" == *"your_"* ]] || [[ "${!var}" == *"change"* ]]; then
            error "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è $var –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ .env.production"
        fi
    done
    
    log "‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
setup_ssl() {
    log "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã..."
    
    if [ ! -d "nginx/ssl" ]; then
        mkdir -p nginx/ssl
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    if [ ! -f "nginx/ssl/cert.pem" ] || [ ! -f "nginx/ssl/key.pem" ]; then
        warning "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–µ–º —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
            -keyout nginx/ssl/key.pem \
            -out nginx/ssl/cert.pem \
            -subj "/C=RU/ST=Moscow/L=Moscow/O=Domeo/OU=IT/CN=yourdomain.com"
    fi
    
    log "‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
create_directories() {
    log "–°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö..."
    
    directories=(
        "data/postgres"
        "data/redis" 
        "data/uploads"
        "data/logs"
        "data/backups"
        "data/prometheus"
        "data/grafana"
        "data/loki"
    )
    
    for dir in "${directories[@]}"; do
        mkdir -p "$dir"
        chmod 755 "$dir"
    done
    
    log "‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞
setup_firewall() {
    log "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∞–π—Ä–≤–æ–ª..."
    
    # –†–∞–∑—Ä–µ—à–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ—Ä—Ç—ã
    sudo ufw allow 22/tcp    # SSH
    sudo ufw allow 80/tcp    # HTTP
    sudo ufw allow 443/tcp   # HTTPS
    sudo ufw allow 3001/tcp  # Grafana (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    # –í–∫–ª—é—á–∞–µ–º —Ñ–∞–π—Ä–≤–æ–ª
    sudo ufw --force enable
    
    log "‚úÖ –§–∞–π—Ä–≤–æ–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–æ–≤
create_systemd_services() {
    log "–°–æ–∑–¥–∞–µ–º systemd —Å–µ—Ä–≤–∏—Å—ã..."
    
    # –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    sudo tee /etc/systemd/system/domeo.service > /dev/null <<EOF
[Unit]
Description=Domeo Production Application
Requires=docker.service
After=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=$(pwd)
ExecStart=/usr/bin/docker-compose -f docker-compose.production-full.yml up -d
ExecStop=/usr/bin/docker-compose -f docker-compose.production-full.yml down
TimeoutStartSec=0
User=ubuntu
Group=ubuntu

[Install]
WantedBy=multi-user.target
EOF

    # –°–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    sudo tee /etc/systemd/system/domeo-monitoring.service > /dev/null <<EOF
[Unit]
Description=Domeo Monitoring Stack
Requires=docker.service
After=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=$(pwd)
ExecStart=/usr/bin/docker-compose -f docker-compose.production-full.yml up -d prometheus grafana loki promtail
ExecStop=/usr/bin/docker-compose -f docker-compose.production-full.yml stop prometheus grafana loki promtail
TimeoutStartSec=0
User=ubuntu
Group=ubuntu

[Install]
WantedBy=multi-user.target
EOF

    sudo systemctl daemon-reload
    sudo systemctl enable domeo.service
    sudo systemctl enable domeo-monitoring.service
    
    log "‚úÖ Systemd —Å–µ—Ä–≤–∏—Å—ã —Å–æ–∑–¥–∞–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
create_management_scripts() {
    log "–°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è..."
    
    # –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞
    cat > start-production.sh <<'EOF'
#!/bin/bash
echo "üöÄ –ó–∞–ø—É—Å–∫ Domeo Production..."
docker-compose -f docker-compose.production-full.yml up -d
echo "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ"
echo "üåê –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: https://yourdomain.com"
echo "üìä Grafana: https://yourdomain.com:3001"
echo "üìà Prometheus: https://yourdomain.com:9090"
EOF

    # –°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    cat > stop-production.sh <<'EOF'
#!/bin/bash
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Domeo Production..."
docker-compose -f docker-compose.production-full.yml down
echo "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
EOF

    # –°–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    cat > restart-production.sh <<'EOF'
#!/bin/bash
echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Domeo Production..."
docker-compose -f docker-compose.production-full.yml down
docker-compose -f docker-compose.production-full.yml up -d
echo "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ"
EOF

    # –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    cat > update-production.sh <<'EOF'
#!/bin/bash
echo "üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Domeo Production..."

# –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
echo "üíæ –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø..."
docker-compose -f docker-compose.production-full.yml exec postgres pg_dump -U domeo domeo > backup_$(date +%Y%m%d_%H%M%S).sql

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã..."
docker-compose -f docker-compose.production-full.yml down

# –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥
echo "üì• –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥..."
git pull origin main

# –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
echo "üî® –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º..."
docker-compose -f docker-compose.production-full.yml up -d --build

echo "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
EOF

    # –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
    cat > status-production.sh <<'EOF'
#!/bin/bash
echo "üìä –°—Ç–∞—Ç—É—Å Domeo Production"
echo "=========================="

echo "üê≥ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
docker-compose -f docker-compose.production-full.yml ps

echo ""
echo "üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
docker stats --no-stream

echo ""
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è:"
curl -f https://yourdomain.com/api/health && echo "‚úÖ Health OK" || echo "‚ùå Health FAILED"
EOF

    # –°–∫—Ä–∏–ø—Ç –±—ç–∫–∞–ø–∞
    cat > backup-production.sh <<'EOF'
#!/bin/bash
BACKUP_DIR="backups"
BACKUP_FILE="$BACKUP_DIR/backup_$(date +%Y%m%d_%H%M%S).sql"

mkdir -p "$BACKUP_DIR"

echo "üíæ –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
docker-compose -f docker-compose.production-full.yml exec -T postgres pg_dump -U domeo domeo > "$BACKUP_FILE"

echo "üóúÔ∏è –°–∂–∏–º–∞–µ–º –±—ç–∫–∞–ø..."
gzip "$BACKUP_FILE"

echo "‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: $BACKUP_FILE.gz"

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
find "$BACKUP_DIR" -name "backup_*.sql.gz" -mtime +30 -delete
EOF

    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º–∏
    chmod +x *.sh
    
    log "‚úÖ –°–∫—Ä–∏–ø—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ cron –∑–∞–¥–∞—á
setup_cron() {
    log "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º cron –∑–∞–¥–∞—á–∏..."
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ crontab
    (crontab -l 2>/dev/null; echo "# Domeo Production Tasks") | crontab -
    (crontab -l 2>/dev/null; echo "0 2 * * * $(pwd)/backup-production.sh") | crontab -
    (crontab -l 2>/dev/null; echo "0 3 * * * docker system prune -f") | crontab -
    (crontab -l 2>/dev/null; echo "*/5 * * * * $(pwd)/status-production.sh >> /var/log/domeo-status.log 2>&1") | crontab -
    
    log "‚úÖ Cron –∑–∞–¥–∞—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π production –¥–µ–ø–ª–æ–π"
    
    check_environment
    setup_ssl
    create_directories
    setup_firewall
    create_systemd_services
    create_management_scripts
    setup_cron
    
    log "üéâ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π production –¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!"
    log ""
    log "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    log "1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ DNS –¥–ª—è –≤–∞—à–µ–≥–æ –¥–æ–º–µ–Ω–∞"
    log "2. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã (Let's Encrypt)"
    log "3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: ./start-production.sh"
    log "4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: ./status-production.sh"
    log ""
    log "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
    log "- –ó–∞–ø—É—Å–∫: ./start-production.sh"
    log "- –û—Å—Ç–∞–Ω–æ–≤–∫–∞: ./stop-production.sh"
    log "- –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: ./restart-production.sh"
    log "- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ./update-production.sh"
    log "- –°—Ç–∞—Ç—É—Å: ./status-production.sh"
    log "- –ë—ç–∫–∞–ø: ./backup-production.sh"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
trap 'error "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ $LINENO"' ERR

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
