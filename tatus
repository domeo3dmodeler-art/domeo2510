[1mdiff --git a/app/api/admin/import/photos/route.ts b/app/api/admin/import/photos/route.ts[m
[1mindex 4362213..7d8840a 100644[m
[1m--- a/app/api/admin/import/photos/route.ts[m
[1m+++ b/app/api/admin/import/photos/route.ts[m
[36m@@ -1,380 +1,411 @@[m
[31m-import { NextRequest, NextResponse } from 'next/server';[m
[31m-import { PrismaClient } from '@prisma/client';[m
[31m-import { writeFile, mkdir } from 'fs/promises';[m
[31m-import fs from 'fs';[m
[31m-import path from 'path';[m
[31m-import { validateImageFile, generateUniqueFileName } from '../../../../../lib/validation/file-validation';[m
[31m-import { uploadRateLimiter, getClientIP, createRateLimitResponse } from '../../../../../lib/security/rate-limiter';[m
[31m-import { upsertPropertyPhoto, deletePropertyPhotos } from '../../../../../lib/property-photos';[m
[31m-[m
[31m-const prisma = new PrismaClient();[m
[31m-[m
[31m-// DELETE /api/admin/import/photos - –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–∏–≤—è–∑–æ–∫ —Ñ–æ—Ç–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏[m
[31m-export async function DELETE(request: NextRequest) {[m
[31m-  try {[m
[31m-    const { searchParams } = new URL(request.url);[m
[31m-    const category = searchParams.get('category');[m
[31m-    const propertyName = searchParams.get('property_name');[m
[31m-[m
[31m-    if (!category) {[m
[31m-      return NextResponse.json([m
[31m-        { success: false, message: '–ù–µ —É–∫–∞–∑–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è' },[m
[31m-        { status: 400 }[m
[31m-      );[m
[31m-    }[m
[31m-[m
[31m-    let deletedCount = 0;[m
[31m-[m
[31m-    if (propertyName) {[m
[31m-      // –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞[m
[31m-      const result = await prisma.propertyPhoto.deleteMany({[m
[31m-      where: {[m
[31m-          categoryId: category,[m
[31m-          propertyName: propertyName[m
[31m-        }[m
[31m-      });[m
[31m-      deletedCount = result.count;[m
[31m-    } else {[m
[31m-      // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏[m
[31m-      const result = await prisma.propertyPhoto.deleteMany({[m
[31m-        where: {[m
[31m-          categoryId: category[m
[31m-        }[m
[31m-      });[m
[31m-      deletedCount = result.count;[m
[31m-    }[m
[31m-[m
[31m-    // –û—á–∏—â–∞–µ–º –∫—ç—à[m
[31m-    try {[m
[31m-      await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/catalog/doors/photos`, {[m
[31m-        method: 'DELETE'[m
[31m-      });[m
[31m-      await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/catalog/doors/complete-data`, {[m
[31m-        method: 'DELETE'[m
[31m-      });[m
[31m-      } catch (error) {[m
[31m-      console.warn('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞:', error);[m
[31m-    }[m
[31m-[m
[31m-    return NextResponse.json({[m
[31m-      success: true,[m
[31m-      message: `–£–¥–∞–ª–µ–Ω–æ ${deletedCount} —Ñ–æ—Ç–æ`,[m
[31m-      deletedCount[m
[31m-    });[m
[31m-[m
[31m-  } catch (error) {[m
[31m-    console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–æ—Ç–æ:', error);[m
[31m-    return NextResponse.json([m
[31m-      { success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–æ—Ç–æ' },[m
[31m-      { status: 500 }[m
[31m-    );[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-// POST /api/admin/import/photos - –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —Å–≤–æ–π—Å—Ç–≤ —Ç–æ–≤–∞—Ä–æ–≤[m
[31m-export async function POST(request: NextRequest) {[m
[31m-  try {[m
[31m-    // –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting[m
[31m-    const clientIP = getClientIP(request);[m
[31m-    const isAllowed = uploadRateLimiter.isAllowed(clientIP);[m
[31m-    [m
[31m-    if (!isAllowed) {[m
[31m-      return createRateLimitResponse(uploadRateLimiter, clientIP);[m
[31m-    }[m
[31m-[m
[31m-    const formData = await request.formData();[m
[31m-    const photos = formData.getAll('photos') as File[];[m
[31m-    const category = formData.get('category') as string;[m
[31m-    const mappingProperty = formData.get('mapping_property') as string;[m
[31m-    const uploadType = formData.get('upload_type') as string || 'property';[m
[31m-[m
[31m-    console.log('=== –ó–ê–ì–†–£–ó–ö–ê –§–û–¢–û ===');[m
[31m-    console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ:', photos.length);[m
[31m-    console.log('–ö–∞—Ç–µ–≥–æ—Ä–∏—è:', category);[m
[31m-    console.log('–°–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏:', mappingProperty);[m
[31m-    console.log('–¢–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏:', uploadType);[m
[31m-[m
[31m-    if (!category || !mappingProperty) {[m
[31m-      return NextResponse.json([m
[31m-        { success: false, message: '–ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–ª–∏ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏' },[m
[31m-        { status: 400 }[m
[31m-      );[m
[31m-    }[m
[31m-[m
[31m-    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏[m
[31m-    const uploadDir = path.join(process.cwd(), 'public', 'uploads', 'products', category);[m
[31m-    [m
[31m-    try {[m
[31m-      await mkdir(uploadDir, { recursive: true });[m
[31m-      console.log('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞:', uploadDir);[m
[31m-    } catch (error) {[m
[31m-      console.log('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', error);[m
[31m-    }[m
[31m-[m
[31m-    const uploadedPhotos: any[] = [];[m
[31m-    const uploadErrors: string[] = [];[m
[31m-[m
[31m-    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏[m
[31m-    for (let i = 0; i < photos.length; i++) {[m
[31m-      const photo = photos[i];[m
[31m-      [m
[31m-      try {[m
[31m-        console.log(`–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ ${i + 1}/${photos.length}: ${photo.name}`);[m
[31m-        [m
[31m-        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞[m
[31m-        const validation = validateImageFile(photo);[m
[31m-        if (!validation.isValid) {[m
[31m-          uploadErrors.push(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ${photo.name}: ${validation.error}`);[m
[31m-          continue;[m
[31m-        }[m
[31m-        [m
[31m-        const bytes = await photo.arrayBuffer();[m
[31m-        const buffer = Buffer.from(bytes);[m
[31m-        [m
[31m-        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞[m
[31m-        const fileName = generateUniqueFileName(photo.name);[m
[31m-        const filePath = path.join(uploadDir, fileName);[m
[31m-        [m
[31m-        await writeFile(filePath, buffer);[m
[31m-        [m
[31m-        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–±—É–¥–µ–º –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ç–∏–ø –ø–æ–∑–∂–µ)[m
[31m-        const uploadedPhoto = {[m
[31m-          originalName: photo.name,[m
[31m-          fileName: fileName,[m
[31m-          filePath: `/uploads/products/${category}/${fileName}`,[m
[31m-          size: photo.size,[m
[31m-          type: photo.type,[m
[31m-          photoInfo: null // –û–ø—Ä–µ–¥–µ–ª–∏–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤[m
[31m-        };[m
[31m-        [m
[31m-        uploadedPhotos.push(uploadedPhoto);[m
[31m-        [m
[31m-        console.log(`Photo ${i} uploaded successfully:`, fileName);[m
[31m-        [m
[31m-      } catch (error) {[m
[31m-        console.error(`Error uploading photo ${i}:`, error);[m
[31m-        uploadErrors.push(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ${photo.name}: ${error.message}`);[m
[31m-      }[m
[31m-    }[m
[31m-    [m
[31m-    // –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–æ—Ç–æ (–æ–±–ª–æ–∂–∫–∞/–≥–∞–ª–µ—Ä–µ—è)[m
[31m-    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –±–∞–∑–æ–≤–æ–º—É –∏–º–µ–Ω–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∞–º—É—é –∫–æ—Ä–æ—Ç–∫—É—é –æ–±–ª–æ–∂–∫—É[m
[31m-    const photoGroups = new Map<string, any[]>();[m
[31m-    [m
[31m-    for (const photo of uploadedPhotos) {[m
[31m-      const nameWithoutExt = photo.originalName.replace(/\.[^/.]+$/, "");[m
[31m-      const match = nameWithoutExt.match(/^(.+)_(\d+)$/);[m
[31m-      const baseName = match ? match[1] : nameWithoutExt;[m
[31m-      [m
[31m-      if (!photoGroups.has(baseName)) {[m
[31m-        photoGroups.set(baseName, []);[m
[31m-      }[m
[31m-      photoGroups.get(baseName)!.push(photo);[m
[31m-    }[m
[31m-    [m
[31m-    // –î–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–æ–∂–∫—É –∏ –≥–∞–ª–µ—Ä–µ—é[m
[31m-    for (const [baseName, group] of photoGroups.entries()) {[m
[31m-      // –ù–∞—Ö–æ–¥–∏–º –æ–±–ª–æ–∂–∫—É: —Å–∞–º–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –≤ –≥—Ä—É–ø–ø–µ[m
[31m-      let coverPhoto = null;[m
[31m-      let shortestLength = Infinity;[m
[31m-      [m
[31m-      for (const photo of group) {[m
[31m-        const nameWithoutExt = photo.originalName.replace(/\.[^/.]+$/, "");[m
[31m-        const nameLength = nameWithoutExt.length;[m
[31m-        [m
[31m-        if (nameLength < shortestLength) {[m
[31m-          shortestLength = nameLength;[m
[31m-          coverPhoto = photo;[m
[31m-        }[m
[31m-      }[m
[31m-      [m
[31m-      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø–ø–µ[m
[31m-      for (const photo of group) {[m
[31m-        const nameWithoutExt = photo.originalName.replace(/\.[^/.]+$/, "");[m
[31m-        const match = nameWithoutExt.match(/^(.+)_(\d+)$/);[m
[31m-        const isCover = photo === coverPhoto;[m
[31m-        [m
[31m-        photo.photoInfo = {[m
[31m-          fileName: photo.originalName,[m
[31m-          isCover: isCover,[m
[31m-          number: match ? parseInt(match[2]) : null,[m
[31m-          baseName: baseName[m
[31m-        };[m
[31m-      }[m
[31m-    }[m
[31m-    [m
[31m-    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ñ–æ—Ç–æ –∫ —Ç–æ–≤–∞—Ä–∞–º –∏–ª–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º[m
[31m-    let linkedPhotos = 0;[m
[31m-    const linkedDetails: any[] = [];[m
[31m-[m
[31m-    if (mappingProperty && uploadedPhotos.length > 0) {[m
[31m-      if (uploadType === 'property') {[m
[31m-        console.log('–ü—Ä–∏–≤—è–∑–∫–∞ —Ñ–æ—Ç–æ –∫ —Å–≤–æ–π—Å—Ç–≤–∞–º —Ç–æ–≤–∞—Ä–æ–≤ (property_photos)...');[m
[31m-        [m
[31m-        for (const photo of uploadedPhotos) {[m
[31m-          const { photoInfo } = photo;[m
[31m-          [m
[31m-          console.log(`\n=== –û–ë–†–ê–ë–û–¢–ö–ê –§–û–¢–û: ${photo.originalName} ===`);[m
[31m-          console.log(`–¢–∏–ø —Ñ–æ—Ç–æ: ${photoInfo.isCover ? '–û–ë–õ–û–ñ–ö–ê' : '–ì–ê–õ–ï–†–ï–Ø'}`);[m
[31m-          console.log(`–ë–∞–∑–æ–≤–æ–µ –∏–º—è: ${photoInfo.baseName}`);[m
[31m-          console.log(`–ù–æ–º–µ—Ä: ${photoInfo.number || 'N/A'}`);[m
[31m-[m
[31m-          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–æ—Ç–æ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö[m
[31m-          const photoType = photoInfo.isCover ? 'cover' : `gallery_${photoInfo.number}`;[m
[31m-[m
[31m-          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ property_photos[m
[31m-          const savedPhoto = await upsertPropertyPhoto([m
[31m-            category,[m
[31m-            mappingProperty,[m
[31m-            photoInfo.baseName,[m
[31m-            photo.filePath,[m
[31m-            photoType,[m
[31m-            {[m
[31m-              originalFilename: photo.originalName,[m
[31m-              fileSize: photo.size,[m
[31m-              mimeType: photo.type[m
[31m-            }[m
[31m-          );[m
[31m-[m
[31m-          if (savedPhoto) {[m
[31m-            linkedPhotos++;[m
[31m-            [m
[31m-            // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä—ã —Å —ç—Ç–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏[m
[31m-        const products = await prisma.product.findMany({[m
[31m-          where: {[m
[31m-                catalog_category_id: category,[m
[31m-                properties_data: {[m
[31m-                  contains: `"${mappingProperty}":"${photoInfo.baseName}"`[m
[31m-                }[m
[31m-          },[m
[31m-          select: {[m
[31m-            id: true,[m
[31m-            sku: true,[m
[31m-                name: true[m
[31m-              }[m
[31m-            });[m
[31m-[m
[31m-            linkedDetails.push({[m
[31m-              fileName: photo.originalName,[m
[31m-              message: `–ü—Ä–∏–≤—è–∑–∞–Ω–æ –∫ ${products.length} —Ç–æ–≤–∞—Ä–∞–º`,[m
[31m-              productsLinked: products.length,[m
[31m-              matchedProducts: products.map(p => ({[m
[31m-                id: p.id,[m
[31m-                sku: p.sku,[m
[31m-                name: p.name[m
[31m-              }))[m
[31m-            });[m
[31m-[m
[31m-            console.log(`‚úÖ –§–æ—Ç–æ ${photo.originalName} –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ —Å–≤–æ–π—Å—Ç–≤—É ${mappingProperty}="${photoInfo.baseName}"`);[m
[31m-          } else {[m
[31m-            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ ${photo.originalName}`);[m
[31m-          }[m
[31m-        }[m
[31m-      } else {[m
[31m-        console.log('–ü—Ä–∏–≤—è–∑–∫–∞ —Ñ–æ—Ç–æ –∫ —Ç–æ–≤–∞—Ä–∞–º (properties_data)...');[m
[31m-[m
[31m-        for (const photo of uploadedPhotos) {[m
[31m-          const { photoInfo } = photo;[m
[31m-          [m
[31m-          console.log(`\n=== –û–ë–†–ê–ë–û–¢–ö–ê –§–û–¢–û: ${photo.originalName} ===`);[m
[31m-          console.log(`–ë–∞–∑–æ–≤–æ–µ –∏–º—è: ${photoInfo.baseName}`);[m
[31m-[m
[31m-          // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä—ã —Å —ç—Ç–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º —Å–≤–æ–π—Å—Ç–≤–∞[m
[31m-          const products = await prisma.product.findMany({[m
[31m-            where: {[m
[31m-              catalog_category_id: category,[m
[31m-              properties_data: {[m
[31m-                contains: `"${mappingProperty}":"${photoInfo.baseName}"`[m
[31m-              }[m
[31m-            },[m
[31m-            select: {[m
[31m-              id: true,[m
[31m-              sku: true,[m
[31m-              name: true,[m
[31m-              properties_data: true[m
[31m-            }[m
[31m-          });[m
[31m-[m
[31m-          let productsUpdated = 0;[m
[31m-          for (const product of products) {[m
[31m-            try {[m
[31m-              const properties = JSON.parse(product.properties_data || '{}');[m
[31m-              if (!properties.photos) {[m
[31m-                properties.photos = [];[m
[31m-              }[m
[31m-              [m
[31m-              // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∫ —Ç–æ–≤–∞—Ä—É[m
[31m-              properties.photos.push(photo.filePath);[m
[31m-                [m
[31m-                await prisma.product.update({[m
[31m-                  where: { id: product.id },[m
[31m-                  data: {[m
[31m-                  properties_data: JSON.stringify(properties)[m
[31m-                }[m
[31m-              });[m
[31m-              [m
[31m-              productsUpdated++;[m
[31m-            } catch (error) {[m
[31m-              console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ${product.sku}:`, error);[m
[31m-            }[m
[31m-          }[m
[31m-[m
[31m-          if (productsUpdated > 0) {[m
[31m-                linkedPhotos++;[m
[31m-            linkedDetails.push({[m
[31m-              fileName: photo.originalName,[m
[31m-              message: `–ü—Ä–∏–≤—è–∑–∞–Ω–æ –∫ ${productsUpdated} —Ç–æ–≤–∞—Ä–∞–º`,[m
[31m-              productsLinked: productsUpdated,[m
[31m-              matchedProducts: products.slice(0, productsUpdated).map(p => ({[m
[31m-                id: p.id,[m
[31m-                sku: p.sku,[m
[31m-                name: p.name[m
[31m-              }))[m
[31m-            });[m
[31m-[m
[31m-            console.log(`‚úÖ –§–æ—Ç–æ ${photo.originalName} –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ ${productsUpdated} —Ç–æ–≤–∞—Ä–∞–º`);[m
[31m-          }[m
[31m-        }[m
[31m-      }[m
[31m-    }[m
[31m-[m
[31m-    // –û—á–∏—â–∞–µ–º –∫—ç—à[m
[31m-    try {[m
[31m-      await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/catalog/doors/photos`, {[m
[31m-        method: 'DELETE'[m
[31m-      });[m
[31m-      await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000