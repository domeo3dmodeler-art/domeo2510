const fs = require('fs');
const path = require('path');

async function fixCodeIssues() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã...');
  
  let fixedFiles = 0;
  let removedConsoleLogs = 0;
  let optimizedFiles = 0;
  
  // 1. –£–¥–∞–ª—è–µ–º console.log –∏–∑ –ø—Ä–æ–¥–∞–∫—à–Ω –∫–æ–¥–∞
  console.log('\nüêõ –£–¥–∞–ª—è–µ–º console.log –∏–∑ –ø—Ä–æ–¥–∞–∫—à–Ω –∫–æ–¥–∞...');
  
  const filesToClean = [
    'app/admin/catalog/import/page.tsx',
    'app/api/catalog/configurable-products/route.ts',
    'app/api/documents/generate/route.ts',
    'app/api/documents/[id]/send/route.ts'
  ];
  
  for (const filePath of filesToClean) {
    const fullPath = path.join(__dirname, filePath);
    if (fs.existsSync(fullPath)) {
      try {
        let content = fs.readFileSync(fullPath, 'utf8');
        const originalContent = content;
        
        // –£–¥–∞–ª—è–µ–º console.log —Å—Ç—Ä–æ–∫–∏
        const lines = content.split('\n');
        const cleanedLines = lines.filter(line => {
          const trimmed = line.trim();
          if (trimmed.startsWith('console.log') && !trimmed.includes('// TODO: keep')) {
            removedConsoleLogs++;
            return false;
          }
          return true;
        });
        
        content = cleanedLines.join('\n');
        
        if (content !== originalContent) {
          fs.writeFileSync(fullPath, content);
          fixedFiles++;
          console.log(`   ‚úÖ –û—á–∏—â–µ–Ω: ${filePath}`);
        }
      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${filePath}: ${error.message}`);
      }
    }
  }
  
  // 2. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã
  console.log('\n‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º app/doors/page.tsx
  const doorsPagePath = path.join(__dirname, 'app/doors/page.tsx');
  if (fs.existsSync(doorsPagePath)) {
    try {
      const stats = fs.statSync(doorsPagePath);
      if (stats.size > 100 * 1024) { // –ë–æ–ª—å—à–µ 100KB
        console.log(`   üìä app/doors/page.tsx: ${(stats.size / 1024).toFixed(1)} KB - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞–∑–±–∏—Ç—å –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã`);
        optimizedFiles++;
      }
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ doors page: ${error.message}`);
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º UltimateConstructorFixed.tsx
  const constructorPath = path.join(__dirname, 'components/constructor/UltimateConstructorFixed.tsx');
  if (fs.existsSync(constructorPath)) {
    try {
      const stats = fs.statSync(constructorPath);
      if (stats.size > 100 * 1024) { // –ë–æ–ª—å—à–µ 100KB
        console.log(`   üìä UltimateConstructorFixed.tsx: ${(stats.size / 1024).toFixed(1)} KB - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞–∑–±–∏—Ç—å –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã`);
        optimizedFiles++;
      }
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ constructor: ${error.message}`);
    }
  }
  
  // 3. –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  console.log('\nüñºÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ–ª—å—à–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
  
  const largeImages = [
    'public/uploads/products/cmg50xcgs001cv7mn0tdyk1wo/1760988772632_z9yraj_d5_1.png', // 1.4MB
    'public/uploads/products/cmg50xcgs001cv7mn0tdyk1wo/1760988772666_pefe4s_d5_2.png', // 510KB
    'public/uploads/products/cmg50xcgs001cv7mn0tdyk1wo/1760988772609_8tc6yf_d5.png',    // 280KB
    'public/uploads/products/cmg50xcgs001cv7mn0tdyk1wo/1760988772585_h7rqku_d3.png',   // 226KB
    'public/uploads/products/cmg50xcgs001cv7mn0tdyk1wo/1760988772567_79x1x1_d2.png'    // 177KB
  ];
  
  let optimizedImages = 0;
  for (const imagePath of largeImages) {
    const fullPath = path.join(__dirname, imagePath);
    if (fs.existsSync(fullPath)) {
      try {
        const stats = fs.statSync(fullPath);
        if (stats.size > 200 * 1024) { // –ë–æ–ª—å—à–µ 200KB
          console.log(`   üñºÔ∏è –ë–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${path.basename(imagePath)} (${(stats.size / 1024).toFixed(1)} KB)`);
          optimizedImages++;
        }
      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${imagePath}: ${error.message}`);
      }
    }
  }
  
  // 4. –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  console.log('\nüìù –°–æ–∑–¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...');
  
  const optimizationRecommendations = {
    timestamp: new Date().toISOString(),
    performance: {
      largeFiles: [
        {
          file: 'app/doors/page.tsx',
          size: '176.4 KB',
          recommendation: '–†–∞–∑–±–∏—Ç—å –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: DoorList, DoorCard, DoorFilters'
        },
        {
          file: 'components/constructor/UltimateConstructorFixed.tsx',
          size: '126.8 KB',
          recommendation: '–†–∞–∑–±–∏—Ç—å –Ω–∞ –º–æ–¥—É–ª–∏: ConstructorCore, ConstructorUI, ConstructorLogic'
        }
      ],
      largeImages: [
        {
          file: 'public/uploads/products/cmg50xcgs001cv7mn0tdyk1wo/1760988772632_z9yraj_d5_1.png',
          size: '1424.9 KB',
          recommendation: '–°–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ 200-300KB, —Å–æ–∑–¥–∞—Ç—å WebP –≤–µ—Ä—Å–∏—é'
        }
      ],
      database: {
        models: 28,
        relations: 21,
        recommendation: '–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ–ª–µ–π'
      }
    },
    codeQuality: {
      consoleLogsRemoved: removedConsoleLogs,
      recommendation: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–≥–≥–µ—Ä –≤–º–µ—Å—Ç–æ console.log –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ'
    },
    security: {
      recommendation: '–†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å npm audit'
    }
  };
  
  try {
    fs.writeFileSync('optimization-recommendations.json', JSON.stringify(optimizationRecommendations, null, 2));
    console.log('   üìÑ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ optimization-recommendations.json');
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: ${error.message}`);
  }
  
  // 5. –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  console.log('\nüìä –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
  
  const monitoringScript = `
const fs = require('fs');
const path = require('path');

// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function monitorPerformance() {
  const startTime = Date.now();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
  const largeFiles = [];
  function scanFiles(dir, maxSize = 100 * 1024) {
    try {
      const items = fs.readdirSync(dir);
      for (const item of items) {
        const fullPath = path.join(dir, item);
        const stats = fs.statSync(fullPath);
        
        if (stats.isDirectory() && !['node_modules', '.git', '.next'].includes(item)) {
          scanFiles(fullPath, maxSize);
        } else if (stats.isFile() && stats.size > maxSize) {
          largeFiles.push({
            path: path.relative(process.cwd(), fullPath),
            size: (stats.size / 1024).toFixed(1) + ' KB'
          });
        }
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
    }
  }
  
  scanFiles(process.cwd());
  
  const endTime = Date.now();
  const duration = endTime - startTime;
  
  console.log(\`üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ \${duration}ms\`);
  console.log(\`üìä –ù–∞–π–¥–µ–Ω–æ \${largeFiles.length} –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤\`);
  
  if (largeFiles.length > 0) {
    console.log('‚ö†Ô∏è –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã:');
    largeFiles.slice(0, 5).forEach(file => {
      console.log(\`   - \${file.path} (\${file.size})\`);
    });
  }
  
  return {
    duration,
    largeFilesCount: largeFiles.length,
    largeFiles: largeFiles.slice(0, 10)
  };
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
module.exports = { monitorPerformance };

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  monitorPerformance();
}
`;
  
  try {
    fs.writeFileSync('performance-monitor.js', monitoringScript);
    console.log('   üìÑ –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–∑–¥–∞–Ω: performance-monitor.js');
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${error.message}`);
  }
  
  // 6. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:');
  console.log(`   üîß –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${fixedFiles}`);
  console.log(`   üêõ –£–¥–∞–ª–µ–Ω–æ console.log: ${removedConsoleLogs}`);
  console.log(`   ‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${optimizedFiles}`);
  console.log(`   üñºÔ∏è –ë–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${optimizedImages}`);
  
  console.log('\nüí° –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
  console.log('   1. –†–∞–∑–±–∏—Ç—å –±–æ–ª—å—à–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞ –º–æ–¥—É–ª–∏');
  console.log('   2. –°–∂–∞—Ç—å –±–æ–ª—å—à–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
  console.log('   3. –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã –≤ –ë–î –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ–ª–µ–π');
  console.log('   4. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–≥–µ—Ä –≤–º–µ—Å—Ç–æ console.log');
  console.log('   5. –†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å performance-monitor.js');
  
  console.log('\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
}

fixCodeIssues();
