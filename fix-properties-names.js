const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function fixPropertiesNames() {
  console.log('üîç –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –∏ –æ–ø–∏—Å–∞–Ω–∏–π —Å–≤–æ–π—Å—Ç–≤...');
  
  try {
    const properties = await prisma.productProperty.findMany();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å–≤–æ–π—Å—Ç–≤: ${properties.length}`);

    let fixedCount = 0;

    for (const property of properties) {
      let needsUpdate = false;
      let newName = property.name;
      let newDescription = property.description;

      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–ª—É—á–∞–∏
      if (property.name === '????? ???????? ????????') {
        newName = '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ —Å–ø–∏—Å–∫–∞';
        newDescription = '–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞ —Å–ø–∏—Å–∫–∞';
        needsUpdate = true;
      } else if (property.name === '???????? ???????? 2') {
        newName = '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ 2';
        newDescription = '–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞ 2';
        needsUpdate = true;
      }

      if (needsUpdate) {
        await prisma.productProperty.update({
          where: { id: property.id },
          data: {
            name: newName,
            description: newDescription,
          },
        });
        console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ: ${property.id} -> "${newName}"`);
        fixedCount++;
      }
    }

    console.log(`üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–≤–æ–π—Å—Ç–≤: ${fixedCount}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixPropertiesNames();
