const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

async function fixPhotoParsing() {
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–æ—Ç–æ —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏
    const wrongPhotos = await prisma.propertyPhoto.findMany({
      where: {
        categoryId: 'cmg50xcgs001cv7mn0tdyk1wo',
        propertyValue: {
          in: ['1', '2'] // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã
        }
      }
    });

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${wrongPhotos.length} —Ñ–æ—Ç–æ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏`);

    for (const photo of wrongPhotos) {
      try {
        const fileName = photo.originalFilename;
        console.log(`\n=== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: ${fileName} ===`);

        // –ü–∞—Ä—Å–∏–º –∏–º—è —Ñ–∞–π–ª–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        const nameWithoutExt = fileName.replace(/\.[^/.]+$/, "");
        
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å —Å timestamp –∏ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
        const parts = nameWithoutExt.split('_');
        
        if (parts.length >= 3) {
          // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ —á–∞—Å—Ç–∏ –∫–∞–∫ –∞—Ä—Ç–∏–∫—É–ª –∏ –Ω–æ–º–µ—Ä
          const lastPart = parts[parts.length - 1];
          const secondLastPart = parts[parts.length - 2];
          
          let supplierSku = '';
          let photoType = 'cover';
          
          if (/^\d+$/.test(lastPart)) {
            // –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - —ç—Ç–æ –Ω–æ–º–µ—Ä –≥–∞–ª–µ—Ä–µ–∏
            supplierSku = secondLastPart;
            photoType = `gallery_${lastPart}`;
          } else {
            // –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - —ç—Ç–æ –∞—Ä—Ç–∏–∫—É–ª
            supplierSku = lastPart;
            photoType = 'cover';
          }

          console.log(`–ê—Ä—Ç–∏–∫—É–ª: ${supplierSku}, –¢–∏–ø: ${photoType}`);

          // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ
          await prisma.propertyPhoto.delete({
            where: { id: photo.id }
          });

          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
          await prisma.propertyPhoto.create({
            data: {
              categoryId: photo.categoryId,
              propertyName: photo.propertyName,
              propertyValue: supplierSku,
              photoPath: photo.photoPath,
              photoType: photoType,
              originalFilename: photo.originalFilename,
              fileSize: photo.fileSize,
              mimeType: photo.mimeType
            }
          });

          console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${fileName} -> ${supplierSku} (${photoType})`);
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ${photo.originalFilename}:`, error.message);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const totalPropertyPhotos = await prisma.propertyPhoto.count({
      where: {
        categoryId: 'cmg50xcgs001cv7mn0tdyk1wo'
      }
    });

    console.log(`\nüìà –ò—Ç–æ–≥–æ —Ñ–æ—Ç–æ –≤ property_photos: ${totalPropertyPhotos}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º
    const photosByArticul = await prisma.propertyPhoto.findMany({
      where: {
        categoryId: 'cmg50xcgs001cv7mn0tdyk1wo'
      },
      orderBy: [
        { propertyValue: 'asc' },
        { photoType: 'asc' }
      ]
    });

    console.log('\nüìã –í—Å–µ —Ñ–æ—Ç–æ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º:');
    const groupedPhotos = photosByArticul.reduce((acc, photo) => {
      if (!acc[photo.propertyValue]) {
        acc[photo.propertyValue] = [];
      }
      acc[photo.propertyValue].push(photo);
      return acc;
    }, {});

    Object.keys(groupedPhotos).forEach(articul => {
      const photos = groupedPhotos[articul];
      console.log(`   ‚Ä¢ ${articul}: ${photos.length} —Ñ–æ—Ç–æ`);
      photos.forEach(photo => {
        console.log(`     - ${photo.photoType}: ${photo.originalFilename}`);
      });
    });

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
fixPhotoParsing();
