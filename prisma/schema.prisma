generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./database/dev.db"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password_hash String
  first_name    String
  last_name     String
  middle_name   String?
  role          String    @default("admin")
  is_active     Boolean   @default(true)
  last_login    DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  @@map("users")
}

model Client {
  id            String   @id @default(cuid())
  firstName     String
  lastName      String
  middleName    String?
  phone         String
  address       String
  objectId      String   // ID объекта
  customFields  String   @default("{}") // JSON с произвольными полями
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Связи с документами
  quotes        Quote[]
  invoices      Invoice[]
  orders        Order[]
  documents     Document[]
  notifications Notification[]

  @@map("clients")
}

model CatalogCategory {
  id                   String                       @id @default(cuid())
  name                 String
  parent_id            String?
  level                Int                          @default(0)
  path                 String
  sort_order           Int                          @default(0)
  is_active            Boolean                      @default(true)
  products_count       Int                          @default(0)
  created_at           DateTime                     @default(now())
  updated_at           DateTime                     @updatedAt
  parent               CatalogCategory?             @relation("CatalogHierarchy", fields: [parent_id], references: [id], onDelete: Cascade)
  subcategories        CatalogCategory[]            @relation("CatalogHierarchy")
  property_assignments CategoryPropertyAssignment[]
  export_settings      ExportSetting[]
  import_templates     ImportTemplate[]
  products             Product[]

  @@index([parent_id])
  @@index([path])
  @@map("catalog_categories")
}

model ProductProperty {
  id                   String                       @id @default(cuid())
  name                 String                       @unique
  type                 String
  description          String?
  options              String?
  is_required          Boolean                      @default(false)
  is_active            Boolean                      @default(true)
  created_at           DateTime                     @default(now())
  updated_at           DateTime                     @updatedAt
  category_assignments CategoryPropertyAssignment[]

  @@map("product_properties")
}

model CategoryPropertyAssignment {
  id                  String          @id @default(cuid())
  catalog_category_id String
  product_property_id String
  is_required         Boolean         @default(false)
  is_for_calculator   Boolean         @default(false)
  is_for_export       Boolean         @default(false)
  sort_order          Int             @default(0)
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  product_property    ProductProperty @relation(fields: [product_property_id], references: [id], onDelete: Cascade)
  catalog_category    CatalogCategory @relation(fields: [catalog_category_id], references: [id], onDelete: Cascade)

  @@unique([catalog_category_id, product_property_id])
  @@map("category_property_assignments")
}

model ImportTemplate {
  id                  String          @id @default(cuid())
  catalog_category_id String          @unique // Один шаблон на категорию каталога
  name                String
  description         String?         // Описание шаблона
  required_fields     String          @default("[]") // Обязательные поля
  calculator_fields   String          @default("[]") // Поля для калькулятора
  export_fields       String          @default("[]") // Поля для экспорта
  template_config     String?         // JSON конфигурация шаблона
  field_mappings      String?         // JSON маппинг полей
  validation_rules    String?         // JSON правила валидации
  is_active           Boolean         @default(true)
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  
  // Связи
  catalog_category    CatalogCategory @relation(fields: [catalog_category_id], references: [id], onDelete: Cascade)
  import_history      ImportHistory[]

  @@index([catalog_category_id])
  @@map("import_templates")
}

model ConstructorConfiguration {
  id            String   @id @default(cuid())
  categoryId    String
  name          String
  configuration String   // JSON configuration of the constructor
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("constructor_configurations")
}

model Document {
  id            String   @id @default(cuid())
  clientId      String
  type          String   // 'quote', 'invoice', 'order'
  status        String   @default("draft") // 'draft', 'sent', 'paid', 'cancelled'
  content       String   // JSON содержимого документа
  documentData  String?  // JSON дополнительных данных
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Связи
  client        Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model ExportSetting {
  id                  String          @id @default(cuid())
  catalog_category_id String
  export_type         String
  fields_config       String          @default("[]")
  display_config      String          @default("{}")
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  catalog_category    CatalogCategory @relation(fields: [catalog_category_id], references: [id], onDelete: Cascade)

  @@unique([catalog_category_id, export_type])
  @@map("export_settings")
}

model FrontendCategory {
  id                   String   @id @default(cuid())
  name                 String
  slug                 String   @unique
  description          String?
  icon                 String?
  catalog_category_ids String   @default("[]") // JSON массив ID категорий каталога
  display_config       String   @default("{}")
  property_mapping     String?  @default("[]")
  photo_mapping        String?  @default("{}")
  photo_data           String?  @default("{}")
  is_active            Boolean  @default(true)
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt

  @@index([slug])
  @@map("frontend_categories")
}

model ConstructorConfig {
  id          String   @id @default(cuid())
  name        String
  description String?
  config      String   // JSON конфигурация конструктора
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("constructor_configs")
}


model Product {
  id                  String          @id @default(cuid())
  catalog_category_id String
  sku                 String          @unique
  name                String
  description         String?
  brand               String?
  model               String?
  series              String?
  base_price          Float
  currency            String          @default("RUB")
  stock_quantity      Int             @default(0)
  min_order_qty       Int             @default(1)
  weight              Float?
  dimensions          String          @default("{}")
  specifications      String          @default("{}")
  properties_data     String          @default("{}")
  tags                String          @default("[]")
  is_active           Boolean         @default(true)
  is_featured         Boolean         @default(false)
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  catalog_category    CatalogCategory @relation(fields: [catalog_category_id], references: [id], onDelete: Cascade)
  images              ProductImage[]

  @@map("products")
  @@index([catalog_category_id])
  @@index([is_active])
  @@index([created_at])
  @@index([properties_data])
}

model ProductImage {
  id            String   @id @default(cuid())
  product_id    String
  filename      String
  original_name String
  url           String
  alt_text      String?
  width         Int?
  height        Int?
  file_size     Int?
  mime_type     String
  is_primary    Boolean  @default(false)
  sort_order    Int      @default(0)
  created_at    DateTime @default(now())
  product       Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model Quote {
  id           String    @id @default(cuid())
  number       String    @unique
  client_id    String
  created_by   String
  status       String    @default("DRAFT")
  valid_until  DateTime?
  subtotal     Float     @default(0)
  tax_amount   Float     @default(0)
  total_amount Float     @default(0)
  currency     String    @default("RUB")
  notes        String?
  terms        String?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  
  // Связи
  client       Client    @relation(fields: [client_id], references: [id], onDelete: Cascade)
  quote_items  QuoteItem[]

  @@map("quotes")
}

model QuoteItem {
  id          String  @id @default(cuid())
  quote_id    String
  product_id  String
  quantity    Int
  unit_price  Float
  total_price Float
  notes       String?
  
  // Связи
  quote       Quote   @relation(fields: [quote_id], references: [id], onDelete: Cascade)

  @@map("quote_items")
}

model Order {
  id            String    @id @default(cuid())
  number        String    @unique
  quote_id      String?
  client_id     String
  created_by    String
  status        String    @default("PENDING")
  order_date    DateTime  @default(now())
  delivery_date DateTime?
  subtotal      Float     @default(0)
  tax_amount    Float     @default(0)
  total_amount  Float     @default(0)
  currency      String    @default("RUB")
  notes         String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  
  // Связи
  client        Client    @relation(fields: [client_id], references: [id], onDelete: Cascade)
  order_items   OrderItem[]

  @@map("orders")
}

model OrderItem {
  id          String  @id @default(cuid())
  order_id    String
  product_id  String
  quantity    Int
  unit_price  Float
  total_price Float
  notes       String?
  
  // Связи
  order       Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Invoice {
  id           String    @id @default(cuid())
  number       String    @unique
  order_id     String?
  client_id    String
  created_by   String
  status       String    @default("DRAFT")
  invoice_date DateTime  @default(now())
  due_date     DateTime?
  subtotal     Float     @default(0)
  tax_amount   Float     @default(0)
  total_amount Float     @default(0)
  currency     String    @default("RUB")
  notes        String?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  
  // Связи
  client         Client      @relation(fields: [client_id], references: [id], onDelete: Cascade)
  invoice_items  InvoiceItem[]

  @@map("invoices")
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoice_id  String
  product_id  String
  quantity    Int
  unit_price  Float
  total_price Float
  notes       String?
  
  // Связи
  invoice     Invoice @relation(fields: [invoice_id], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

model SupplierOrder {
  id             String    @id @default(cuid())
  order_id       String
  executor_id    String
  supplier_name  String
  supplier_email String?
  supplier_phone String?
  status         String    @default("PENDING")
  order_date     DateTime  @default(now())
  expected_date  DateTime?
  notes          String?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  @@map("supplier_orders")
}

model Notification {
  id         String   @id @default(cuid())
  user_id    String
  type       String
  title      String
  message    String
  is_read    Boolean  @default(false)
  data       String?  @default("{}")
  created_at DateTime @default(now())
  
  // Связи
  client     Client   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model ImportHistory {
  id                  String   @id @default(cuid())
  template_id         String?  // Связь с шаблоном загрузки
  catalog_category_id String
  filename            String
  file_size           Int?
  imported_count      Int      @default(0)
  error_count         Int      @default(0)
  status              String   @default("pending")
  errors              String   @default("[]")
  import_data         String?  // JSON данные импорта
  created_at          DateTime @default(now())

  // Связи
  template ImportTemplate? @relation(fields: [template_id], references: [id])

  @@index([template_id])
  @@map("import_history")
}

model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("system_settings")
}

model Page {
  id          String    @id @default(cuid())
  title       String
  description String    @default("")
  url         String    @unique
  isPublished Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Связи
  elements    PageElement[]

  @@map("pages")
}

model PageElement {
  id        String   @id @default(cuid())
  type      String
  props     String   @default("{}") // JSON с настройками компонента
  position  String   @default("{}") // JSON с позицией {x, y}
  size      String   @default("{}") // JSON с размером {width, height}
  zIndex    Int      @default(0)
  parentId  String?  // ID родительского элемента
  
  // Связи
  pageId    String
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("page_elements")
}
