const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testPhotoRetrieval() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –¥–ª—è –º–æ–¥–µ–ª–∏ d10...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ property_photos
    const photos = await prisma.propertyPhoto.findMany({
      where: {
        categoryId: 'cmg50xcgs001cv7mn0tdyk1wo',
        propertyName: '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
        propertyValue: 'd10'
      }
    });

    console.log(`üì∏ –ù–∞–π–¥–µ–Ω–æ ${photos.length} —Ñ–æ—Ç–æ –≤ property_photos:`);
    photos.forEach(photo => {
      console.log(`   ‚Ä¢ ${photo.photoType}: ${photo.originalFilename}`);
    });

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
    const photoStructure = {
      cover: null,
      gallery: []
    };

    photos.forEach(photo => {
      if (photo.photoType === 'cover') {
        photoStructure.cover = photo.photoPath;
      } else if (photo.photoType.startsWith('gallery_')) {
        photoStructure.gallery.push(photo.photoPath);
      }
    });

    console.log(`\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–æ—Ç–æ:`);
    console.log(`   ‚Ä¢ –û–±–ª–æ–∂–∫–∞: ${photoStructure.cover || '–Ω–µ—Ç'}`);
    console.log(`   ‚Ä¢ –ì–∞–ª–µ—Ä–µ—è: ${photoStructure.gallery.length} —Ñ–æ—Ç–æ`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testPhotoRetrieval();
