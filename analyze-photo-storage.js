const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function analyzePhotoStorage() {
  try {
    console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const products = await prisma.product.findMany({
      where: {
        catalog_category_id: 'cmg50xcgs001cv7mn0tdyk1wo'
      },
      select: {
        id: true,
        sku: true,
        properties_data: true
      },
      take: 10
    });

    console.log(`üì¶ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${products.length} —Ç–æ–≤–∞—Ä–æ–≤:`);

    for (const product of products) {
      try {
        const properties = JSON.parse(product.properties_data || '{}');
        const modelName = properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'];
        const supplierSku = properties['–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'];
        const modelPhotos = properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'];
        
        console.log(`\n--- –¢–æ–≤–∞—Ä: ${product.sku} ---`);
        console.log(`–ú–æ–¥–µ–ª—å: ${modelName}`);
        console.log(`–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: ${supplierSku}`);
        console.log(`–§–æ—Ç–æ –≤ —Å–≤–æ–π—Å—Ç–≤–µ –º–æ–¥–µ–ª–∏: ${Array.isArray(modelPhotos) ? modelPhotos.length : '–Ω–µ –º–∞—Å—Å–∏–≤'}`);
        
        if (Array.isArray(modelPhotos) && modelPhotos.length > 0) {
          console.log(`–§–æ—Ç–æ:`);
          modelPhotos.forEach((photo, index) => {
            console.log(`  ${index + 1}. ${photo}`);
          });
        }
        
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–∞ ${product.sku}:`, error);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const allProducts = await prisma.product.findMany({
      where: {
        catalog_category_id: 'cmg50xcgs001cv7mn0tdyk1wo'
      },
      select: {
        properties_data: true
      }
    });

    let totalPhotos = 0;
    let productsWithPhotos = 0;
    let productsWithModelPhotos = 0;

    for (const product of allProducts) {
      try {
        const properties = JSON.parse(product.properties_data || '{}');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ç–æ –≤ —Å–≤–æ–π—Å—Ç–≤–µ "photos"
        const photos = properties.photos || [];
        if (Array.isArray(photos) && photos.length > 0) {
          productsWithPhotos++;
          totalPhotos += photos.length;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ç–æ –≤ —Å–≤–æ–π—Å—Ç–≤–µ –º–æ–¥–µ–ª–∏
        const modelPhotos = properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'];
        if (Array.isArray(modelPhotos) && modelPhotos.length > 0) {
          productsWithModelPhotos++;
        }
        
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
      }
    }

    console.log('\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${allProducts.length}`);
    console.log(`–¢–æ–≤–∞—Ä–æ–≤ —Å —Ñ–æ—Ç–æ –≤ —Å–≤–æ–π—Å—Ç–≤–µ "photos": ${productsWithPhotos}`);
    console.log(`–¢–æ–≤–∞—Ä–æ–≤ —Å —Ñ–æ—Ç–æ –≤ —Å–≤–æ–π—Å—Ç–≤–µ –º–æ–¥–µ–ª–∏: ${productsWithModelPhotos}`);
    console.log(`–í—Å–µ–≥–æ —Ñ–æ—Ç–æ: ${totalPhotos}`);

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
analyzePhotoStorage();
