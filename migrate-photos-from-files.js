const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

async function migratePhotosFromFiles() {
  try {
    console.log('üîÑ –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ñ–æ—Ç–æ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ property_photos...');
    
    const uploadDir = path.join(process.cwd(), 'public', 'uploads', 'products', 'cmg50xcgs001cv7mn0tdyk1wo');
    
    if (!fs.existsSync(uploadDir)) {
      console.log('‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', uploadDir);
      return;
    }

    const files = fs.readdirSync(uploadDir);
    const photoFiles = files.filter(file => file.toLowerCase().endsWith('.png'));
    
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${photoFiles.length} —Ñ–æ—Ç–æ —Ñ–∞–π–ª–æ–≤`);

    let migratedPhotos = 0;
    let skippedPhotos = 0;
    const processedValues = new Set();

    for (const fileName of photoFiles) {
      try {
        // –ü–∞—Ä—Å–∏–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        const nameWithoutExt = fileName.replace(/\.[^/.]+$/, "");
        
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å —Å timestamp –∏ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
        // –§–æ—Ä–º–∞—Ç: timestamp_randomstring_articul.png
        const parts = nameWithoutExt.split('_');
        if (parts.length < 3) {
          console.log(`‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: ${fileName}`);
          continue;
        }
        
        // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –∫–∞–∫ –∞—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        const supplierSku = parts[parts.length - 1];
        
        if (!supplierSku) {
          console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—Ä—Ç–∏–∫—É–ª –∏–∑: ${fileName}`);
          continue;
        }

        const valueKey = `${supplierSku}`;
        
        // –ï—Å–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if (processedValues.has(valueKey)) {
          skippedPhotos++;
          continue;
        }
        
        processedValues.add(valueKey);
        
        console.log(`\n=== –û–ë–†–ê–ë–û–¢–ö–ê –ê–†–¢–ò–ö–£–õ–ê: ${supplierSku} ===`);
        console.log(`–§–∞–π–ª: ${fileName}`);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–æ—Ç–æ
        const match = nameWithoutExt.match(/^(.+)_(\d+)$/);
        let photoType = 'cover';
        
        if (match) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä –≤ –∫–æ–Ω—Ü–µ - —ç—Ç–æ –Ω–æ–º–µ—Ä –≥–∞–ª–µ—Ä–µ–∏
          const lastPart = parts[parts.length - 1];
          const secondLastPart = parts[parts.length - 2];
          
          if (/^\d+$/.test(lastPart) && !/^\d+$/.test(secondLastPart)) {
            photoType = `gallery_${lastPart}`;
          }
        }

        const photoPath = `/uploads/products/cmg50xcgs001cv7mn0tdyk1wo/${fileName}`;
        const fullPath = path.join(process.cwd(), 'public', photoPath);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if (!fs.existsSync(fullPath)) {
          console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${photoPath}`);
          continue;
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        const stats = fs.statSync(fullPath);
        
        try {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ property_photos
          await prisma.propertyPhoto.upsert({
            where: {
              categoryId_propertyName_propertyValue_photoType: {
                categoryId: 'cmg50xcgs001cv7mn0tdyk1wo',
                propertyName: '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
                propertyValue: supplierSku,
                photoType: photoType
              }
            },
            update: {
              photoPath: photoPath,
              originalFilename: fileName,
              fileSize: stats.size,
              mimeType: 'image/png',
              updatedAt: new Date()
            },
            create: {
              categoryId: 'cmg50xcgs001cv7mn0tdyk1wo',
              propertyName: '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
              propertyValue: supplierSku,
              photoPath: photoPath,
              photoType: photoType,
              originalFilename: fileName,
              fileSize: stats.size,
              mimeType: 'image/png'
            }
          });

          migratedPhotos++;
          console.log(`‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ —Ñ–æ—Ç–æ: ${fileName} (—Ç–∏–ø: ${photoType})`);
          
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ñ–æ—Ç–æ ${fileName}:`, error.message);
        }
        
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ ${fileName}:`, error);
      }
    }

    console.log('\nüéâ –ü–ï–†–ï–ù–û–° –ó–ê–í–ï–†–®–ï–ù!');
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   ‚Ä¢ –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${photoFiles.length}`);
    console.log(`   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤: ${processedValues.size}`);
    console.log(`   ‚Ä¢ –§–æ—Ç–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: ${migratedPhotos}`);
    console.log(`   ‚Ä¢ –§–æ—Ç–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª–∏–∫–∞—Ç—ã): ${skippedPhotos}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const totalPropertyPhotos = await prisma.propertyPhoto.count({
      where: {
        categoryId: 'cmg50xcgs001cv7mn0tdyk1wo'
      }
    });

    console.log(`\nüìà –ò—Ç–æ–≥–æ —Ñ–æ—Ç–æ –≤ property_photos: ${totalPropertyPhotos}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ
    const samplePhotos = await prisma.propertyPhoto.findMany({
      where: {
        categoryId: 'cmg50xcgs001cv7mn0tdyk1wo'
      },
      take: 5,
      orderBy: {
        createdAt: 'desc'
      }
    });

    console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ:');
    samplePhotos.forEach(photo => {
      console.log(`   ‚Ä¢ ${photo.propertyValue} (${photo.photoType}): ${photo.originalFilename}`);
    });

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å
migratePhotosFromFiles();
