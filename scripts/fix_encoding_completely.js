const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

// –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —à–∞–±–ª–æ–Ω–∞ "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
const correctFields = [
  "Domeo –ê—Ä—Ç–∏–∫—É–ª 1C (–ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∞—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)",
  "–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", 
  "Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web",
  "–®–∏—Ä–∏–Ω–∞/–º–º",
  "–í—ã—Å–æ—Ç–∞/–º–º", 
  "–¢–æ–ª—â–∏–Ω–∞/–º–º",
  "–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è",
  "Domeo_–¶–≤–µ—Ç",
  "Domeo_–°—Ç–∏–ª—å Web",
  "–¢–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
  "–¢–∏–ø –æ—Ç–∫—Ä—ã–≤–∞–Ω–∏—è",
  "–ü–æ—Å—Ç–∞–≤—â–∏–∫",
  "–ï–¥.–∏–∑–º.",
  "–°–∫–ª–∞–¥/–∑–∞–∫–∞–∑",
  "–¶–µ–Ω–∞ —Ä—Ä—Ü (–≤–∫–ª—é—á–∞—è —Ü–µ–Ω—É –ø–æ–ª–æ—Ç–Ω–∞, –∫–æ—Ä–æ–±–∞, –Ω–∞–ª–∏—á–Ω–∏–∫–æ–≤, –¥–æ–±–æ—Ä–æ–≤)",
  "–¶–µ–Ω–∞ –æ–ø—Ç",
  "–ö—Ä–æ–º–∫–∞",
  "–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–¥–±–∞–≤–∫–∏ –∑–∞ –∫—Ä–æ–º–∫—É",
  "–ú–æ–ª–¥–∏–Ω–≥",
  "–°—Ç–µ–∫–ª–æ",
  "–§–∞–±—Ä–∏–∫–∞_–ö–æ–ª–ª–µ–∫—Ü–∏—è",
  "–§–∞–±—Ä–∏–∫–∞_–¶–≤–µ—Ç/–û—Ç–¥–µ–ª–∫–∞"
];

async function fixEncodingCompletely() {
  try {
    console.log('=== –ö–ê–†–î–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–î–ò–†–û–í–ö–ò ===');
    
    // –ù–∞—Ö–æ–¥–∏–º —à–∞–±–ª–æ–Ω
    const template = await prisma.importTemplate.findFirst({
      where: { catalog_category_id: 'cmg50xcgs001cv7mn0tdyk1wo' }
    });
    
    if (!template) {
      console.log('‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω:', {
      id: template.id,
      name: template.name,
      required_fields_length: template.required_fields?.length || 0
    });
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —à–∞–±–ª–æ–Ω–∞
    const templateConfig = {
      headers: correctFields,
      requiredFields: correctFields,
      fieldMappings: {}
    };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const updatedTemplate = await prisma.importTemplate.update({
      where: { id: template.id },
      data: {
        name: '–®–∞–±–ª–æ–Ω –¥–ª—è –ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏',
        description: '–ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π —à–∞–±–ª–æ–Ω –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã—Ö –¥–≤–µ—Ä–µ–π',
        required_fields: JSON.stringify(correctFields),
        calculator_fields: JSON.stringify([]),
        export_fields: JSON.stringify([]),
        template_config: JSON.stringify(templateConfig),
        field_mappings: JSON.stringify({}),
        updated_at: new Date()
      }
    });
    
    console.log('‚úÖ –®–∞–±–ª–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π');
    console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
      id: updatedTemplate.id,
      name: updatedTemplate.name,
      required_fields_count: correctFields.length,
      updated_at: updatedTemplate.updated_at
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const verificationTemplate = await prisma.importTemplate.findUnique({
      where: { id: template.id }
    });
    
    const parsedFields = JSON.parse(verificationTemplate.required_fields);
    console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê:');
    console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π:', parsedFields.length);
    console.log('–ü–µ—Ä–≤—ã–µ 5 –ø–æ–ª–µ–π:');
    parsedFields.slice(0, 5).forEach((field, i) => {
      console.log(`  ${i + 1}: "${field}"`);
    });
    
    console.log('\n‚úÖ –ö–æ–¥–∏—Ä–æ–≤–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixEncodingCompletely();
