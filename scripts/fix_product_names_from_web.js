const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function fixProductNamesFromWebName() {
  try {
    console.log('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê–ó–í–ê–ù–ò–ô –¢–û–í–ê–†–û–í –ò–ó –°–í–û–ô–°–¢–í–ê "Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web"\n');

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
    const category = await prisma.catalogCategory.findFirst({
      where: { name: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏' }
    });

    if (!category) {
      console.log('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    console.log(`üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category.name} (ID: ${category.id})\n`);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    const products = await prisma.product.findMany({
      where: { 
        catalog_category_id: category.id,
        name: '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
      },
      select: {
        id: true,
        sku: true,
        name: true,
        properties_data: true
      }
    });

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è": ${products.length}\n`);

    let updatedCount = 0;
    let skippedCount = 0;
    let errorCount = 0;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
    for (const product of products) {
      try {
        // –ü–∞—Ä—Å–∏–º —Å–≤–æ–π—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
        let properties = {};
        if (product.properties_data) {
          try {
            properties = typeof product.properties_data === 'string' 
              ? JSON.parse(product.properties_data) 
              : product.properties_data;
          } catch (e) {
            console.error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–≤–æ–π—Å—Ç–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.id}:`, e);
            errorCount++;
            continue;
          }
        }

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å–≤–æ–π—Å—Ç–≤–∞ "Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web"
        const webName = properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'];
        
        if (!webName || webName.trim() === '') {
          skippedCount++;
          continue;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
        await prisma.product.update({
          where: { id: product.id },
          data: { name: webName.trim() }
        });

        updatedCount++;
        
        if (updatedCount % 100 === 0) {
          console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount} —Ç–æ–≤–∞—Ä–æ–≤`);
        }

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ ${product.id}:`, error);
        errorCount++;
      }
    }

    console.log(`\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê–ó–í–ê–ù–ò–ô –ó–ê–í–ï–†–®–ï–ù–û!`);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   - –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);
    console.log(`   - –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount}`);
    console.log(`   - –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è): ${skippedCount}`);
    console.log(`   - –û—à–∏–±–æ–∫: ${errorCount}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const updatedProducts = await prisma.product.findMany({
      where: { 
        catalog_category_id: category.id,
        name: { not: '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è' }
      },
      select: { name: true },
      take: 5
    });

    console.log(`\nüìã –ü—Ä–∏–º–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π:`);
    updatedProducts.forEach((product, index) => {
      console.log(`   ${index + 1}. "${product.name}"`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixProductNamesFromWebName();
