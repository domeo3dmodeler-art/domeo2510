#!/bin/bash

# üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ YC VM –¥–ª—è Domeo
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./setup-yc-vm.sh [staging|production]

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
ENVIRONMENT=${1:-production}
if [[ "$ENVIRONMENT" != "staging" && "$ENVIRONMENT" != "production" ]]; then
    error "–ù–µ–≤–µ—Ä–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: staging –∏–ª–∏ production"
    exit 1
fi

log "üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ YC VM –¥–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: $ENVIRONMENT"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
if [[ "$ENVIRONMENT" == "staging" ]]; then
    VM_HOST=${STAGING_HOST:-"89.169.189.66"}
    VM_USER=${STAGING_USER:-"ubuntu"}
    VM_PATH="/opt/domeo-staging"
    VM_PORT="3001"
else
    VM_HOST=${PROD_HOST:-"130.193.40.35"}
    VM_USER=${PROD_USER:-"ubuntu"}
    VM_PATH="/opt/domeo"
    VM_PORT="3000"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º SSH –∫–ª—é—á
if [[ -z "$VM_SSH_KEY" ]]; then
    error "VM_SSH_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export VM_SSH_KEY=/path/to/ssh/key"
    exit 1
fi

if [[ ! -f "$VM_SSH_KEY" ]]; then
    error "SSH –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: $VM_SSH_KEY"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
log "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VM..."
if ! ssh -i "$VM_SSH_KEY" -o ConnectTimeout=10 -o StrictHostKeyChecking=no "$VM_USER@$VM_HOST" "echo 'Connection OK'"; then
    error "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VM"
    exit 1
fi

success "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VM —É—Å–ø–µ—à–Ω–æ"

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º VM
log "üõ†Ô∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º VM..."
ssh -i "$VM_SSH_KEY" -o StrictHostKeyChecking=no "$VM_USER@$VM_HOST" << EOF
set -e

# –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É
sudo apt update && sudo apt upgrade -y

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã
sudo apt install -y \
    curl \
    wget \
    git \
    unzip \
    htop \
    nginx \
    ufw \
    fail2ban \
    certbot \
    python3-certbot-nginx

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker
if ! command -v docker &> /dev/null; then
    curl -fsSL https://get.docker.com -o get-docker.sh
    sudo sh get-docker.sh
    sudo usermod -aG docker \$USER
    rm get-docker.sh
fi

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker Compose
if ! command -v docker-compose &> /dev/null; then
    sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-\$(uname -s)-\$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
fi

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Node.js 20
if ! command -v node &> /dev/null || [[ \$(node -v | cut -d'v' -f2 | cut -d'.' -f1) -lt 20 ]]; then
    curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
    sudo apt-get install -y nodejs
fi

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PM2
if ! command -v pm2 &> /dev/null; then
    sudo npm install -g pm2
fi

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
sudo mkdir -p $VM_PATH
sudo mkdir -p $VM_PATH/logs
sudo mkdir -p $VM_PATH/uploads
sudo mkdir -p $VM_PATH/backups
sudo mkdir -p $VM_PATH/ssl

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞
sudo chown -R \$USER:\$USER $VM_PATH

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º firewall
sudo ufw --force enable
sudo ufw allow ssh
sudo ufw allow 80
sudo ufw allow 443
sudo ufw allow $VM_PORT

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º fail2ban
sudo systemctl enable fail2ban
sudo systemctl start fail2ban

# –°–æ–∑–¥–∞–µ–º systemd —Å–µ—Ä–≤–∏—Å –¥–ª—è PM2
sudo tee /etc/systemd/system/domeo.service > /dev/null << 'EOL'
[Unit]
Description=Domeo Application
After=network.target

[Service]
Type=forking
User=$VM_USER
WorkingDirectory=$VM_PATH
ExecStart=/usr/bin/pm2 start ecosystem.config.js
ExecReload=/usr/bin/pm2 reload ecosystem.config.js
ExecStop=/usr/bin/pm2 stop ecosystem.config.js
Restart=always

[Install]
WantedBy=multi-user.target
EOL

# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é PM2
cat > $VM_PATH/ecosystem.config.js << 'EOL'
module.exports = {
  apps: [{
    name: 'domeo',
    script: 'server.js',
    cwd: '$VM_PATH',
    instances: 'max',
    exec_mode: 'cluster',
    env: {
      NODE_ENV: 'production',
      PORT: $VM_PORT
    },
    error_file: '$VM_PATH/logs/err.log',
    out_file: '$VM_PATH/logs/out.log',
    log_file: '$VM_PATH/logs/combined.log',
    time: true,
    max_memory_restart: '1G',
    node_args: '--max-old-space-size=2048'
  }]
};
EOL

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
sudo tee /etc/logrotate.d/domeo > /dev/null << 'EOL'
$VM_PATH/logs/*.log {
    daily
    missingok
    rotate 30
    compress
    delaycompress
    notifempty
    create 644 $VM_USER $VM_USER
    postrotate
        /usr/bin/pm2 reloadLogs
    endscript
}
EOL

# –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
cat > $VM_PATH/monitor.sh << 'EOL'
#!/bin/bash
echo "=== Domeo System Status ==="
echo "Date: \$(date)"
echo "Uptime: \$(uptime)"
echo "Memory: \$(free -h)"
echo "Disk: \$(df -h /)"
echo "Docker: \$(docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}')"
echo "PM2: \$(pm2 status)"
echo "Nginx: \$(systemctl is-active nginx)"
echo "Health Check: \$(curl -s -o /dev/null -w '%{http_code}' http://localhost:$VM_PORT/api/health)"
EOL

chmod +x $VM_PATH/monitor.sh

# –°–æ–∑–¥–∞–µ–º cron –∑–∞–¥–∞—á–∏
(crontab -l 2>/dev/null; echo "0 2 * * * $VM_PATH/monitor.sh >> $VM_PATH/logs/monitor.log") | crontab -
(crontab -l 2>/dev/null; echo "0 3 * * * docker system prune -f") | crontab -

echo "‚úÖ VM –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
EOF

success "‚úÖ VM –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"

# –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
log "üìã –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–µ–ø–ª–æ—é..."
cat > "YC_DEPLOY_INSTRUCTIONS.md" << EOF
# üöÄ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–µ–ø–ª–æ—é –Ω–∞ YC VM

## üìã –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è

1. **SSH –∫–ª—é—á** –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ VM
2. **–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è** –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
3. **–î–æ–º–µ–Ω** (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è SSL)

## üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

\`\`\`bash
# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
export VM_SSH_KEY="/path/to/your/ssh/key"
export PROD_HOST="130.193.40.35"  # IP –≤–∞—à–µ–π VM
export PROD_USER="ubuntu"

# –î–ª—è staging
export STAGING_HOST="89.169.189.66"
export STAGING_USER="ubuntu"

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Å–æ–∑–¥–∞–π—Ç–µ .env.production)
POSTGRES_PASSWORD=your_secure_password
NEXTAUTH_SECRET=your_nextauth_secret_min_32_chars
YANDEX_STORAGE_ACCESS_KEY=your_access_key
YANDEX_STORAGE_SECRET_KEY=your_secret_key
YANDEX_STORAGE_BUCKET=your-bucket-name
\`\`\`

## üöÄ –î–µ–ø–ª–æ–π

### 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ VM (–≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω —Ä–∞–∑)
\`\`\`bash
chmod +x setup-yc-vm.sh
./setup-yc-vm.sh production
\`\`\`

### 2. –î–µ–ø–ª–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
\`\`\`bash
chmod +x deploy-yc.sh
./deploy-yc.sh production
\`\`\`

## üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

### –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
\`\`\`bash
ssh -i \$VM_SSH_KEY \$PROD_USER@\$PROD_HOST "cd /opt/domeo && ./monitor.sh"
\`\`\`

### –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
\`\`\`bash
ssh -i \$VM_SSH_KEY \$PROD_USER@\$PROD_HOST "cd /opt/domeo && docker-compose -f docker-compose.prod.yml logs -f"
\`\`\`

### PM2 —Å—Ç–∞—Ç—É—Å
\`\`\`bash
ssh -i \$VM_SSH_KEY \$PROD_USER@\$PROD_HOST "pm2 status"
\`\`\`

## üîí SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

\`\`\`bash
ssh -i \$VM_SSH_KEY \$PROD_USER@\$PROD_HOST "sudo certbot --nginx -d your-domain.com"
\`\`\`

## üÜò Troubleshooting

### –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
\`\`\`bash
ssh -i \$VM_SSH_KEY \$PROD_USER@\$PROD_HOST "cd /opt/domeo && docker-compose -f docker-compose.prod.yml restart"
\`\`\`

### –û—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏
\`\`\`bash
ssh -i \$VM_SSH_KEY \$PROD_USER@\$PROD_HOST "cd /opt/domeo && tar -xzf backup-YYYYMMDD_HHMMSS.tar.gz"
\`\`\`

## üìä –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

- **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã**: \`htop\`
- **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞**: \`df -h\`
- **–ü–∞–º—è—Ç—å**: \`free -h\`
- **Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã**: \`docker ps\`
- **Nginx —Å—Ç–∞—Ç—É—Å**: \`systemctl status nginx\`
EOF

success "‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã: YC_DEPLOY_INSTRUCTIONS.md"

log "üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ YC VM –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
log "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
log "1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
log "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./setup-yc-vm.sh $ENVIRONMENT"
log "3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./deploy-yc.sh $ENVIRONMENT"
log "4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: http://$VM_HOST:$VM_PORT/api/health"

