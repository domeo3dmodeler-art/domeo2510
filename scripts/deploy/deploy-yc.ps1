# üöÄ PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ YC VM
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .\deploy-yc.ps1 [staging|production]

param(
    [Parameter(Position=0)]
    [ValidateSet("staging", "production")]
    [string]$Environment = "production"
)

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
$Red = "Red"
$Green = "Green"
$Yellow = "Yellow"
$Blue = "Blue"

function Write-Log {
    param([string]$Message)
    Write-Host "[$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')] $Message" -ForegroundColor $Blue
}

function Write-Error {
    param([string]$Message)
    Write-Host "[ERROR] $Message" -ForegroundColor $Red
}

function Write-Success {
    param([string]$Message)
    Write-Host "[SUCCESS] $Message" -ForegroundColor $Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "[WARNING] $Message" -ForegroundColor $Yellow
}

Write-Log "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π –Ω–∞ YC VM –¥–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: $Environment"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
if ($Environment -eq "staging") {
    $VM_HOST = if ($env:STAGING_HOST) { $env:STAGING_HOST } else { "89.169.189.66" }
    $VM_PORT = if ($env:STAGING_PORT) { $env:STAGING_PORT } else { "3001" }
    $VM_USER = if ($env:STAGING_USER) { $env:STAGING_USER } else { "ubuntu" }
    $VM_PATH = "/opt/domeo-staging"
} else {
    $VM_HOST = if ($env:PROD_HOST) { $env:PROD_HOST } else { "130.193.40.35" }
    $VM_PORT = if ($env:PROD_PORT) { $env:PROD_PORT } else { "3000" }
    $VM_USER = if ($env:PROD_USER) { $env:PROD_USER } else { "ubuntu" }
    $VM_PATH = "/opt/domeo"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (-not $env:VM_SSH_KEY) {
    Write-Error "VM_SSH_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    Write-Host "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: `$env:VM_SSH_KEY = '/path/to/ssh/key'"
    exit 1
}

if (-not (Test-Path $env:VM_SSH_KEY)) {
    Write-Error "SSH –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: $env:VM_SSH_KEY"
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VM
Write-Log "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VM ($VM_HOST)..."
$connectionTest = ssh -i $env:VM_SSH_KEY -o ConnectTimeout=10 -o StrictHostKeyChecking=no "$VM_USER@$VM_HOST" "echo 'Connection OK'" 2>$null
if (-not $connectionTest) {
    Write-Error "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VM"
    exit 1
}

Write-Success "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VM —É—Å–ø–µ—à–Ω–æ"

# –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –Ω–∞ VM
Write-Log "üíæ –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –Ω–∞ VM..."
$backupScript = @"
cd $VM_PATH
if [ -d ".next" ]; then
    tar -czf backup-`$(date +%Y%m%d_%H%M%S).tar.gz .next package.json package-lock.json prisma
    echo "‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω"
else
    echo "‚ö†Ô∏è –ü–∞–ø–∫–∞ .next –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±—ç–∫–∞–ø"
fi
"@

ssh -i $env:VM_SSH_KEY -o StrictHostKeyChecking=no "$VM_USER@$VM_HOST" $backupScript

# –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–µ–∫—Ç –ª–æ–∫–∞–ª—å–Ω–æ
Write-Log "üî® –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–µ–∫—Ç –ª–æ–∫–∞–ª—å–Ω–æ..."
if ($Environment -eq "staging") {
    npm run build:staging
} else {
    npm run build:prod
}

# –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ –¥–ª—è –¥–µ–ø–ª–æ—è
Write-Log "üì¶ –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ –¥–ª—è –¥–µ–ø–ª–æ—è..."
$filesToArchive = @(
    ".next",
    "package.json", 
    "package-lock.json",
    "prisma",
    "docker-compose.prod.yml",
    "Dockerfile",
    "nginx.conf",
    "env.production.example"
)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º PowerShell –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞
Compress-Archive -Path $filesToArchive -DestinationPath "domeo-deploy.zip" -Force

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—Ä—Ö–∏–≤ –Ω–∞ VM
Write-Log "üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—Ä—Ö–∏–≤ –Ω–∞ VM..."
scp -i $env:VM_SSH_KEY -o StrictHostKeyChecking=no "domeo-deploy.zip" "$VM_USER@$VM_HOST`:/tmp/"

# –î–µ–ø–ª–æ–∏–º –Ω–∞ VM
Write-Log "üöÄ –î–µ–ø–ª–æ–∏–º –Ω–∞ VM..."
$deployScript = @"
set -e
cd $VM_PATH

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
if command -v docker-compose &> /dev/null; then
    docker-compose -f docker-compose.prod.yml down || true
fi

# –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
unzip -o /tmp/domeo-deploy.zip
rm /tmp/domeo-deploy.zip

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º production –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
npm ci --only=production

# –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î
npx prisma migrate deploy

# –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
docker-compose -f docker-compose.prod.yml up -d

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
sleep 30

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
docker-compose -f docker-compose.prod.yml ps
"@

ssh -i $env:VM_SSH_KEY -o StrictHostKeyChecking=no "$VM_USER@$VM_HOST" $deployScript

# –ü—Ä–æ–≤–µ—Ä—è–µ–º health check
Write-Log "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º health check..."
Start-Sleep -Seconds 30
try {
    $response = Invoke-WebRequest -Uri "http://$VM_HOST`:$VM_PORT/api/health" -TimeoutSec 10
    if ($response.StatusCode -eq 200) {
        Write-Success "‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–µ–Ω!"
        Write-Success "üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ: http://$VM_HOST`:$VM_PORT"
    } else {
        throw "Health check failed"
    }
} catch {
    Write-Error "‚ùå Health check –Ω–µ –ø—Ä–æ—à–µ–ª"
    
    # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    Write-Warning "üîÑ –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è..."
    $rollbackScript = @"
cd $VM_PATH
docker-compose -f docker-compose.prod.yml down
# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞
BACKUP_FILE=`$(ls -t backup-*.tar.gz | head -n1)
if [ -n "`$BACKUP_FILE" ]; then
    tar -xzf "`$BACKUP_FILE"
    docker-compose -f docker-compose.prod.yml up -d
    echo "‚úÖ –û—Ç–∫–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω"
else
    echo "‚ùå –ë—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi
"@
    ssh -i $env:VM_SSH_KEY -o StrictHostKeyChecking=no "$VM_USER@$VM_HOST" $rollbackScript
    exit 1
}

# –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
Remove-Item "domeo-deploy.zip" -Force

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
Write-Log "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
ssh -i $env:VM_SSH_KEY -o StrictHostKeyChecking=no "$VM_USER@$VM_HOST" "cd $VM_PATH && docker-compose -f docker-compose.prod.yml ps"

Write-Success "üéâ –î–µ–ø–ª–æ–π –Ω–∞ YC VM –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
Write-Success "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: http://$VM_HOST`:$VM_PORT/api/health"
Write-Success "üîç –õ–æ–≥–∏: ssh -i $env:VM_SSH_KEY $VM_USER@$VM_HOST 'cd $VM_PATH && docker-compose -f docker-compose.prod.yml logs -f'"

