#!/bin/bash

# üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Domeo –Ω–∞ YC VM
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./monitor-yc.sh [staging|production]

set -e

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
ENVIRONMENT=${1:-production}
if [[ "$ENVIRONMENT" != "staging" && "$ENVIRONMENT" != "production" ]]; then
    error "–ù–µ–≤–µ—Ä–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: staging –∏–ª–∏ production"
    exit 1
fi

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
if [[ "$ENVIRONMENT" == "staging" ]]; then
    VM_HOST=${STAGING_HOST:-"89.169.189.66"}
    VM_USER=${STAGING_USER:-"ubuntu"}
    VM_PATH="/opt/domeo-staging"
    VM_PORT="3001"
else
    VM_HOST=${PROD_HOST:-"130.193.40.35"}
    VM_USER=${PROD_USER:-"ubuntu"}
    VM_PATH="/opt/domeo"
    VM_PORT="3000"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º SSH –∫–ª—é—á
if [[ -z "$VM_SSH_KEY" ]]; then
    error "VM_SSH_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
fi

log "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Domeo ($ENVIRONMENT)"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
get_metrics() {
    ssh -i "$VM_SSH_KEY" -o StrictHostKeyChecking=no "$VM_USER@$VM_HOST" << EOF
echo "=== SYSTEM METRICS ==="
echo "Date: \$(date)"
echo "Uptime: \$(uptime)"
echo "Load Average: \$(cat /proc/loadavg)"
echo ""

echo "=== MEMORY USAGE ==="
free -h
echo ""

echo "=== DISK USAGE ==="
df -h
echo ""

echo "=== DOCKER CONTAINERS ==="
docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}\t{{.Size}}'
echo ""

echo "=== DOCKER STATS ==="
docker stats --no-stream --format 'table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}'
echo ""

echo "=== PM2 STATUS ==="
pm2 status
echo ""

echo "=== NGINX STATUS ==="
systemctl is-active nginx
echo ""

echo "=== APPLICATION HEALTH ==="
curl -s -o /dev/null -w "HTTP Status: %{http_code}\nResponse Time: %{time_total}s\n" http://localhost:$VM_PORT/api/health
echo ""

echo "=== RECENT LOGS ==="
tail -n 20 $VM_PATH/logs/combined.log 2>/dev/null || echo "No logs found"
EOF
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
performance_check() {
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ API
    RESPONSE_TIME=$(ssh -i "$VM_SSH_KEY" -o StrictHostKeyChecking=no "$VM_USER@$VM_HOST" "curl -s -o /dev/null -w '%{time_total}' http://localhost:$VM_PORT/api/health")
    
    if (( $(echo "$RESPONSE_TIME < 1.0" | bc -l) )); then
        success "‚úÖ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ API: ${RESPONSE_TIME}s (–æ—Ç–ª–∏—á–Ω–æ)"
    elif (( $(echo "$RESPONSE_TIME < 2.0" | bc -l) )); then
        warning "‚ö†Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ API: ${RESPONSE_TIME}s (—Ö–æ—Ä–æ—à–æ)"
    else
        error "‚ùå –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ API: ${RESPONSE_TIME}s (–º–µ–¥–ª–µ–Ω–Ω–æ)"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
    MEMORY_USAGE=$(ssh -i "$VM_SSH_KEY" -o StrictHostKeyChecking=no "$VM_USER@$VM_HOST" "free | grep Mem | awk '{print (\$3/\$2) * 100.0}'")
    
    if (( $(echo "$MEMORY_USAGE < 70" | bc -l) )); then
        success "‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${MEMORY_USAGE}% (–Ω–æ—Ä–º–∞–ª—å–Ω–æ)"
    elif (( $(echo "$MEMORY_USAGE < 85" | bc -l) )); then
        warning "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${MEMORY_USAGE}% (–≤—ã—Å–æ–∫–æ–µ)"
    else
        error "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${MEMORY_USAGE}% (–∫—Ä–∏—Ç–∏—á–Ω–æ)"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞
    DISK_USAGE=$(ssh -i "$VM_SSH_KEY" -o StrictHostKeyChecking=no "$VM_USER@$VM_HOST" "df / | tail -1 | awk '{print \$5}' | sed 's/%//'")
    
    if [[ "$DISK_USAGE" -lt 70 ]]; then
        success "‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: ${DISK_USAGE}% (–Ω–æ—Ä–º–∞–ª—å–Ω–æ)"
    elif [[ "$DISK_USAGE" -lt 85 ]]; then
        warning "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: ${DISK_USAGE}% (–≤—ã—Å–æ–∫–æ–µ)"
    else
        error "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: ${DISK_USAGE}% (–∫—Ä–∏—Ç–∏—á–Ω–æ)"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏
check_logs() {
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏..."
    
    ERROR_COUNT=$(ssh -i "$VM_SSH_KEY" -o StrictHostKeyChecking=no "$VM_USER@$VM_HOST" "grep -c 'ERROR\\|FATAL\\|Exception' $VM_PATH/logs/combined.log 2>/dev/null || echo 0")
    
    if [[ "$ERROR_COUNT" -eq 0 ]]; then
        success "‚úÖ –û—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    else
        warning "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö: $ERROR_COUNT"
        log "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:"
        ssh -i "$VM_SSH_KEY" -o StrictHostKeyChecking=no "$VM_USER@$VM_HOST" "grep 'ERROR\\|FATAL\\|Exception' $VM_PATH/logs/combined.log | tail -5"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
generate_report() {
    log "üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞..."
    
    REPORT_FILE="monitoring-report-$(date +%Y%m%d_%H%M%S).txt"
    
    {
        echo "=== DOMEO MONITORING REPORT ==="
        echo "Environment: $ENVIRONMENT"
        echo "Date: $(date)"
        echo "VM: $VM_HOST"
        echo ""
        
        get_metrics
        
        echo ""
        echo "=== PERFORMANCE SUMMARY ==="
        performance_check
        
        echo ""
        echo "=== LOG ANALYSIS ==="
        check_logs
        
    } > "$REPORT_FILE"
    
    success "‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $REPORT_FILE"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    case "${2:-all}" in
        "metrics")
            get_metrics
            ;;
        "performance")
            performance_check
            ;;
        "logs")
            check_logs
            ;;
        "report")
            generate_report
            ;;
        "all"|*)
            get_metrics
            echo ""
            performance_check
            echo ""
            check_logs
            echo ""
            generate_report
            ;;
    esac
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
if ! command -v bc &> /dev/null; then
    error "bc –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install bc"
    exit 1
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
main "$@"

log "üéâ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!"

