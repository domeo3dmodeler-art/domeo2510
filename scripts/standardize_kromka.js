const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function standardizeKromka() {
  try {
    console.log('üîß –°–¢–ê–ù–î–ê–†–¢–ò–ó–ê–¶–ò–Ø –ü–û–õ–Ø "–ö—Ä–æ–º–∫–∞"\n');
    console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥—É—Ç –∏–∑–º–µ–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ!\n');

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
    const category = await prisma.catalogCategory.findFirst({
      where: { name: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏' }
    });

    if (!category) {
      console.log('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const products = await prisma.product.findMany({
      where: { catalog_category_id: category.id },
      select: {
        id: true,
        sku: true,
        name: true,
        properties_data: true
      }
    });

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${products.length}\n`);

    let totalFixed = 0;
    let productsWithChanges = 0;
    let blackValuesFound = 0;
    let absBlackValuesFound = 0;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
    for (let i = 0; i < products.length; i++) {
      const product = products[i];
      
      if (!product.properties_data) continue;

      let properties;
      try {
        properties = typeof product.properties_data === 'string' 
          ? JSON.parse(product.properties_data) 
          : product.properties_data;
      } catch (e) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.id}`);
        continue;
      }

      let hasChanges = false;
      const fixedProperties = { ...properties };

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ "–ö—Ä–æ–º–∫–∞"
      if (fixedProperties['–ö—Ä–æ–º–∫–∞']) {
        const originalValue = fixedProperties['–ö—Ä–æ–º–∫–∞'];
        
        // –ó–∞–º–µ–Ω—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã "Black" –Ω–∞ "–ß–µ—Ä–Ω–∞—è"
        if (originalValue === 'Black') {
          fixedProperties['–ö—Ä–æ–º–∫–∞'] = '–ß–µ—Ä–Ω–∞—è';
          blackValuesFound++;
          hasChanges = true;
          
          if (blackValuesFound <= 10) {
            console.log(`   ${product.sku}: "Black" ‚Üí "–ß–µ—Ä–Ω–∞—è"`);
          }
        } else if (originalValue === 'ABS BLACK') {
          fixedProperties['–ö—Ä–æ–º–∫–∞'] = '–ß–µ—Ä–Ω–∞—è';
          absBlackValuesFound++;
          hasChanges = true;
          
          if (absBlackValuesFound <= 10) {
            console.log(`   ${product.sku}: "ABS BLACK" ‚Üí "–ß–µ—Ä–Ω–∞—è"`);
          }
        }
      }

      // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
      if (hasChanges) {
        try {
          await prisma.product.update({
            where: { id: product.id },
            data: {
              properties_data: JSON.stringify(fixedProperties)
            }
          });
          
          productsWithChanges++;
          totalFixed++;
          
          if (totalFixed % 100 === 0) {
            console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalFixed}/${products.length}`);
          }
        } catch (error) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ${product.id}:`, error.message);
        }
      }
    }

    console.log(`\nüéâ –°–¢–ê–ù–î–ê–†–¢–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!`);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   - –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);
    console.log(`   - –ù–∞–π–¥–µ–Ω–æ "Black": ${blackValuesFound}`);
    console.log(`   - –ù–∞–π–¥–µ–Ω–æ "ABS BLACK": ${absBlackValuesFound}`);
    console.log(`   - –¢–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏: ${productsWithChanges}`);
    console.log(`   - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${totalFixed}`);

    if (blackValuesFound > 10) {
      console.log(`   - –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10 –ø—Ä–∏–º–µ—Ä–æ–≤ "Black" –∏–∑ ${blackValuesFound}`);
    }
    if (absBlackValuesFound > 10) {
      console.log(`   - –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10 –ø—Ä–∏–º–µ—Ä–æ–≤ "ABS BLACK" –∏–∑ ${absBlackValuesFound}`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ –∫—Ä–æ–º–∫–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

standardizeKromka();
