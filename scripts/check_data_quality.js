const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkDataQuality() {
  try {
    console.log('üîç –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –î–ê–ù–ù–´–• –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô\n');

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
    const category = await prisma.catalogCategory.findFirst({
      where: { name: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏' }
    });

    if (!category) {
      console.log('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    console.log(`üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category.name} (ID: ${category.id})\n`);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const products = await prisma.product.findMany({
      where: { catalog_category_id: category.id },
      select: {
        id: true,
        sku: true,
        name: true,
        properties_data: true,
        base_price: true,
        stock_quantity: true
      }
    });

    console.log(`üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ${products.length}\n`);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
    let encodingIssues = 0;
    let decimalPrices = 0;
    let kromkaCostIssues = 0;
    let kromkaStandardizationIssues = 0;
    let skladCaseIssues = 0;
    let nonStandardWidthIssues = 0;
    let emptyProperties = 0;
    let missingSKU = 0;
    let missingName = 0;

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
    products.forEach((product, index) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
      if (!product.sku || product.sku.trim() === '') {
        missingSKU++;
      }
      if (!product.name || product.name.trim() === '' || product.name === '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è') {
        missingName++;
      }

      // –ü–∞—Ä—Å–∏–º —Å–≤–æ–π—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
      let properties = {};
      if (product.properties_data) {
        try {
          properties = typeof product.properties_data === 'string' 
            ? JSON.parse(product.properties_data) 
            : product.properties_data;
        } catch (e) {
          console.error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–≤–æ–π—Å—Ç–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.id}:`, e);
          emptyProperties++;
          return;
        }
      } else {
        emptyProperties++;
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏
      Object.values(properties).forEach(value => {
        if (typeof value === 'string' && value.includes('?')) {
          encodingIssues++;
        }
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ —Ü–µ–Ω—ã
      if (properties['–¶–µ–Ω–∞ –æ–ø—Ç'] && typeof properties['–¶–µ–Ω–∞ –æ–ø—Ç'] === 'string') {
        const price = parseFloat(properties['–¶–µ–Ω–∞ –æ–ø—Ç']);
        if (!isNaN(price) && price % 1 !== 0) {
          decimalPrices++;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–¥–±–∞–≤–∫–∏ –∑–∞ –∫—Ä–æ–º–∫—É
      if (properties['–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–¥–±–∞–≤–∫–∏ –∑–∞ –∫—Ä–æ–º–∫—É'] === '-') {
        kromkaCostIssues++;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—é –∫—Ä–æ–º–∫–∏
      if (properties['–ö—Ä–æ–º–∫–∞'] === 'Black' || properties['–ö—Ä–æ–º–∫–∞'] === 'ABS BLACK') {
        kromkaStandardizationIssues++;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä —Å–∫–ª–∞–¥–∞
      if (properties['–°–∫–ª–∞–¥/–∑–∞–∫–∞–∑'] === '—Å–∫–ª–∞–¥—Å–∫–æ–µ') {
        skladCaseIssues++;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —à–∏—Ä–∏–Ω—É
      if (properties['–®–∏—Ä–∏–Ω–∞/–º–º'] === '400') {
        nonStandardWidthIssues++;
      }
    });

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò –ö–ê–ß–ï–°–¢–í–ê –î–ê–ù–ù–´–•:\n');
    
    console.log('‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
    console.log(`   - –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π: ${encodingIssues} —Ç–æ–≤–∞—Ä–æ–≤`);
    console.log(`   - –î–µ—Å—è—Ç–∏—á–Ω—ã–µ —Ü–µ–Ω—ã: ${decimalPrices} —Ç–æ–≤–∞—Ä–æ–≤`);
    console.log(`   - –°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–¥–±–∞–≤–∫–∏ –∑–∞ –∫—Ä–æ–º–∫—É: ${kromkaCostIssues} —Ç–æ–≤–∞—Ä–æ–≤`);
    console.log(`   - –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –∫—Ä–æ–º–∫–∏: ${kromkaStandardizationIssues} —Ç–æ–≤–∞—Ä–æ–≤`);
    console.log(`   - –†–µ–≥–∏—Å—Ç—Ä —Å–∫–ª–∞–¥–∞: ${skladCaseIssues} —Ç–æ–≤–∞—Ä–æ–≤`);
    console.log(`   - –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —à–∏—Ä–∏–Ω–∞: ${nonStandardWidthIssues} —Ç–æ–≤–∞—Ä–æ–≤\n`);

    console.log('‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–´:');
    console.log(`   - –¢–æ–≤–∞—Ä—ã –±–µ–∑ SKU: ${missingSKU} —Ç–æ–≤–∞—Ä–æ–≤`);
    console.log(`   - –¢–æ–≤–∞—Ä—ã –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è: ${missingName} —Ç–æ–≤–∞—Ä–æ–≤`);
    console.log(`   - –¢–æ–≤–∞—Ä—ã –±–µ–∑ —Å–≤–æ–π—Å—Ç–≤: ${emptyProperties} —Ç–æ–≤–∞—Ä–æ–≤\n`);

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalIssues = encodingIssues + decimalPrices + kromkaCostIssues + 
                       kromkaStandardizationIssues + skladCaseIssues + nonStandardWidthIssues;
    const totalProblems = missingSKU + missingName + emptyProperties;
    
    console.log('üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`   - –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);
    console.log(`   - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${totalIssues}`);
    console.log(`   - –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–±–ª–µ–º: ${totalProblems}`);
    console.log(`   - –ü—Ä–æ—Ü–µ–Ω—Ç –∫–∞—á–µ—Å—Ç–≤–∞: ${((products.length - totalProblems) / products.length * 100).toFixed(2)}%\n`);

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    if (missingSKU > 0) {
      console.log(`   - –ò—Å–ø—Ä–∞–≤–∏—Ç—å ${missingSKU} —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ SKU`);
    }
    if (missingName > 0) {
      console.log(`   - –ò—Å–ø—Ä–∞–≤–∏—Ç—å ${missingName} —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è`);
    }
    if (emptyProperties > 0) {
      console.log(`   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å ${emptyProperties} —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Å–≤–æ–π—Å—Ç–≤`);
    }
    if (totalIssues > 0) {
      console.log(`   - –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è ${totalIssues} —Ç–æ–≤–∞—Ä–æ–≤`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkDataQuality();
