#!/bin/bash

# üîç –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/health-check.sh

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
check_service() {
    local url=$1
    local name=$2
    local timeout=${3:-10}
    
    info "–ü—Ä–æ–≤–µ—Ä—è–µ–º $name: $url"
    
    if curl -f -s --max-time $timeout "$url" > /dev/null 2>&1; then
        log "‚úÖ $name - OK"
        return 0
    else
        error "‚ùå $name - FAILED"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
check_containers() {
    info "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    
    if command -v docker-compose > /dev/null 2>&1; then
        if [ -f "docker-compose.production.yml" ]; then
            local containers=$(docker-compose -f docker-compose.production.yml ps -q)
            if [ -n "$containers" ]; then
                local running=$(docker-compose -f docker-compose.production.yml ps | grep -c "Up" || true)
                local total=$(docker-compose -f docker-compose.production.yml ps | grep -c "domeo" || true)
                
                if [ "$running" -eq "$total" ] && [ "$total" -gt 0 ]; then
                    log "‚úÖ –í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã ($running/$total)"
                else
                    error "‚ùå –ù–µ –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã ($running/$total)"
                fi
            else
                warning "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            fi
        else
            warning "docker-compose.production.yml –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
    else
        warning "docker-compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
check_resources() {
    info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤..."
    
    if command -v docker > /dev/null 2>&1; then
        local cpu_usage=$(docker stats --no-stream --format "{{.CPUPerc}}" | head -1 | sed 's/%//')
        local mem_usage=$(docker stats --no-stream --format "{{.MemUsage}}" | head -1 | cut -d'/' -f1 | sed 's/MiB//')
        
        if [ -n "$cpu_usage" ] && [ -n "$mem_usage" ]; then
            log "üìä CPU: ${cpu_usage}%, Memory: ${mem_usage}MB"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            if (( $(echo "$cpu_usage > 90" | bc -l) )); then
                warning "‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: ${cpu_usage}%"
            fi
            
            if (( $(echo "$mem_usage > 1000" | bc -l) )); then
                warning "‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${mem_usage}MB"
            fi
        fi
    else
        warning "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
check_database() {
    info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."
    
    if [ -f "package.json" ] && grep -q "prisma" package.json; then
        if command -v npm > /dev/null 2>&1; then
            if npm run prisma:db:status > /dev/null 2>&1; then
                log "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞"
            else
                error "‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
            fi
        else
            warning "npm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        fi
    else
        warning "Prisma –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö API endpoints
check_api_endpoints() {
    info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ API endpoints..."
    
    local base_url="http://localhost:3000"
    local endpoints=(
        "/api/health:Health API"
        "/api/catalog/categories:Catalog API"
        "/api/catalog/products:Products API"
        "/api/users:Users API"
    )
    
    for endpoint in "${endpoints[@]}"; do
        local url=$(echo $endpoint | cut -d':' -f1)
        local name=$(echo $endpoint | cut -d':' -f2)
        check_service "${base_url}${url}" "$name" 5
    done
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
check_web_interface() {
    info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å..."
    
    local pages=(
        "/:–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
        "/dashboard:Dashboard"
        "/catalog:–ö–∞—Ç–∞–ª–æ–≥"
    )
    
    for page in "${pages[@]}"; do
        local url=$(echo $page | cut -d':' -f1)
        local name=$(echo $page | cut -d':' -f2)
        check_service "http://localhost:3000${url}" "$name" 10
    done
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏
check_logs() {
    info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏..."
    
    if command -v docker-compose > /dev/null 2>&1 && [ -f "docker-compose.production.yml" ]; then
        local error_count=$(docker-compose -f docker-compose.production.yml logs --tail=100 2>&1 | grep -i "error\|exception\|fatal" | wc -l)
        
        if [ "$error_count" -gt 0 ]; then
            warning "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ $error_count –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö"
            docker-compose -f docker-compose.production.yml logs --tail=20 | grep -i "error\|exception\|fatal" || true
        else
            log "‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        fi
    else
        warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏"
    fi
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
generate_report() {
    local timestamp=$(date +'%Y-%m-%d %H:%M:%S')
    local report_file="health-report-$(date +%Y%m%d_%H%M%S).txt"
    
    info "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç: $report_file"
    
    {
        echo "=== –û–¢–ß–ï–¢ –û –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´ ==="
        echo "–î–∞—Ç–∞: $timestamp"
        echo "=========================================="
        echo
        
        echo "=== –°–¢–ê–¢–£–° –ö–û–ù–¢–ï–ô–ù–ï–†–û–í ==="
        docker-compose -f docker-compose.production.yml ps 2>/dev/null || echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        echo
        
        echo "=== –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –†–ï–°–£–†–°–û–í ==="
        docker stats --no-stream 2>/dev/null || echo "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        echo
        
        echo "=== –ü–û–°–õ–ï–î–ù–ò–ï –õ–û–ì–ò ==="
        docker-compose -f docker-compose.production.yml logs --tail=50 2>/dev/null || echo "–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        
    } > "$report_file"
    
    log "üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $report_file"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log "üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"
    echo
    
    check_containers
    echo
    
    check_resources
    echo
    
    check_database
    echo
    
    check_api_endpoints
    echo
    
    check_web_interface
    echo
    
    check_logs
    echo
    
    generate_report
    echo
    
    log "üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
    log "üåê –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
trap 'error "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ $LINENO"' ERR

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
