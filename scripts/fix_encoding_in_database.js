const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// –§—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –ø–æ–ª–µ–π
function fixFieldEncoding(field) {
  const CORRUPTED_FIELD_MAPPINGS = {
    '??????/??': ['–®–∏—Ä–∏–Ω–∞/–º–º', '–í—ã—Å–æ—Ç–∞/–º–º'],
    '??????': ['–ö—Ä–æ–º–∫–∞', '–°—Ç–µ–∫–ª–æ'],
    '??????? ??????????': '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
    'DOMEO_??????? 1C (????????????? ????????????)': 'Domeo –ê—Ä—Ç–∏–∫—É–ª 1–° (–ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∞—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)',
    'DOMEO_??????? WEB': 'Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web',
    '????? _??? ????????': '–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è',
    'DOMEO_???? WEB': 'Domeo_–°—Ç–∏–ª—å Web',
    '??? ?????????': '–¢–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
    '??? ???????????': '–¢–∏–ø –æ—Ç–∫—Ä—ã–≤–∞–Ω–∏—è',
    '???????????': '–ü–æ—Å—Ç–∞–≤—â–∏–∫',
    '?????': 'Domeo_–¶–≤–µ—Ç',
    '?????': '–§–∞–±—Ä–∏–∫–∞_–ö–æ–ª–ª–µ–∫—Ü–∏—è',
    '?????/?????': '–§–∞–±—Ä–∏–∫–∞_–¶–≤–µ—Ç/–û—Ç–¥–µ–ª–∫–∞',
    '??.???.': '–ï–¥.–∏–∑–º.',
    '?????/?????': '–°–∫–ª–∞–¥/–∑–∞–∫–∞–∑',
    '??? ??? (?????????? ??? ??????, ?????, ????????, ???????)': '–¶–µ–Ω–∞ —Ä—Ä—Ü (–≤–∫–ª—é—á–∞—è —Ü–µ–Ω—É –ø–æ–ª–æ—Ç–Ω–∞, –∫–æ—Ä–æ–±–∞, –Ω–∞–ª–∏—á–Ω–∏–∫–æ–≤, –¥–æ–±–æ—Ä–æ–≤)',
    '??? ???': '–¶–µ–Ω–∞ –æ–ø—Ç',
    '??????? ?????????? ?? ??????': '–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–¥–±–∞–≤–∫–∏ –∑–∞ –∫—Ä–æ–º–∫—É',
    '???????': '–ú–æ–ª–¥–∏–Ω–≥',
    '?????': '–°—Ç–µ–∫–ª–æ',
    '???????': '–¢–æ–ª—â–∏–Ω–∞/–º–º',
    '?????': '‚Ññ',
    '????????': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
    '????????? ?????????': '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
    '????? ?????????': '–ú–æ–¥–µ–ª—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
    '?????': 'photos'
  };

  return CORRUPTED_FIELD_MAPPINGS[field] || field;
}

// –§—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π
function fixValueEncoding(value) {
  if (typeof value !== 'string') return value;
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
  const valueMappings = {
    '?????': '–ë–µ–ª—ã–π',
    '?????': '–°–µ—Ä—ã–π', 
    '??????': '–ë–µ–∂–µ–≤—ã–π',
    '?????': '–î—É–±',
    '?????': '–û—Ä–µ—Ö',
    '?????': '–ß–µ—Ä–Ω—ã–π',
    '?????': '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è',
    '?????????': '–ù–µ–æ–∫–ª–∞—Å—Å–∏–∫–∞',
    '???????': '–ö–ª–∞—Å—Å–∏–∫–∞',
    '???????': '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è',
    '??????': '–°–∫—Ä—ã—Ç–∞—è',
    '????????': '–†–∞—Å–ø–∞—à–Ω–∞—è',
    '??????': '–ø—Ä—è–º–æ–µ',
    '????????': '–û–±—Ä–∞—Ç–Ω–æ–µ',
    '???': '–Ω–µ—Ç',
    '??': '–¥–∞',
    '?????': '—à—Ç',
    '????????': '–ó–∞–∫–∞–∑–Ω–æ–µ',
    '?????????': '–°–∫–ª–∞–¥—Å–∫–æ–µ',
    '?????????': '—Å–∫–ª–∞–¥—Å–∫–æ–µ',
    '?????': '–ü–í–•',
    '???': '–ü–≠–¢',
    '???????': '–ù–∞–Ω–æ—Ç–µ–∫—Å',
    '?? ???????': '–ü–æ–¥ –æ—Ç–¥–µ–ª–∫—É',
    '??????': '–≠–∫–æ—à–ø–æ–Ω',
    '?????': '–≠–º–∞–ª—å',
    '????????': '–í–µ—Å—Ç–°—Ç–∞–π–ª',
    '???????': '–ü–æ—Ä—Ç–∏–∫–∞',
    '????????': 'Triadoors',
    '??????': '–§—Ä–∞–º–∏—Ä',
    '???????': '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏'
  };

  return valueMappings[value] || value;
}

async function fixEncodingInDatabase() {
  try {
    console.log('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–î–ò–†–û–í–ö–ò –í –ë–ê–ó–ï –î–ê–ù–ù–´–•\n');
    console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥—É—Ç –∏–∑–º–µ–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ!\n');

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
    const category = await prisma.catalogCategory.findFirst({
      where: { name: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏' }
    });

    if (!category) {
      console.log('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const products = await prisma.product.findMany({
      where: { catalog_category_id: category.id },
      select: {
        id: true,
        sku: true,
        name: true,
        properties_data: true
      }
    });

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${products.length}\n`);

    let totalFixed = 0;
    let productsWithChanges = 0;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
    for (let i = 0; i < products.length; i++) {
      const product = products[i];
      
      if (!product.properties_data) continue;

      let properties;
      try {
        properties = typeof product.properties_data === 'string' 
          ? JSON.parse(product.properties_data) 
          : product.properties_data;
      } catch (e) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.id}`);
        continue;
      }

      let hasChanges = false;
      const fixedProperties = {};

      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
      Object.keys(properties).forEach(originalField => {
        const originalValue = properties[originalField];
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
        const fixedField = fixFieldEncoding(originalField);
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        const fixedValue = fixValueEncoding(originalValue);
        
        fixedProperties[fixedField] = fixedValue;
        
        if (originalField !== fixedField || originalValue !== fixedValue) {
          hasChanges = true;
        }
      });

      // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
      if (hasChanges) {
        try {
          await prisma.product.update({
            where: { id: product.id },
            data: {
              properties_data: JSON.stringify(fixedProperties)
            }
          });
          
          productsWithChanges++;
          totalFixed++;
          
          if (totalFixed % 100 === 0) {
            console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalFixed}/${products.length}`);
          }
        } catch (error) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ${product.id}:`, error.message);
        }
      }
    }

    console.log(`\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!`);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   - –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);
    console.log(`   - –¢–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏: ${productsWithChanges}`);
    console.log(`   - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${totalFixed}`);

    // –¢–∞–∫–∂–µ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω –∏–º–ø–æ—Ä—Ç–∞
    console.log(`\nüîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω –∏–º–ø–æ—Ä—Ç–∞...`);
    
    const template = await prisma.importTemplate.findUnique({
      where: { catalog_category_id: category.id }
    });

    if (template) {
      let requiredFields = JSON.parse(template.required_fields || '[]');
      const originalFields = [...requiredFields];
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ —à–∞–±–ª–æ–Ω–µ
      requiredFields = requiredFields.map(field => fixFieldEncoding(field));
      
      if (JSON.stringify(originalFields) !== JSON.stringify(requiredFields)) {
        await prisma.importTemplate.update({
          where: { id: template.id },
          data: {
            required_fields: JSON.stringify(requiredFields),
            name: fixValueEncoding(template.name),
            description: fixValueEncoding(template.description || '')
          }
        });
        console.log(`‚úÖ –®–∞–±–ª–æ–Ω –∏–º–ø–æ—Ä—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω`);
      } else {
        console.log(`‚ÑπÔ∏è  –®–∞–±–ª–æ–Ω –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π`);
      }
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixEncodingInDatabase();
