# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–µ–ø–ª–æ–π –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é –í–ú —Å –±—ç–∫–∞–ø–æ–º
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .\scripts\safe-deploy-to-staging.ps1

param(
    [switch]$SkipBackup = $false,
    [switch]$DryRun = $false
)

$ErrorActionPreference = "Stop"

$STAGING_HOST = "130.193.40.35"
$STAGING_USER = "ubuntu"
$STAGING_PATH = "/opt/domeo"
$SSH_KEY = "C:\Users\petr2\.ssh\ssh-key-1757583003347\ssh-key-1757583003347"

$TIMESTAMP = Get-Date -Format "yyyyMMdd_HHmmss"
$BACKUP_DIR = "/tmp/domeo-backup-$TIMESTAMP"

Write-Host "üöÄ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–µ–ø–ª–æ–π –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é –í–ú" -ForegroundColor Cyan
Write-Host "====================================" -ForegroundColor Cyan
Write-Host ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH –∫–ª—é—á–∞
if (-not (Test-Path $SSH_KEY)) {
    Write-Host "‚ùå ERROR: SSH –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: $SSH_KEY" -ForegroundColor Red
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
Write-Host "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –í–ú..." -ForegroundColor Yellow
try {
    $test = ssh -i $SSH_KEY -o ConnectTimeout=10 -o StrictHostKeyChecking=no "$STAGING_USER@$STAGING_HOST" "echo 'Connection OK'"
    if ($LASTEXITCODE -ne 0) {
        throw "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"
    }
    Write-Host "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" -ForegroundColor Green
} catch {
    Write-Host "‚ùå ERROR: –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –í–ú" -ForegroundColor Red
    exit 1
}
Write-Host ""

if ($DryRun) {
    Write-Host "üîç DRY RUN MODE - –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã" -ForegroundColor Yellow
    Write-Host ""
}

# –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
Write-Host "üìä –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è..." -ForegroundColor Cyan
$healthCheck = ssh -i $SSH_KEY "$STAGING_USER@$STAGING_HOST" "curl -s http://localhost:3001/api/health 2>&1 | head -1"
Write-Host "   Health check: $healthCheck" -ForegroundColor Gray

$containers = ssh -i $SSH_KEY "$STAGING_USER@$STAGING_HOST" "cd $STAGING_PATH && docker compose ps --format json" | ConvertFrom-Json
Write-Host "   –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:" -ForegroundColor Gray
$containers | ForEach-Object { Write-Host "     - $($_.Name): $($_.State)" -ForegroundColor Gray }
Write-Host ""

# –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ (–µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—â–µ–Ω)
if (-not $SkipBackup -and -not $DryRun) {
    Write-Host "üíæ –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞..." -ForegroundColor Cyan
    ssh -i $SSH_KEY "$STAGING_USER@$STAGING_HOST" @"
        cd $STAGING_PATH
        mkdir -p $BACKUP_DIR
        
        # –ë—ç–∫–∞–ø –ë–î
        echo '–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ë–î...'
        docker exec -e PGPASSWORD=staging_password domeo-staging-postgres pg_dump -U staging_user -d domeo_staging > $BACKUP_DIR/database_backup.sql 2>&1
        
        # –ë—ç–∫–∞–ø –∫–æ–¥–∞ (—á–µ—Ä–µ–∑ git)
        echo '–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –∫–æ–¥–∞...'
        git archive --format=tar.gz HEAD > $BACKUP_DIR/code_backup.tar.gz 2>&1
        
        # –ë—ç–∫–∞–ø .env —Ñ–∞–π–ª–æ–≤
        echo '–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...'
        if [ -f .env ]; then cp .env $BACKUP_DIR/.env.backup; fi
        if [ -f .env.local ]; then cp .env.local $BACKUP_DIR/.env.local.backup; fi
        
        echo '–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –≤: $BACKUP_DIR'
    "@
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –≤ $BACKUP_DIR" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  WARNING: –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –±—ç–∫–∞–ø–æ–º, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º..." -ForegroundColor Yellow
    }
    Write-Host ""
}

# –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ git —Å—Ç–∞—Ç—É—Å–∞ –ª–æ–∫–∞–ª—å–Ω–æ
Write-Host "üìù –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ git..." -ForegroundColor Cyan
$gitStatus = git status --short
$modifiedFiles = ($gitStatus | Measure-Object -Line).Lines

Write-Host "   –ò–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: $modifiedFiles" -ForegroundColor Gray

if ($modifiedFiles -eq 0) {
    Write-Host "‚ö†Ô∏è  WARNING: –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –¥–µ–ø–ª–æ—è" -ForegroundColor Yellow
    Write-Host "   –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n)" -ForegroundColor Yellow
    $response = Read-Host
    if ($response -ne "y") {
        Write-Host "–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º" -ForegroundColor Yellow
        exit 0
    }
}
Write-Host ""

# –®–∞–≥ 4: –ó–∞–∫–æ–º–º–∏—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
Write-Host "üíæ –®–∞–≥ 4: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π..." -ForegroundColor Cyan
$hasUncommitted = git diff --quiet; $LASTEXITCODE -ne 0

if ($hasUncommitted -and -not $DryRun) {
    Write-Host "   –ï—Å—Ç—å –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è" -ForegroundColor Yellow
    Write-Host "   –•–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–º–º–∏—Ç–∏—Ç—å –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º? (y/n)" -ForegroundColor Yellow
    $response = Read-Host
    if ($response -eq "y") {
        Write-Host "   –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è..." -ForegroundColor Gray
        git add .
        
        Write-Host "   –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞:" -ForegroundColor Yellow
        $commitMessage = Read-Host "   Commit message"
        
        if ([string]::IsNullOrWhiteSpace($commitMessage)) {
            $commitMessage = "fix: apply ESLint fixes and improvements"
        }
        
        git commit -m $commitMessage
        Write-Host "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã" -ForegroundColor Green
    }
}
Write-Host ""

# –®–∞–≥ 5: –ü—É—à –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
Write-Host "üì§ –®–∞–≥ 5: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π..." -ForegroundColor Cyan
$currentBranch = git branch --show-current
Write-Host "   –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: $currentBranch" -ForegroundColor Gray

$remoteBranch = git rev-parse --abbrev-ref --symbolic-full-name @{u} 2>$null
if ($LASTEXITCODE -ne 0 -and -not $DryRun) {
    Write-Host "   –í–µ—Ç–∫–∞ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–Ω—É—é –≤–µ—Ç–∫—É" -ForegroundColor Yellow
    Write-Host "   –•–æ—Ç–∏—Ç–µ –∑–∞–ø—É—à–∏—Ç—å? (y/n)" -ForegroundColor Yellow
    $response = Read-Host
    if ($response -eq "y") {
        git push -u origin $currentBranch
    }
} elseif ($remoteBranch -and -not $DryRun) {
    $localCommit = git rev-parse HEAD
    $remoteCommit = git rev-parse "@{u}" 2>$null
    
    if ($localCommit -ne $remoteCommit) {
        Write-Host "   –ï—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–º–∏—Ç—ã, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π" -ForegroundColor Yellow
        Write-Host "   –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è..." -ForegroundColor Gray
        git push
    } else {
        Write-Host "   –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É–∂–µ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏" -ForegroundColor Green
    }
}
Write-Host ""

# –®–∞–≥ 6: –î–µ–ø–ª–æ–π –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é –í–ú
Write-Host "üöÄ –®–∞–≥ 6: –î–µ–ø–ª–æ–π –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é –í–ú..." -ForegroundColor Cyan

if ($DryRun) {
    Write-Host "   [DRY RUN] –ö–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:" -ForegroundColor Yellow
    Write-Host "   1. cd $STAGING_PATH" -ForegroundColor Gray
    Write-Host "   2. git pull origin $currentBranch" -ForegroundColor Gray
    Write-Host "   3. docker compose build --no-cache app" -ForegroundColor Gray
    Write-Host "   4. docker compose up -d" -ForegroundColor Gray
    Write-Host "   5. docker compose ps" -ForegroundColor Gray
    Write-Host ""
    Write-Host "‚úÖ DRY RUN –∑–∞–≤–µ—Ä—à–µ–Ω" -ForegroundColor Green
    exit 0
}

ssh -i $SSH_KEY "$STAGING_USER@$STAGING_HOST" @"
    set -e
    cd $STAGING_PATH
    
    echo 'üì• –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ git...'
    git fetch origin
    git pull origin $currentBranch || git pull origin main || git pull origin develop
    
    echo 'üî® –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...'
    docker compose build --no-cache app
    
    echo 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã...'
    docker compose up -d
    
    echo '‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...'
    sleep 10
    
    echo 'üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:'
    docker compose ps
    
    echo 'üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ health check...'
    sleep 5
    curl -f http://localhost:3001/api/health || echo '‚ö†Ô∏è  Health check –Ω–µ –ø—Ä–æ—à–µ–ª'
"@

if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ" -ForegroundColor Green
} else {
    Write-Host "‚ùå ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ!" -ForegroundColor Red
    Write-Host ""
    Write-Host "üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞..." -ForegroundColor Yellow
    ssh -i $SSH_KEY "$STAGING_USER@$STAGING_HOST" @"
        cd $STAGING_PATH
        
        # –û—Ç–∫–∞—Ç git
        git reset --hard HEAD@{1} || git reset --hard origin/$currentBranch
        
        # –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞
        docker compose build --no-cache app
        docker compose up -d
    "@
    exit 1
}

# –®–∞–≥ 7: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
Write-Host ""
Write-Host "‚úÖ –®–∞–≥ 7: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞..." -ForegroundColor Cyan
Start-Sleep -Seconds 5

$finalHealth = ssh -i $SSH_KEY "$STAGING_USER@$STAGING_HOST" "curl -s http://localhost:3001/api/health"
if ($finalHealth -match "healthy|ok") {
    Write-Host "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è  WARNING: Health check –Ω–µ –ø—Ä–æ—à–µ–ª, –Ω–æ –¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!" -ForegroundColor Green
Write-Host "   –¢–µ—Å—Ç–æ–≤–∞—è –í–ú: http://$STAGING_HOST`:3001" -ForegroundColor Cyan
Write-Host "   –ë—ç–∫–∞–ø –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤: $BACKUP_DIR (–Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –í–ú)" -ForegroundColor Gray
Write-Host ""
Write-Host "üí° –î–ª—è –æ—Ç–∫–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:" -ForegroundColor Yellow
Write-Host "   ssh -i $SSH_KEY $STAGING_USER@$STAGING_HOST 'cd $STAGING_PATH && docker exec -i domeo-staging-postgres psql -U staging_user -d domeo_staging < $BACKUP_DIR/database_backup.sql'" -ForegroundColor Gray

