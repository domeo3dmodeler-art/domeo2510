const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkProductNames() {
  try {
    console.log('üîç –ü–†–û–í–ï–†–ö–ê –ù–ê–ó–í–ê–ù–ò–ô –¢–û–í–ê–†–û–í\n');

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
    const category = await prisma.catalogCategory.findFirst({
      where: { name: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏' }
    });

    if (!category) {
      console.log('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    console.log(`üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category.name} (ID: ${category.id})\n`);

    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const products = await prisma.product.findMany({
      where: { catalog_category_id: category.id },
      select: {
        id: true,
        sku: true,
        name: true,
        properties_data: true
      },
      take: 10
    });

    console.log(`üì¶ –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤:\n`);

    products.forEach((product, index) => {
      console.log(`${index + 1}. ID: ${product.id}`);
      console.log(`   SKU: ${product.sku}`);
      console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: "${product.name}"`);
      
      // –ü–∞—Ä—Å–∏–º —Å–≤–æ–π—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
      let properties = {};
      if (product.properties_data) {
        try {
          properties = typeof product.properties_data === 'string' 
            ? JSON.parse(product.properties_data) 
            : product.properties_data;
        } catch (e) {
          console.log(`   –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–≤–æ–π—Å—Ç–≤: ${e.message}`);
        }
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
      console.log(`   –ú–æ–¥–µ–ª—å: ${properties['–ú–æ–¥–µ–ª—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'] || properties['–ú–æ–¥–µ–ª—å'] || '–Ω–µ—Ç'}`);
      console.log(`   –†–∞–∑–º–µ—Ä: ${properties['–®–∏—Ä–∏–Ω–∞/–º–º'] || ''}x${properties['–í—ã—Å–æ—Ç–∞/–º–º'] || ''}–º–º`);
      console.log(`   –¶–≤–µ—Ç: ${properties['Domeo_–¶–≤–µ—Ç'] || properties['–¶–≤–µ—Ç'] || '–Ω–µ—Ç'}`);
      console.log(`   –°—Ç–∏–ª—å: ${properties['Domeo_–°—Ç–∏–ª—å Web'] || properties['–°—Ç–∏–ª—å'] || '–Ω–µ—Ç'}`);
      console.log('');
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º
    const allProducts = await prisma.product.findMany({
      where: { catalog_category_id: category.id },
      select: { name: true }
    });

    const nameStats = {};
    allProducts.forEach(product => {
      const name = product.name || 'null';
      nameStats[name] = (nameStats[name] || 0) + 1;
    });

    console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ù–ê–ó–í–ê–ù–ò–ô:');
    Object.entries(nameStats)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10)
      .forEach(([name, count]) => {
        console.log(`   "${name}": ${count} —Ç–æ–≤–∞—Ä–æ–≤`);
      });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkProductNames();
