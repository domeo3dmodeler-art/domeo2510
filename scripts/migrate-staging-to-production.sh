#!/bin/bash

# üöÄ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Ç–µ—Å—Ç–æ–≤–æ–π –í–ú –Ω–∞ —Ä–∞–±–æ—á—É—é
# –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
STAGING_HOST=${STAGING_HOST:-"130.193.40.35"}
STAGING_USER=${STAGING_USER:-"ubuntu"}
STAGING_SSH_KEY=${STAGING_SSH_KEY:-"C:\\Users\\petr2\\.ssh\\ssh-key-1757583003347\\ssh-key-1757583003347"}
STAGING_PATH="/opt/domeo"

PROD_HOST=${PROD_HOST:-"130.193.40.35"}
PROD_USER=${PROD_USER:-"ubuntu"}
PROD_SSH_KEY=${PROD_SSH_KEY:-"C:\\Users\\petr2\\.ssh\\ssh-key-1757583003347\\ssh-key-1757583003347"}
PROD_PATH="/opt/domeo"

TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="/tmp/domeo-migration-${TIMESTAMP}"

log "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö —Å —Ç–µ—Å—Ç–æ–≤–æ–π –í–ú –Ω–∞ —Ä–∞–±–æ—á—É—é"
log "  –¢–µ—Å—Ç–æ–≤–∞—è –í–ú: ${STAGING_HOST}"
log "  –†–∞–±–æ—á–∞—è –í–ú: ${PROD_HOST}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH –∫–ª—é—á–µ–π
if [[ ! -f "$STAGING_SSH_KEY" ]]; then
    error "SSH –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –í–ú –Ω–µ –Ω–∞–π–¥–µ–Ω: $STAGING_SSH_KEY"
    exit 1
fi

if [[ ! -f "$PROD_SSH_KEY" ]]; then
    error "SSH –∫–ª—é—á –¥–ª—è —Ä–∞–±–æ—á–µ–π –í–ú –Ω–µ –Ω–∞–π–¥–µ–Ω: $PROD_SSH_KEY"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –í–ú
log "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –í–ú..."
if ! ssh -i "$STAGING_SSH_KEY" -o ConnectTimeout=10 -o StrictHostKeyChecking=no "$STAGING_USER@$STAGING_HOST" "echo 'Connection OK'"; then
    error "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –í–ú"
    exit 1
fi
success "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –í–ú —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–∞–±–æ—á–µ–π –í–ú
log "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–∞–±–æ—á–µ–π –í–ú..."
if ! ssh -i "$PROD_SSH_KEY" -o ConnectTimeout=10 -o StrictHostKeyChecking=no "$PROD_USER@$PROD_HOST" "echo 'Connection OK'"; then
    error "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ä–∞–±–æ—á–µ–π –í–ú"
    exit 1
fi
success "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–∞–±–æ—á–µ–π –í–ú —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

# –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –í–ú
log "üì¶ –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –í–ú..."
ssh -i "$STAGING_SSH_KEY" -o StrictHostKeyChecking=no "$STAGING_USER@$STAGING_HOST" << EOF
cd ${STAGING_PATH}
mkdir -p ${BACKUP_DIR}

# –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
docker compose -f docker-compose.staging.yml exec -T staging-postgres pg_dump -U staging_user domeo_staging > ${BACKUP_DIR}/database_backup.sql

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –±—ç–∫–∞–ø–∞
if [ -s ${BACKUP_DIR}/database_backup.sql ]; then
    echo "‚úÖ –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω: \$(du -h ${BACKUP_DIR}/database_backup.sql | cut -f1)"
else
    echo "‚ùå –û—à–∏–±–∫–∞: –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–æ–π"
    exit 1
fi
EOF

if [ $? -eq 0 ]; then
    success "‚úÖ –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω"
else
    error "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    exit 1
fi

# –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –í–ú
log "üì∏ –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –í–ú..."
ssh -i "$STAGING_SSH_KEY" -o StrictHostKeyChecking=no "$STAGING_USER@$STAGING_HOST" << EOF
cd ${STAGING_PATH}

# –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ volume
docker run --rm \\
    -v domeo_staging_uploads:/source:ro \\
    -v ${BACKUP_DIR}:/backup \\
    alpine tar czf /backup/uploads_backup.tar.gz -C /source .

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞
if [ -s ${BACKUP_DIR}/uploads_backup.tar.gz ]; then
    echo "‚úÖ –ë—ç–∫–∞–ø —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å–æ–∑–¥–∞–Ω: \$(du -h ${BACKUP_DIR}/uploads_backup.tar.gz | cut -f1)"
else
    echo "‚ùå –û—à–∏–±–∫–∞: –±—ç–∫–∞–ø —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—É—Å—Ç–æ–π"
    exit 1
fi
EOF

if [ $? -eq 0 ]; then
    success "‚úÖ –ë—ç–∫–∞–ø —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å–æ–∑–¥–∞–Ω"
else
    error "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"
    exit 1
fi

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ç–∫–∞–ø–æ–≤ –Ω–∞ —Ä–∞–±–æ—á—É—é –í–ú
log "üì§ –ö–æ–ø–∏—Ä—É–µ–º –±—ç–∫–∞–ø—ã –Ω–∞ —Ä–∞–±–æ—á—É—é –í–ú..."
ssh -i "$STAGING_SSH_KEY" -o StrictHostKeyChecking=no "$STAGING_USER@$STAGING_HOST" << EOF
cd ${STAGING_PATH}
scp -i ${PROD_SSH_KEY} -o StrictHostKeyChecking=no ${BACKUP_DIR}/database_backup.sql ${PROD_USER}@${PROD_HOST}:${BACKUP_DIR}/
scp -i ${PROD_SSH_KEY} -o StrictHostKeyChecking=no ${BACKUP_DIR}/uploads_backup.tar.gz ${PROD_USER}@${PROD_HOST}:${BACKUP_DIR}/
EOF

if [ $? -eq 0 ]; then
    success "‚úÖ –ë—ç–∫–∞–ø—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Ä–∞–±–æ—á—É—é –í–ú"
else
    error "‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –±—ç–∫–∞–ø–æ–≤"
    exit 1
fi

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ —Ä–∞–±–æ—á–µ–π –í–ú
log "‚è∏Ô∏è  –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –Ω–∞ —Ä–∞–±–æ—á–µ–π –í–ú..."
ssh -i "$PROD_SSH_KEY" -o StrictHostKeyChecking=no "$PROD_USER@$PROD_HOST" << EOF
cd ${PROD_PATH}
docker compose -f docker-compose.production-full.yml down || true
EOF

success "‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ä–∞–±–æ—á–µ–π –í–ú
log "üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ä–∞–±–æ—á–µ–π –í–ú..."
ssh -i "$PROD_SSH_KEY" -o StrictHostKeyChecking=no "$PROD_USER@$PROD_HOST" << EOF
cd ${PROD_PATH}
mkdir -p ${BACKUP_DIR}

# –ó–∞–ø—É—Å–∫–∞–µ–º PostgreSQL –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
docker compose -f docker-compose.production-full.yml up -d postgres

# –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL
sleep 10

# –û—á–∏—â–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
docker compose -f docker-compose.production-full.yml exec -T postgres psql -U domeo -d domeo -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;"

# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
docker compose -f docker-compose.production-full.yml exec -T postgres psql -U domeo -d domeo < ${BACKUP_DIR}/database_backup.sql

echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
EOF

if [ $? -eq 0 ]; then
    success "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
else
    error "‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    exit 1
fi

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞ —Ä–∞–±–æ—á–µ–π –í–ú
log "üñºÔ∏è  –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞ —Ä–∞–±–æ—á—É—é –í–ú..."
ssh -i "$PROD_SSH_KEY" -o StrictHostKeyChecking=no "$PROD_USER@$PROD_HOST" << EOF
cd ${PROD_PATH}

# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –∞—Ä—Ö–∏–≤–∞ –≤ volume
docker run --rm \\
    -v domeo_app_uploads:/target \\
    -v ${BACKUP_DIR}:/backup \\
    alpine sh -c "cd /target && rm -rf * && tar xzf /backup/uploads_backup.tar.gz"

echo "‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
EOF

if [ $? -eq 0 ]; then
    success "‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
else
    error "‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"
    exit 1
fi

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞ –Ω–∞ —Ä–∞–±–æ—á–µ–π –í–ú
log "üî® –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ –∏ –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑ –Ω–∞ —Ä–∞–±–æ—á–µ–π –í–ú..."
ssh -i "$PROD_SSH_KEY" -o StrictHostKeyChecking=no "$PROD_USER@$PROD_HOST" << EOF
cd ${PROD_PATH}
git pull origin develop
docker compose -f docker-compose.production-full.yml build app
EOF

if [ $? -eq 0 ]; then
    success "‚úÖ –û–±—Ä–∞–∑ –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω"
else
    error "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ –æ–±—Ä–∞–∑–∞"
    exit 1
fi

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ —Ä–∞–±–æ—á–µ–π –í–ú
log "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –Ω–∞ —Ä–∞–±–æ—á–µ–π –í–ú..."
ssh -i "$PROD_SSH_KEY" -o StrictHostKeyChecking=no "$PROD_USER@$PROD_HOST" << EOF
cd ${PROD_PATH}
docker compose -f docker-compose.production-full.yml up -d

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
sleep 15

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
docker compose -f docker-compose.production-full.yml ps
EOF

if [ $? -eq 0 ]; then
    success "‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
else
    error "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"
    exit 1
fi

# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞ –æ–±–µ–∏—Ö –í–ú
log "üßπ –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã..."
ssh -i "$STAGING_SSH_KEY" -o StrictHostKeyChecking=no "$STAGING_USER@$STAGING_HOST" "rm -rf ${BACKUP_DIR}"
ssh -i "$PROD_SSH_KEY" -o StrictHostKeyChecking=no "$PROD_USER@$PROD_HOST" "rm -rf ${BACKUP_DIR}"

success "‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã"

success "üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
log "  –†–∞–±–æ—á–∞—è –í–ú –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞: http://${PROD_HOST}:3000"

