const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function addDataValidation() {
  try {
    console.log('üîß –î–û–ë–ê–í–õ–ï–ù–ò–ï –í–ê–õ–ò–î–ê–¶–ò–ò –î–ê–ù–ù–´–•\n');

    // 1. –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
    console.log('1. –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤...');
    
    const productValidators = {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è SKU
      validateSKU: (sku) => {
        if (!sku || typeof sku !== 'string') {
          return { valid: false, error: 'SKU –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π' };
        }
        if (sku.length < 3 || sku.length > 100) {
          return { valid: false, error: 'SKU –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤' };
        }
        if (!/^[a-zA-Z0-9\-_]+$/.test(sku)) {
          return { valid: false, error: 'SKU –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è' };
        }
        return { valid: true };
      },

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
      validateName: (name) => {
        if (!name || typeof name !== 'string') {
          return { valid: false, error: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' };
        }
        if (name.trim().length < 2) {
          return { valid: false, error: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤' };
        }
        if (name.length > 255) {
          return { valid: false, error: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 255 —Å–∏–º–≤–æ–ª–æ–≤' };
        }
        return { valid: true };
      },

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã
      validatePrice: (price) => {
        if (typeof price !== 'number') {
          return { valid: false, error: '–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º' };
        }
        if (price < 0) {
          return { valid: false, error: '–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π' };
        }
        if (price > 10000000) {
          return { valid: false, error: '–¶–µ–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 10,000,000' };
        }
        return { valid: true };
      },

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
      validateStock: (stock) => {
        if (typeof stock !== 'number') {
          return { valid: false, error: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º' };
        }
        if (!Number.isInteger(stock)) {
          return { valid: false, error: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º' };
        }
        if (stock < 0) {
          return { valid: false, error: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º' };
        }
        return { valid: true };
      },

      // –í–∞–ª–∏–¥–∞—Ü–∏—è JSON —Å–≤–æ–π—Å—Ç–≤
      validateProperties: (properties) => {
        if (!properties) {
          return { valid: true }; // –ü—É—Å—Ç—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã
        }
        
        let parsedProperties;
        try {
          parsedProperties = typeof properties === 'string' 
            ? JSON.parse(properties) 
            : properties;
        } catch (error) {
          return { valid: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ —Å–≤–æ–π—Å—Ç–≤–∞—Ö —Ç–æ–≤–∞—Ä–∞' };
        }

        if (typeof parsedProperties !== 'object' || Array.isArray(parsedProperties)) {
          return { valid: false, error: '–°–≤–æ–π—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º' };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä JSON
        const jsonString = JSON.stringify(parsedProperties);
        if (jsonString.length > 10000) {
          return { valid: false, error: '–°–≤–æ–π—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ (–±–æ–ª–µ–µ 10KB)' };
        }

        return { valid: true };
      }
    };

    // 2. –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    console.log('\n2. –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
    
    const categoryValidators = {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      validateName: (name) => {
        if (!name || typeof name !== 'string') {
          return { valid: false, error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' };
        }
        if (name.trim().length < 2) {
          return { valid: false, error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤' };
        }
        if (name.length > 100) {
          return { valid: false, error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤' };
        }
        return { valid: true };
      },

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      validatePath: (path) => {
        if (!path || typeof path !== 'string') {
          return { valid: false, error: '–ü—É—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' };
        }
        if (!path.startsWith('/')) {
          return { valid: false, error: '–ü—É—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å /' };
        }
        if (!/^\/[a-zA-Z0-9\-_\/]*$/.test(path)) {
          return { valid: false, error: '–ü—É—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ —Å–ª—ç—à–∏' };
        }
        return { valid: true };
      },

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      validateLevel: (level) => {
        if (typeof level !== 'number') {
          return { valid: false, error: '–£—Ä–æ–≤–µ–Ω—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º' };
        }
        if (!Number.isInteger(level)) {
          return { valid: false, error: '–£—Ä–æ–≤–µ–Ω—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º' };
        }
        if (level < 0 || level > 10) {
          return { valid: false, error: '–£—Ä–æ–≤–µ–Ω—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 10' };
        }
        return { valid: true };
      }
    };

    // 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞
    console.log('\n3. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞...');
    
    const validateProduct = async (productData) => {
      const errors = [];
      const warnings = [];

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
      const skuValidation = productValidators.validateSKU(productData.sku);
      if (!skuValidation.valid) errors.push(skuValidation.error);

      const nameValidation = productValidators.validateName(productData.name);
      if (!nameValidation.valid) errors.push(nameValidation.error);

      const priceValidation = productValidators.validatePrice(productData.base_price);
      if (!priceValidation.valid) errors.push(priceValidation.error);

      const stockValidation = productValidators.validateStock(productData.stock_quantity);
      if (!stockValidation.valid) errors.push(stockValidation.error);

      const propertiesValidation = productValidators.validateProperties(productData.properties_data);
      if (!propertiesValidation.valid) errors.push(propertiesValidation.error);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ SKU
      if (productData.sku) {
        const existingProduct = await prisma.product.findUnique({
          where: { sku: productData.sku },
          select: { id: true }
        });
        
        if (existingProduct && existingProduct.id !== productData.id) {
          errors.push(`–¢–æ–≤–∞—Ä —Å SKU "${productData.sku}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        }
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (productData.catalog_category_id) {
        const category = await prisma.catalogCategory.findUnique({
          where: { id: productData.catalog_category_id },
          select: { id: true, name: true }
        });
        
        if (!category) {
          errors.push(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID "${productData.catalog_category_id}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }
      }

      // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
      if (productData.base_price === 0) {
        warnings.push('–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ —Ä–∞–≤–Ω–∞ –Ω—É–ª—é');
      }
      
      if (productData.stock_quantity === 0) {
        warnings.push('–¢–æ–≤–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ');
      }

      return {
        valid: errors.length === 0,
        errors,
        warnings
      };
    };

    // 4. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    console.log('\n4. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
    
    const validateCategory = async (categoryData) => {
      const errors = [];
      const warnings = [];

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
      const nameValidation = categoryValidators.validateName(categoryData.name);
      if (!nameValidation.valid) errors.push(nameValidation.error);

      const pathValidation = categoryValidators.validatePath(categoryData.path);
      if (!pathValidation.valid) errors.push(pathValidation.error);

      const levelValidation = categoryValidators.validateLevel(categoryData.level);
      if (!levelValidation.valid) errors.push(levelValidation.error);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—É—Ç–∏
      if (categoryData.path) {
        const existingCategory = await prisma.catalogCategory.findFirst({
          where: { 
            path: categoryData.path,
            id: { not: categoryData.id || '' }
          },
          select: { id: true, name: true }
        });
        
        if (existingCategory) {
          errors.push(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å –ø—É—Ç–µ–º "${categoryData.path}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        }
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (categoryData.parent_id) {
        const parentCategory = await prisma.catalogCategory.findUnique({
          where: { id: categoryData.parent_id },
          select: { id: true, name: true, level: true }
        });
        
        if (!parentCategory) {
          errors.push(`–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID "${categoryData.parent_id}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        } else if (categoryData.level && parentCategory.level >= categoryData.level) {
          errors.push('–£—Ä–æ–≤–µ–Ω—å –¥–æ—á–µ—Ä–Ω–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ —É—Ä–æ–≤–Ω—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π');
        }
      }

      return {
        valid: errors.length === 0,
        errors,
        warnings
      };
    };

    // 5. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–∞—Å—Å–æ–≤–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    console.log('\n5. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–∞—Å—Å–æ–≤–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏...');
    
    const validateMultipleProducts = async (products) => {
      const results = [];
      let validCount = 0;
      let invalidCount = 0;

      for (const product of products) {
        const validation = await validateProduct(product);
        results.push({
          sku: product.sku,
          name: product.name,
          ...validation
        });

        if (validation.valid) {
          validCount++;
        } else {
          invalidCount++;
        }
      }

      return {
        results,
        summary: {
          total: products.length,
          valid: validCount,
          invalid: invalidCount
        }
      };
    };

    // 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    console.log('\n6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–∞
    const testProduct = {
      sku: 'TEST-VALIDATION-001',
      name: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
      base_price: 1000,
      stock_quantity: 10,
      catalog_category_id: 'cmg50xcgs001cv7mn0tdyk1wo',
      properties_data: '{"test": true}'
    };

    const productValidation = await validateProduct(testProduct);
    console.log(`   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞: ${productValidation.valid ? '–≤–∞–ª–∏–¥–µ–Ω' : '–Ω–µ–≤–∞–ª–∏–¥–µ–Ω'}`);
    if (productValidation.errors.length > 0) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∏: ${productValidation.errors.join(', ')}`);
    }
    if (productValidation.warnings.length > 0) {
      console.log(`   ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${productValidation.warnings.join(', ')}`);
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const testCategory = {
      name: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
      path: '/test-validation-category',
      level: 1
    };

    const categoryValidation = await validateCategory(testCategory);
    console.log(`   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryValidation.valid ? '–≤–∞–ª–∏–¥–Ω–∞' : '–Ω–µ–≤–∞–ª–∏–¥–Ω–∞'}`);
    if (categoryValidation.errors.length > 0) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∏: ${categoryValidation.errors.join(', ')}`);
    }

    console.log('\nüéâ –î–û–ë–ê–í–õ–ï–ù–ò–ï –í–ê–õ–ò–î–ê–¶–ò–ò –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log('\nüìä –°–û–ó–î–ê–ù–ù–´–ï –í–ê–õ–ò–î–ê–¢–û–†–´:');
    console.log('   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ - SKU, –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Å–≤–æ–π—Å—Ç–≤–∞');
    console.log('   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π - –Ω–∞–∑–≤–∞–Ω–∏–µ, –ø—É—Ç—å, —É—Ä–æ–≤–µ–Ω—å');
    console.log('   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ - SKU –∏ –ø—É—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
    console.log('   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π - —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö —Å–≤—è–∑–µ–π');
    console.log('   ‚úÖ –ú–∞—Å—Å–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è - –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤');
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('   1. –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤ API endpoints');
    console.log('   2. –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –Ω–∞ —É—Ä–æ–≤–Ω–µ Prisma —Å—Ö–µ–º—ã');
    console.log('   3. –°–æ–∑–¥–∞—Ç—å middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏');
    console.log('   4. –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

addDataValidation();

