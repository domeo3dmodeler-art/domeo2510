const { PrismaClient } = require('@prisma/client');
const XLSX = require('xlsx');
const fs = require('fs');

const prisma = new PrismaClient();

async function exportPriceListToExcel() {
  try {
    console.log('üîß –≠–ö–°–ü–û–†–¢ –ü–†–ê–ô–°–ê –í EXCEL –ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–•\n');

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
    const category = await prisma.catalogCategory.findFirst({
      where: { name: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏' }
    });

    if (!category) {
      console.log('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    console.log(`üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category.name} (ID: ${category.id})\n`);

    // –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    const products = await prisma.product.findMany({
      where: { catalog_category_id: category.id },
      select: {
        id: true,
        sku: true,
        name: true,
        properties_data: true,
        base_price: true,
        stock_quantity: true
      }
      // –£–±–∏—Ä–∞–µ–º take - —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    });

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞: ${products.length}\n`);

    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Excel
    const headers = [
      '‚Ññ', 'SKU', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞', '–®–∏—Ä–∏–Ω–∞/–º–º', '–í—ã—Å–æ—Ç–∞/–º–º', 
      '–¢–æ–ª—â–∏–Ω–∞/–º–º', '–¶–≤–µ—Ç', '–°—Ç–∏–ª—å', '–¢–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', '–¢–∏–ø –æ—Ç–∫—Ä—ã–≤–∞–Ω–∏—è', 
      '–ü–æ—Å—Ç–∞–≤—â–∏–∫', '–¶–µ–Ω–∞ —Ä—Ä—Ü', '–¶–µ–Ω–∞ –æ–ø—Ç', '–¶–µ–Ω–∞ –±–∞–∑–æ–≤–∞—è', '–û—Å—Ç–∞—Ç–æ–∫'
    ];
    
    const data = [];

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
    products.forEach((product, index) => {
      const row = [];
      
      // –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
      row.push(index + 1);
      
      // SKU –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
      row.push(product.sku || '');
      row.push(product.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è');

      // –ü–∞—Ä—Å–∏–º —Å–≤–æ–π—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
      let properties = {};
      if (product.properties_data) {
        try {
          properties = typeof product.properties_data === 'string' 
            ? JSON.parse(product.properties_data) 
            : product.properties_data;
        } catch (e) {
          console.error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–≤–æ–π—Å—Ç–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.id}:`, e);
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
      row.push(properties['–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'] || '');
      row.push(properties['–®–∏—Ä–∏–Ω–∞/–º–º'] || '');
      row.push(properties['–í—ã—Å–æ—Ç–∞/–º–º'] || '');
      row.push(properties['–¢–æ–ª—â–∏–Ω–∞/–º–º'] || '');
      row.push(properties['Domeo_–¶–≤–µ—Ç'] || '');
      row.push(properties['Domeo_–°—Ç–∏–ª—å Web'] || '');
      row.push(properties['–¢–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏'] || '');
      row.push(properties['–¢–∏–ø –æ—Ç–∫—Ä—ã–≤–∞–Ω–∏—è'] || '');
      row.push(properties['–ü–æ—Å—Ç–∞–≤—â–∏–∫'] || '');
      row.push(properties['–¶–µ–Ω–∞ —Ä—Ä—Ü (–≤–∫–ª—é—á–∞—è —Ü–µ–Ω—É –ø–æ–ª–æ—Ç–Ω–∞, –∫–æ—Ä–æ–±–∞, –Ω–∞–ª–∏—á–Ω–∏–∫–æ–≤, –¥–æ–±–æ—Ä–æ–≤)'] || '');
      row.push(properties['–¶–µ–Ω–∞ –æ–ø—Ç'] || '');

      // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É –∏ –æ—Å—Ç–∞—Ç–æ–∫
      row.push(product.base_price || 0);
      row.push(product.stock_quantity || 0);

      data.push(row);
    });

    // –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
    const worksheet = XLSX.utils.aoa_to_sheet([headers, ...data]);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, '–ü—Ä–∞–π—Å');

    // –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    const fileName = `price_–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ_–¥–≤–µ—Ä–∏_${new Date().toISOString().split('T')[0]}.xlsx`;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º Excel —Ñ–∞–π–ª
    XLSX.writeFile(workbook, fileName);

    console.log(`üéâ –≠–ö–°–ü–û–†–¢ –í EXCEL –ó–ê–í–ï–†–®–ï–ù!`);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   - –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);
    console.log(`   - –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${fileName}`);
    console.log(`   - –§–æ—Ä–º–∞—Ç: Excel (.xlsx)`);
    console.log(`   - –ö–æ–¥–∏—Ä–æ–≤–∫–∞: UTF-8`);
    console.log(`   - –°—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: ${data.length + 1} (–≤–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–æ–∫)`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ø—Ä–∞–π—Å–∞ –≤ Excel:', error);
  } finally {
    await prisma.$disconnect();
  }
}

exportPriceListToExcel();