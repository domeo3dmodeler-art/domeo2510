const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function analyzeSkuWithFinish() {
  try {
    console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è SKU [–ú–æ–¥–µ–ª—å] - [–†–∞–∑–º–µ—Ä] - [–ü–æ–∫—Ä—ã—Ç–∏–µ] - [–¶–≤–µ—Ç]...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
    const products = await prisma.product.findMany({
      where: {
        catalog_category: {
          name: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏'
        }
      },
      select: {
        id: true,
        sku: true,
        properties_data: true
      }
    });
    
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`);
    
    // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const models = new Set();
    const sizes = new Set();
    const finishes = new Set();
    const colors = new Set();
    const combinations = new Map();
    
    for (const product of products) {
      try {
        // –ü–∞—Ä—Å–∏–º properties_data
        let properties = {};
        if (product.properties_data) {
          try {
            properties = typeof product.properties_data === 'string' 
              ? JSON.parse(product.properties_data) 
              : product.properties_data;
          } catch (e) {
            continue;
          }
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        const model = properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'] || 'UNKNOWN_MODEL';
        const width = properties['–®–∏—Ä–∏–Ω–∞/–º–º'] || 'UNKNOWN_WIDTH';
        const height = properties['–í—ã—Å–æ—Ç–∞/–º–º'] || 'UNKNOWN_HEIGHT';
        const finish = properties['–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è'] || 'UNKNOWN_FINISH';
        const color = properties['Domeo_–¶–≤–µ—Ç'] || 'UNKNOWN_COLOR';
        
        const size = `${width}x${height}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
        models.add(model);
        sizes.add(size);
        finishes.add(finish);
        colors.add(color);
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
        const combination = `${model}-${size}-${finish}-${color}`;
        combinations.set(combination, (combinations.get(combination) || 0) + 1);
        
      } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ ${product.id}: ${error.message}`);
      }
    }
    
    console.log('\nüìä –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ SKU:');
    
    console.log(`\nüè∑Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ (${models.size}):`);
    Array.from(models).sort().forEach((model, index) => {
      console.log(`  ${index + 1}. ${model}`);
    });
    
    console.log(`\nüìè –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã (${sizes.size}):`);
    Array.from(sizes).sort().forEach((size, index) => {
      console.log(`  ${index + 1}. ${size}`);
    });
    
    console.log(`\nüé® –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–∫—Ä—ã—Ç–∏—è (${finishes.size}):`);
    Array.from(finishes).sort().forEach((finish, index) => {
      console.log(`  ${index + 1}. ${finish}`);
    });
    
    console.log(`\nüåà –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ (${colors.size}):`);
    Array.from(colors).sort().forEach((color, index) => {
      console.log(`  ${index + 1}. ${color}`);
    });
    
    console.log(`\nüîó –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ [–ú–æ–¥–µ–ª—å]-[–†–∞–∑–º–µ—Ä]-[–ü–æ–∫—Ä—ã—Ç–∏–µ]-[–¶–≤–µ—Ç] (${combinations.size}):`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    const duplicates = new Map();
    combinations.forEach((count, combination) => {
      if (!duplicates.has(count)) {
        duplicates.set(count, []);
      }
      duplicates.get(count).push(combination);
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    Array.from(duplicates.keys()).sort((a, b) => b - a).forEach(count => {
      const combos = duplicates.get(count);
      console.log(`\n  üìä –ö–æ–º–±–∏–Ω–∞—Ü–∏–π —Å ${count} —Ç–æ–≤–∞—Ä–∞–º–∏: ${combos.length}`);
      
      if (count > 1) {
        console.log(`    –ü—Ä–∏–º–µ—Ä—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:`);
        combos.slice(0, 5).forEach(combo => {
          console.log(`      - ${combo}`);
        });
        if (combos.length > 5) {
          console.log(`      ... –∏ –µ—â–µ ${combos.length - 5} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π`);
        }
      } else {
        console.log(`    –ü—Ä–∏–º–µ—Ä—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π:`);
        combos.slice(0, 5).forEach(combo => {
          console.log(`      - ${combo}`);
        });
        if (combos.length > 5) {
          console.log(`      ... –∏ –µ—â–µ ${combos.length - 5} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π`);
        }
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö SKU
    const totalCombinations = combinations.size;
    const totalProducts = products.length;
    const uniqueCombinations = Array.from(combinations.entries()).filter(([combo, count]) => count === 1).length;
    const duplicateCombinations = totalCombinations - uniqueCombinations;
    
    console.log('\nüéØ –û—Ü–µ–Ω–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö SKU:');
    console.log(`üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalProducts}`);
    console.log(`üìä –í—Å–µ–≥–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: ${totalCombinations}`);
    console.log(`üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: ${uniqueCombinations}`);
    console.log(`üìä –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: ${duplicateCombinations}`);
    
    const uniquenessPercentage = Math.round((uniqueCombinations / totalProducts) * 100);
    
    if (duplicateCombinations === 0) {
      console.log('‚úÖ –û–¢–õ–ò–ß–ù–û! –í—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç [–ú–æ–¥–µ–ª—å]-[–†–∞–∑–º–µ—Ä]-[–ü–æ–∫—Ä—ã—Ç–∏–µ]-[–¶–≤–µ—Ç]');
    } else if (uniquenessPercentage >= 90) {
      console.log(`‚úÖ –•–û–†–û–®–û! ${uniquenessPercentage}% –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã - —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∞–º–∏`);
    } else if (uniquenessPercentage >= 70) {
      console.log(`‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! ${uniquenessPercentage}% –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã - –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã`);
    } else {
      console.log(`‚ùå –ü–õ–û–•–û! –¢–æ–ª—å–∫–æ ${uniquenessPercentage}% –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã - —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç`);
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∫—Ä—ã—Ç–∏—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ
    console.log('\nüîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏–π:');
    const finishStats = new Map();
    Array.from(finishes).forEach(finish => {
      const count = Array.from(combinations.keys()).filter(combo => combo.includes(`-${finish}-`)).length;
      finishStats.set(finish, count);
    });
    
    Array.from(finishStats.entries()).sort((a, b) => b[1] - a[1]).forEach(([finish, count]) => {
      console.log(`  ${finish}: ${count} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π`);
    });
    
    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ—à–µ–Ω–∏—è
    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    
    if (duplicateCombinations === 0) {
      console.log('1. ‚úÖ –§–æ—Ä–º–∞—Ç [–ú–æ–¥–µ–ª—å]-[–†–∞–∑–º–µ—Ä]-[–ü–æ–∫—Ä—ã—Ç–∏–µ]-[–¶–≤–µ—Ç] –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–¥–µ–∞–ª—å–Ω–æ!');
      console.log('2. –í—Å–µ SKU –±—É–¥—É—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏');
      console.log('3. –õ–µ–≥–∫–æ —á–∏—Ç–∞—é—Ç—Å—è –∏ –ø–æ–Ω–∏–º–∞—é—Ç—Å—è');
    } else if (uniquenessPercentage >= 90) {
      console.log('1. ‚úÖ –§–æ—Ä–º–∞—Ç [–ú–æ–¥–µ–ª—å]-[–†–∞–∑–º–µ—Ä]-[–ü–æ–∫—Ä—ã—Ç–∏–µ]-[–¶–≤–µ—Ç] –ø–æ–¥—Ö–æ–¥–∏—Ç!');
      console.log('2. –î–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —á–∏—Å–ª–æ–≤–æ–π —Å—É—Ñ—Ñ–∏–∫—Å');
      console.log('3. –ü—Ä–∏–º–µ—Ä: Model-Size-Finish-Color-001');
    } else {
      console.log('1. ‚ùå –§–æ—Ä–º–∞—Ç [–ú–æ–¥–µ–ª—å]-[–†–∞–∑–º–µ—Ä]-[–ü–æ–∫—Ä—ã—Ç–∏–µ]-[–¶–≤–µ—Ç] –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω');
      console.log('2. –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç:');
      console.log('   - [–ú–æ–¥–µ–ª—å]-[–†–∞–∑–º–µ—Ä]-[–ü–æ–∫—Ä—ã—Ç–∏–µ]-[–¶–≤–µ—Ç]-[–°—Ç–∏–ª—å]');
      console.log('   - [–ú–æ–¥–µ–ª—å]-[–†–∞–∑–º–µ—Ä]-[–ü–æ–∫—Ä—ã—Ç–∏–µ]-[–¶–≤–µ—Ç]-[–ê—Ä—Ç–∏–∫—É–ª]');
    }
    
    // –ü—Ä–∏–º–µ—Ä—ã SKU
    console.log('\nüìù –ü—Ä–∏–º–µ—Ä—ã SKU:');
    const exampleCombinations = Array.from(combinations.keys()).slice(0, 10);
    exampleCombinations.forEach(combo => {
      const sku = combo.replace(/[^a-zA-Z0-9-]/g, '_').toUpperCase();
      console.log(`  ${combo} ‚Üí ${sku}`);
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–∫—Ä—ã—Ç–∏—è–º
    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏–π:');
    const finishCounts = new Map();
    Array.from(finishes).forEach(finish => {
      const count = Array.from(combinations.keys()).filter(combo => combo.includes(`-${finish}-`)).length;
      finishCounts.set(finish, count);
    });
    
    const totalFinishCombinations = Array.from(finishCounts.values()).reduce((sum, count) => sum + count, 0);
    console.log(`üìä –í—Å–µ–≥–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å –ø–æ–∫—Ä—ã—Ç–∏—è–º–∏: ${totalFinishCombinations}`);
    
    Array.from(finishCounts.entries()).sort((a, b) => b[1] - a[1]).forEach(([finish, count]) => {
      const percentage = Math.round((count / totalFinishCombinations) * 100);
      console.log(`  ${finish}: ${count} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π (${percentage}%)`);
    });
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

analyzeSkuWithFinish();
