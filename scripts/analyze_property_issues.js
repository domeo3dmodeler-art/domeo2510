const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function analyzePropertyIssues() {
  try {
    console.log('üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú –í –°–í–û–ô–°–¢–í–ê–• –¢–û–í–ê–†–û–í\n');
    console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –î–∞–Ω–Ω—ã–µ –ù–ï –ë–£–î–£–¢ –∏–∑–º–µ–Ω–µ–Ω—ã, —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑!\n');

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
    const category = await prisma.catalogCategory.findFirst({
      where: { name: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏' }
    });

    if (!category) {
      console.log('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    const products = await prisma.product.findMany({
      where: { catalog_category_id: category.id },
      select: {
        id: true,
        sku: true,
        name: true,
        properties_data: true
      }
    });

    console.log(`üì¶ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –í–°–ï ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n`);

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞
    const propertyAnalysis = {};
    const allProperties = new Set();

    products.forEach((product, index) => {
      if (!product.properties_data) return;

      let properties;
      try {
        properties = typeof product.properties_data === 'string' 
          ? JSON.parse(product.properties_data) 
          : product.properties_data;
      } catch (e) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.id}`);
        return;
      }

      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞
      Object.keys(properties).forEach(propertyName => {
        allProperties.add(propertyName);
        
        if (!propertyAnalysis[propertyName]) {
          propertyAnalysis[propertyName] = {
            values: new Set(),
            valueCounts: {},
            totalProducts: 0,
            emptyCount: 0,
            issues: []
          };
        }

        const value = String(properties[propertyName]);
        propertyAnalysis[propertyName].values.add(value);
        propertyAnalysis[propertyName].valueCounts[value] = (propertyAnalysis[propertyName].valueCounts[value] || 0) + 1;
        propertyAnalysis[propertyName].totalProducts++;

        if (!value || value.trim() === '' || value === 'null' || value === 'undefined') {
          propertyAnalysis[propertyName].emptyCount++;
        }
      });
    });

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
    console.log('üìä –ê–ù–ê–õ–ò–ó –ö–ê–ñ–î–û–ì–û –°–í–û–ô–°–¢–í–ê:');
    console.log('='.repeat(100));

    Array.from(allProperties).sort().forEach((propertyName, index) => {
      const analysis = propertyAnalysis[propertyName];
      const values = Array.from(analysis.values);
      const fillRate = ((analysis.totalProducts - analysis.emptyCount) / analysis.totalProducts * 100).toFixed(1);

      console.log(`\n${index + 1}. –°–í–û–ô–°–¢–í–û: "${propertyName}"`);
      console.log(`   üìà –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å: ${analysis.totalProducts - analysis.emptyCount}/${analysis.totalProducts} (${fillRate}%)`);
      console.log(`   üî¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: ${values.length}`);

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
      const issues = [];

      // 1. –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å—é
      if (analysis.emptyCount > 0) {
        issues.push(`‚ùå –ü—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: ${analysis.emptyCount} —Ç–æ–≤–∞—Ä–æ–≤`);
      }

      // 2. –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
      const encodingIssues = values.filter(v => v.includes('?') || v.includes(''));
      if (encodingIssues.length > 0) {
        issues.push(`‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã –∫–æ–¥–∏—Ä–æ–≤–∫–∏: ${encodingIssues.length} –∑–Ω–∞—á–µ–Ω–∏–π`);
        encodingIssues.slice(0, 3).forEach(value => {
          console.log(`      –ü—Ä–∏–º–µ—Ä: "${value}"`);
        });
      }

      // 3. –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–ª–∏–Ω–æ–π –∑–Ω–∞—á–µ–Ω–∏–π
      const longValues = values.filter(v => v.length > 100);
      if (longValues.length > 0) {
        issues.push(`üìè –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: ${longValues.length} –∑–Ω–∞—á–µ–Ω–∏–π`);
        longValues.slice(0, 2).forEach(value => {
          console.log(`      –ü—Ä–∏–º–µ—Ä: "${value.substring(0, 50)}..."`);
        });
      }

      // 4. –ü—Ä–æ–±–ª–µ–º—ã —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
      const numericValues = values.filter(v => !isNaN(Number(v)) && v.trim() !== '');
      if (numericValues.length > 0) {
        const numbers = numericValues.map(v => Number(v));
        const min = Math.min(...numbers);
        const max = Math.max(...numbers);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞
        const negativeNumbers = numbers.filter(n => n < 0);
        const veryLargeNumbers = numbers.filter(n => n > 1000000);
        const decimalNumbers = numbers.filter(n => n % 1 !== 0);
        
        if (negativeNumbers.length > 0) {
          issues.push(`üî¢ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞: ${negativeNumbers.length} –∑–Ω–∞—á–µ–Ω–∏–π`);
        }
        if (veryLargeNumbers.length > 0) {
          issues.push(`üî¢ –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞: ${veryLargeNumbers.length} –∑–Ω–∞—á–µ–Ω–∏–π (max: ${max})`);
        }
        if (decimalNumbers.length > 0 && propertyName.includes('–º–º')) {
          issues.push(`üî¢ –î–µ—Å—è—Ç–∏—á–Ω—ã–µ —á–∏—Å–ª–∞ –≤ —Ä–∞–∑–º–µ—Ä–∞—Ö: ${decimalNumbers.length} –∑–Ω–∞—á–µ–Ω–∏–π`);
        }
      }

      // 5. –ü—Ä–æ–±–ª–µ–º—ã —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏
      const duplicateValues = Object.entries(analysis.valueCounts)
        .filter(([value, count]) => count > 1)
        .sort((a, b) => b[1] - a[1]);
      
      if (duplicateValues.length > 0) {
        const topDuplicates = duplicateValues.slice(0, 3);
        issues.push(`üîÑ –ú–Ω–æ–≥–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicateValues.length} –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è`);
        topDuplicates.forEach(([value, count]) => {
          console.log(`      "${value}": ${count} —Ä–∞–∑`);
        });
      }

      // 6. –ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ–º
      if (values.length === 1 && analysis.totalProducts > 10) {
        issues.push(`üéØ –°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è: —Ç–æ–ª—å–∫–æ 1 –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ${analysis.totalProducts} —Ç–æ–≤–∞—Ä–æ–≤`);
      }

      // 7. –ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–∞—Ç–æ–º
      if (propertyName.includes('–º–º') && numericValues.length < values.length * 0.8) {
        issues.push(`üìè –ù–µ—á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ä–∞–∑–º–µ—Ä–∞—Ö: ${values.length - numericValues.length} –∑–Ω–∞—á–µ–Ω–∏–π`);
      }

      // 8. –ü—Ä–æ–±–ª–µ–º—ã —Å —Ü–µ–Ω–∞–º–∏
      if (propertyName.toLowerCase().includes('—Ü–µ–Ω–∞')) {
        const priceValues = values.filter(v => !isNaN(Number(v)) && Number(v) > 0);
        if (priceValues.length < values.length * 0.9) {
          issues.push(`üí∞ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ü–µ–Ω—ã: ${values.length - priceValues.length} –∑–Ω–∞—á–µ–Ω–∏–π`);
        }
      }

      // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
      if (issues.length > 0) {
        console.log(`   üö® –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:`);
        issues.forEach(issue => {
          console.log(`      ${issue}`);
        });
      } else {
        console.log(`   ‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è (–µ—Å–ª–∏ –∏—Ö –Ω–µ–º–Ω–æ–≥–æ)
      if (values.length <= 20) {
        console.log(`   üìù –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è:`);
        values.sort().forEach(value => {
          const count = analysis.valueCounts[value];
          console.log(`      - "${value}" (${count} —Ä–∞–∑)`);
        });
      } else {
        console.log(`   üìù –ü–µ—Ä–≤—ã–µ 10 –∑–Ω–∞—á–µ–Ω–∏–π:`);
        values.sort().slice(0, 10).forEach(value => {
          const count = analysis.valueCounts[value];
          console.log(`      - "${value}" (${count} —Ä–∞–∑)`);
        });
        console.log(`      ... –∏ –µ—â–µ ${values.length - 10} –∑–Ω–∞—á–µ–Ω–∏–π`);
      }
    });

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º
    console.log('\n\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú:');
    console.log('='.repeat(100));

    let totalIssues = 0;
    let propertiesWithIssues = 0;

    Object.keys(propertyAnalysis).forEach(propertyName => {
      const analysis = propertyAnalysis[propertyName];
      const values = Array.from(analysis.values);
      
      let hasIssues = false;
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã
      if (analysis.emptyCount > 0) hasIssues = true;
      if (values.some(v => v.includes('?') || v.includes(''))) hasIssues = true;
      if (values.some(v => v.length > 100)) hasIssues = true;
      if (values.length === 1 && analysis.totalProducts > 10) hasIssues = true;
      
      if (hasIssues) {
        propertiesWithIssues++;
        totalIssues++;
      }
    });

    console.log(`üìä –í—Å–µ–≥–æ —Å–≤–æ–π—Å—Ç–≤: ${Object.keys(propertyAnalysis).length}`);
    console.log(`‚ö†Ô∏è  –°–≤–æ–π—Å—Ç–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏: ${propertiesWithIssues}`);
    console.log(`üö® –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: ${totalIssues}`);

    // –¢–æ–ø –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤
    console.log('\nüî• –¢–û–ü –ü–†–û–ë–õ–ï–ú–ù–´–• –°–í–û–ô–°–¢–í:');
    const problematicProperties = [];

    Object.keys(propertyAnalysis).forEach(propertyName => {
      const analysis = propertyAnalysis[propertyName];
      const values = Array.from(analysis.values);
      let problemScore = 0;

      // –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–±–ª–µ–º
      if (analysis.emptyCount > 0) problemScore += analysis.emptyCount;
      if (values.some(v => v.includes('?') || v.includes(''))) problemScore += 10;
      if (values.some(v => v.length > 100)) problemScore += 5;
      if (values.length === 1 && analysis.totalProducts > 10) problemScore += 3;

      if (problemScore > 0) {
        problematicProperties.push({ name: propertyName, score: problemScore });
      }
    });

    problematicProperties.sort((a, b) => b.score - a.score).slice(0, 5).forEach((prop, index) => {
      console.log(`${index + 1}. "${prop.name}" - –æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ–±–ª–µ–º: ${prop.score}`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error);
  } finally {
    await prisma.$disconnect();
  }
}

analyzePropertyIssues();
