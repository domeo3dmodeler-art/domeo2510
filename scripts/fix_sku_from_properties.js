const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function fixSkuFromProperties() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SKU –∏–∑ properties_data...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
    const products = await prisma.product.findMany({
      where: {
        catalog_category: {
          name: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏'
        }
      },
      select: {
        id: true,
        sku: true,
        name: true,
        properties_data: true
      }
    });
    
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);
    
    let fixedCount = 0;
    let skippedCount = 0;
    const errors = [];
    
    for (const product of products) {
      try {
        // –ü–∞—Ä—Å–∏–º properties_data
        let properties = {};
        if (product.properties_data) {
          try {
            properties = typeof product.properties_data === 'string' 
              ? JSON.parse(product.properties_data) 
              : product.properties_data;
          } catch (e) {
            console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ properties_data –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.id}`);
            continue;
          }
        }
        
        // –ò—â–µ–º –∞—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ properties
        const supplierSku = properties['–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'] || 
                           properties['–ê—Ä—Ç–∏–∫—É–ª'] || 
                           properties['SKU'] ||
                           properties['Supplier SKU'];
        
        if (!supplierSku) {
          console.log(`‚ö†Ô∏è –¢–æ–≤–∞—Ä ${product.id} –Ω–µ –∏–º–µ–µ—Ç –∞—Ä—Ç–∏–∫—É–ª–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ properties`);
          skippedCount++;
          continue;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å SKU
        if (product.sku === supplierSku) {
          console.log(`‚úÖ –¢–æ–≤–∞—Ä ${product.id} —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π SKU: ${supplierSku}`);
          skippedCount++;
          continue;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º SKU
        const existingProduct = await prisma.product.findUnique({
          where: { sku: supplierSku }
        });
        
        if (existingProduct && existingProduct.id !== product.id) {
          console.log(`‚ö†Ô∏è –¢–æ–≤–∞—Ä —Å SKU "${supplierSku}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: ${existingProduct.id})`);
          errors.push(`–ö–æ–Ω—Ñ–ª–∏–∫—Ç SKU: —Ç–æ–≤–∞—Ä ${product.id} –Ω–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SKU "${supplierSku}" - —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–≤–∞—Ä–æ–º ${existingProduct.id}`);
          continue;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º SKU
        await prisma.product.update({
          where: { id: product.id },
          data: { 
            sku: supplierSku,
            updated_at: new Date()
          }
        });
        
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω SKU –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.id}: "${product.sku}" ‚Üí "${supplierSku}"`);
        fixedCount++;
        
      } catch (error) {
        const errorMsg = `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ ${product.id}: ${error.message}`;
        console.error(`‚ùå ${errorMsg}`);
        errors.push(errorMsg);
      }
    }
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è SKU:');
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${fixedCount} —Ç–æ–≤–∞—Ä–æ–≤`);
    console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount} —Ç–æ–≤–∞—Ä–æ–≤`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errors.length}`);
    
    if (errors.length > 0) {
      console.log('\n‚ùå –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫:');
      errors.forEach((error, index) => {
        console.log(`${index + 1}. ${error}`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:');
    const sampleProducts = await prisma.product.findMany({
      where: {
        catalog_category: {
          name: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏'
        }
      },
      take: 5,
      select: {
        id: true,
        sku: true,
        name: true,
        properties_data: true
      }
    });
    
    sampleProducts.forEach(product => {
      const properties = product.properties_data ? 
        (typeof product.properties_data === 'string' ? JSON.parse(product.properties_data) : product.properties_data) : {};
      const supplierSku = properties['–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'];
      
      console.log(`  - –¢–æ–≤–∞—Ä ${product.id}:`);
      console.log(`    SKU –≤ –ë–î: "${product.sku}"`);
      console.log(`    –ê—Ä—Ç–∏–∫—É–ª –≤ properties: "${supplierSku}"`);
      console.log(`    –°–æ–≤–ø–∞–¥–∞—é—Ç: ${product.sku === supplierSku ? '‚úÖ' : '‚ùå'}`);
      console.log(`    ---`);
    });
    
    console.log('\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SKU –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixSkuFromProperties();
