#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –ó–∞–ø—É—Å–∫: node scripts/apply-database-optimizations.js
 */

const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

async function applyDatabaseOptimizations() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    // 1. –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SQLite
    console.log('\nüîß 1. –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SQLite...');
    await prisma.$queryRaw`PRAGMA journal_mode = WAL`;
    await prisma.$queryRaw`PRAGMA synchronous = NORMAL`;
    await prisma.$queryRaw`PRAGMA cache_size = 10000`;
    await prisma.$queryRaw`PRAGMA temp_store = MEMORY`;
    await prisma.$queryRaw`PRAGMA mmap_size = 268435456`;
    await prisma.$queryRaw`PRAGMA optimize`;
    console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SQLite –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');

    // 2. –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
    console.log('\nüîß 2. –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã...');
    const indexes = [
      'CREATE INDEX IF NOT EXISTS idx_products_sku_active ON products(sku, is_active)',
      'CREATE INDEX IF NOT EXISTS idx_products_category_active ON products(catalog_category_id, is_active)',
      'CREATE INDEX IF NOT EXISTS idx_products_price_range ON products(base_price) WHERE is_active = true',
      'CREATE INDEX IF NOT EXISTS idx_products_created_at ON products(created_at DESC)',
      'CREATE INDEX IF NOT EXISTS idx_products_featured ON products(is_featured, is_active) WHERE is_featured = true',
      'CREATE INDEX IF NOT EXISTS idx_product_images_product_id ON product_images(product_id)',
      'CREATE INDEX IF NOT EXISTS idx_product_images_primary ON product_images(product_id, is_primary) WHERE is_primary = true',
      'CREATE INDEX IF NOT EXISTS idx_product_images_sort ON product_images(product_id, sort_order)',
      'CREATE INDEX IF NOT EXISTS idx_catalog_categories_level ON catalog_categories(level)',
      'CREATE INDEX IF NOT EXISTS idx_catalog_categories_active ON catalog_categories(is_active, level)',
      'CREATE INDEX IF NOT EXISTS idx_catalog_categories_sort ON catalog_categories(parent_id, sort_order)',
      'CREATE INDEX IF NOT EXISTS idx_import_history_category_date ON import_history(catalog_category_id, created_at DESC)',
      'CREATE INDEX IF NOT EXISTS idx_import_history_status ON import_history(status, created_at DESC)'
    ];

    for (const indexQuery of indexes) {
      try {
        await prisma.$executeRawUnsafe(indexQuery);
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å: ${indexQuery.split(' ')[5]}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞: ${indexQuery.split(' ')[5]}`);
      }
    }

    // 3. –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è JSON –ø–æ–ª–µ–π
    console.log('\nüîß 3. –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏...');
    const virtualColumns = [
      {
        name: 'style_extracted',
        expression: "json_extract(properties_data, '$.Domeo_–°—Ç–∏–ª—å Web')"
      },
      {
        name: 'model_extracted',
        expression: "json_extract(properties_data, '$.Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web')"
      },
      {
        name: 'color_extracted',
        expression: "json_extract(properties_data, '$.Domeo_–¶–≤–µ—Ç')"
      },
      {
        name: 'finish_extracted',
        expression: "json_extract(properties_data, '$.–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è')"
      },
      {
        name: 'width_extracted',
        expression: "json_extract(properties_data, '$.–®–∏—Ä–∏–Ω–∞/–º–º')"
      },
      {
        name: 'height_extracted',
        expression: "json_extract(properties_data, '$.–í—ã—Å–æ—Ç–∞/–º–º')"
      }
    ];

    for (const column of virtualColumns) {
      try {
        await prisma.$executeRawUnsafe(
          `ALTER TABLE products ADD COLUMN ${column.name} TEXT GENERATED ALWAYS AS (${column.expression}) VIRTUAL`
        );
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞: ${column.name}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ ${column.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      }
    }

    // 4. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    console.log('\nüîß 4. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏...');
    const virtualIndexes = [
      'CREATE INDEX IF NOT EXISTS idx_products_style_virtual ON products(style_extracted)',
      'CREATE INDEX IF NOT EXISTS idx_products_model_virtual ON products(model_extracted)',
      'CREATE INDEX IF NOT EXISTS idx_products_color_virtual ON products(color_extracted)',
      'CREATE INDEX IF NOT EXISTS idx_products_finish_virtual ON products(finish_extracted)',
      'CREATE INDEX IF NOT EXISTS idx_products_width_virtual ON products(width_extracted)',
      'CREATE INDEX IF NOT EXISTS idx_products_height_virtual ON products(height_extracted)'
    ];

    for (const indexQuery of virtualIndexes) {
      try {
        await prisma.$executeRawUnsafe(indexQuery);
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∫–æ–ª–æ–Ω–∫—É: ${indexQuery.split(' ')[5]}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${indexQuery.split(' ')[5]}`);
      }
    }

    // 5. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    console.log('\nüîß 5. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
    
    // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    await prisma.$executeRawUnsafe(`
      CREATE TABLE IF NOT EXISTS query_cache (
        id TEXT PRIMARY KEY,
        cache_key TEXT UNIQUE NOT NULL,
        data TEXT NOT NULL,
        expires_at DATETIME NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        hit_count INTEGER DEFAULT 0
      )
    `);

    await prisma.$executeRawUnsafe(`
      CREATE INDEX IF NOT EXISTS idx_query_cache_expires ON query_cache(expires_at)
    `);

    await prisma.$executeRawUnsafe(`
      CREATE INDEX IF NOT EXISTS idx_query_cache_key ON query_cache(cache_key)
    `);

    // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
    await prisma.$executeRawUnsafe(`
      CREATE TABLE IF NOT EXISTS product_stats_cache (
        id TEXT PRIMARY KEY,
        catalog_category_id TEXT NOT NULL,
        total_products INTEGER DEFAULT 0,
        active_products INTEGER DEFAULT 0,
        featured_products INTEGER DEFAULT 0,
        price_min REAL DEFAULT 0,
        price_max REAL DEFAULT 0,
        avg_price REAL DEFAULT 0,
        last_updated DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (catalog_category_id) REFERENCES catalog_categories(id) ON DELETE CASCADE
      )
    `);

    await prisma.$executeRawUnsafe(`
      CREATE INDEX IF NOT EXISTS idx_product_stats_category ON product_stats_cache(catalog_category_id)
    `);

    // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–≤–æ–π—Å—Ç–≤ —Ç–æ–≤–∞—Ä–æ–≤
    await prisma.$executeRawUnsafe(`
      CREATE TABLE IF NOT EXISTS product_property_values (
        id TEXT PRIMARY KEY,
        product_id TEXT NOT NULL,
        property_name TEXT NOT NULL,
        property_value TEXT NOT NULL,
        property_type TEXT DEFAULT 'string',
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE CASCADE
      )
    `);

    await prisma.$executeRawUnsafe(`
      CREATE INDEX IF NOT EXISTS idx_product_property_values_product ON product_property_values(product_id)
    `);

    await prisma.$executeRawUnsafe(`
      CREATE INDEX IF NOT EXISTS idx_product_property_values_name ON product_property_values(property_name)
    `);

    await prisma.$executeRawUnsafe(`
      CREATE INDEX IF NOT EXISTS idx_product_property_values_lookup ON product_property_values(property_name, property_value)
    `);

    await prisma.$executeRawUnsafe(`
      CREATE UNIQUE INDEX IF NOT EXISTS idx_product_property_values_unique ON product_property_values(product_id, property_name)
    `);

    // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    await prisma.$executeRawUnsafe(`
      CREATE TABLE IF NOT EXISTS performance_stats (
        id TEXT PRIMARY KEY,
        table_name TEXT NOT NULL,
        operation_type TEXT NOT NULL,
        execution_time_ms INTEGER NOT NULL,
        rows_affected INTEGER DEFAULT 0,
        query_hash TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);

    await prisma.$executeRawUnsafe(`
      CREATE INDEX IF NOT EXISTS idx_performance_stats_table ON performance_stats(table_name, created_at DESC)
    `);

    await prisma.$executeRawUnsafe(`
      CREATE INDEX IF NOT EXISTS idx_performance_stats_slow ON performance_stats(execution_time_ms DESC) WHERE execution_time_ms > 1000
    `);

    // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    await prisma.$executeRawUnsafe(`
      CREATE TABLE IF NOT EXISTS slow_query_log (
        id TEXT PRIMARY KEY,
        query_text TEXT NOT NULL,
        execution_time_ms INTEGER NOT NULL,
        rows_affected INTEGER DEFAULT 0,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        user_id TEXT,
        ip_address TEXT
      )
    `);

    await prisma.$executeRawUnsafe(`
      CREATE INDEX IF NOT EXISTS idx_slow_query_log_time ON slow_query_log(execution_time_ms DESC)
    `);

    await prisma.$executeRawUnsafe(`
      CREATE INDEX IF NOT EXISTS idx_slow_query_log_date ON slow_query_log(created_at DESC)
    `);

    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–∑–¥–∞–Ω—ã');

    // 6. –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('\nüîß 6. –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã...');
    
    // –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
    await prisma.$executeRawUnsafe(`
      CREATE TRIGGER IF NOT EXISTS update_category_product_count_insert
        AFTER INSERT ON products
        BEGIN
          UPDATE catalog_categories 
          SET products_count = products_count + 1,
              updated_at = CURRENT_TIMESTAMP
          WHERE id = NEW.catalog_category_id;
          
          INSERT OR REPLACE INTO product_stats_cache (
            id, catalog_category_id, last_updated
          ) VALUES (
            NEW.catalog_category_id, NEW.catalog_category_id, CURRENT_TIMESTAMP
          );
        END
    `);

    // –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
    await prisma.$executeRawUnsafe(`
      CREATE TRIGGER IF NOT EXISTS update_category_product_count_delete
        AFTER DELETE ON products
        BEGIN
          UPDATE catalog_categories 
          SET products_count = products_count - 1,
              updated_at = CURRENT_TIMESTAMP
          WHERE id = OLD.catalog_category_id;
          
          INSERT OR REPLACE INTO product_stats_cache (
            id, catalog_category_id, last_updated
          ) VALUES (
            OLD.catalog_category_id, OLD.catalog_category_id, CURRENT_TIMESTAMP
          );
        END
    `);

    // –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–≤–∞—Ä–∞
    await prisma.$executeRawUnsafe(`
      CREATE TRIGGER IF NOT EXISTS update_category_product_count_status
        AFTER UPDATE OF is_active ON products
        BEGIN
          INSERT OR REPLACE INTO product_stats_cache (
            id, catalog_category_id, last_updated
          ) VALUES (
            NEW.catalog_category_id, NEW.catalog_category_id, CURRENT_TIMESTAMP
          );
        END
    `);

    // –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞
    await prisma.$executeRawUnsafe(`
      CREATE TRIGGER IF NOT EXISTS cleanup_expired_cache
        AFTER INSERT ON query_cache
        BEGIN
          DELETE FROM query_cache WHERE expires_at < CURRENT_TIMESTAMP;
        END
    `);

    console.log('‚úÖ –¢—Ä–∏–≥–≥–µ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã');

    // 7. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    console.log('\nüîß 7. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ...');
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    await prisma.$executeRawUnsafe(`
      INSERT OR IGNORE INTO product_stats_cache (id, catalog_category_id, last_updated)
      SELECT id, id, CURRENT_TIMESTAMP 
      FROM catalog_categories 
      WHERE id NOT IN (SELECT catalog_category_id FROM product_stats_cache)
    `);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
    await prisma.$executeRawUnsafe(`
      UPDATE catalog_categories 
      SET products_count = (
        SELECT COUNT(*) 
        FROM products 
        WHERE products.catalog_category_id = catalog_categories.id
      )
    `);

    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');

    // 8. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüîß 8. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    await prisma.$queryRaw`ANALYZE`;
    console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω');

    console.log('\nüéâ –í—Å–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!');
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
    const productCount = await prisma.product.count();
    const categoryCount = await prisma.catalogCategory.count();
    const imageCount = await prisma.productImage.count();
    
    console.log(`- –¢–æ–≤–∞—Ä–æ–≤: ${productCount}`);
    console.log(`- –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoryCount}`);
    console.log(`- –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${imageCount}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  applyDatabaseOptimizations()
    .then(() => {
      console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = { applyDatabaseOptimizations };
