const { PrismaClient } = require('@prisma/client');
const fs = require('fs');

const prisma = new PrismaClient();

async function analyzeDatabasePerformance() {
  try {
    console.log('üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•\n');

    // –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü
    console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ê–ë–õ–ò–¶:');
    
    const tables = [
      'products',
      'catalog_categories', 
      'product_images',
      'product_properties',
      'import_templates',
      'users'
    ];

    for (const table of tables) {
      try {
        const count = await prisma.$queryRaw`SELECT COUNT(*) as count FROM ${table}`;
        console.log(`   - ${table}: ${count[0].count} –∑–∞–ø–∏—Å–µ–π`);
      } catch (error) {
        console.log(`   - ${table}: –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞`);
      }
    }

    console.log('\nüîç –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ó–ê–ü–†–û–°–û–í:');

    // –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    console.log('\n1. –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
    const start1 = Date.now();
    const products = await prisma.product.findMany({
      where: { catalog_category_id: 'cmg50xcgs001cv7mn0tdyk1wo' },
      select: { id: true, sku: true, name: true },
      take: 100
    });
    const time1 = Date.now() - start1;
    console.log(`   - –í—Ä–µ–º—è: ${time1}ms`);
    console.log(`   - –ù–∞–π–¥–µ–Ω–æ: ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);

    // –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Å–≤–æ–π—Å—Ç–≤–∞–º
    console.log('\n2. –ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Å–≤–æ–π—Å—Ç–≤–∞–º:');
    const start2 = Date.now();
    const filteredProducts = await prisma.product.findMany({
      where: { 
        catalog_category_id: 'cmg50xcgs001cv7mn0tdyk1wo',
        properties_data: { contains: '–ë–µ–ª—ã–π' }
      },
      select: { id: true, sku: true, name: true },
      take: 50
    });
    const time2 = Date.now() - start2;
    console.log(`   - –í—Ä–µ–º—è: ${time2}ms`);
    console.log(`   - –ù–∞–π–¥–µ–Ω–æ: ${filteredProducts.length} —Ç–æ–≤–∞—Ä–æ–≤`);

    // –¢–µ—Å—Ç 3: –ü–æ–¥—Å—á–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    console.log('\n3. –ü–æ–¥—Å—á–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
    const start3 = Date.now();
    const count = await prisma.product.count({
      where: { catalog_category_id: 'cmg50xcgs001cv7mn0tdyk1wo' }
    });
    const time3 = Date.now() - start3;
    console.log(`   - –í—Ä–µ–º—è: ${time3}ms`);
    console.log(`   - –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${count}`);

    // –ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–µ–∫—Å–æ–≤
    console.log('\nüìà –ê–ù–ê–õ–ò–ó –ò–ù–î–ï–ö–°–û–í:');
    try {
      const indexes = await prisma.$queryRaw`
        SELECT name, sql FROM sqlite_master 
        WHERE type='index' AND sql IS NOT NULL
      `;
      console.log(`   - –ù–∞–π–¥–µ–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: ${indexes.length}`);
      indexes.forEach(index => {
        console.log(`     * ${index.name}`);
      });
    } catch (error) {
      console.log('   - –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤');
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:');
    
    if (time1 > 100) {
      console.log('   ‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –Ω—É–∂–µ–Ω –∏–Ω–¥–µ–∫—Å –Ω–∞ catalog_category_id');
    }
    
    if (time2 > 200) {
      console.log('   ‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Å–≤–æ–π—Å—Ç–≤–∞–º - –Ω—É–∂–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è JSON –ø–æ–ª–µ–π');
    }
    
    if (time3 > 50) {
      console.log('   ‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç - –Ω—É–∂–µ–Ω –∏–Ω–¥–µ–∫—Å –Ω–∞ catalog_category_id');
    }

    console.log('\nüîß –ü–õ–ê–ù –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:');
    console.log('   1. –°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã –Ω–∞ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–æ–ª—è');
    console.log('   2. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å JSON –ø–æ–ª—è properties_data');
    console.log('   3. –î–æ–±–∞–≤–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–≤–æ–π—Å—Ç–≤');
    console.log('   4. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å PRAGMA –ø–∞—Ä–∞–º–µ—Ç—Ä—ã SQLite');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

analyzeDatabasePerformance();
