# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–µ–ø–ª–æ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¢–û–õ–¨–ö–û –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é –í–ú (staging)
# Production –ù–ï –¢–†–û–ì–ê–ï–¢!
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .\scripts\deploy-fixes-to-staging.ps1

param(
    [switch]$SkipBackup = $false,
    [string]$CommitMessage = ""
)

$ErrorActionPreference = "Stop"

$STAGING_HOST = "130.193.40.35"
$STAGING_USER = "ubuntu"
$STAGING_PATH = "/opt/domeo"
$SSH_KEY = "C:\Users\petr2\.ssh\ssh-key-1757583003347\ssh-key-1757583003347"

$TIMESTAMP = Get-Date -Format "yyyyMMdd_HHmmss"
$BACKUP_DIR = "/tmp/domeo-backup-$TIMESTAMP"

Write-Host "üöÄ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–µ–ø–ª–æ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é –í–ú" -ForegroundColor Cyan
Write-Host "==================================================" -ForegroundColor Cyan
Write-Host ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH –∫–ª—é—á–∞
if (-not (Test-Path $SSH_KEY)) {
    Write-Host "‚ùå ERROR: SSH –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: $SSH_KEY" -ForegroundColor Red
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
Write-Host "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –í–ú..." -ForegroundColor Yellow
try {
    $test = ssh -i $SSH_KEY -o ConnectTimeout=10 -o StrictHostKeyChecking=no "$STAGING_USER@$STAGING_HOST" "echo 'Connection OK'" 2>&1
    if ($LASTEXITCODE -ne 0) {
        throw "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"
    }
    Write-Host "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" -ForegroundColor Green
} catch {
    Write-Host "‚ùå ERROR: –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –í–ú" -ForegroundColor Red
    exit 1
}
Write-Host ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
Write-Host "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è..." -ForegroundColor Yellow
$healthCheck = ssh -i $SSH_KEY "$STAGING_USER@$STAGING_HOST" "curl -s http://localhost:3001/api/health 2>&1 | head -1"
if ($healthCheck -match "200|204|healthy") {
    Write-Host "‚úÖ Health check: OK" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è  Health check: $healthCheck" -ForegroundColor Yellow
}
Write-Host ""

# –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ (–µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—â–µ–Ω)
if (-not $SkipBackup) {
    Write-Host "üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞..." -ForegroundColor Yellow
    ssh -i $SSH_KEY "$STAGING_USER@$STAGING_HOST" @"
        cd $STAGING_PATH
        mkdir -p $BACKUP_DIR
        
        # –ë—ç–∫–∞–ø –ë–î
        echo '–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ë–î...'
        docker exec -e PGPASSWORD=staging_password domeo-staging-postgres pg_dump -U staging_user -d domeo_staging > $BACKUP_DIR/database_backup.sql 2>&1
        
        # –ë—ç–∫–∞–ø –∫–æ–¥–∞ (git)
        echo '–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –∫–æ–¥–∞...'
        git archive --format=tar.gz HEAD > $BACKUP_DIR/code_backup.tar.gz 2>&1 || true
        
        echo '–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –≤: $BACKUP_DIR'
    "@
    Write-Host "‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –≤ $BACKUP_DIR" -ForegroundColor Green
    Write-Host ""
}

# –ö–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
Write-Host "üìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π..." -ForegroundColor Yellow
$gitStatus = git status --short
$modifiedFiles = ($gitStatus | Measure-Object -Line).Lines

if ($modifiedFiles -gt 0) {
    Write-Host "   –ù–∞–π–¥–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: $modifiedFiles" -ForegroundColor Gray
    
    if ([string]::IsNullOrWhiteSpace($CommitMessage)) {
        $CommitMessage = "fix: apply ESLint fixes and improvements"
    }
    
    Write-Host "   –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è: $CommitMessage" -ForegroundColor Gray
    git add .
    git commit -m $CommitMessage
    
    Write-Host "   –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π..." -ForegroundColor Gray
    $currentBranch = git branch --show-current
    git push origin $currentBranch
    
    Write-Host "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã" -ForegroundColor Green
} else {
    Write-Host "   –ù–µ—Ç –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π" -ForegroundColor Gray
}
Write-Host ""

# –î–µ–ø–ª–æ–π –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é –í–ú
Write-Host "üöÄ –î–µ–ø–ª–æ–π –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é –í–ú..." -ForegroundColor Yellow
$currentBranch = git branch --show-current

ssh -i $SSH_KEY "$STAGING_USER@$STAGING_HOST" @"
    set -e
    cd $STAGING_PATH
    
    echo 'üì• –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ git...'
    git fetch origin
    git pull origin $currentBranch || git pull origin develop || git pull origin main
    
    echo 'üî® –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...'
    docker compose build --no-cache app 2>&1 | tail -10
    
    echo 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã...'
    docker compose up -d
    
    echo '‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...'
    sleep 10
    
    echo 'üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:'
    docker compose ps
    
    echo 'üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ health check...'
    sleep 5
    curl -f http://localhost:3001/api/health || echo '‚ö†Ô∏è  Health check –Ω–µ –ø—Ä–æ—à–µ–ª'
"@

if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è  WARNING: –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –¥–µ–ø–ª–æ–µ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üéâ –ì–æ—Ç–æ–≤–æ!" -ForegroundColor Green
Write-Host "   –¢–µ—Å—Ç–æ–≤–∞—è –í–ú: http://$STAGING_HOST`:3001" -ForegroundColor Cyan
if (-not $SkipBackup) {
    Write-Host "   –ë—ç–∫–∞–ø: $BACKUP_DIR (–Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –í–ú)" -ForegroundColor Gray
}

