# üìä PowerShell —Å–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±–µ–∏—Ö —Å—Ä–µ–¥
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .\monitor-environments.ps1

param(
    [switch]$Detailed
)

Write-Host "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ä–µ–¥ Domeo" -ForegroundColor Cyan
Write-Host "=========================" -ForegroundColor Cyan

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
$PRODUCTION_HOST = "130.193.40.35"
$PRODUCTION_PORT = "3000"
$STAGING_HOST = "130.193.40.35"
$STAGING_PORT = "3001"

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ health check
function Test-Health {
    param($Host, $Port, $EnvName)
    
    Write-Host "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º $EnvName ($Host`:$Port)..." -ForegroundColor Yellow
    
    try {
        $response = Invoke-WebRequest -Uri "http://$Host`:$Port/api/health" -UseBasicParsing -TimeoutSec 10
        if ($response.StatusCode -eq 204) {
            Write-Host "‚úÖ $EnvName`: OK" -ForegroundColor Green
            return $true
        } else {
            Write-Host "‚ùå $EnvName`: FAILED (Status: $($response.StatusCode))" -ForegroundColor Red
            return $false
        }
    } catch {
        Write-Host "‚ùå $EnvName`: FAILED ($($_.Exception.Message))" -ForegroundColor Red
        return $false
    }
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function Test-MainPage {
    param($Host, $Port, $EnvName)
    
    Write-Host "üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É $EnvName..." -ForegroundColor Yellow
    
    try {
        $response = Invoke-WebRequest -Uri "http://$Host`:$Port" -UseBasicParsing -TimeoutSec 10
        if ($response.StatusCode -eq 200) {
            Write-Host "‚úÖ $EnvName –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: OK ($($response.StatusCode))" -ForegroundColor Green
            return $true
        } else {
            Write-Host "‚ùå $EnvName –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: FAILED ($($response.StatusCode))" -ForegroundColor Red
            return $false
        }
    } catch {
        Write-Host "‚ùå $EnvName –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: FAILED ($($_.Exception.Message))" -ForegroundColor Red
        return $false
    }
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
function Test-ResponseTime {
    param($Host, $Port, $EnvName)
    
    Write-Host "‚è±Ô∏è  –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ $EnvName..." -ForegroundColor Yellow
    
    try {
        $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()
        $response = Invoke-WebRequest -Uri "http://$Host`:$Port/api/health" -UseBasicParsing -TimeoutSec 10
        $stopwatch.Stop()
        
        $responseTimeMs = [math]::Round($stopwatch.ElapsedMilliseconds, 2)
        Write-Host "üìà $EnvName –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${responseTimeMs}ms" -ForegroundColor Cyan
        
        if ($responseTimeMs -lt 2000) {
            Write-Host "‚úÖ $EnvName –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: OK" -ForegroundColor Green
            return $true
        } else {
            Write-Host "‚ö†Ô∏è  $EnvName –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –ú–ï–î–õ–ï–ù–ù–û" -ForegroundColor Yellow
            return $false
        }
    } catch {
        Write-Host "‚ùå $EnvName –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: FAILED ($($_.Exception.Message))" -ForegroundColor Red
        return $false
    }
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
Write-Host ""
Write-Host "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥..." -ForegroundColor Cyan
Write-Host ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Production
Write-Host "=== PRODUCTION ===" -ForegroundColor Magenta
$prodHealth = Test-Health $PRODUCTION_HOST $PRODUCTION_PORT "Production"
$prodPage = Test-MainPage $PRODUCTION_HOST $PRODUCTION_PORT "Production"
$prodTime = Test-ResponseTime $PRODUCTION_HOST $PRODUCTION_PORT "Production"

Write-Host ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Staging
Write-Host "=== STAGING ===" -ForegroundColor Magenta
$stagingHealth = Test-Health $STAGING_HOST $STAGING_PORT "Staging"
$stagingPage = Test-MainPage $STAGING_HOST $STAGING_PORT "Staging"
$stagingTime = Test-ResponseTime $STAGING_HOST $STAGING_PORT "Staging"

Write-Host ""

# –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
Write-Host "üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢" -ForegroundColor Cyan
Write-Host "==================" -ForegroundColor Cyan

# Production —Å—Ç–∞—Ç—É—Å
if ($prodHealth -and $prodPage -and $prodTime) {
    Write-Host "‚úÖ Production: –í–°–ï –û–ö" -ForegroundColor Green
} else {
    Write-Host "‚ùå Production: –ü–†–û–ë–õ–ï–ú–´" -ForegroundColor Red
    if (-not $prodHealth) { Write-Host "   - Health check –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç" -ForegroundColor Red }
    if (-not $prodPage) { Write-Host "   - –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞" -ForegroundColor Red }
    if (-not $prodTime) { Write-Host "   - –ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç" -ForegroundColor Red }
}

# Staging —Å—Ç–∞—Ç—É—Å
if ($stagingHealth -and $stagingPage -and $stagingTime) {
    Write-Host "‚úÖ Staging: –í–°–ï –û–ö" -ForegroundColor Green
} else {
    Write-Host "‚ùå Staging: –ü–†–û–ë–õ–ï–ú–´" -ForegroundColor Red
    if (-not $stagingHealth) { Write-Host "   - Health check –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç" -ForegroundColor Red }
    if (-not $stagingPage) { Write-Host "   - –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞" -ForegroundColor Red }
    if (-not $stagingTime) { Write-Host "   - –ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç" -ForegroundColor Red }
}

Write-Host ""

# –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
$totalErrors = 0
if (-not $prodHealth) { $totalErrors++ }
if (-not $prodPage) { $totalErrors++ }
if (-not $prodTime) { $totalErrors++ }
if (-not $stagingHealth) { $totalErrors++ }
if (-not $stagingPage) { $totalErrors++ }
if (-not $stagingTime) { $totalErrors++ }

if ($totalErrors -eq 0) {
    Write-Host "üéâ –í–°–ï –°–ò–°–¢–ï–ú–´ –†–ê–ë–û–¢–ê–Æ–¢ –ù–û–†–ú–ê–õ–¨–ù–û!" -ForegroundColor Green
    exit 0
} else {
    Write-Host "‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ ($totalErrors –æ—à–∏–±–æ–∫)" -ForegroundColor Yellow
    exit 1
}