# üîç PowerShell —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .\scripts\health-check.ps1

param(
    [switch]$GenerateReport,
    [string]$ReportPath = "health-report-$(Get-Date -Format 'yyyyMMdd_HHmmss').txt"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞
$ErrorActionPreference = "Continue"

function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host "[$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')] $Message" -ForegroundColor $Color
}

function Write-Success {
    param([string]$Message)
    Write-ColorOutput "‚úÖ $Message" "Green"
}

function Write-Error {
    param([string]$Message)
    Write-ColorOutput "‚ùå $Message" "Red"
}

function Write-Warning {
    param([string]$Message)
    Write-ColorOutput "‚ö†Ô∏è $Message" "Yellow"
}

function Write-Info {
    param([string]$Message)
    Write-ColorOutput "‚ÑπÔ∏è $Message" "Cyan"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
function Test-Service {
    param(
        [string]$Url,
        [string]$Name,
        [int]$TimeoutSeconds = 10
    )
    
    Write-Info "–ü—Ä–æ–≤–µ—Ä—è–µ–º $Name : $Url"
    
    try {
        $response = Invoke-WebRequest -Uri $Url -Method GET -TimeoutSec $TimeoutSeconds
        Write-Success "$Name - OK (Status: $($response.StatusCode))"
        return $true
    } catch {
        Write-Error "$Name - FAILED: $($_.Exception.Message)"
        return $false
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
function Test-Containers {
    Write-Info "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    
    try {
        if (Test-Path "docker-compose.production.yml") {
            $containers = docker-compose -f docker-compose.production.yml ps
            if ($containers) {
                $running = ($containers | Select-String "Up").Count
                $total = ($containers | Select-String "domeo").Count
                
                if ($running -eq $total -and $total -gt 0) {
                    Write-Success "–í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã ($running/$total)"
                } else {
                    Write-Error "–ù–µ –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã ($running/$total)"
                }
            } else {
                Write-Warning "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            }
        } else {
            Write-Warning "docker-compose.production.yml –Ω–µ –Ω–∞–π–¥–µ–Ω"
        }
    } catch {
        Write-Warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: $($_.Exception.Message)"
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
function Test-Resources {
    Write-Info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤..."
    
    try {
        $stats = docker stats --no-stream --format "{{.Container}},{{.CPUPerc}},{{.MemUsage}}" 2>$null
        if ($stats) {
            $stats | ForEach-Object {
                $parts = $_ -split ","
                if ($parts.Count -ge 3) {
                    $container = $parts[0]
                    $cpu = $parts[1] -replace "%", ""
                    $memory = $parts[2] -split "/" | Select-Object -First 1
                    
                    Write-Info "üìä $container - CPU: ${cpu}%, Memory: $memory"
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                    if ([double]$cpu -gt 90) {
                        Write-Warning "‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU —É $container : ${cpu}%"
                    }
                    
                    if ($memory -match "MiB" -and [double]($memory -replace "MiB", "") -gt 1000) {
                        Write-Warning "‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ —É $container : $memory"
                    }
                }
            }
        } else {
            Write-Warning "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Docker –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        }
    } catch {
        Write-Warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: $($_.Exception.Message)"
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function Test-Database {
    Write-Info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."
    
    try {
        if (Test-Path "package.json") {
            $packageContent = Get-Content "package.json" -Raw
            if ($packageContent -match "prisma") {
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ API
                $response = Invoke-WebRequest -Uri "http://localhost:3000/api/health" -Method GET -TimeoutSec 5
                if ($response.StatusCode -eq 204) {
                    Write-Success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞"
                } else {
                    Write-Error "–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
                }
            } else {
                Write-Warning "Prisma –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            }
        } else {
            Write-Warning "package.json –Ω–µ –Ω–∞–π–¥–µ–Ω"
        }
    } catch {
        Write-Warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: $($_.Exception.Message)"
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö API endpoints
function Test-ApiEndpoints {
    Write-Info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ API endpoints..."
    
    $baseUrl = "http://localhost:3000"
    $endpoints = @(
        @{Url="/api/health"; Name="Health API"},
        @{Url="/api/catalog/categories"; Name="Catalog API"},
        @{Url="/api/catalog/products"; Name="Products API"},
        @{Url="/api/users"; Name="Users API"}
    )
    
    $allPassed = $true
    foreach ($endpoint in $endpoints) {
        if (-not (Test-Service "$baseUrl$($endpoint.Url)" $endpoint.Name 5)) {
            $allPassed = $false
        }
    }
    
    if ($allPassed) {
        Write-Success "–í—Å–µ API endpoints —Ä–∞–±–æ—Ç–∞—é—Ç"
    } else {
        Write-Error "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ API endpoints –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç"
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function Test-WebInterface {
    Write-Info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å..."
    
    $pages = @(
        @{Url="/"; Name="–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"},
        @{Url="/dashboard"; Name="Dashboard"},
        @{Url="/catalog"; Name="–ö–∞—Ç–∞–ª–æ–≥"}
    )
    
    $allPassed = $true
    foreach ($page in $pages) {
        if (-not (Test-Service "http://localhost:3000$($page.Url)" $page.Name 10)) {
            $allPassed = $false
        }
    }
    
    if ($allPassed) {
        Write-Success "–í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–æ—Å—Ç—É–ø–Ω—ã"
    } else {
        Write-Warning "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏
function Test-Logs {
    Write-Info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏..."
    
    try {
        if (Test-Path "docker-compose.production.yml") {
            $logs = docker-compose -f docker-compose.production.yml logs --tail=100 2>$null
            if ($logs) {
                $errorCount = ($logs | Select-String -Pattern "error|exception|fatal" -CaseSensitive:$false).Count
                
                if ($errorCount -gt 0) {
                    Write-Warning "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ $errorCount –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö"
                    $logs | Select-String -Pattern "error|exception|fatal" -CaseSensitive:$false | Select-Object -First 5
                } else {
                    Write-Success "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                }
            } else {
                Write-Warning "–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            }
        } else {
            Write-Warning "docker-compose.production.yml –Ω–µ –Ω–∞–π–¥–µ–Ω"
        }
    } catch {
        Write-Warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏: $($_.Exception.Message)"
    }
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
function New-HealthReport {
    param([string]$ReportPath)
    
    Write-Info "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç: $ReportPath"
    
    $timestamp = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'
    $report = @"
=== –û–¢–ß–ï–¢ –û –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´ ===
–î–∞—Ç–∞: $timestamp
==========================================

=== –°–¢–ê–¢–£–° –ö–û–ù–¢–ï–ô–ù–ï–†–û–í ===
$(docker-compose -f docker-compose.production.yml ps 2>$null)

=== –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –†–ï–°–£–†–°–û–í ===
$(docker stats --no-stream 2>$null)

=== –ü–û–°–õ–ï–î–ù–ò–ï –õ–û–ì–ò ===
$(docker-compose -f docker-compose.production.yml logs --tail=50 2>$null)

"@
    
    $report | Out-File -FilePath $ReportPath -Encoding UTF8
    Write-Success "üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $ReportPath"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function Main {
    Write-ColorOutput "üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã" "Magenta"
    Write-Host ""
    
    Test-Containers
    Write-Host ""
    
    Test-Resources
    Write-Host ""
    
    Test-Database
    Write-Host ""
    
    Test-ApiEndpoints
    Write-Host ""
    
    Test-WebInterface
    Write-Host ""
    
    Test-Logs
    Write-Host ""
    
    if ($GenerateReport) {
        New-HealthReport $ReportPath
        Write-Host ""
    }
    
    Write-Success "üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!"
    Write-Success "üåê –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
Main
