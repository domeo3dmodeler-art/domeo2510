# üöÄ PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ Yandex Cloud VM
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .\scripts\deploy-to-yandex.ps1 -VMIP "your-vm-ip"

param(
    [Parameter(Mandatory=$true)]
    [string]$VMIP,
    
    [string]$SSHKey = "C:\Users\petr2\.ssh\ssh-key-1757583003347\ssh-key-1757583003347",
    [string]$Username = "ubuntu",
    [switch]$SkipCleanup,
    [switch]$SkipUpload
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤
$ErrorActionPreference = "Stop"

function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host "[$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')] $Message" -ForegroundColor $Color
}

function Write-Success {
    param([string]$Message)
    Write-ColorOutput "‚úÖ $Message" "Green"
}

function Write-Error {
    param([string]$Message)
    Write-ColorOutput "‚ùå $Message" "Red"
    throw $Message
}

function Write-Warning {
    param([string]$Message)
    Write-ColorOutput "‚ö†Ô∏è $Message" "Yellow"
}

function Write-Info {
    param([string]$Message)
    Write-ColorOutput "‚ÑπÔ∏è $Message" "Cyan"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VM
function Test-VMConnection {
    param([string]$IP, [string]$Key, [string]$User)
    
    Write-Info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VM: $IP"
    
    try {
        $result = ssh -i $Key -o ConnectTimeout=10 -o StrictHostKeyChecking=no $User@$IP "echo 'Connection successful'" 2>$null
        if ($LASTEXITCODE -eq 0) {
            Write-Success "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VM —É—Å–ø–µ—à–Ω–æ"
            return $true
        } else {
            Write-Error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VM"
            return $false
        }
    } catch {
        Write-Error "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $($_.Exception.Message)"
        return $false
    }
}

# –û—á–∏—Å—Ç–∫–∞ VM
function Clear-VM {
    param([string]$IP, [string]$Key, [string]$User)
    
    if ($SkipCleanup) {
        Write-Warning "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É VM"
        return
    }
    
    Write-Info "–í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É VM..."
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏
    $cleanupScript = Get-Content "scripts/setup-yandex-vm.sh" -Raw
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –Ω–∞ VM
    $cleanupScript | ssh -i $Key -o StrictHostKeyChecking=no $User@$IP "bash"
    
    if ($LASTEXITCODE -eq 0) {
        Write-Success "VM –æ—á–∏—â–µ–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
    } else {
        Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ VM"
    }
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –ø—Ä–æ–µ–∫—Ç–∞
function New-ProjectArchive {
    Write-Info "–°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ –ø—Ä–æ–µ–∫—Ç–∞..."
    
    $excludeItems = @(
        "node_modules",
        ".next",
        ".git",
        "backups",
        "logs",
        "tmp",
        "*.log",
        "*.tmp"
    )
    
    $archiveName = "domeo-project-$(Get-Date -Format 'yyyyMMdd_HHmmss').tar.gz"
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
    $tempFile = "temp-files.txt"
    Get-ChildItem -Recurse | Where-Object {
        $item = $_
        $shouldExclude = $false
        foreach ($exclude in $excludeItems) {
            if ($item.FullName -like "*$exclude*") {
                $shouldExclude = $true
                break
            }
        }
        return -not $shouldExclude
    } | ForEach-Object { $_.FullName } | Out-File $tempFile -Encoding UTF8
    
    # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º tar –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ PowerShell)
    if (Get-Command tar -ErrorAction SilentlyContinue) {
        tar -czf $archiveName -T $tempFile
    } else {
        Write-Warning "tar –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º PowerShell –∞—Ä—Ö–∏–≤–∞—Ü–∏—é"
        Compress-Archive -Path @(Get-Content $tempFile) -DestinationPath "$archiveName.zip" -Force
        $archiveName = "$archiveName.zip"
    }
    
    Remove-Item $tempFile -ErrorAction SilentlyContinue
    
    Write-Success "–ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: $archiveName"
    return $archiveName
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ö–∏–≤–∞ –Ω–∞ VM
function Send-ProjectToVM {
    param([string]$ArchivePath, [string]$IP, [string]$Key, [string]$User)
    
    if ($SkipUpload) {
        Write-Warning "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤"
        return
    }
    
    Write-Info "–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç –Ω–∞ VM..."
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—Ä—Ö–∏–≤
    scp -i $Key -o StrictHostKeyChecking=no $ArchivePath $User@$IP:/tmp/
    
    if ($LASTEXITCODE -eq 0) {
        Write-Success "–ê—Ä—Ö–∏–≤ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ VM"
    } else {
        Write-Error "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ö–∏–≤–∞"
    }
}

# –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ VM
function Setup-ProjectOnVM {
    param([string]$ArchiveName, [string]$IP, [string]$Key, [string]$User)
    
    Write-Info "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç –Ω–∞ VM..."
    
    $setupCommands = @"
# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
cd /opt/domeo

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
rm -rf *

# –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
tar -xzf /tmp/$ArchiveName --strip-components=1

# –£–¥–∞–ª—è–µ–º –∞—Ä—Ö–∏–≤
rm /tmp/$ArchiveName

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞
chown -R ubuntu:ubuntu /opt/domeo
chmod +x scripts/*.sh

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
mkdir -p uploads
mkdir -p logs
mkdir -p backups

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
chown -R ubuntu:ubuntu uploads logs backups

echo "Project setup completed"
"@
    
    $setupCommands | ssh -i $Key -o StrictHostKeyChecking=no $User@$IP "bash"
    
    if ($LASTEXITCODE -eq 0) {
        Write-Success "–ü—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ VM"
    } else {
        Write-Error "–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"
    }
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ VM
function Set-EnvironmentOnVM {
    param([string]$IP, [string]$Key, [string]$User)
    
    Write-Info "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ VM..."
    
    $envCommands = @"
# –°–æ–∑–¥–∞–µ–º production .env —Ñ–∞–π–ª
cd /opt/domeo

# –ö–æ–ø–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä
cp env.example .env.production

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
sed -i 's/NODE_ENV=development/NODE_ENV=production/' .env.production
sed -i 's/DATABASE_URL=.*/DATABASE_URL=postgresql:\/\/domeo:your_password@db:5432\/domeo/' .env.production
sed -i 's/NEXTAUTH_URL=.*/NEXTAUTH_URL=http:\/\/$VMIP/' .env.production

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–µ–∫—Ä–µ—Ç
SECRET=\$(openssl rand -base64 32)
sed -i "s/NEXTAUTH_SECRET=.*/NEXTAUTH_SECRET=\$SECRET/" .env.production

echo "Environment configured"
"@
    
    $envCommands | ssh -i $Key -o StrictHostKeyChecking=no $User@$IP "bash"
    
    if ($LASTEXITCODE -eq 0) {
        Write-Success "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    } else {
        Write-Warning "–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"
    }
}

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ VM
function Start-ApplicationOnVM {
    param([string]$IP, [string]$Key, [string]$User)
    
    Write-Info "–ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ VM..."
    
    $startCommands = @"
cd /opt/domeo

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
docker-compose -f docker-compose.production.yml down 2>/dev/null || true

# –°–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
docker-compose -f docker-compose.production.yml up -d --build

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
sleep 30

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
docker-compose -f docker-compose.production.yml ps

echo "Application started"
"@
    
    $startCommands | ssh -i $Key -o StrictHostKeyChecking=no $User@$IP "bash"
    
    if ($LASTEXITCODE -eq 0) {
        Write-Success "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ VM"
    } else {
        Write-Error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
function Test-ApplicationOnVM {
    param([string]$IP)
    
    Write-Info "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    Start-Sleep -Seconds 10
    
    $maxAttempts = 30
    $attempt = 1
    
    while ($attempt -le $maxAttempts) {
        try {
            $response = Invoke-WebRequest -Uri "http://$IP:3000/api/health" -Method GET -TimeoutSec 5
            if ($response.StatusCode -eq 204) {
                Write-Success "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! Health check –ø—Ä–æ–π–¥–µ–Ω"
                break
            }
        } catch {
            Write-Info "–ü–æ–ø—ã—Ç–∫–∞ $attempt/$maxAttempts : –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–æ..."
            Start-Sleep -Seconds 5
            $attempt++
        }
    }
    
    if ($attempt -gt $maxAttempts) {
        Write-Error "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ $maxAttempts –ø–æ–ø—ã—Ç–æ–∫"
    }
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    try {
        Invoke-WebRequest -Uri "http://$IP:3000" -Method GET -TimeoutSec 5 | Out-Null
        Write-Success "–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω"
    } catch {
        Write-Warning "–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    }
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function Main {
    Write-ColorOutput "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π –Ω–∞ Yandex Cloud VM: $VMIP" "Magenta"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SSH –∫–ª—é—á–∞
    if (-not (Test-Path $SSHKey)) {
        Write-Error "SSH –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: $SSHKey"
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if (-not (Test-VMConnection $VMIP $SSHKey $Username)) {
        Write-Error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VM"
    }
    
    # –û—á–∏—â–∞–µ–º VM
    Clear-VM $VMIP $SSHKey $Username
    
    # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
    $archiveName = New-ProjectArchive
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ VM
    Send-ProjectToVM $archiveName $VMIP $SSHKey $Username
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç
    Setup-ProjectOnVM $archiveName $VMIP $SSHKey $Username
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    Set-EnvironmentOnVM $VMIP $SSHKey $Username
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    Start-ApplicationOnVM $VMIP $SSHKey $Username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
    Test-ApplicationOnVM $VMIP
    
    # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∞—Ä—Ö–∏–≤
    Remove-Item $archiveName -ErrorAction SilentlyContinue
    
    Write-Success "–î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
    Write-Success "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://$VMIP:3000"
    Write-Success "–°—Ç–∞—Ç—É—Å: http://$VMIP:3000/api/health"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
try {
    Main
} catch {
    Write-Error "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: $($_.Exception.Message)"
    exit 1
}
