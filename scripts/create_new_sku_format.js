const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function createNewSkuFormat() {
  try {
    console.log('üöÄ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç SKU: [–ú–æ–¥–µ–ª—å]-[–†–∞–∑–º–µ—Ä]-[–ü–æ–∫—Ä—ã—Ç–∏–µ]-[–¶–≤–µ—Ç]-[–ù–æ–º–µ—Ä]...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
    const products = await prisma.product.findMany({
      where: {
        catalog_category: {
          name: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏'
        }
      },
      select: {
        id: true,
        sku: true,
        properties_data: true
      }
    });
    
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
    
    let fixedCount = 0;
    let skippedCount = 0;
    const errors = [];
    const skuMap = new Map(); // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    
    for (const product of products) {
      try {
        // –ü–∞—Ä—Å–∏–º properties_data
        let properties = {};
        if (product.properties_data) {
          try {
            properties = typeof product.properties_data === 'string' 
              ? JSON.parse(product.properties_data) 
              : product.properties_data;
          } catch (e) {
            console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ properties_data –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.id}`);
            continue;
          }
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ SKU
        const model = properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'] || 'UNKNOWN_MODEL';
        const width = properties['–®–∏—Ä–∏–Ω–∞/–º–º'] || 'UNKNOWN_WIDTH';
        const height = properties['–í—ã—Å–æ—Ç–∞/–º–º'] || 'UNKNOWN_HEIGHT';
        const finish = properties['–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è'] || 'UNKNOWN_FINISH';
        const color = properties['Domeo_–¶–≤–µ—Ç'] || 'UNKNOWN_COLOR';
        
        const size = `${width}x${height}`;
        
        // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π SKU –±–µ–∑ –Ω–æ–º–µ—Ä–∞
        const baseSku = `${model}-${size}-${finish}-${color}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä
        let finalSku;
        if (skuMap.has(baseSku)) {
          // –ï—Å–ª–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä
          let counter = 1;
          finalSku = `${baseSku}-${String(counter).padStart(3, '0')}`;
          while (skuMap.has(finalSku)) {
            counter++;
            finalSku = `${baseSku}-${String(counter).padStart(3, '0')}`;
          }
          skuMap.set(finalSku, product.id);
          console.log(`üîÑ –°–æ–∑–¥–∞–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π SKU: ${finalSku} (–±–∞–∑–æ–≤—ã–π: ${baseSku})`);
        } else {
          // –ü–µ—Ä–≤–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è - –¥–æ–±–∞–≤–ª—è–µ–º -001
          finalSku = `${baseSku}-001`;
          skuMap.set(finalSku, product.id);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º SKU
        await prisma.product.update({
          where: { id: product.id },
          data: { 
            sku: finalSku,
            updated_at: new Date()
          }
        });
        
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω SKU –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.id}: "${product.sku}" ‚Üí "${finalSku}"`);
        fixedCount++;
        
      } catch (error) {
        const errorMsg = `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ ${product.id}: ${error.message}`;
        console.error(`‚ùå ${errorMsg}`);
        errors.push(errorMsg);
      }
    }
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ SKU:');
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${fixedCount} —Ç–æ–≤–∞—Ä–æ–≤`);
    console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount} —Ç–æ–≤–∞—Ä–æ–≤`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errors.length}`);
    
    if (errors.length > 0) {
      console.log('\n‚ùå –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫:');
      errors.slice(0, 10).forEach((error, index) => {
        console.log(`${index + 1}. ${error}`);
      });
      if (errors.length > 10) {
        console.log(`... –∏ –µ—â–µ ${errors.length - 10} –æ—à–∏–±–æ–∫`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:');
    const sampleProducts = await prisma.product.findMany({
      where: {
        catalog_category: {
          name: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏'
        }
      },
      take: 5,
      select: {
        id: true,
        sku: true,
        properties_data: true
      }
    });
    
    sampleProducts.forEach(product => {
      const properties = product.properties_data ? 
        (typeof product.properties_data === 'string' ? JSON.parse(product.properties_data) : product.properties_data) : {};
      
      console.log(`  - –¢–æ–≤–∞—Ä ${product.id}:`);
      console.log(`    –ù–æ–≤—ã–π SKU: "${product.sku}"`);
      console.log(`    –ú–æ–¥–µ–ª—å: "${properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web']}"`);
      console.log(`    –†–∞–∑–º–µ—Ä: ${properties['–®–∏—Ä–∏–Ω–∞/–º–º']}x${properties['–í—ã—Å–æ—Ç–∞/–º–º']}`);
      console.log(`    –ü–æ–∫—Ä—ã—Ç–∏–µ: "${properties['–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è']}"`);
      console.log(`    –¶–≤–µ—Ç: "${properties['Domeo_–¶–≤–µ—Ç']}"`);
      console.log(`    ---`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å SKU
    const uniqueSkus = await prisma.product.findMany({
      where: {
        catalog_category: {
          name: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏'
        }
      },
      select: {
        sku: true
      }
    });
    
    const skuCounts = {};
    uniqueSkus.forEach(product => {
      skuCounts[product.sku] = (skuCounts[product.sku] || 0) + 1;
    });
    
    const duplicates = Object.entries(skuCounts).filter(([sku, count]) => count > 1);
    
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ SKU:');
    console.log(`üìä –í—Å–µ–≥–æ SKU: ${Object.keys(skuCounts).length}`);
    console.log(`üìä –î—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicates.length}`);
    
    if (duplicates.length > 0) {
      console.log('\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã SKU:');
      duplicates.slice(0, 5).forEach(([sku, count]) => {
        console.log(`  - "${sku}": ${count} —Ç–æ–≤–∞—Ä–æ–≤`);
      });
    } else {
      console.log('‚úÖ –í—Å–µ SKU —É–Ω–∏–∫–∞–ª—å–Ω—ã!');
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É
    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É SKU:');
    const formatStats = new Map();
    Object.keys(skuCounts).forEach(sku => {
      const parts = sku.split('-');
      if (parts.length >= 5) {
        const baseFormat = parts.slice(0, 4).join('-');
        formatStats.set(baseFormat, (formatStats.get(baseFormat) || 0) + 1);
      }
    });
    
    console.log(`üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: ${formatStats.size}`);
    Array.from(formatStats.entries()).sort((a, b) => b[1] - a[1]).slice(0, 10).forEach(([format, count]) => {
      console.log(`  ${format}: ${count} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤`);
    });
    
    console.log('\nüéâ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ SKU –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìù –ü—Ä–∏–º–µ—Ä—ã –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:');
    console.log('DomeoDoors_Base_1-600x2000-–ü–í–•-–ë–µ–ª—ã–π-001');
    console.log('DomeoDoors_Base_1-600x2000-–ü–í–•-–ë–µ–ª—ã–π-002');
    console.log('DomeoDoors_Invisible-700x2000-–≠–º–∞–ª—å-–°–µ—Ä—ã–π-001');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createNewSkuFormat();
