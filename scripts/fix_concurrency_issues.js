const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function fixConcurrencyIssues() {
  try {
    console.log('üîß –†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú –° –ö–û–ù–ö–£–†–ï–ù–¢–ù–û–°–¢–¨–Æ\n');

    // 1. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    console.log('1. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏...');
    
    const createOptimisticLocking = async () => {
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ version –¥–ª—è –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      try {
        await prisma.$executeRaw`
          ALTER TABLE products ADD COLUMN version INTEGER DEFAULT 1
        `;
        console.log('   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ version –≤ —Ç–∞–±–ª–∏—Ü—É products');
      } catch (error) {
        console.log('   ‚ö†Ô∏è  –ü–æ–ª–µ version —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞:', error.message);
      }

      // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–µ—Ä—Å–∏–∏
      const safeUpdateProduct = async (productId, updates, expectedVersion) => {
        return await prisma.$transaction(async (tx) => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
          const currentProduct = await tx.product.findUnique({
            where: { id: productId },
            select: { id: true, version: true, sku: true }
          });

          if (!currentProduct) {
            throw new Error(`–¢–æ–≤–∞—Ä —Å ID ${productId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          }

          if (currentProduct.version !== expectedVersion) {
            throw new Error(`–ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤–µ—Ä—Å–∏–π: –æ–∂–∏–¥–∞–ª–∞—Å—å ${expectedVersion}, –ø–æ–ª—É—á–µ–Ω–∞ ${currentProduct.version}`);
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä —Å –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–æ–º –≤–µ—Ä—Å–∏–∏
          const updatedProduct = await tx.product.update({
            where: { id: productId },
            data: {
              ...updates,
              version: currentProduct.version + 1,
              updated_at: new Date()
            }
          });

          console.log(`   ‚úÖ –¢–æ–≤–∞—Ä ${currentProduct.sku} –æ–±–Ω–æ–≤–ª–µ–Ω, –≤–µ—Ä—Å–∏—è: ${updatedProduct.version}`);
          return updatedProduct;
        });
      };

      return { safeUpdateProduct };
    };

    // 2. –°–æ–∑–¥–∞–Ω–∏–µ thread-safe –∫—ç—à–∞
    console.log('\n2. –°–æ–∑–¥–∞–Ω–∏–µ thread-safe –∫—ç—à–∞...');
    
    const createThreadSafeCache = () => {
      const cache = new Map();
      const locks = new Map();

      const acquireLock = async (key) => {
        while (locks.has(key)) {
          await new Promise(resolve => setTimeout(resolve, 10));
        }
        locks.set(key, true);
      };

      const releaseLock = (key) => {
        locks.delete(key);
      };

      const get = async (key) => {
        await acquireLock(key);
        try {
          const item = cache.get(key);
          if (item && item.expires > Date.now()) {
            return item.value;
          }
          if (item) {
            cache.delete(key);
          }
          return null;
        } finally {
          releaseLock(key);
        }
      };

      const set = async (key, value, ttl = 300000) => { // 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        await acquireLock(key);
        try {
          cache.set(key, {
            value,
            expires: Date.now() + ttl
          });
        } finally {
          releaseLock(key);
        }
      };

      const clear = async () => {
        for (const key of locks.keys()) {
          await acquireLock(key);
        }
        try {
          cache.clear();
        } finally {
          locks.clear();
        }
      };

      return { get, set, clear };
    };

    // 3. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
    console.log('\n3. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞...');
    
    const createImportLocks = () => {
      const importLocks = new Map();

      const acquireImportLock = async (categoryId) => {
        const lockKey = `import_${categoryId}`;
        
        if (importLocks.has(lockKey)) {
          throw new Error(`–ò–º–ø–æ—Ä—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ${categoryId} —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è`);
        }

        importLocks.set(lockKey, {
          startTime: Date.now(),
          categoryId
        });

        console.log(`   üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–º–ø–æ—Ä—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}`);
        return lockKey;
      };

      const releaseImportLock = (lockKey) => {
        const lock = importLocks.get(lockKey);
        if (lock) {
          const duration = Date.now() - lock.startTime;
          console.log(`   üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–º–ø–æ—Ä—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${lock.categoryId} (${duration}ms)`);
        }
        importLocks.delete(lockKey);
      };

      const isImportLocked = (categoryId) => {
        return importLocks.has(`import_${categoryId}`);
      };

      return { acquireImportLock, releaseImportLock, isImportLocked };
    };

    // 4. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–µ–π –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    console.log('\n4. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–µ–π –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...');
    
    const createOperationQueue = () => {
      const queue = [];
      let processing = false;

      const addToQueue = async (operation) => {
        return new Promise((resolve, reject) => {
          queue.push({
            operation,
            resolve,
            reject,
            timestamp: Date.now()
          });
          
          processQueue();
        });
      };

      const processQueue = async () => {
        if (processing || queue.length === 0) {
          return;
        }

        processing = true;
        console.log(`   üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏: ${queue.length} –æ–ø–µ—Ä–∞—Ü–∏–π`);

        while (queue.length > 0) {
          const { operation, resolve, reject } = queue.shift();
          
          try {
            const result = await operation();
            resolve(result);
          } catch (error) {
            reject(error);
          }
        }

        processing = false;
      };

      const getQueueStatus = () => {
        return {
          length: queue.length,
          processing,
          oldestOperation: queue.length > 0 ? Date.now() - queue[0].timestamp : 0
        };
      };

      return { addToQueue, getQueueStatus };
    };

    // 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    console.log('\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–µ—Å–∫—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    const { safeUpdateProduct } = await createOptimisticLocking();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º thread-safe –∫—ç—à
    const cache = createThreadSafeCache();
    await cache.set('test_key', 'test_value', 1000);
    const cachedValue = await cache.get('test_key');
    console.log(`   ‚úÖ –ö—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç: ${cachedValue === 'test_value' ? '–¥–∞' : '–Ω–µ—Ç'}`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∏–º–ø–æ—Ä—Ç–∞
    const importLocks = createImportLocks();
    const lockKey = await importLocks.acquireImportLock('test_category');
    const isLocked = importLocks.isImportLocked('test_category');
    console.log(`   ‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${isLocked ? '–¥–∞' : '–Ω–µ—Ç'}`);
    importLocks.releaseImportLock(lockKey);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –æ—á–µ—Ä–µ–¥–µ–π
    const operationQueue = createOperationQueue();
    const queueResult = await operationQueue.addToQueue(async () => {
      await new Promise(resolve => setTimeout(resolve, 100));
      return 'operation_completed';
    });
    console.log(`   ‚úÖ –û—á–µ—Ä–µ–¥—å –æ–ø–µ—Ä–∞—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç: ${queueResult === 'operation_completed' ? '–¥–∞' : '–Ω–µ—Ç'}`);

    console.log('\nüéâ –†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú –° –ö–û–ù–ö–£–†–ï–ù–¢–ù–û–°–¢–¨–Æ –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log('\nüìä –°–û–ó–î–ê–ù–ù–´–ï –°–ò–°–¢–ï–ú–´:');
    console.log('   ‚úÖ –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤');
    console.log('   ‚úÖ Thread-safe –∫—ç—à - –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ');
    console.log('   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∏–º–ø–æ—Ä—Ç–∞ - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞');
    console.log('   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—á–µ—Ä–µ–¥–µ–π - –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π');
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('   1. –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–µ—Å–∫—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤ API');
    console.log('   2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å thread-safe –∫—ç—à –¥–ª—è —á–∞—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    console.log('   3. –ü—Ä–∏–º–µ–Ω—è—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö');
    console.log('   4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å—é:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixConcurrencyIssues();

