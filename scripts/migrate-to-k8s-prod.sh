#!/bin/bash

# üöÄ –ü–æ–ª–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Kubernetes Production
# –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å —Ç–µ—Å—Ç–æ–≤–æ–π –í–ú –≤ K8s –∫–ª–∞—Å—Ç–µ—Ä

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (—Å–º. DEPLOY_SETUP_GUIDE.md –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π)
STAGING_HOST="${STAGING_HOST:-130.193.40.35}"
STAGING_USER="${STAGING_USER:-ubuntu}"
STAGING_SSH_KEY="${STAGING_SSH_KEY:-C:\\Users\\petr2\\.ssh\\ssh-key-1757583003347\\ssh-key-1757583003347}"
STAGING_PATH="/opt/domeo"

# Kubernetes –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ DEPLOY_SETUP_GUIDE.md
CLUSTER_ID="${CLUSTER_ID:-cat9eenl393qj44riti4}"
NAMESPACE="${NAMESPACE:-prod}"
REGISTRY="${REGISTRY:-cr.yandex/crpuein3jvjccnafs2vc}"
IMAGE_NAME="${IMAGE_NAME:-app}"

TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="/tmp/domeo-k8s-migration-${TIMESTAMP}"

log "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Kubernetes Production"
log "  –¢–µ—Å—Ç–æ–≤–∞—è –í–ú: ${STAGING_HOST}"
log "  Kubernetes –∫–ª–∞—Å—Ç–µ—Ä: ${CLUSTER_ID}"
log "  Namespace: ${NAMESPACE}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è YC
# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å–º. –≤ DEPLOY_SETUP_GUIDE.md
if [ -z "$YC_SERVICE_ACCOUNT_KEY_FILE" ] && [ -z "$YC_SA_KEY" ] && [ -z "$YC_SA_JSON" ]; then
    error "–ù–µ —É–∫–∞–∑–∞–Ω –∫–ª—é—á —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Yandex Cloud"
    echo ""
    echo "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å–º. –≤ DEPLOY_SETUP_GUIDE.md"
    echo ""
    echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:"
    echo "  export YC_SERVICE_ACCOUNT_KEY_FILE=/path/to/sa-key.json"
    echo "  export YC_SA_KEY='<JSON content>'"
    echo "  export YC_SA_JSON='<JSON content>'"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
if ! command -v yc &> /dev/null; then
    error "YC CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–º. DEPLOY_SETUP_GUIDE.md —Ä–∞–∑–¥–µ–ª 2.1"
    exit 1
fi

if ! command -v kubectl &> /dev/null; then
    error "kubectl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–º. DEPLOY_SETUP_GUIDE.md —Ä–∞–∑–¥–µ–ª 2.2"
    exit 1
fi

if ! command -v docker &> /dev/null; then
    error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–º. DEPLOY_SETUP_GUIDE.md —Ä–∞–∑–¥–µ–ª 2.3"
    exit 1
fi

# –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è JSON –∫–ª—é—á–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
if [ -z "$YC_SERVICE_ACCOUNT_KEY_FILE" ]; then
    TEMP_KEY_FILE=$(mktemp)
    if [ -n "$YC_SA_KEY" ]; then
        echo "$YC_SA_KEY" > "$TEMP_KEY_FILE"
    elif [ -n "$YC_SA_JSON" ]; then
        echo "$YC_SA_JSON" > "$TEMP_KEY_FILE"
    fi
    export YC_SERVICE_ACCOUNT_KEY_FILE="$TEMP_KEY_FILE"
    trap "rm -f $TEMP_KEY_FILE" EXIT
fi

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ YC
log "üîê –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –≤ Yandex Cloud..."
if [ -n "$YC_CLOUD_ID" ]; then
    yc config set cloud-id "$YC_CLOUD_ID"
fi
if [ -n "$YC_FOLDER_ID" ]; then
    yc config set folder-id "$YC_FOLDER_ID"
fi

if ! yc iam create-token > /dev/null 2>&1; then
    error "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Yandex Cloud. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ YC_SERVICE_ACCOUNT_KEY_FILE"
    exit 1
fi
success "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ YC —É—Å–ø–µ—à–Ω–∞"

# –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–æ–≤ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –í–ú
log "üì¶ –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø—ã –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –í–ú..."
ssh -i "$STAGING_SSH_KEY" -o StrictHostKeyChecking=no "$STAGING_USER@$STAGING_HOST" << EOF
cd ${STAGING_PATH}
mkdir -p ${BACKUP_DIR}

# –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
docker compose -f docker-compose.staging.yml exec -T staging-postgres pg_dump -U staging_user domeo_staging > ${BACKUP_DIR}/database_backup.sql

# –ë—ç–∫–∞–ø —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
docker run --rm \\
    -v domeo_staging_uploads:/source:ro \\
    -v ${BACKUP_DIR}:/backup \\
    alpine tar czf /backup/uploads_backup.tar.gz -C /source .

echo "‚úÖ –ë—ç–∫–∞–ø—ã —Å–æ–∑–¥–∞–Ω—ã"
du -h ${BACKUP_DIR}/*
EOF

# –°–∫–∞—á–∏–≤–∞–µ–º –±—ç–∫–∞–ø—ã –ª–æ–∫–∞–ª—å–Ω–æ
log "üì• –°–∫–∞—á–∏–≤–∞–µ–º –±—ç–∫–∞–ø—ã –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –º–∞—à–∏–Ω—É..."
mkdir -p ./backup
scp -i "$STAGING_SSH_KEY" -o StrictHostKeyChecking=no "$STAGING_USER@$STAGING_HOST:${BACKUP_DIR}/database_backup.sql" ./backup/database_backup_k8s.sql
scp -i "$STAGING_SSH_KEY" -o StrictHostKeyChecking=no "$STAGING_USER@$STAGING_HOST:${BACKUP_DIR}/uploads_backup.tar.gz" ./backup/uploads_backup_k8s.tar.gz

success "‚úÖ –ë—ç–∫–∞–ø—ã —Å–∫–∞—á–∞–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ"

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Kubernetes –∫–ª–∞—Å—Ç–µ—Ä—É
log "üìã –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Kubernetes –∫–ª–∞—Å—Ç–µ—Ä—É..."
yc managed-kubernetes cluster get-credentials --id "$CLUSTER_ID" --external --force
kubectl config use-context yc-domeo-prod 2>/dev/null || kubectl config use-context yc-default 2>/dev/null || true
kubectl config set-context --current --namespace="$NAMESPACE"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
if ! kubectl -n "$NAMESPACE" get nodes > /dev/null 2>&1; then
    error "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–ª–∞—Å—Ç–µ—Ä—É"
    exit 1
fi
success "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–ª–∞—Å—Ç–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ K8s
log "üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ Kubernetes..."
kubectl -n "$NAMESPACE" cp ./backup/database_backup_k8s.sql postgres-0:/tmp/database_backup.sql

# –û—á–∏—Å—Ç–∫–∞ –ë–î
kubectl -n "$NAMESPACE" exec -i postgres-0 -- sh -lc "export PGPASSWORD=staging_password; psql -U staging_user -d domeo_staging -c 'DROP SCHEMA public CASCADE; CREATE SCHEMA public;'"

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î
kubectl -n "$NAMESPACE" exec -i postgres-0 -- sh -lc "export PGPASSWORD=staging_password; psql -U staging_user -d domeo_staging < /tmp/database_backup.sql"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
DB_COUNT=$(kubectl -n "$NAMESPACE" exec -i postgres-0 -- sh -lc "export PGPASSWORD=staging_password; psql -U staging_user -d domeo_staging -t -c 'SELECT count(*) FROM products;'")
success "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (—Ç–æ–≤–∞—Ä–æ–≤: ${DB_COUNT// /})"

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ K8s
log "üñºÔ∏è  –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ Kubernetes PVC..."
APP_POD=$(kubectl -n "$NAMESPACE" get pods -l app=app -o jsonpath='{.items[0].metadata.name}')

if [ -z "$APP_POD" ]; then
    error "–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ deployment."
    exit 1
fi

# –ö–æ–ø–∏—Ä—É–µ–º –∞—Ä—Ö–∏–≤ –≤ –ø–æ–¥
kubectl -n "$NAMESPACE" cp ./backup/uploads_backup_k8s.tar.gz "$APP_POD:/tmp/uploads_backup.tar.gz"

# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
kubectl -n "$NAMESPACE" exec -i "$APP_POD" -- sh -lc "cd /app/public/uploads && rm -rf * && tar xzf /tmp/uploads_backup.tar.gz && echo 'Photos restored' && du -sh ."

PHOTOS_COUNT=$(kubectl -n "$NAMESPACE" exec -i "$APP_POD" -- sh -lc "find /app/public/uploads -type f | wc -l")
success "‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (—Ñ–∞–π–ª–æ–≤: ${PHOTOS_COUNT// /})"

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Container Registry
log "üê≥ –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –≤ Container Registry..."
yc iam create-token | docker login cr.yandex -u iam --password-stdin
success "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Container Registry —É—Å–ø–µ—à–Ω–∞"

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥ –æ–±—Ä–∞–∑–∞
if [ -z "$1" ]; then
    TAG="v$(date +%Y%m%d%H%M%S)"
    warning "–¢–µ–≥ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º: $TAG"
else
    TAG="$1"
fi

FULL_IMAGE="${REGISTRY}/${IMAGE_NAME}:${TAG}"

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞
log "üî® –°–æ–±–∏—Ä–∞–µ–º Docker –æ–±—Ä–∞–∑..."
docker build -t "$FULL_IMAGE" .
success "‚úÖ –û–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω"

# –ü—É—à –æ–±—Ä–∞–∑–∞
log "üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–∑ –≤ registry..."
docker push "$FULL_IMAGE"
success "‚úÖ –û–±—Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: $FULL_IMAGE"

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ deployment
log "üîÑ –û–±–Ω–æ–≤–ª—è–µ–º deployment —Å –Ω–æ–≤—ã–º –æ–±—Ä–∞–∑–æ–º..."
kubectl -n "$NAMESPACE" set image deployment/app app="$FULL_IMAGE"

log "‚è≥ –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è rollout..."
if kubectl -n "$NAMESPACE" rollout status deployment/app --timeout=180s; then
    success "‚úÖ Rollout –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ"
else
    error "‚ùå Rollout –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π"
    log "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å:"
    kubectl -n "$NAMESPACE" get pods -l app=app
    kubectl -n "$NAMESPACE" describe deployment/app | grep -A 10 "Events:" || true
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
log "üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å deployment..."
kubectl -n "$NAMESPACE" get deploy app
kubectl -n "$NAMESPACE" get pods -l app=app

# –û—á–∏—Å—Ç–∫–∞
log "üßπ –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã..."
ssh -i "$STAGING_SSH_KEY" -o StrictHostKeyChecking=no "$STAGING_USER@$STAGING_HOST" "rm -rf ${BACKUP_DIR}"
rm -f ./backup/database_backup_k8s.sql ./backup/uploads_backup_k8s.tar.gz

success "üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
log "  –û–±—Ä–∞–∑: $FULL_IMAGE"
log "  URL: http://158.160.202.117/"
log "  Health: http://158.160.202.117/api/health"
log "  –¢–æ–≤–∞—Ä–æ–≤ –≤ –ë–î: ${DB_COUNT// /}"
log "  –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${PHOTOS_COUNT// /}"

