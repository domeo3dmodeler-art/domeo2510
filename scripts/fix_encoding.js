const { PrismaClient } = require('@prisma/client');
const fs = require('fs');

const prisma = new PrismaClient();

// –ú–∞–ø–ø–∏–Ω–≥ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é
const encodingMap = {
  '√ê¬°√ê¬æ√ê¬≤√ë√ê¬µ√ê¬º√ê¬µ√ê¬Ω√ê¬Ω√ê¬∞√ë': '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è',
  '√ê√ê¬µ√ê¬æ√ê¬∫√ê¬ª√ê¬∞√ë√ë√ê¬∏√ê¬∫√ê¬∞': '–ù–µ–æ–∫–ª–∞—Å—Å–∏–∫–∞', 
  '√ê√ê¬ª√ê¬∞√ë√ë√ê¬∏√ê¬∫√ê¬∞': '–ö–ª–∞—Å—Å–∏–∫–∞',
  '√ê¬°√ê¬∫√ë√ë√ë√ê¬∞√ë': '–°–∫—Ä—ã—Ç–∞—è',
  '√ê√ê¬µ√ê¬∂√ê¬∫√ê¬æ√ê¬º√ê¬Ω√ê¬∞√ë√ê¬Ω√ë√ê¬µ √ê¬¥√ê¬≤√ê¬µ√ë√ê¬∏': '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏',
  '√ê√ê√ê¬•': '–ü–í–•',
  '√ê√ê√ê¬¢': '–ü–≠–¢',
  '√ê√ê¬Ω√ê¬∞√ê¬º√ê¬µ√ê¬ª√ë': '–≠–º–∞–ª—å',
  '√ê√ê¬µ√ê¬ª√ë√ê¬π': '–ë–µ–ª—ã–π',
  '√ê√ê¬µ√ê¬∂√ê¬µ√ê¬≤√ë√ê¬π': '–ë–µ–∂–µ–≤—ã–π',
  '√ê¬°√ê¬µ√ë√ë√ê¬π': '–°–µ—Ä—ã–π'
};

async function fixEncoding() {
  console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
    const products = await prisma.product.findMany({
      where: {
        OR: [
          { properties_data: { contains: '√ê¬°√ê¬æ√ê¬≤√ë√ê¬µ√ê¬º√ê¬µ√ê¬Ω√ê¬Ω√ê¬∞√ë' } },
          { properties_data: { contains: '√ê√ê¬µ√ê¬æ√ê¬∫√ê¬ª√ê¬∞√ë√ë√ê¬∏√ê¬∫√ê¬∞' } },
          { properties_data: { contains: '√ê√ê¬ª√ê¬∞√ë√ë√ê¬∏√ê¬∫√ê¬∞' } },
          { properties_data: { contains: '√ê¬°√ê¬∫√ë√ë√ë√ê¬∞√ë' } }
        ]
      },
      select: {
        id: true,
        properties_data: true
      }
    });

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π`);

    let fixedCount = 0;

    for (const product of products) {
      let fixedData = product.properties_data;
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏
      for (const [wrong, correct] of Object.entries(encodingMap)) {
        if (fixedData.includes(wrong)) {
          fixedData = fixedData.replace(new RegExp(wrong, 'g'), correct);
        }
      }

      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
      if (fixedData !== product.properties_data) {
        await prisma.product.update({
          where: { id: product.id },
          data: { properties_data: fixedData }
        });
        fixedCount++;
      }
    }

    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixedCount} —Ç–æ–≤–∞—Ä–æ–≤`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const testProducts = await prisma.product.findMany({
      where: {
        properties_data: { contains: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è' }
      },
      take: 5,
      select: {
        id: true,
        properties_data: true
      }
    });

    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:');
    testProducts.forEach(product => {
      const props = JSON.parse(product.properties_data);
      console.log(`  - –¢–æ–≤–∞—Ä ${product.id}: —Å—Ç–∏–ª—å = "${props['Domeo_–°—Ç–∏–ª—å Web']}"`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixEncoding();
