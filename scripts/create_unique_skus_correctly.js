const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function createUniqueSkusCorrectly() {
  try {
    console.log('üöÄ –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ SKU —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
    const products = await prisma.product.findMany({
      where: {
        catalog_category: {
          name: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏'
        }
      },
      select: {
        id: true,
        sku: true,
        properties_data: true
      }
    });
    
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
    
    // –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ SKU –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const allExistingSkus = await prisma.product.findMany({
      select: {
        sku: true
      }
    });
    
    const existingSkuSet = new Set(allExistingSkus.map(p => p.sku));
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${existingSkuSet.size} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö SKU –≤ –ë–î`);
    
    let fixedCount = 0;
    let skippedCount = 0;
    const errors = [];
    const newSkuMap = new Map(); // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö SKU –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
    
    for (const product of products) {
      try {
        // –ü–∞—Ä—Å–∏–º properties_data
        let properties = {};
        if (product.properties_data) {
          try {
            properties = typeof product.properties_data === 'string' 
              ? JSON.parse(product.properties_data) 
              : product.properties_data;
          } catch (e) {
            console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ properties_data –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.id}`);
            continue;
          }
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ SKU
        const model = properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'] || 'UNKNOWN_MODEL';
        const width = properties['–®–∏—Ä–∏–Ω–∞/–º–º'] || 'UNKNOWN_WIDTH';
        const height = properties['–í—ã—Å–æ—Ç–∞/–º–º'] || 'UNKNOWN_HEIGHT';
        const finish = properties['–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è'] || 'UNKNOWN_FINISH';
        const color = properties['Domeo_–¶–≤–µ—Ç'] || 'UNKNOWN_COLOR';
        
        const size = `${width}x${height}`;
        
        // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π SKU –±–µ–∑ –Ω–æ–º–µ—Ä–∞
        const baseSku = `${model}-${size}-${finish}-${color}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä
        let finalSku;
        let counter = 1;
        finalSku = `${baseSku}-${String(counter).padStart(3, '0')}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ç–∏–≤ –í–°–ï–• —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö SKU
        while (existingSkuSet.has(finalSku) || newSkuMap.has(finalSku)) {
          counter++;
          finalSku = `${baseSku}-${String(counter).padStart(3, '0')}`;
          
          // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
          if (counter > 999) {
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π SKU –¥–ª—è ${baseSku} –ø–æ—Å–ª–µ 999 –ø–æ–ø—ã—Ç–æ–∫`);
          }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞—Ä—Ç—É –Ω–æ–≤—ã—Ö SKU
        newSkuMap.set(finalSku, product.id);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º SKU
        await prisma.product.update({
          where: { id: product.id },
          data: { 
            sku: finalSku,
            updated_at: new Date()
          }
        });
        
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω SKU –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.id}: "${product.sku}" ‚Üí "${finalSku}"`);
        fixedCount++;
        
      } catch (error) {
        const errorMsg = `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ ${product.id}: ${error.message}`;
        console.error(`‚ùå ${errorMsg}`);
        errors.push(errorMsg);
      }
    }
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö SKU:');
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${fixedCount} —Ç–æ–≤–∞—Ä–æ–≤`);
    console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount} —Ç–æ–≤–∞—Ä–æ–≤`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errors.length}`);
    
    if (errors.length > 0) {
      console.log('\n‚ùå –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫:');
      errors.slice(0, 10).forEach((error, index) => {
        console.log(`${index + 1}. ${error}`);
      });
      if (errors.length > 10) {
        console.log(`... –∏ –µ—â–µ ${errors.length - 10} –æ—à–∏–±–æ–∫`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö SKU
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö SKU –≤ –ë–î:');
    
    const allSkusAfter = await prisma.product.findMany({
      select: {
        sku: true
      }
    });
    
    const skuCounts = {};
    allSkusAfter.forEach(product => {
      skuCounts[product.sku] = (skuCounts[product.sku] || 0) + 1;
    });
    
    const duplicates = Object.entries(skuCounts).filter(([sku, count]) => count > 1);
    
    console.log(`üìä –í—Å–µ–≥–æ SKU –≤ –ë–î: ${Object.keys(skuCounts).length}`);
    console.log(`üìä –î—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicates.length}`);
    
    if (duplicates.length > 0) {
      console.log('\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã SKU:');
      duplicates.slice(0, 10).forEach(([sku, count]) => {
        console.log(`  - "${sku}": ${count} —Ç–æ–≤–∞—Ä–æ–≤`);
      });
    } else {
      console.log('‚úÖ –í—Å–µ SKU –≤ –ë–î —É–Ω–∏–∫–∞–ª—å–Ω—ã!');
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
    const newFormatProducts = await prisma.product.findMany({
      where: {
        catalog_category: {
          name: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏'
        },
        sku: {
          contains: '-' // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ñ–∏—Å—ã
        }
      },
      select: {
        sku: true
      }
    });
    
    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É SKU:');
    console.log(`üìä –¢–æ–≤–∞—Ä–æ–≤ —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º: ${newFormatProducts.length}`);
    
    const formatStats = new Map();
    newFormatProducts.forEach(product => {
      const parts = product.sku.split('-');
      if (parts.length >= 5) {
        const baseFormat = parts.slice(0, 4).join('-');
        formatStats.set(baseFormat, (formatStats.get(baseFormat) || 0) + 1);
      }
    });
    
    console.log(`üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: ${formatStats.size}`);
    console.log('\nüîù –¢–æ–ø-10 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π:');
    Array.from(formatStats.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10)
      .forEach(([format, count], index) => {
        console.log(`  ${index + 1}. ${format}: ${count} —Ç–æ–≤–∞—Ä–æ–≤`);
      });
    
    console.log('\nüéâ –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö SKU –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createUniqueSkusCorrectly();
