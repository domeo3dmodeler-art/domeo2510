const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

async function migrateExistingPhotos() {
  try {
    console.log('üîÑ –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–æ—Ç–æ –≤ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É property_photos...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–î–≤–µ—Ä–∏"
    const products = await prisma.product.findMany({
      where: {
        catalog_category_id: 'cmg50xcgs001cv7mn0tdyk1wo'
      },
      select: {
        id: true,
        sku: true,
        properties_data: true
      }
    });

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);

    let migratedPhotos = 0;
    let skippedPhotos = 0;
    const processedValues = new Set();

    for (const product of products) {
      try {
        const properties = JSON.parse(product.properties_data || '{}');
        const supplierSku = properties['–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'];
        
        if (!supplierSku) {
          continue;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–≤–æ–π—Å—Ç–≤–µ "photos"
        const photos = properties.photos || [];
        
        if (Array.isArray(photos) && photos.length > 0) {
          const valueKey = `${supplierSku}`;
          
          // –ï—Å–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
          if (processedValues.has(valueKey)) {
            skippedPhotos += photos.length;
            continue;
          }
          
          processedValues.add(valueKey);
          
          console.log(`\n=== –û–ë–†–ê–ë–û–¢–ö–ê –ê–†–¢–ò–ö–£–õ–ê: ${supplierSku} ===`);
          console.log(`–ù–∞–π–¥–µ–Ω–æ ${photos.length} —Ñ–æ—Ç–æ`);

          // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∫–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ –≤ property_photos
          for (let i = 0; i < photos.length; i++) {
            const photoPath = photos[i];
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–æ—Ç–æ
            const fileName = path.basename(photoPath);
            const nameWithoutExt = fileName.replace(/\.[^/.]+$/, "");
            const match = nameWithoutExt.match(/^(.+)_(\d+)$/);
            
            let photoType = 'cover';
            if (match) {
              photoType = `gallery_${match[2]}`;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
            const fullPath = path.join(process.cwd(), 'public', photoPath);
            if (!fs.existsSync(fullPath)) {
              console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${photoPath}`);
              continue;
            }

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            const stats = fs.statSync(fullPath);
            
            try {
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ property_photos
              await prisma.propertyPhoto.upsert({
                where: {
                  categoryId_propertyName_propertyValue_photoType: {
                    categoryId: 'cmg50xcgs001cv7mn0tdyk1wo',
                    propertyName: '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
                    propertyValue: supplierSku,
                    photoType: photoType
                  }
                },
                update: {
                  photoPath: photoPath,
                  originalFilename: fileName,
                  fileSize: stats.size,
                  mimeType: 'image/png', // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º PNG
                  updatedAt: new Date()
                },
                create: {
                  categoryId: 'cmg50xcgs001cv7mn0tdyk1wo',
                  propertyName: '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
                  propertyValue: supplierSku,
                  photoPath: photoPath,
                  photoType: photoType,
                  originalFilename: fileName,
                  fileSize: stats.size,
                  mimeType: 'image/png'
                }
              });

              migratedPhotos++;
              console.log(`‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ —Ñ–æ—Ç–æ: ${fileName} (—Ç–∏–ø: ${photoType})`);
              
            } catch (error) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ñ–æ—Ç–æ ${fileName}:`, error.message);
            }
          }
        }
        
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ ${product.sku}:`, error);
      }
    }

    console.log('\nüéâ –ü–ï–†–ï–ù–û–° –ó–ê–í–ï–†–®–ï–ù!');
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   ‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${products.length}`);
    console.log(`   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤: ${processedValues.size}`);
    console.log(`   ‚Ä¢ –§–æ—Ç–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: ${migratedPhotos}`);
    console.log(`   ‚Ä¢ –§–æ—Ç–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª–∏–∫–∞—Ç—ã): ${skippedPhotos}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const totalPropertyPhotos = await prisma.propertyPhoto.count({
      where: {
        categoryId: 'cmg50xcgs001cv7mn0tdyk1wo'
      }
    });

    console.log(`\nüìà –ò—Ç–æ–≥–æ —Ñ–æ—Ç–æ –≤ property_photos: ${totalPropertyPhotos}`);

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å
migrateExistingPhotos();
