const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkCategories() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    const categories = await prisma.catalogCategory.findMany({
      select: {
        id: true,
        name: true,
        _count: {
          select: {
            products: true
          }
        }
      }
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π:`);
    
    categories.forEach(cat => {
      console.log(`- ${cat.name} (ID: ${cat.id}, —Ç–æ–≤–∞—Ä–æ–≤: ${cat._count.products})`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
    const doorCategory = await prisma.catalogCategory.findFirst({
      where: { name: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏' }
    });
    
    if (doorCategory) {
      console.log(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏" –Ω–∞–π–¥–µ–Ω–∞ (ID: ${doorCategory.id})`);
    } else {
      console.log(`‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏" –ù–ï –Ω–∞–π–¥–µ–Ω–∞`);
      
      // –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const similarCategories = await prisma.catalogCategory.findMany({
        where: {
          name: {
            contains: '–¥–≤–µ—Ä'
          }
        }
      });
      
      if (similarCategories.length > 0) {
        console.log('üîç –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ö–æ–∂–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
        similarCategories.forEach(cat => {
          console.log(`- ${cat.name} (ID: ${cat.id})`);
        });
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkCategories();