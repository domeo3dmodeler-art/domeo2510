const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function fixPhotoLogic() {
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –ø—Ä–∏–≤—è–∑–∫–∏ —Ñ–æ—Ç–æ –∫ –º–æ–¥–µ–ª—è–º...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–î–≤–µ—Ä–∏"
    const products = await prisma.product.findMany({
      where: {
        catalog_category_id: 'cmg50xcgs001cv7mn0tdyk1wo'
      },
      select: {
        id: true,
        sku: true,
        properties_data: true
      }
    });

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –º–æ–¥–µ–ª—è–º
    const modelGroups = new Map();
    
    for (const product of products) {
      try {
        const properties = JSON.parse(product.properties_data || '{}');
        const modelName = properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'];
        
        if (modelName) {
          if (!modelGroups.has(modelName)) {
            modelGroups.set(modelName, []);
          }
          modelGroups.get(modelName).push(product);
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–≤–æ–π—Å—Ç–≤ —Ç–æ–≤–∞—Ä–∞ ${product.sku}:`, error);
      }
    }

    console.log(`üè∑Ô∏è –ù–∞–π–¥–µ–Ω–æ ${modelGroups.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π`);

    let fixedModels = 0;
    let totalPhotosRemoved = 0;

    // –î–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Ç–æ–ª—å–∫–æ —É –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    for (const [modelName, modelProducts] of modelGroups) {
      if (modelProducts.length > 1) {
        console.log(`\n=== –ú–û–î–ï–õ–¨: ${modelName} ===`);
        console.log(`–¢–æ–≤–∞—Ä–æ–≤ –≤ –º–æ–¥–µ–ª–∏: ${modelProducts.length}`);

        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –∫–∞–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –º–æ–¥–µ–ª–∏
        const representativeProduct = modelProducts[0];
        const representativeProperties = JSON.parse(representativeProduct.properties_data || '{}');
        const modelPhotos = representativeProperties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'] || [];

        console.log(`–§–æ—Ç–æ —É –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è: ${Array.isArray(modelPhotos) ? modelPhotos.length : 0}`);

        // –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ —É –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –º–æ–¥–µ–ª–∏
        for (let i = 1; i < modelProducts.length; i++) {
          const product = modelProducts[i];
          try {
            const currentProperties = JSON.parse(product.properties_data || '{}');
            const currentPhotos = currentProperties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'] || [];
            
            if (Array.isArray(currentPhotos) && currentPhotos.length > 0) {
              currentProperties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'] = [];
              
              await prisma.product.update({
                where: { id: product.id },
                data: {
                  properties_data: JSON.stringify(currentProperties)
                }
              });
              
              totalPhotosRemoved += currentPhotos.length;
              console.log(`  –£–¥–∞–ª–µ–Ω–æ ${currentPhotos.length} —Ñ–æ—Ç–æ —É —Ç–æ–≤–∞—Ä–∞ ${product.sku}`);
            }
          } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–æ—Ç–æ —É —Ç–æ–≤–∞—Ä–∞ ${product.sku}:`, error);
          }
        }

        fixedModels++;
      }
    }

    console.log('\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   ‚Ä¢ –ú–æ–¥–µ–ª–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${modelGroups.size}`);
    console.log(`   ‚Ä¢ –ú–æ–¥–µ–ª–µ–π —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏: ${fixedModels}`);
    console.log(`   ‚Ä¢ –§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ —É —Ç–æ–≤–∞—Ä–æ–≤: ${totalPhotosRemoved}`);
    console.log(`   ‚Ä¢ –§–æ—Ç–æ –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ —É –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π –º–æ–¥–µ–ª–µ–π`);

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
fixPhotoLogic();
